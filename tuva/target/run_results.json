{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.7", "generated_at": "2024-02-18T04:25:10.951099Z", "invocation_id": "c30dedd8-199d-4cb7-83c2-a69bcc08d0e6", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:26.868612Z", "completed_at": "2024-02-18T04:24:26.899074Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:26.913945Z", "completed_at": "2024-02-18T04:24:26.998398Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.1372966766357422, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.eligibility", "compiled": true, "compiled_code": "-- models/eligibility.sql\n\nSELECT DISTINCT\n    REPLACE(REPLACE(JSON_EXTRACT(e, '$.patient.reference'), '\"Patient/', ''), '\"', '') AS patient_id,\n    NULL AS member_id,\n    REPLACE(JSON_EXTRACT(p, '$.extension[3].valueCode'), '\"', '') AS gender,\n    REPLACE(JSON_EXTRACT(p, '$.extension[0].extension[1].valueString'), '\"', '') AS race,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.birthDate'), 2, 10) AS DATE) AS birth_date,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.deceasedDateTime'), 2, 10) AS DATE) AS death_date,\n    CASE\n        WHEN JSON_EXTRACT(p, '$.deceasedDateTime') IS NOT NULL THEN 1\n        ELSE 0\n    END AS death_flag,\n    CAST(SUBSTRING(JSON_EXTRACT(e, '$.billablePeriod.start'), 2, 10) AS DATE) AS enrollment_start_date,\n    CAST(SUBSTRING(JSON_EXTRACT(e, '$.billablePeriod.end'), 2, 10) AS DATE) AS enrollment_end_date,\n    REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '\"', '') AS payer,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '\"', '') = 'Medicare' THEN 'medicare'\n        WHEN REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '\"', '') = 'Medicaid' THEN 'medicaid'\n        WHEN REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '\"', '') = 'NO_INSURANCE' THEN NULL\n        ELSE 'commercial'\n    END AS payer_type,\n    NULL AS plan,\n    NULL AS original_reason_entitlement_code,\n    NULL AS dual_status_code,\n    NULL AS medicare_status_code,\n    REPLACE(REPLACE(REPLACE(SPLIT_PART(JSON_EXTRACT(p, '$.name[0].given'), ',', -1), '\"', ''), '[', ''), ']', '') AS first_name,\n    REPLACE(JSON_EXTRACT(p, '$.name[0].family'), '\"', '') AS last_name,\n    REPLACE(JSON_EXTRACT(p, '$.address[0].line[0]'), '\"', '') AS address,\n    REPLACE(JSON_EXTRACT(p, '$.address[0].city'), '\"', '') AS city,\n    REPLACE(JSON_EXTRACT(p, '$.address[0].state'), '\"', '') AS state,\n    REPLACE(JSON_EXTRACT(p, '$.address[0].postalCode'), '\"', '') AS zip_code,\n    REPLACE(JSON_EXTRACT(p, '$.telecom[0].value'), '\"', '') AS phone,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"ExplanationOfBenefit\" e\nLEFT JOIN \"synthea\".\"json\".\"Patient\" p\n    ON REPLACE(REPLACE(JSON_EXTRACT(e, '$.patient.reference'), '\"Patient/', ''), '\"', '') = REPLACE(JSON_EXTRACT(p, '$.id'), '\"', '')", "relation_name": "\"synthea\".\"tuva_input\".\"eligibility\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:26.863935Z", "completed_at": "2024-02-18T04:24:26.870867Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:26.899830Z", "completed_at": "2024-02-18T04:24:27.001570Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.14713835716247559, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.condition", "compiled": true, "compiled_code": "-- models/condition.sql\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(co, '$.id'), '\"', '') AS condition_id,\n    REPLACE(REPLACE(JSON_EXTRACT(co, '$.subject.reference'), '\"Patient/', ''), '\"', '') AS patient_id,\n    REPLACE(REPLACE(JSON_EXTRACT(co, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') AS encounter_id,\n    REPLACE(JSON_EXTRACT(cl, '$.id'), '\"', '') AS claim_id,\n    CAST(SUBSTRING(JSON_EXTRACT(co, '$.recordedDate'), 2, 10) AS DATE) AS recorded_date,\n    CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE) AS onset_date,\n    CAST(SUBSTRING(JSON_EXTRACT(co, '$.abatementDateTime'), 2, 10) AS DATE) AS resolved_date,\n    REPLACE(JSON_EXTRACT(co, '$.clinicalStatus.coding[0].code'), '\"', '') AS status,\n    REPLACE(JSON_EXTRACT(co, '$.category[0].coding[0].display'), '\"', '') AS condition_type,\n    'snomed' AS source_code_type,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '\"', '') AS source_code,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[0].display'), '\"', '') AS source_description,\n    'icd-10-cm' AS normalized_code_type,\n    map.map_target AS normalized_code,\n    map.map_target_name AS normalized_description,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(cl, '$.diagnosis[0].sequence'), '\"', '') IS NOT NULL THEN CAST(REPLACE(JSON_EXTRACT(cl, '$.diagnosis[0].sequence'), '\"', '') AS INTEGER)\n        ELSE 1\n    END AS condition_rank,\n    CASE\n        WHEN CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) < CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE) THEN 'Y'\n        WHEN CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) > CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE) THEN 'N'\n        ELSE 'U'\n    END AS present_on_admit_code,\n    CASE\n        WHEN CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) < CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE) THEN 'Diagnosis was present at the time of inpatient admission. CMS will pay the CC/MCC DRG for those selected HACs that are coded as Y for the POA Indicator.'\n        WHEN CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) > CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE) THEN 'Diagnosis was not present at the time of inpatient admission. CMS will not pay the CC/MCC DRG for those selected HACs that are coded as N for the POA Indicator.'\n        ELSE 'Documentation is insufficient to determine if the condition was present at the time of inpatient admission. CMS will not pay the CC/MCC DRG for those selected HACs that are coded as U for the POA Indicator.'\n    END AS present_on_admit_description,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Condition\" co\nLEFT JOIN \"synthea\".\"json\".\"Claim\" cl\n    ON REPLACE(REPLACE(JSON_EXTRACT(co, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(cl, '$.item[0].encounter[0].reference'), '\"Encounter/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"json\".\"Encounter\" e\n    ON REPLACE(REPLACE(JSON_EXTRACT(co, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') = REPLACE(JSON_EXTRACT(e, '$.id'), '\"', '')\nJOIN \"synthea\".\"terminology\".\"snomed_icd_10_map\" map\n    ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '\"', '') = map.referenced_component_id", "relation_name": "\"synthea\".\"tuva_input\".\"condition\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:26.827040Z", "completed_at": "2024-02-18T04:24:26.834459Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:26.857380Z", "completed_at": "2024-02-18T04:24:30.063248Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.2597360610961914, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.ccsr__procedure_category_map", "compiled": true, "compiled_code": "\n\nselect \n    icd_10_pcs as code,\n    icd_10_pcs_description as code_description,\n    prccsr as ccsr_category,\n    left(prccsr, 3) as ccsr_parent_category,\n    prccsr_description as ccsr_category_description,\n    clinical_domain,\n   '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"ccsr\".\"_value_set_prccsr_v2023_1_cleaned_map\"", "relation_name": "\"synthea\".\"ccsr\".\"procedure_category_map\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:27.019070Z", "completed_at": "2024-02-18T04:24:27.028841Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:27.036071Z", "completed_at": "2024-02-18T04:24:30.064580Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 3.055123805999756, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.encounter", "compiled": true, "compiled_code": "-- models/encounter.sql\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(e, '$.id'), '\"', '') AS encounter_id,\n    REPLACE(REPLACE(JSON_EXTRACT(e, '$.subject.reference'), '\"Patient/', ''), '\"', '') AS patient_id,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '\"', '') = 'AMB' THEN 'outpatient'\n        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '\"', '') = 'EMER' THEN 'emergency department'\n        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '\"', '') = 'IMP' THEN 'acute inpatient'\n        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '\"', '') = 'FLD' THEN 'other'\n        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '\"', '') = 'HH' THEN 'home health'\n        ELSE 'other'\n    END AS encounter_type,\n    CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) AS encounter_start_date,\n    CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE) AS encounter_end_date,\n    CASE\n        WHEN \n            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) IS NOT NULL AND \n            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE) IS NOT NULL AND\n            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) = CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE)\n        THEN 1\n        WHEN \n            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) IS NOT NULL AND \n            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE) IS NOT NULL \n        THEN\n            DATEDIFF(\n                'day',\n                CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE),\n                CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE)\n            ) + 1\n        ELSE 1\n    END AS length_of_stay,\n    9 AS admit_source_code,\n    'Information Not Available' AS admit_source_description,\n    9 AS admit_type_code,\n    'Unknown' AS admit_type_description,\n    00 AS discharge_disposition_code,\n    'Unknown Value (but present in data)' AS discharge_disposition_description,\n    REPLACE(REPLACE(JSON_EXTRACT(e, '$.participant[0].individual.reference'), '\"Practitioner/', ''), '\"', '') AS attending_provider_id,\n    NULL AS facility_npi,\n    'snomed' AS primary_diagnosis_code_type,\n    REPLACE(JSON_EXTRACT(e, '$.reasonCode[0].coding[0].code'), '\"', '') AS primary_diagnosis_code,\n    REPLACE(JSON_EXTRACT(e, '$.reasonCode[0].coding[0].display'), '\"', '') AS primary_diagnosis_description,\n    icd.\"MS-DRG\" AS ms_drg_code,\n    icd.\"MS-DRG_description\" AS ms_drg_description,\n    apr.apr_drg_code AS apr_drg_code,\n    apr.apr_drg_description AS apr_drg_description,\n    REPLACE(JSON_EXTRACT(ex, '$.payment.amount.value'), '\"', '') AS paid_amount,\n    REPLACE(JSON_EXTRACT(ex, '$.total[0].amount.value'), '\"', '') AS allowed_amount,\n    REPLACE(JSON_EXTRACT(ex, '$.total[0].amount.value'), '\"', '') AS charge_amount,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Encounter\" e\nLEFT JOIN \"synthea\".\"json\".\"ExplanationOfBenefit\" ex\n    ON REPLACE(JSON_EXTRACT(e, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(ex, '$.item[0].encounter[0].reference'), '\"Encounter/', ''), '\"', '')\nJOIN \"synthea\".\"terminology\".\"snomed_icd_10_map\" sno\n    ON REPLACE(JSON_EXTRACT(e, '$.reasonCode[0].coding[0].code'), '\"', '') = sno.referenced_component_id\nJOIN \"synthea\".\"reference\".\"icd10cm_to_msdrg_v41\" icd\n    ON sno.map_target = REPLACE(icd.ICD10, '.', '')\nJOIN \"synthea\".\"terminology\".\"apr_drg\" apr\n    ON icd.MDC = apr.mdc_code", "relation_name": "\"synthea\".\"tuva_input\".\"encounter\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:26.817634Z", "completed_at": "2024-02-18T04:24:26.832569Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:26.835954Z", "completed_at": "2024-02-18T04:24:30.065614Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.2629764080047607, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.ccsr__dx_vertical_pivot", "compiled": true, "compiled_code": "\n\nwith codes as (\n    \n    select\n        icd_10_cm_code as code, \n        icd_10_cm_code_description as code_description,\n        -- loop to generate columns for CCSR categories 1-6\n        ccsr_category_1,\n        ccsr_category_1_description,\n        ccsr_category_2,\n        ccsr_category_2_description,\n        ccsr_category_3,\n        ccsr_category_3_description,\n        ccsr_category_4,\n        ccsr_category_4_description,\n        ccsr_category_5,\n        ccsr_category_5_description,\n        ccsr_category_6,\n        ccsr_category_6_description,\n        default_ccsr_category_ip,\n        default_ccsr_category_op\n    from \"synthea\".\"ccsr\".\"_value_set_dxccsr_v2023_1_cleaned_map\"\n\n), long_union as (\n    -- generate select & union statements to pivot category columns to rows\n    \n    select \n        code,\n        code_description,\n        left(ccsr_category_1, 3) as ccsr_parent_category,\n        ccsr_category_1 as ccsr_category,\n        ccsr_category_1_description as ccsr_category_description,\n        1 as ccsr_category_rank,\n        (ccsr_category_1 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_1 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        left(ccsr_category_2, 3) as ccsr_parent_category,\n        ccsr_category_2 as ccsr_category,\n        ccsr_category_2_description as ccsr_category_description,\n        2 as ccsr_category_rank,\n        (ccsr_category_2 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_2 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        left(ccsr_category_3, 3) as ccsr_parent_category,\n        ccsr_category_3 as ccsr_category,\n        ccsr_category_3_description as ccsr_category_description,\n        3 as ccsr_category_rank,\n        (ccsr_category_3 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_3 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        left(ccsr_category_4, 3) as ccsr_parent_category,\n        ccsr_category_4 as ccsr_category,\n        ccsr_category_4_description as ccsr_category_description,\n        4 as ccsr_category_rank,\n        (ccsr_category_4 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_4 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        left(ccsr_category_5, 3) as ccsr_parent_category,\n        ccsr_category_5 as ccsr_category,\n        ccsr_category_5_description as ccsr_category_description,\n        5 as ccsr_category_rank,\n        (ccsr_category_5 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_5 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        left(ccsr_category_6, 3) as ccsr_parent_category,\n        ccsr_category_6 as ccsr_category,\n        ccsr_category_6_description as ccsr_category_description,\n        6 as ccsr_category_rank,\n        (ccsr_category_6 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_6 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    \n\n)\n\nselect distinct\n    *,\n    '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom long_union\n-- as not all diagnosis codes have multiple categories, we can discard nulls\nwhere ccsr_category is not null", "relation_name": "\"synthea\".\"ccsr\".\"dx_vertical_pivot\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:27.029847Z", "completed_at": "2024-02-18T04:24:27.039599Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:27.041627Z", "completed_at": "2024-02-18T04:24:30.066991Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 3.119682550430298, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.lab_result", "compiled": true, "compiled_code": "-- models/lab_result.sql\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(o, '$.id'), '\"', '') AS lab_result_id,\n    REPLACE(REPLACE(JSON_EXTRACT(o, '$.subject.reference'), '\"Patient/', ''), '\"', '') AS patient_id,\n    REPLACE(REPLACE(JSON_EXTRACT(o, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') AS encounter_id,\n    NULL AS accession_number,\n    'loinc' AS source_code_type,\n    REPLACE(JSON_EXTRACT(o, '$.code.coding[0].code'), '\"', '') AS source_code,\n    REPLACE(JSON_EXTRACT(o, '$.code.coding[0].display'), '\"', '') AS source_description,\n    NULL AS source_component,\n    'loinc' AS normalized_code_type,\n    l.loinc AS normalized_code,\n    l.short_name AS normalized_description,\n    l.component AS normalized_component,\n    REPLACE(JSON_EXTRACT(o, '$.status'), '\"', '') AS status,\n    REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '') AS result, \n    CAST(SUBSTRING(JSON_EXTRACT(o, '$.effectiveDateTime'), 2, 10) AS DATE) AS result_date,\n    CAST(SUBSTRING(JSON_EXTRACT(o, '$.issued'), 2, 10) AS DATE) AS collection_date,\n    REPLACE(JSON_EXTRACT(o, '$.valueQuantity.unit'), '\"', '') AS source_units,\n    REPLACE(JSON_EXTRACT(o, '$.valueQuantity.unit'), '\"', '') AS normalized_units,\n    NULL AS source_reference_range_low,\n    NULL AS source_reference_range_high,\n    NULL AS normalized_reference_range_low,\n    NULL AS normalized_reference_range_high,\n    NULL AS source_abnormal_flag,\n    NULL AS normalized_abnormal_flag,\n    NULL AS specimen,\n    REPLACE(REPLACE(JSON_EXTRACT(e, '$.participant[0].individual.reference'), '\"Practitioner/', ''), '\"', '') AS ordering_practitioner_id,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Observation\" o\nLEFT JOIN \"synthea\".\"terminology\".\"loinc\" l ON REPLACE(JSON_EXTRACT(o, '$.code.coding[0].code'), '\"', '') = l.loinc\nLEFT JOIN \"synthea\".\"json\".\"Encounter\" e ON REPLACE(REPLACE(JSON_EXTRACT(o, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') = REPLACE(JSON_EXTRACT(e, '$.id'), '\"', '')\nWHERE REPLACE(JSON_EXTRACT(o, '$.category[0].coding[0].code'), '\"', '') = ('laboratory')\nAND REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '') IS NOT NULL", "relation_name": "\"synthea\".\"tuva_input\".\"lab_result\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:30.154022Z", "completed_at": "2024-02-18T04:24:30.167954Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:30.170716Z", "completed_at": "2024-02-18T04:24:30.246079Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.09972834587097168, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.location", "compiled": true, "compiled_code": "-- models/location.sql\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(l, '$.id'), '\"', '') AS location_id,\n    NULL AS npi,\n    REPLACE(JSON_EXTRACT(l, '$.name'), '\"', '') AS name,\n    NULL AS facility_type,\n    REPLACE(JSON_EXTRACT(l, '$.managingOrganization.display'), '\"', '') AS parent_organization,\n    REPLACE(REPLACE(REPLACE(JSON_EXTRACT(l, '$.address.line'), '\"', ''), '[', ''), ']', '') AS address,\n    REPLACE(JSON_EXTRACT(l, '$.address.city'), '\"', '') AS city,\n    REPLACE(JSON_EXTRACT(l, '$.address.state'), '\"', '') AS state,\n    REPLACE(JSON_EXTRACT(l, '$.address.postalCode'), '\"', '') AS zip_code,\n    CAST(REPLACE(JSON_EXTRACT(l, '$.position.latitude'), '\"', '') AS FLOAT) AS latitude,\n    CAST(REPLACE(JSON_EXTRACT(l, '$.position.longitude'), '\"', '') AS FLOAT) AS longitude,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Location\" l", "relation_name": "\"synthea\".\"tuva_input\".\"location\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:30.163325Z", "completed_at": "2024-02-18T04:24:30.170372Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:30.180294Z", "completed_at": "2024-02-18T04:24:30.256347Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.10935044288635254, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.medication", "compiled": true, "compiled_code": "-- models/medication.sql\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(m, '$.id'), '\"', '') AS medication_id,\n    REPLACE(REPLACE(JSON_EXTRACT(m, '$.subject.reference'), '\"Patient/', ''), '\"', '') AS patient_id,\n    REPLACE(REPLACE(JSON_EXTRACT(m, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') AS encounter_id,\n    CAST(SUBSTRING(JSON_EXTRACT(m, '$.authoredOn'), 2, 10) AS DATE) AS dispensing_date,\n    CAST(SUBSTRING(JSON_EXTRACT(m, '$.authoredOn'), 2, 10) AS DATE) AS prescribing_date,\n    'rxnorm' AS source_code_type,\n    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '\"', '') AS source_code,\n    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].display'), '\"', '') AS source_description,\n    (\n        SELECT c2.concept_code\n        FROM \"synthea\".\"vocabulary\".\"concept_relationship\" cr\n        JOIN \"synthea\".\"vocabulary\".\"concept\" c1 ON c1.concept_id = cr.concept_id_1\n        JOIN \"synthea\".\"vocabulary\".\"concept\" c2 ON c2.concept_id = cr.concept_id_2\n        WHERE c1.concept_code = REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '\"', '')\n        AND cr.relationship_id = 'Mapped from'\n        AND c2.vocabulary_id = 'NDC'\n        AND c2.domain_id = 'Drug'\n        AND c2.invalid_reason IS NULL\n        AND c1.concept_class_id in ('Branded Drug', 'Clinical Drug', 'Quant Clinical Drug', 'Quant Branded Drug')\n        AND LENGTH(c2.concept_code) = 11\n        ORDER BY c2.concept_id\n        LIMIT 1\n    ) AS ndc_code,\n    (\n        SELECT c2.concept_name\n        FROM \"synthea\".\"vocabulary\".\"concept_relationship\" cr\n        JOIN \"synthea\".\"vocabulary\".\"concept\" c1 ON c1.concept_id = cr.concept_id_1\n        JOIN \"synthea\".\"vocabulary\".\"concept\" c2 ON c2.concept_id = cr.concept_id_2\n        WHERE c1.concept_code = REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '\"', '')\n        AND cr.relationship_id = 'Mapped from'\n        AND c2.vocabulary_id = 'NDC'\n        AND c2.domain_id = 'Drug'\n        AND c2.invalid_reason IS NULL\n        AND c1.concept_class_id in ('Branded Drug', 'Clinical Drug', 'Quant Clinical Drug', 'Quant Branded Drug')\n        AND LENGTH(c2.concept_code) = 11\n        ORDER BY c2.concept_id\n        LIMIT 1\n    ) AS ndc_description,\n    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '\"', '') AS rxnorm_code,\n    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].display'), '\"', '') AS rxnorm_description,\n    r.\"atc class id\" AS atc_code,\n    (\n        SELECT c3.concept_name\n        FROM \"synthea\".\"vocabulary\".\"concept\" c3\n        WHERE c3.concept_code = atc_code\n            AND c3.vocabulary_id = 'ATC'\n            AND c3.domain_id = 'Drug'\n            AND c3.invalid_reason IS NULL\n            AND c3.standard_concept = 'C'\n        LIMIT 1\n    ) AS atc_description,\n    NULL AS route,\n    CASE\n        WHEN ds.amount_value IS NOT NULL THEN ds.amount_value\n        WHEN ds.numerator_value IS NOT NULL THEN\n            CASE\n                WHEN ds.denominator_value IS NOT NULL AND ds.denominator_value != 0 THEN ds.numerator_value / ds.denominator_value\n                ELSE ds.numerator_value\n            END\n        ELSE NULL\n    END AS strength,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '\"', '') IS NOT NULL \n        THEN CAST(REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '\"', '') AS INTEGER) * 30\n        ELSE 1\n    END AS quantity,\n    (\n        SELECT c4.concept_name\n        FROM \"synthea\".\"vocabulary\".\"concept\" c1\n        JOIN \"synthea\".\"vocabulary\".\"drug_strength\" ds ON c1.concept_id = ds.drug_concept_id\n        JOIN \"synthea\".\"vocabulary\".\"concept\" c4 ON c4.concept_id = COALESCE(ds.amount_unit_concept_id, ds.numerator_unit_concept_id)\n        WHERE c1.concept_code = REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '\"', '')\n            AND c1.vocabulary_id = 'RxNorm'\n            AND c1.domain_id = 'Drug'\n            AND c1.invalid_reason IS NULL\n            AND c1.standard_concept = 'S'\n            AND c4.concept_id IS NOT NULL\n        LIMIT 1\n    ) AS quantity_unit,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '\"', '') IS NOT NULL \n        THEN 30\n        ELSE 1\n    END AS days_supply,\n    REPLACE(REPLACE(JSON_EXTRACT(m, '$.requester.reference'), '\"Practitioner/', ''), '\"', '') AS practitioner_id,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"MedicationRequest\" m\nLEFT JOIN \"synthea\".\"vocabulary\".\"concept\" c\n    ON REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '\"', '') = c.concept_code\n    AND c.vocabulary_id = 'RxNorm'\n    AND c.domain_id = 'Drug'\n    AND c.invalid_reason IS NULL\n    AND c.standard_concept = 'S'\nJOIN \"synthea\".\"reference\".\"rxcuis_ndcs_atc\" r\n    ON REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '\"', '') = r.rxcui\nJOIN \"synthea\".\"vocabulary\".\"drug_strength\" ds\n    ON c.concept_id = ds.drug_concept_id\nWHERE \n    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '\"', '') IS NOT NULL", "relation_name": "\"synthea\".\"tuva_input\".\"medication\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:30.156985Z", "completed_at": "2024-02-18T04:24:30.168527Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:30.173977Z", "completed_at": "2024-02-18T04:24:30.296690Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.1487581729888916, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.medical_claim", "compiled": true, "compiled_code": "-- models/medical_claim.sql\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(c, '$.id'), '\"', '') AS claim_id,\n    REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '\"', '') AS claim_line_number,\n    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') AS claim_type,\n    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '\"Patient/', ''), '\"', '') AS patient_id,\n    NULL AS member_id,\n    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '\"', '') AS payer,\n    NULL AS plan,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional'\n        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)\n        ELSE NULL\n    END AS admission_date,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional'\n        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)\n        ELSE NULL\n    END AS discharge_date,\n    '3' AS admit_source_code,\n    9 AS admit_type_code,\n    CASE\n        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20\n        ELSE 1\n    END AS discharge_disposition_code,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional'\n        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '\"', '')\n        ELSE NULL\n    END AS place_of_service_code,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional' THEN '111'\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional' THEN '791'\n        ELSE NULL\n    END AS bill_type_code,\n    msdrg.\"MS-DRG\" AS ms_drg_code,\n    aprdrg.apr_drg_code AS apr_drg_code,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional' THEN 0202\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional' THEN 0500\n        ELSE NULL\n    END AS revenue_center_code,\n    NULL AS service_unit_quantity,\n    NULL AS hcpcs_code,\n    NULL AS hcpcs_modifier_1,\n    NULL AS hcpcs_modifier_2,\n    NULL AS hcpcs_modifier_3,\n    NULL AS hcpcs_modifier_4,\n    NULL AS hcpcs_modifier_5,\n    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '\"', '') AS rendering_npi,\n    NULL AS billing_npi,\n    NULL AS facility_npi,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,\n    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT) AS paid_amount,\n    NULL AS allowed_amount,\n    NULL AS charge_amount,\n    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '\"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT)) AS coinsurance_amount,\n    NULL AS copayment_amount,\n    NULL AS deductible_amount,\n    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '\"', '') AS FLOAT) AS total_cost_amount,\n    'snomed' AS diagnosis_code_type,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '\"', '') AS diagnosis_code_1,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[1].code'), '\"', '') AS diagnosis_code_2,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[2].code'), '\"', '') AS diagnosis_code_3,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[3].code'), '\"', '') AS diagnosis_code_4,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[4].code'), '\"', '') AS diagnosis_code_5,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[5].code'), '\"', '') AS diagnosis_code_6,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[6].code'), '\"', '') AS diagnosis_code_7,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[7].code'), '\"', '') AS diagnosis_code_8,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[8].code'), '\"', '') AS diagnosis_code_9,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[9].code'), '\"', '') AS diagnosis_code_10,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[10].code'), '\"', '') AS diagnosis_code_11,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[11].code'), '\"', '') AS diagnosis_code_12,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[12].code'), '\"', '') AS diagnosis_code_13,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[13].code'), '\"', '') AS diagnosis_code_14,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[14].code'), '\"', '') AS diagnosis_code_15,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[15].code'), '\"', '') AS diagnosis_code_16,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[16].code'), '\"', '') AS diagnosis_code_17,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[17].code'), '\"', '') AS diagnosis_code_18,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[18].code'), '\"', '') AS diagnosis_code_19,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[19].code'), '\"', '') AS diagnosis_code_20,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[20].code'), '\"', '') AS diagnosis_code_21,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[21].code'), '\"', '') AS diagnosis_code_22,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[22].code'), '\"', '') AS diagnosis_code_23,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[23].code'), '\"', '') AS diagnosis_code_24,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[24].code'), '\"', '') AS diagnosis_code_25,\n    'Y' AS diagnosis_poa_1,\n    'U' AS diagnosis_poa_2,\n    'U' AS diagnosis_poa_3,\n    'U' AS diagnosis_poa_4,\n    'U' AS diagnosis_poa_5,\n    'U' AS diagnosis_poa_6,\n    'U' AS diagnosis_poa_7,\n    'U' AS diagnosis_poa_8,\n    'U' AS diagnosis_poa_9,\n    'U' AS diagnosis_poa_10,\n    'U' AS diagnosis_poa_11,\n    'U' AS diagnosis_poa_12,\n    'U' AS diagnosis_poa_13,\n    'U' AS diagnosis_poa_14,\n    'U' AS diagnosis_poa_15,\n    'U' AS diagnosis_poa_16,\n    'U' AS diagnosis_poa_17,\n    'U' AS diagnosis_poa_18,\n    'U' AS diagnosis_poa_19,\n    'U' AS diagnosis_poa_20,\n    'U' AS diagnosis_poa_21,\n    'U' AS diagnosis_poa_22,\n    'U' AS diagnosis_poa_23,\n    'U' AS diagnosis_poa_24,\n    'U' AS diagnosis_poa_25,\n    'snomed' AS procedure_code_type,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '\"', '') AS procedure_code_1,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '\"', '') AS procedure_code_2,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '\"', '') AS procedure_code_3,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '\"', '') AS procedure_code_4,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '\"', '') AS procedure_code_5,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '\"', '') AS procedure_code_6,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '\"', '') AS procedure_code_7,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '\"', '') AS procedure_code_8,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '\"', '') AS procedure_code_9,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '\"', '') AS procedure_code_10,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '\"', '') AS procedure_code_11,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '\"', '') AS procedure_code_12,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '\"', '') AS procedure_code_13,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '\"', '') AS procedure_code_14,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '\"', '') AS procedure_code_15,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '\"', '') AS procedure_code_16,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '\"', '') AS procedure_code_17,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '\"', '') AS procedure_code_18,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '\"', '') AS procedure_code_19,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '\"', '') AS procedure_code_20,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '\"', '') AS procedure_code_21,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '\"', '') AS procedure_code_22,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '\"', '') AS procedure_code_23,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '\"', '') AS procedure_code_24,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '\"', '') AS procedure_code_25,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Claim\" c\nLEFT JOIN \"synthea\".\"json\".\"ExplanationOfBenefit\" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '\"Claim/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"json\".\"Condition\" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[0].diagnosisReference.reference'), '\"Condition/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"json\".\"Procedure\" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[0].procedureReference.reference'), '\"Procedure/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"terminology\".\"snomed_icd_10_map\" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '\"', '') = map.referenced_component_id\nLEFT JOIN \"synthea\".\"reference\".\"icd10cm_to_msdrg_v41\" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target\nLEFT JOIN \"synthea\".\"terminology\".\"apr_drg\" aprdrg ON aprdrg.mdc_code = msdrg.MDC\nLEFT JOIN \"synthea\".\"json\".\"Practitioner\" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '\"Practitioner/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"json\".\"Patient\" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '\"Patient/', ''), '\"', '')\nWHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') != 'pharmacy'", "relation_name": "\"synthea\".\"tuva_input\".\"medical_claim\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:30.264972Z", "completed_at": "2024-02-18T04:24:30.272762Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:30.276548Z", "completed_at": "2024-02-18T04:24:30.350942Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.09307241439819336, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.observation", "compiled": true, "compiled_code": "-- models/observation.sql\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(o, '$.id'), '\"', '') AS observation_id,\n    REPLACE(REPLACE(JSON_EXTRACT(o, '$.subject.reference'), '\"Patient/', ''), '\"', '') AS patient_id,\n    REPLACE(REPLACE(JSON_EXTRACT(o, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') AS encounter_id,\n    NULL AS panel_id,\n    CAST(SUBSTRING(JSON_EXTRACT(o, '$.effectiveDateTime'), 2, 10) AS DATE) AS observation_date,\n    REPLACE(JSON_EXTRACT(o, '$.category[0].display'), '\"', '') AS observation_type,\n    'loinc' AS source_code_type,\n    REPLACE(JSON_EXTRACT(o, '$.code.coding[0].code'), '\"', '') AS source_code,\n    REPLACE(JSON_EXTRACT(o, '$.code.coding[0].display'), '\"', '') AS source_description,\n    'loinc' AS normalized_code_type,\n    REPLACE(JSON_EXTRACT(o, '$.code.coding[0].code'), '\"', '') AS normalized_code,\n    REPLACE(JSON_EXTRACT(o, '$.code.coding[0].display'), '\"', '') AS normalized_description,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '')\n        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '') IS NULL AND REPLACE(JSON_EXTRACT(o, '$.component'), '\"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.component[0].code.coding[0].code'), '\"', '')\n        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '') IS NULL AND REPLACE(JSON_EXTRACT(o, '$.component'), '\"', '') IS NULL THEN REPLACE(JSON_EXTRACT(o, '$.valueCodeableConcept.coding[0].display'), '\"', '')\n    END AS result,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.unit'), '\"', '')\n        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '') IS NULL AND REPLACE(JSON_EXTRACT(o, '$.component'), '\"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.component[0].valueQuantity.unit'), '\"', '')\n    END AS source_units,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.unit'), '\"', '')\n        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '') IS NULL AND REPLACE(JSON_EXTRACT(o, '$.component'), '\"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.component[0].valueQuantity.unit'), '\"', '')\n    END AS normalized_units,\n    NULL AS source_reference_range_low,\n    NULL AS source_reference_range_high,\n    NULL AS normalized_reference_range_low,\n    NULL AS normalized_reference_range_high,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Observation\" o", "relation_name": "\"synthea\".\"tuva_input\".\"observation\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:30.285478Z", "completed_at": "2024-02-18T04:24:30.290215Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:30.292586Z", "completed_at": "2024-02-18T04:24:30.355327Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0852358341217041, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.patient", "compiled": true, "compiled_code": "-- models/patient.sql\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(p, '$.id'), '\"', '') AS patient_id,\n    REPLACE(JSON_EXTRACT(p, '$.name[0].given[0]'), '\"', '') AS first_name,\n    REPLACE(JSON_EXTRACT(p, '$.name[0].family'), '\"', '') AS last_name,\n    REPLACE(JSON_EXTRACT(p, '$.gender'), '\"', '') AS sex,\n    REPLACE(JSON_EXTRACT(p, '$.extension[0].extension[0].valueCoding.display'), '\"', '') AS race,\n    CAST(REPLACE(JSON_EXTRACT(p, '$.birthDate'), '\"', '') AS DATE) AS birth_date,\n    CAST(REPLACE(JSON_EXTRACT(p, '$.deceasedDateTime'), '\"', '') AS DATE) AS death_date,\n    CASE\n        WHEN JSON_EXTRACT(p, '$.deceasedDateTime') IS NOT NULL THEN 1\n        ELSE 0\n    END AS death_flag,\n    REPLACE(REPLACE(REPLACE(JSON_EXTRACT(p, '$.address[0].line'), '\"', ''), '[', ''), ']', '') AS address,\n    REPLACE(JSON_EXTRACT(p, '$.address[0].city'), '\"', '') AS city,\n    REPLACE(JSON_EXTRACT(p, '$.address[0].state'), '\"', '') AS state,\n    REPLACE(JSON_EXTRACT(p, '$.address[0].postalCode'), '\"', '') AS zip_code,\n    NULL AS county,\n    REPLACE(JSON_EXTRACT(p, '$.address[0].extension[0].extension[0].valueDecimal'), '\"', '') AS latitude,\n    REPLACE(JSON_EXTRACT(p, '$.address[0].extension[0].extension[1].valueDecimal'), '\"', '') AS longitude,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Patient\" p", "relation_name": "\"synthea\".\"tuva_input\".\"patient\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:30.313158Z", "completed_at": "2024-02-18T04:24:30.324060Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:30.329696Z", "completed_at": "2024-02-18T04:24:30.400565Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.09884262084960938, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.pharmacy_claim", "compiled": true, "compiled_code": "-- models/pharmacy_claim.sql\n\nSELECT *\nFROM (\n    SELECT DISTINCT\n        REPLACE(JSON_EXTRACT(c, '$.id'), '\"', '') AS claim_id,\n        REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '\"', '') AS claim_line_number,\n        REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '\"Patient/', ''), '\"', '') AS patient_id,\n        NULL AS member_id,\n        REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '\"', '') AS payer,\n        NULL AS plan,\n        REPLACE(JSON_EXTRACT(p, '$.identifier[0].value'), '\"', '') AS prescribing_provider_npi,\n        NULL AS dispensing_provider_npi,\n        CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS dispensing_date,\n        (\n            SELECT c2.concept_code\n            FROM \"synthea\".\"vocabulary\".\"concept_relationship\" cr\n            JOIN \"synthea\".\"vocabulary\".\"concept\" c1 ON c1.concept_id = cr.concept_id_1\n            JOIN \"synthea\".\"vocabulary\".\"concept\" c2 ON c2.concept_id = cr.concept_id_2\n            WHERE c1.concept_code = REPLACE(JSON_EXTRACT(c, '$.item[0].productOrService.coding[0].code'), '\"', '')\n            AND cr.relationship_id = 'Mapped from'\n            AND c2.vocabulary_id = 'NDC'\n            AND c2.domain_id = 'Drug'\n            AND c2.invalid_reason IS NULL\n            AND c1.concept_class_id in ('Branded Drug', 'Clinical Drug', 'Quant Clinical Drug')\n            AND LENGTH(c2.concept_code) = 11\n            ORDER BY c2.concept_code\n            LIMIT 1\n        ) AS ndc_code,\n        CASE\n            WHEN REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '\"', '') IS NOT NULL \n            THEN CAST(REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '\"', '') AS INTEGER) * 30\n            ELSE 1\n        END AS quantity,\n        CASE\n            WHEN REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '\"', '') IS NOT NULL \n            THEN 30\n            ELSE 1\n        END AS days_supply,\n        0 AS refills,\n        CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,\n        CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT) AS paid_amount,\n        CASE\n            WHEN REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].category.coding[0].display'), '\"', '') = 'Line Allowed Charge Amount'\n                THEN CAST(REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].amount.value'), '\"', '') AS FLOAT)\n            ELSE 0\n        END AS allowed_amount,\n        CASE\n            WHEN REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].category.coding[0].display'), '\"', '') = 'Line Beneficiary Coinsurance Amount'\n                THEN CAST(REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].amount.value'), '\"', '') AS FLOAT)\n            ELSE 0\n        END AS coinsurance_amount,\n        CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT) AS copayment_amount,\n        CASE\n            WHEN REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].category.coding[0].display'), '\"', '') = 'Line Beneficiary Part B Deductible Amount'\n                THEN CAST(REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].amount.value'), '\"', '') AS FLOAT)\n            ELSE 0\n        END AS deductible_amount,\n        'SyntheaFhir' AS data_source\n    FROM \"synthea\".\"json\".\"Claim\" c\n    LEFT JOIN \"synthea\".\"json\".\"MedicationRequest\" m\n        ON REPLACE(REPLACE(JSON_EXTRACT(c, '$.prescription.reference'), '\"MedicationRequest/', ''), '\"', '') = REPLACE(JSON_EXTRACT(m, '$.id'), '\"', '')\n    LEFT JOIN \"synthea\".\"json\".\"ExplanationOfBenefit\" e\n        ON REPLACE(JSON_EXTRACT(c, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '\"Claim/', ''), '\"', '')\n    LEFT JOIN \"synthea\".\"json\".\"Encounter\" enc\n        ON REPLACE(REPLACE(JSON_EXTRACT(c, '$.item[0].encounter[0].reference'), '\"Encounter/', ''), '\"', '') = REPLACE(JSON_EXTRACT(enc, '$.id'), '\"', '')\n    LEFT JOIN \"synthea\".\"json\".\"Practitioner\" p\n        ON REPLACE(REPLACE(JSON_EXTRACT(enc, '$.participant[0].individual.reference'), '\"Practitioner/', ''), '\"', '') = REPLACE(JSON_EXTRACT(p, '$.id'), '\"', '')\n    LEFT JOIN \"synthea\".\"vocabulary\".\"drug_strength\" ds ON REPLACE(JSON_EXTRACT(c, '$.item[0].productOrService.coding[0].code'), '\"', '') = ds.drug_concept_id\n    WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'pharmacy'\n) AS pharmacy_claim\nWHERE pharmacy_claim.ndc_code IS NOT NULL", "relation_name": "\"synthea\".\"tuva_input\".\"pharmacy_claim\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:30.369001Z", "completed_at": "2024-02-18T04:24:30.374575Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:30.378713Z", "completed_at": "2024-02-18T04:24:30.453678Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.09399533271789551, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.practitioner", "compiled": true, "compiled_code": "-- models/practitioner.sql\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(p, '$.id'), '\"', '') AS practitioner_id,\n    REPLACE(JSON_EXTRACT(p, '$.identifier[0].value'), '\"', '') AS npi,\n    REPLACE(JSON_EXTRACT(p, '$.name[0].given[0]'), '\"', '') AS first_name,\n    REPLACE(JSON_EXTRACT(p, '$.name[0].family'), '\"', '') AS last_name,\n    REPLACE(JSON_EXTRACT(pr, '$.location[0].display'), '\"', '') AS practice_affiliation,\n    REPLACE(JSON_EXTRACT(pr, '$.specialty[0].text'), '\"', '') AS specialty,\n    NULL AS sub_specialty,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Practitioner\" p\nJOIN \"synthea\".\"json\".\"PractitionerRole\" pr\n    ON REPLACE(JSON_EXTRACT(p, '$.identifier[0].value'), '\"', '') = REPLACE(JSON_EXTRACT(pr, '$.practitioner.identifier.value'), '\"', '')", "relation_name": "\"synthea\".\"tuva_input\".\"practitioner\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:30.381959Z", "completed_at": "2024-02-18T04:24:30.387658Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:30.392484Z", "completed_at": "2024-02-18T04:24:30.468643Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.09729361534118652, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.procedure", "compiled": true, "compiled_code": "-- models/procedure.sql\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(p, '$.id'), '\"', '') AS procedure_id,\n    REPLACE(REPLACE(JSON_EXTRACT(p, '$.subject.reference'), '\"Patient/', ''), '\"', '') AS patient_id,\n    REPLACE(REPLACE(JSON_EXTRACT(p, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') AS encounter_id,\n    REPLACE(JSON_EXTRACT(cl, '$.id'), '\"', '') AS claim_id,\n    CAST(REPLACE(JSON_EXTRACT(p, '$.performedPeriod.start'), '\"', '') AS DATE) AS procedure_date,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '\"', '') AS procedure_code,\n    'snomed' AS source_code_type,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '\"', '') AS source_code,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].display'), '\"', '') AS source_description,\n    'snomed' AS normalized_code_type,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '\"', '') AS normalized_code,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].display'), '\"', '') AS normalized_description,\n    NULL AS modifier_1,\n    NULL AS modifier_2,\n    NULL AS modifier_3,\n    NULL AS modifier_4,\n    NULL AS modifier_5,\n    REPLACE(REPLACE(JSON_EXTRACT(e, '$.participant[0].individual.reference'), '\"Practitioner/', ''), '\"', '') AS practitioner_id,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Procedure\" p\nLEFT JOIN \"synthea\".\"json\".\"Encounter\" e\n    ON REPLACE(REPLACE(JSON_EXTRACT(p, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') = REPLACE(JSON_EXTRACT(e, '$.id'), '\"', '')\nLEFT JOIN \"synthea\".\"json\".\"Claim\" cl\n    ON REPLACE(REPLACE(JSON_EXTRACT(p, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(cl, '$.item[0].encounter[0].reference'), '\"Encounter/', ''), '\"', '')", "relation_name": "\"synthea\".\"tuva_input\".\"procedure\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:30.425487Z", "completed_at": "2024-02-18T04:24:30.442848Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:30.447045Z", "completed_at": "2024-02-18T04:24:30.532729Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.11713528633117676, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034__performance_period", "compiled": true, "compiled_code": "\n/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        cast(\n        \n\n    \n\n    date_trunc('year', now()) + ((interval '1 year') * (1))\n\n + ((interval '1 day') * (-1))\n\n\n        as date)\n        \n         as performance_period_end\n)\n\n/*\n    set performance period begin to a year and a day prior\n    for a complete calendar year\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    \n\n    performance_period_end + ((interval '1 year') * (-1))\n\n + ((interval '1 day') * (1))\n\n as performance_period_begin\n    from period_end\n\n)\n\n/*\n    set performance lookback periods for each type of test\n\n    during the measurement period:\n    - Fecal occult blood test (FOBT) during the measurement period\n\n    during the measurement period or the two years prior:\n    - Fecal immunochemical DNA test (FIT-DNA)\n\n    during the measurement period or the four years prior:\n    - Flexible sigmoidoscopy\n    - Computed tomography (CT) colonography\n\n    during the measurement period or the nine years prior:\n    - Colonoscopy\n\n*/\n, period_lookback as (\n\n    select\n          performance_period_end\n        , performance_period_begin\n        , \n\n    performance_period_end + ((interval '1 year') * (-2))\n\n as performance_period_begin_1yp\n        , \n\n    performance_period_end + ((interval '1 year') * (-3))\n\n as performance_period_begin_2yp\n        , \n\n    performance_period_end + ((interval '1 year') * (-5))\n\n as performance_period_begin_4yp\n        , \n\n    performance_period_end + ((interval '1 year') * (-10))\n\n as performance_period_begin_9yp\n    from period_begin\n\n)\n\nselect\n      cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\n    , cast(performance_period_begin_1yp as date) as performance_period_begin_1yp\n    , cast(performance_period_begin_2yp as date) as performance_period_begin_2yp\n    , cast(performance_period_begin_4yp as date) as performance_period_begin_4yp\n    , cast(performance_period_begin_9yp as date) as performance_period_begin_9yp\nfrom period_lookback", "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf0034__performance_period\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:30.475830Z", "completed_at": "2024-02-18T04:24:30.485500Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:30.491162Z", "completed_at": "2024-02-18T04:24:30.574468Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.10661840438842773, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372__performance_period", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        cast(\n        \n\n    \n\n    date_trunc('year', now()) + ((interval '1 year') * (1))\n\n + ((interval '1 day') * (-1))\n\n\n        as date)\n        \n         as performance_period_end\n)\n\n/*\n    set performance period begin to a year and a day prior\n    for a complete calendar year\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    \n\n    performance_period_end + ((interval '1 year') * (-1))\n\n + ((interval '1 day') * (1))\n\n as performance_period_begin\n    from period_end\n\n)\n\n/*\n    set performance lookback period to 27 months prior to the end of the\n    performance period\n*/\n, period_lookback as (\n\n    select\n          performance_period_end\n        , performance_period_begin\n        , \n\n    performance_period_end + ((interval '1 month') * (-27))\n\n as performance_period_lookback\n    from period_begin\n\n\n)\n\nselect\n      cast((select id\nfrom \"synthea\".\"quality_measures\".\"_value_set_measures\"\nwhere id = 'NQF2372') as TEXT) as measure_id\n    , cast((select name\nfrom \"synthea\".\"quality_measures\".\"_value_set_measures\"\nwhere id = 'NQF2372') as TEXT) as measure_name\n    , cast((select version\nfrom \"synthea\".\"quality_measures\".\"_value_set_measures\"\nwhere id = 'NQF2372') as TEXT) as measure_version\n    , cast(performance_period_end as date) as performance_period_end\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_lookback as date) as performance_period_lookback\nfrom period_lookback", "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf2372__performance_period\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:30.515780Z", "completed_at": "2024-02-18T04:24:30.533340Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:30.538872Z", "completed_at": "2024-02-18T04:24:30.624773Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.11553573608398438, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_condition", "compiled": true, "compiled_code": "\n\nselect\n    cast(condition_id as TEXT ) as condition_id\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_id as TEXT ) as encounter_id\n    , cast(claim_id as TEXT ) as claim_id\n    , try_cast( recorded_date as date ) as recorded_date\n    , try_cast( onset_date as date ) as onset_date\n    , try_cast( resolved_date as date ) as resolved_date\n    , cast(status as TEXT ) as status\n    , cast(condition_type as TEXT ) as condition_type\n    , cast(source_code_type as TEXT ) as source_code_type\n    , cast(source_code as TEXT ) as source_code\n    , cast(source_description as TEXT ) as source_description\n    , cast(normalized_code_type as TEXT ) as normalized_code_type\n    , cast(normalized_code as TEXT ) as normalized_code\n    , cast(normalized_description as TEXT ) as normalized_description\n    , cast(condition_rank as integer ) as condition_rank\n    , cast(present_on_admit_code as TEXT ) as present_on_admit_code\n    , cast(present_on_admit_description as TEXT ) as present_on_admit_description\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-18 04:24:25.074170+00:00' as timestamp ) as tuva_last_run\nfrom \"synthea\".\"tuva_input\".\"condition\"", "relation_name": "\"synthea\".\"core\".\"_stg_clinical_condition\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:30.553951Z", "completed_at": "2024-02-18T04:24:30.568983Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:30.570632Z", "completed_at": "2024-02-18T04:24:30.644104Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.10611581802368164, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_encounter", "compiled": true, "compiled_code": "\n\nselect \n    cast(encounter_id as TEXT ) as encounter_id\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_type as TEXT ) as encounter_type\n    , try_cast( encounter_start_date as date ) as encounter_start_date\n    , try_cast( encounter_end_date as date ) as encounter_end_date\n    , cast(length_of_stay as integer ) as length_of_stay\n    , cast(admit_source_code as TEXT ) as admit_source_code\n    , cast(admit_source_description as TEXT ) as admit_source_description\n    , cast(admit_type_code as TEXT ) as admit_type_code\n    , cast(admit_type_description as TEXT ) as admit_type_description\n    , cast(discharge_disposition_code as TEXT ) as discharge_disposition_code\n    , cast(discharge_disposition_description as TEXT ) as discharge_disposition_description\n    , cast(attending_provider_id as TEXT ) as attending_provider_id\n    , cast(facility_npi as TEXT ) as facility_npi\n    , cast(primary_diagnosis_code_type as TEXT ) as primary_diagnosis_code_type\n    , cast(primary_diagnosis_code as TEXT ) as primary_diagnosis_code\n    , cast(primary_diagnosis_description as TEXT ) as primary_diagnosis_description\n    , cast(ms_drg_code as TEXT ) as ms_drg_code\n    , cast(ms_drg_description as TEXT ) as ms_drg_description \n    , cast(apr_drg_code as TEXT ) as apr_drg_code\n    , cast(apr_drg_description as TEXT ) as apr_drg_description\n    , cast(paid_amount as numeric(28,6) ) as paid_amount\n    , cast(allowed_amount as numeric(28,6) ) as allowed_amount\n    , cast(charge_amount as numeric(28,6) ) as charge_amount\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-18 04:24:25.074170+00:00' as timestamp ) as tuva_last_run\nfrom \"synthea\".\"tuva_input\".\"encounter\"", "relation_name": "\"synthea\".\"core\".\"_stg_clinical_encounter\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:30.593487Z", "completed_at": "2024-02-18T04:24:30.606813Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:30.614032Z", "completed_at": "2024-02-18T04:24:30.691637Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.10726475715637207, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_lab_result", "compiled": true, "compiled_code": "\n\nselect\n    cast(lab_result_id as TEXT ) as lab_result_id\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_id as TEXT ) as encounter_id\n    , cast(accession_number as TEXT ) as accession_number\n    , cast(source_code_type as TEXT ) as source_code_type\n    , cast(source_code as TEXT ) as source_code\n    , cast(source_description as TEXT ) as source_description\n    , cast(source_component as TEXT ) as source_component\n    , cast(normalized_code_type as TEXT ) as normalized_code_type\n    , cast(normalized_code as TEXT ) as normalized_code\n    , cast(normalized_description as TEXT ) as normalized_description\n    , cast(normalized_component as TEXT ) as normalized_component\n    , cast(status as TEXT ) as status\n    , cast(result as TEXT ) as result\n    , try_cast( result_date as date ) as result_date\n    , try_cast( collection_date as date ) as collection_date\n    , cast(source_units as TEXT ) as source_units\n    , cast(normalized_units as TEXT ) as normalized_units\n    , cast(source_reference_range_low as TEXT ) as source_reference_range_low\n    , cast(source_reference_range_high as TEXT ) as source_reference_range_high\n    , cast(normalized_reference_range_low as TEXT ) as normalized_reference_range_low\n    , cast(normalized_reference_range_high as TEXT ) as normalized_reference_range_high\n    , cast(source_abnormal_flag as integer ) as source_abnormal_flag\n    , cast(normalized_abnormal_flag as integer ) as normalized_abnormal_flag\n    , cast(specimen as TEXT ) as specimen\n    , cast(ordering_practitioner_id as TEXT ) as ordering_practitioner_id\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-18 04:24:25.074170+00:00' as timestamp ) as tuva_last_run\nfrom \"synthea\".\"tuva_input\".\"lab_result\"", "relation_name": "\"synthea\".\"core\".\"_stg_clinical_lab_result\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:30.648508Z", "completed_at": "2024-02-18T04:24:30.660192Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:30.664308Z", "completed_at": "2024-02-18T04:24:30.757298Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1218557357788086, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_location", "compiled": true, "compiled_code": "\n\nselect\n    cast(location_id as TEXT ) as location_id\n    , cast(npi as TEXT ) as npi\n    , cast(name as TEXT ) as name\n    , cast(facility_type as TEXT ) as facility_type\n    , cast(parent_organization as TEXT ) as parent_organization\n    , cast(address as TEXT ) as address\n    , cast(city as TEXT ) as city\n    , cast(state as TEXT ) as state\n    , cast(zip_code as TEXT ) as zip_code\n    , cast(latitude as float ) as latitude\n    , cast(longitude as float ) as longitude\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-18 04:24:25.074170+00:00' as timestamp ) as tuva_last_run\nfrom \"synthea\".\"tuva_input\".\"location\"", "relation_name": "\"synthea\".\"core\".\"_stg_clinical_location\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:30.671753Z", "completed_at": "2024-02-18T04:24:30.684014Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:30.686804Z", "completed_at": "2024-02-18T04:24:30.773509Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.10915493965148926, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_medication", "compiled": true, "compiled_code": "\n\nselect\n    cast(medication_id as TEXT ) as medication_id\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_id as TEXT ) as encounter_id\n    , try_cast( dispensing_date as date ) as dispensing_date\n    , try_cast( prescribing_date as date ) as prescribing_date\n    , cast(source_code_type as TEXT ) as source_code_type\n    , cast(source_code as TEXT ) as source_code\n    , cast(source_description as TEXT ) as source_description\n    , cast(ndc_code as TEXT ) as ndc_code\n    , cast(ndc_description as TEXT ) as ndc_description\n    , cast(rxnorm_code as TEXT ) as rxnorm_code\n    , cast(rxnorm_description as TEXT ) as rxnorm_description \n    , cast(atc_code as TEXT ) as atc_code\n    , cast(atc_description as TEXT ) as atc_description\n    , cast(route as TEXT ) as route\n    , cast(strength as TEXT ) as strength\n    , cast(quantity as integer ) as quantity\n    , cast(quantity_unit as TEXT ) as quantity_unit\n    , cast(days_supply as integer ) as days_supply\n    , cast(practitioner_id as TEXT ) as practitioner_id\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-18 04:24:25.074170+00:00' as timestamp ) as tuva_last_run\nfrom \"synthea\".\"tuva_input\".\"medication\"", "relation_name": "\"synthea\".\"core\".\"_stg_clinical_medication\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:30.743601Z", "completed_at": "2024-02-18T04:24:30.755984Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:30.760025Z", "completed_at": "2024-02-18T04:24:30.848313Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.11483883857727051, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_observation", "compiled": true, "compiled_code": "\n\n\nselect\n    cast(observation_id as TEXT ) as observation_id\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_id as TEXT ) as encounter_id\n    , cast(panel_id as TEXT ) as panel_id\n    , try_cast( observation_date as date ) as observation_date\n    , cast(observation_type as TEXT ) as observation_type\n    , cast(source_code_type as TEXT ) as source_code_type\n    , cast(source_code as TEXT ) as source_code\n    , cast(source_description as TEXT ) as source_description\n    , cast(normalized_code_type as TEXT ) as normalized_code_type\n    , cast(normalized_code as TEXT ) as normalized_code\n    , cast(normalized_description as TEXT ) as normalized_description\n    , cast(result as TEXT ) as result\n    , cast(source_units as TEXT ) as source_units\n    , cast(normalized_units as TEXT ) as normalized_units\n    , cast(source_reference_range_low as TEXT ) as source_reference_range_low\n    , cast(source_reference_range_high as TEXT ) as source_reference_range_high\n    , cast(normalized_reference_range_low as TEXT ) as normalized_reference_range_low\n    , cast(normalized_reference_range_high as TEXT ) as normalized_reference_range_high\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-18 04:24:25.074170+00:00' as timestamp ) as tuva_last_run\nfrom \"synthea\".\"tuva_input\".\"observation\"", "relation_name": "\"synthea\".\"core\".\"_stg_clinical_observation\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:30.778845Z", "completed_at": "2024-02-18T04:24:30.791173Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:30.797134Z", "completed_at": "2024-02-18T04:24:30.867047Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.10551738739013672, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_patient", "compiled": true, "compiled_code": "\n\nselect\n    cast(patient_id as TEXT ) as patient_id\n    , cast(first_name as TEXT ) as first_name\n    , cast(last_name as TEXT ) as last_name\n    , cast(sex as TEXT ) as sex\n    , cast(race as TEXT ) as race\n    , try_cast( birth_date as date ) as birth_date\n    , try_cast( death_date as date ) as death_date\n    , cast(death_flag as integer ) as death_flag\n    , cast(address as TEXT ) as address\n    , cast(city as TEXT ) as city\n    , cast(state as TEXT ) as state\n    , cast(zip_code as TEXT ) as zip_code\n    , cast(county as TEXT ) as county\n    , cast(latitude as float ) as latitude\n    , cast(longitude as float ) as longitude\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-18 04:24:25.074170+00:00' as timestamp ) as tuva_last_run\nfrom \"synthea\".\"tuva_input\".\"patient\"", "relation_name": "\"synthea\".\"core\".\"_stg_clinical_patient\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:30.819839Z", "completed_at": "2024-02-18T04:24:30.831060Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:30.836582Z", "completed_at": "2024-02-18T04:24:30.917165Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.10397768020629883, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_practitioner", "compiled": true, "compiled_code": "\n\nselect\n    cast(practitioner_id as TEXT ) as practitioner_id\n    , cast(npi as TEXT ) as npi\n    , cast(first_name as TEXT ) as first_name\n    , cast(last_name as TEXT ) as last_name\n    , cast(practice_affiliation as TEXT ) as practice_affiliation\n    , cast(specialty as TEXT ) as specialty\n    , cast(sub_specialty as TEXT ) as sub_specialty\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-18 04:24:25.074170+00:00' as timestamp ) as tuva_last_run\nfrom \"synthea\".\"tuva_input\".\"practitioner\"", "relation_name": "\"synthea\".\"core\".\"_stg_clinical_practitioner\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:30.869428Z", "completed_at": "2024-02-18T04:24:30.883042Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:30.887915Z", "completed_at": "2024-02-18T04:24:30.944766Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.08094525337219238, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_procedure", "compiled": true, "compiled_code": "\n\nselect\n    cast(procedure_id as TEXT ) as procedure_id \n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_id as TEXT ) as encounter_id\n    , cast(claim_id as TEXT ) as claim_id\n    , try_cast( procedure_date as date ) as procedure_date\n    , cast(source_code_type as TEXT ) as source_code_type\n    , cast(source_code as TEXT ) as source_code\n    , cast(source_description as TEXT ) as source_description\n    , cast(normalized_code_type as TEXT ) as normalized_code_type\n    , cast(normalized_code as TEXT ) as normalized_code\n    , cast(normalized_description as TEXT ) as normalized_description\n    , cast(modifier_1 as TEXT ) as modifier_1\n    , cast(modifier_2 as TEXT ) as modifier_2\n    , cast(modifier_3 as TEXT ) as modifier_3\n    , cast(modifier_4 as TEXT ) as modifier_4\n    , cast(modifier_5 as TEXT ) as modifier_5\n    , cast(practitioner_id as TEXT ) as practitioner_id\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-18 04:24:25.074170+00:00' as timestamp ) as tuva_last_run\nfrom \"synthea\".\"tuva_input\".\"procedure\"", "relation_name": "\"synthea\".\"core\".\"_stg_clinical_procedure\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:30.897078Z", "completed_at": "2024-02-18T04:24:30.909657Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:30.912737Z", "completed_at": "2024-02-18T04:24:31.228830Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3370523452758789, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_eligibility as (\n\n\n\nselect\n      patient_id\n    , patient_id||data_source||payer||plan||enrollment_start_date||enrollment_end_date as patient_id_key\n    , member_id\n    , gender\n    , race\n    , birth_date\n    , death_date\n    , death_flag\n    , enrollment_start_date\n    , enrollment_end_date\n    , payer\n    , payer_type\n    , plan\n    , original_reason_entitlement_code\n    , dual_status_code\n    , medicare_status_code\n    , first_name\n    , last_name\n    , address\n    , city\n    , state\n    , zip_code\n    , phone\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"eligibility\"\n) select distinct\n  elig.patient_id\n  , elig.patient_id||elig.data_source||elig.payer||elig.plan||elig.enrollment_start_date||elig.enrollment_end_date as patient_id_key\n  , cal_dob.full_date as normalized_birth_date\n  , cal_death.full_date as normalized_death_date\n  , cal_enroll_start.full_date as normalized_enrollment_start_date\n  , cal_enroll_end.full_date as normalized_enrollment_end_date\n  , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_eligibility elig\nleft join \"synthea\".\"terminology\".\"calendar\" cal_dob\n    on elig.birth_date = cal_dob.full_date\nleft join \"synthea\".\"terminology\".\"calendar\" cal_death\n    on elig.death_date = cal_death.full_date\nleft join \"synthea\".\"terminology\".\"calendar\" cal_enroll_start\n    on elig.enrollment_start_date = cal_enroll_start.full_date\nleft join \"synthea\".\"terminology\".\"calendar\" cal_enroll_end\n    on elig.enrollment_end_date = cal_enroll_end.full_date", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_eligibility_dates_normalize\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:31.237910Z", "completed_at": "2024-02-18T04:24:31.250998Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:31.253252Z", "completed_at": "2024-02-18T04:24:31.308753Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.07500004768371582, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_admit_type_voting", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n), normalize as(\n    select \n        med.claim_id\n        , med.data_source\n        , admit.admit_type_code\n    from __dbt__cte__normalized_input__stg_medical_claim med\n    inner join \"synthea\".\"terminology\".\"admit_type\" admit\n        on med.admit_type_code = admit.admit_type_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , admit_type_code\n        , count(*) as admit_type_occurrence_count\n    from normalize\n    where admit_type_code is not null\n    group by \n        claim_id\n        , data_source\n        , admit_type_code\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'admit_type_code' as column_name\n        , admit_type_code as normalized_code\n        , admit_type_occurrence_count as occurrence_count\n        , coalesce(lead(admit_type_occurrence_count) \n            over (partition by claim_id, data_source order by admit_type_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by admit_type_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom occurence_comparison", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_admit_type_normalize_voting\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:31.107702Z", "completed_at": "2024-02-18T04:24:31.120274Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:31.122167Z", "completed_at": "2024-02-18T04:24:31.606970Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.505856990814209, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__lab_result", "compiled": true, "compiled_code": "\n\nselect * from \"synthea\".\"core\".\"_stg_clinical_lab_result\"", "relation_name": "\"synthea\".\"core\".\"lab_result\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:31.110424Z", "completed_at": "2024-02-18T04:24:31.121686Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:31.127445Z", "completed_at": "2024-02-18T04:24:31.609447Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.5078692436218262, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_admit_source_voting", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n), normalize as(\n    select \n        med.claim_id\n        , med.data_source\n        , admit.admit_source_code\n    from __dbt__cte__normalized_input__stg_medical_claim med\n    inner join \"synthea\".\"terminology\".\"admit_source\" admit\n        on med.admit_source_code = admit.admit_source_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , admit_source_code\n        , count(*) as admit_source_occurrence_count\n    from normalize\n    where admit_source_code is not null\n    group by \n        claim_id\n        , data_source\n        , admit_source_code\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'admit_source_code' as column_name\n        , admit_source_code as normalized_code\n        , admit_source_occurrence_count as occurrence_count\n        , coalesce(lead(admit_source_occurrence_count) \n            over (partition by claim_id, data_source order by admit_source_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by admit_source_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom occurence_comparison", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_admit_source_voting\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:31.317171Z", "completed_at": "2024-02-18T04:24:31.330426Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:31.331871Z", "completed_at": "2024-02-18T04:24:31.713495Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.39905405044555664, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_apr_drg_voting", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n), normalize as(\n    select \n        med.claim_id\n        , med.data_source\n        , apr.apr_drg_code\n    from __dbt__cte__normalized_input__stg_medical_claim med\n    inner join \"synthea\".\"terminology\".\"apr_drg\" apr\n        on med.apr_drg_code = apr.apr_drg_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , apr_drg_code\n        , count(*) as apr_drg_occurrence_count\n    from normalize\n    where apr_drg_code is not null\n    group by \n        claim_id\n        , data_source\n        , apr_drg_code\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'apr_drg_code' as column_name\n        , apr_drg_code as normalized_code\n        , apr_drg_occurrence_count as occurrence_count\n        , coalesce(lead(apr_drg_occurrence_count) \n            over (partition by claim_id, data_source order by apr_drg_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by apr_drg_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom occurence_comparison", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_apr_drg_voting\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:31.624150Z", "completed_at": "2024-02-18T04:24:31.658088Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:31.684987Z", "completed_at": "2024-02-18T04:24:32.156267Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.5401253700256348, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_bill_type_voting", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n), normalize as(\n    select \n        med.claim_id\n        , med.data_source\n        , bill.bill_type_code\n    from __dbt__cte__normalized_input__stg_medical_claim med\n    inner join \"synthea\".\"terminology\".\"bill_type\" bill\n        on med.bill_type_code = bill.bill_type_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , bill_type_code\n        , count(*) as bill_type_occurrence_count\n    from normalize\n    where bill_type_code is not null\n    group by \n        claim_id\n        , data_source\n        , bill_type_code\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'bill_type_code' as column_name\n        , bill_type_code as normalized_code\n        , bill_type_occurrence_count as occurrence_count\n        , coalesce(lead(bill_type_occurrence_count) \n            over (partition by claim_id, data_source order by bill_type_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by bill_type_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom occurence_comparison", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_bill_type_voting\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:31.718347Z", "completed_at": "2024-02-18T04:24:31.729569Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:31.730951Z", "completed_at": "2024-02-18T04:24:32.164972Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.45015549659729004, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_discharge_disposition_voting", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n), normalize as(\n    select \n        med.claim_id\n        , med.data_source\n        , disch.discharge_disposition_code\n    from __dbt__cte__normalized_input__stg_medical_claim med\n    inner join \"synthea\".\"terminology\".\"discharge_disposition\" disch\n        on med.discharge_disposition_code = disch.discharge_disposition_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , discharge_disposition_code\n        , count(*) as discharge_disposition_occurrence_count\n    from normalize\n    where discharge_disposition_code is not null\n    group by \n        claim_id\n        , data_source\n        , discharge_disposition_code\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'discharge_disposition_code' as column_name\n        , discharge_disposition_code as normalized_code\n        , discharge_disposition_occurrence_count as occurrence_count\n        , coalesce(lead(discharge_disposition_occurrence_count) \n            over (partition by claim_id, data_source order by discharge_disposition_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by discharge_disposition_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom occurence_comparison", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_discharge_disposition_voting\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:30.160838Z", "completed_at": "2024-02-18T04:24:30.169672Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:30.177162Z", "completed_at": "2024-02-18T04:24:33.462856Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.3128879070281982, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.medical_claim_expanded", "compiled": true, "compiled_code": "\n\n\nselect *\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"", "relation_name": "\"synthea\".\"claims_expanded\".\"medical_claim_expanded\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:33.470151Z", "completed_at": "2024-02-18T04:24:33.481883Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:33.483249Z", "completed_at": "2024-02-18T04:24:34.055871Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.5888304710388184, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_ms_drg_voting", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n), normalize as(\n    select \n        med.claim_id\n        , med.data_source\n        , ms.ms_drg_code\n    from __dbt__cte__normalized_input__stg_medical_claim med\n    inner join \"synthea\".\"terminology\".\"ms_drg\" ms\n        on med.ms_drg_code = ms.ms_drg_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , ms_drg_code\n        , count(*) as ms_drg_occurrence_count\n    from normalize\n    where ms_drg_code is not null\n    group by \n        claim_id\n        , data_source\n        , ms_drg_code\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'ms_drg_code' as column_name\n        , ms_drg_code as normalized_code\n        , ms_drg_occurrence_count as occurrence_count\n        , coalesce(lead(ms_drg_occurrence_count) \n            over (partition by claim_id, data_source order by ms_drg_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by ms_drg_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom occurence_comparison", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_ms_drg_voting\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:32.167986Z", "completed_at": "2024-02-18T04:24:32.179245Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:32.181499Z", "completed_at": "2024-02-18T04:24:36.012828Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 3.8590309619903564, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n) select distinct\n  med.claim_id\n  , med.claim_line_number\n  , med.claim_type\n  , med.data_source\n  , cal_claim_start.full_date as normalized_claim_start_date\n  , cal_claim_end.full_date as normalized_claim_end_date\n  , cal_claim_line_start.full_date as normalized_claim_line_start_date\n  , cal_claim_line_end.full_date as normalized_claim_line_end_date\n  , cal_admission.full_date as normalized_admission_date\n  , cal_discharge.full_date as normalized_discharge_date\n  , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_medical_claim med\nleft join \"synthea\".\"terminology\".\"calendar\" cal_claim_start\n    on med.claim_start_date = cal_claim_start.full_date\nleft join \"synthea\".\"terminology\".\"calendar\" cal_claim_end\n    on med.claim_end_Date = cal_claim_end.full_date\nleft join \"synthea\".\"terminology\".\"calendar\" cal_claim_line_start\n    on med.claim_line_start_date = cal_claim_line_start.full_date\nleft join \"synthea\".\"terminology\".\"calendar\" cal_claim_line_end\n    on med.claim_line_end_date = cal_claim_line_end.full_date\nleft join \"synthea\".\"terminology\".\"calendar\" cal_admission\n    on med.admission_date = cal_admission.full_date\nleft join \"synthea\".\"terminology\".\"calendar\" cal_discharge\n    on med.discharge_date = cal_discharge.full_date", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_medical_claim_date_normalize\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:34.065122Z", "completed_at": "2024-02-18T04:24:34.074805Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:34.078613Z", "completed_at": "2024-02-18T04:24:40.606053Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 6.545273542404175, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_place_of_service_normalize", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n) select\n    claim_id\n    , claim_line_number\n    , data_source\n    , pos.place_of_service_code as normalized_code\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_medical_claim med\nleft join \"synthea\".\"terminology\".\"place_of_service\" pos\n    on lpad(med.place_of_service_code, 2, '0') = pos.place_of_service_code\nwhere claim_type = 'professional'", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_place_of_service_normalize\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:32.184885Z", "completed_at": "2024-02-18T04:24:32.193257Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:32.195459Z", "completed_at": "2024-02-18T04:24:42.616046Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 10.471659898757935, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_medical_npi_normalize", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n) select distinct\n  med.claim_id\n  , med.claim_line_number\n  , med.claim_type\n  , med.data_source\n  , rend_prov.npi as normalized_rendering_npi\n  , bill_prov.npi as normalized_billing_npi\n  , fac_prov.npi as normalized_facility_npi\n  , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_medical_claim med\nleft join \"synthea\".\"terminology\".\"provider\" rend_prov\n    on med.rendering_npi = rend_prov.npi\n    and rend_prov.entity_type_description = 'Individual'\nleft join \"synthea\".\"terminology\".\"provider\" bill_prov\n    on med.billing_npi = bill_prov.npi\nleft join \"synthea\".\"terminology\".\"provider\" fac_prov\n    on med.facility_npi = fac_prov.npi\n    and fac_prov.entity_type_description = 'Organization'\n    and med.claim_type = 'institutional'", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_medical_npi_normalize\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:36.055446Z", "completed_at": "2024-02-18T04:24:36.126448Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:36.128127Z", "completed_at": "2024-02-18T04:24:47.796133Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 11.744462966918945, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_present_on_admit_normalize", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n), pivot_poa as(\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_1'  as diagnosis_column\n        ,  diagnosis_poa_1  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_2'  as diagnosis_column\n        ,  diagnosis_poa_2  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_3'  as diagnosis_column\n        ,  diagnosis_poa_3  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_4'  as diagnosis_column\n        ,  diagnosis_poa_4  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_5'  as diagnosis_column\n        ,  diagnosis_poa_5  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_6'  as diagnosis_column\n        ,  diagnosis_poa_6  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_7'  as diagnosis_column\n        ,  diagnosis_poa_7  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_8'  as diagnosis_column\n        ,  diagnosis_poa_8  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_9'  as diagnosis_column\n        ,  diagnosis_poa_9  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_10'  as diagnosis_column\n        ,  diagnosis_poa_10  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_11'  as diagnosis_column\n        ,  diagnosis_poa_11  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_12'  as diagnosis_column\n        ,  diagnosis_poa_12  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_13'  as diagnosis_column\n        ,  diagnosis_poa_13  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_14'  as diagnosis_column\n        ,  diagnosis_poa_14  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_15'  as diagnosis_column\n        ,  diagnosis_poa_15  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_16'  as diagnosis_column\n        ,  diagnosis_poa_16  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_17'  as diagnosis_column\n        ,  diagnosis_poa_17  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_18'  as diagnosis_column\n        ,  diagnosis_poa_18  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_19'  as diagnosis_column\n        ,  diagnosis_poa_19  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_20'  as diagnosis_column\n        ,  diagnosis_poa_20  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_21'  as diagnosis_column\n        ,  diagnosis_poa_21  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_22'  as diagnosis_column\n        ,  diagnosis_poa_22  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_23'  as diagnosis_column\n        ,  diagnosis_poa_24  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_24'  as diagnosis_column\n        ,  diagnosis_poa_24  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_25'  as diagnosis_column\n        ,  diagnosis_poa_25  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n)\n\nselect\n    claim_id\n    , data_source\n    , diagnosis_column\n    , poa.present_on_admit_code as normalized_present_on_admit_code\n    , count(*) as present_on_admit_occurrence_count\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom pivot_poa piv\nleft join \"synthea\".\"terminology\".\"present_on_admission\" poa\n    on replace(piv.present_on_admit_code,'.','') = poa.present_on_admit_code\nwhere claim_type = 'institutional'\ngroup by \n    claim_id\n    , data_source\n    , diagnosis_column\n    , poa.present_on_admit_code", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_present_on_admit_normalize\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:47.814509Z", "completed_at": "2024-02-18T04:24:47.844341Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:47.849268Z", "completed_at": "2024-02-18T04:24:48.850465Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.0428526401519775, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_revenue_center_normalize", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n) select\n    claim_id\n    , claim_line_number\n    , data_source\n    , rev.revenue_center_code as normalized_code\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_medical_claim med\nleft join \"synthea\".\"terminology\".\"revenue_center\" rev\n    on lpad(med.revenue_center_code, 4, '0') = rev.revenue_center_code\nwhere claim_type = 'institutional'", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_revenue_center_normalize\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:48.884605Z", "completed_at": "2024-02-18T04:24:48.935536Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:48.951578Z", "completed_at": "2024-02-18T04:24:49.195094Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.335557222366333, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_undetermined_claim_type", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n) select\n    claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_medical_claim\nwhere claim_type in ('undetermined')", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_undetermined_claim_type\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:42.707611Z", "completed_at": "2024-02-18T04:24:42.788043Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:42.791825Z", "completed_at": "2024-02-18T04:24:50.465171Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 7.773922920227051, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_procedure_date_normalize", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n), pivot_procedure as(\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_1'  as procedure_column\n        ,  procedure_date_1  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_2'  as procedure_column\n        ,  procedure_date_2  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_3'  as procedure_column\n        ,  procedure_date_3  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_4'  as procedure_column\n        ,  procedure_date_4  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_5'  as procedure_column\n        ,  procedure_date_5  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_6'  as procedure_column\n        ,  procedure_date_6  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_7'  as procedure_column\n        ,  procedure_date_7  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_8'  as procedure_column\n        ,  procedure_date_8  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_9'  as procedure_column\n        ,  procedure_date_9  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_10'  as procedure_column\n        ,  procedure_date_10  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_11'  as procedure_column\n        ,  procedure_date_11  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_12'  as procedure_column\n        ,  procedure_date_12  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_13'  as procedure_column\n        ,  procedure_date_13  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_14'  as procedure_column\n        ,  procedure_date_14  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_15'  as procedure_column\n        ,  procedure_date_15  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_16'  as procedure_column\n        ,  procedure_date_16  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_17'  as procedure_column\n        ,  procedure_date_17  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_18'  as procedure_column\n        ,  procedure_date_18  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_19'  as procedure_column\n        ,  procedure_date_19  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_20'  as procedure_column\n        ,  procedure_date_20  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_21'  as procedure_column\n        ,  procedure_date_21  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_22'  as procedure_column\n        ,  procedure_date_22  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_23'  as procedure_column\n        ,  procedure_date_24  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_24'  as procedure_column\n        ,  procedure_date_24  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_25'  as procedure_column\n        ,  procedure_date_25  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n)\n\nselect\n    claim_id\n    , data_source\n    , procedure_column\n    , cal.full_date as procedure_date\n    , count(*) as procedure_date_occurrence_count\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom pivot_procedure piv\nleft join \"synthea\".\"terminology\".\"calendar\" cal\n    on piv.procedure_date = cal.full_date\nwhere claim_type = 'institutional'\ngroup by \n    claim_id\n    , data_source\n    , procedure_column\n    , cal.full_date", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_procedure_date_normalize\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:40.615700Z", "completed_at": "2024-02-18T04:24:40.811707Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:40.813538Z", "completed_at": "2024-02-18T04:24:50.868168Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 10.255372047424316, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_procedure_code_normalize", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n), pivot_procedure as(\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_1'  as procedure_column\n        ,  procedure_code_1  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_2'  as procedure_column\n        ,  procedure_code_2  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_3'  as procedure_column\n        ,  procedure_code_3  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_4'  as procedure_column\n        ,  procedure_code_4  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_5'  as procedure_column\n        ,  procedure_code_5  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_6'  as procedure_column\n        ,  procedure_code_6  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_7'  as procedure_column\n        ,  procedure_code_7  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_8'  as procedure_column\n        ,  procedure_code_8  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_9'  as procedure_column\n        ,  procedure_code_9  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_10'  as procedure_column\n        ,  procedure_code_10  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_11'  as procedure_column\n        ,  procedure_code_11  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_12'  as procedure_column\n        ,  procedure_code_12  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_13'  as procedure_column\n        ,  procedure_code_13  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_14'  as procedure_column\n        ,  procedure_code_14  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_15'  as procedure_column\n        ,  procedure_code_15  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_16'  as procedure_column\n        ,  procedure_code_16  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_17'  as procedure_column\n        ,  procedure_code_17  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_18'  as procedure_column\n        ,  procedure_code_18  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_19'  as procedure_column\n        ,  procedure_code_19  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_20'  as procedure_column\n        ,  procedure_code_20  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_21'  as procedure_column\n        ,  procedure_code_21  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_22'  as procedure_column\n        ,  procedure_code_22  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_23'  as procedure_column\n        ,  procedure_code_24  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_24'  as procedure_column\n        ,  procedure_code_24  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_25'  as procedure_column\n        ,  procedure_code_25  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n)\n\nselect\n    claim_id\n    , data_source\n    , procedure_code_type\n    , procedure_column\n    , coalesce(icd_9.icd_9_pcs,icd_10.icd_10_pcs) as normalized_procedure_code\n    , count(*) as procedure_code_occurrence_count\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom pivot_procedure piv\nleft join \"synthea\".\"terminology\".\"icd_10_pcs\" icd_10\n    on replace(piv.procedure_code,'.','') = icd_10.icd_10_pcs\n    and piv.procedure_code_type = 'icd-10-pcs'\nleft join \"synthea\".\"terminology\".\"icd_9_pcs\" icd_9\n    on replace(piv.procedure_code,'.','') = icd_9.icd_9_pcs\n    and piv.procedure_code_type = 'icd-9-pcs'\nwhere claim_type = 'institutional'\ngroup by \n    claim_id\n    , data_source\n    , procedure_code_type\n    , procedure_column\n    , coalesce(icd_9.icd_9_pcs,icd_10.icd_10_pcs)", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_procedure_code_normalize\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:50.875109Z", "completed_at": "2024-02-18T04:24:50.879602Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:50.880978Z", "completed_at": "2024-02-18T04:24:51.811679Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.9403324127197266, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__observation", "compiled": true, "compiled_code": "\n\n\nselect * from \"synthea\".\"core\".\"_stg_clinical_observation\"", "relation_name": "\"synthea\".\"core\".\"observation\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:51.850000Z", "completed_at": "2024-02-18T04:24:51.922774Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:51.925626Z", "completed_at": "2024-02-18T04:24:52.512744Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.6790673732757568, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__eligibility", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_eligibility as (\n\n\n\nselect\n      patient_id\n    , patient_id||data_source||payer||plan||enrollment_start_date||enrollment_end_date as patient_id_key\n    , member_id\n    , gender\n    , race\n    , birth_date\n    , death_date\n    , death_flag\n    , enrollment_start_date\n    , enrollment_end_date\n    , payer\n    , payer_type\n    , plan\n    , original_reason_entitlement_code\n    , dual_status_code\n    , medicare_status_code\n    , first_name\n    , last_name\n    , address\n    , city\n    , state\n    , zip_code\n    , phone\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"eligibility\"\n) select\n    cast(elig.patient_id as TEXT ) as patient_id\n    , cast(elig.member_id as TEXT ) as member_id\n    , cast(elig.gender as TEXT ) as gender\n    , cast(elig.race as TEXT ) as race\n    , cast(date_norm.normalized_birth_date as date ) as birth_date\n    , cast(date_norm.normalized_death_date as date ) as death_date\n    , cast(elig.death_flag as int ) as death_flag\n    , cast(date_norm.normalized_enrollment_start_date as date ) as enrollment_start_date\n    , cast(date_norm.normalized_enrollment_end_date as date ) as enrollment_end_date\n    , cast(elig.payer as TEXT ) as payer\n    , cast(elig.payer_type as TEXT ) as payer_type\n    , cast(elig.plan as TEXT ) as plan\n    , cast(elig.original_reason_entitlement_code as TEXT ) as original_reason_entitlement_code\n    , cast(elig.dual_status_code as TEXT ) as dual_status_code\n    , cast(elig.medicare_status_code as TEXT ) as medicare_status_code\n    , cast(elig.first_name as TEXT ) as first_name\n    , cast(elig.last_name as TEXT ) as last_name\n    , cast(elig.address as TEXT ) as address\n    , cast(elig.city as TEXT ) as city\n    , cast(elig.state as TEXT ) as state\n    , cast(elig.zip_code as TEXT ) as zip_code\n    , cast(elig.phone as TEXT ) as phone\n    , cast(elig.data_source as TEXT ) as data_source\n    , cast('2024-02-18 04:24:25.074170+00:00'  as TEXT ) as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_eligibility elig\nleft join \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_eligibility_dates_normalize\" date_norm\n    on elig.patient_id_key = date_norm.patient_id_key", "relation_name": "\"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:52.569442Z", "completed_at": "2024-02-18T04:24:52.597054Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:52.601261Z", "completed_at": "2024-02-18T04:24:52.677479Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.15048933029174805, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_admit_type_final", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_admit_type_normalize_voting\"\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_admit_type_final\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:52.748966Z", "completed_at": "2024-02-18T04:24:52.779627Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:52.782912Z", "completed_at": "2024-02-18T04:24:52.904698Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1691431999206543, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_admit_source_final", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_admit_source_voting\"\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_admit_source_final\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:52.951492Z", "completed_at": "2024-02-18T04:24:52.967016Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:52.971270Z", "completed_at": "2024-02-18T04:24:53.093447Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1505746841430664, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_apr_drg_final", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_apr_drg_voting\"\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_apr_drg_final\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:53.101381Z", "completed_at": "2024-02-18T04:24:53.116858Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:53.118547Z", "completed_at": "2024-02-18T04:24:53.223603Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13065862655639648, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_bill_type_final", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_bill_type_voting\"\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_bill_type_final\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:53.254668Z", "completed_at": "2024-02-18T04:24:53.270744Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:53.274804Z", "completed_at": "2024-02-18T04:24:53.412209Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1744399070739746, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_discharge_disposition_final", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_discharge_disposition_voting\"\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_discharge_disposition_final\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:53.454638Z", "completed_at": "2024-02-18T04:24:53.461909Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:53.463735Z", "completed_at": "2024-02-18T04:24:53.526015Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07661700248718262, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_ms_drg_final", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_ms_drg_voting\"\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_ms_drg_final\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:53.536422Z", "completed_at": "2024-02-18T04:24:53.554084Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:53.556041Z", "completed_at": "2024-02-18T04:24:53.651053Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11861324310302734, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_medical_date_aggregation", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , min(normalized_claim_start_date) as minimum_claim_start_date\n    , max(normalized_claim_end_date) as maximum_claim_end_date\n    , min(normalized_admission_date) as minimum_admission_date\n    , max(normalized_discharge_date) as maximum_discharge_date\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_medical_claim_date_normalize\"\nwhere claim_type = 'institutional'\ngroup by\n    claim_id\n    , data_source\n\nunion all\n\nselect\n    claim_id\n    , data_source\n    , min(normalized_claim_start_date) as minimum_claim_start_date\n    , max(normalized_claim_end_date) as maximum_claim_end_date\n    , null as minimum_admission_date\n    , null as maximum_discharge_date\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_medical_claim_date_normalize\"\nwhere claim_type = 'professional'\ngroup by\n    claim_id\n    , data_source", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_medical_date_aggregation\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:53.670136Z", "completed_at": "2024-02-18T04:24:53.689436Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:53.691101Z", "completed_at": "2024-02-18T04:24:53.913592Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2702193260192871, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_present_on_admit_voting", "compiled": true, "compiled_code": "\n\nwith distinct_count as(\n    select\n        claim_id\n        , data_source\n        , diagnosis_column\n        , count(*) as distinct_count\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_present_on_admit_normalize\"\n    group by\n        claim_id\n        , data_source\n        , diagnosis_column\n)\n\nselect \n    norm.claim_id\n    , norm.data_source\n    , norm.diagnosis_column as column_name\n    , norm.normalized_present_on_admit_code as normalized_code\n    , norm.present_on_admit_occurrence_count as occurrence_count\n    , coalesce(lead(present_on_admit_occurrence_count) \n        over (partition by norm.claim_id, norm.data_source, norm.diagnosis_column order by present_on_admit_occurrence_count desc),0) as next_occurrence_count\n    , row_number() over (partition by norm.claim_id, norm.data_source, norm.diagnosis_column order by present_on_admit_occurrence_count desc) as occurrence_row_count\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_present_on_admit_normalize\" norm\ninner join distinct_count dist\n    on norm.claim_id = dist.claim_id\n    and norm.data_source = dist.data_source\n    and norm.diagnosis_column = dist.diagnosis_column", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_present_on_admit_voting\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:53.946072Z", "completed_at": "2024-02-18T04:24:53.974970Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:53.976421Z", "completed_at": "2024-02-18T04:24:54.055129Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12598776817321777, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_procedure_code_voting", "compiled": true, "compiled_code": "\n\nwith distinct_count as(\n    select\n        claim_id\n        , data_source\n        , procedure_column\n        , count(*) as distinct_count\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_procedure_code_normalize\"\n    group by\n        claim_id\n        , data_source\n        , procedure_column\n)\n\nselect \n    norm.claim_id\n    , norm.data_source\n    , norm.procedure_column as column_name\n    , norm.normalized_procedure_code as normalized_code\n    , norm.procedure_code_occurrence_count as occurrence_count\n    , coalesce(lead(procedure_code_occurrence_count) \n        over (partition by norm.claim_id, norm.data_source, norm.procedure_column order by procedure_code_occurrence_count desc),0) as next_occurrence_count\n    , row_number() over (partition by norm.claim_id, norm.data_source, norm.procedure_column order by procedure_code_occurrence_count desc) as occurrence_row_count\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_procedure_code_normalize\" norm\ninner join distinct_count dist\n    on norm.claim_id = dist.claim_id\n    and norm.data_source = dist.data_source\n    and norm.procedure_column = dist.procedure_column", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_procedure_code_voting\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:54.072148Z", "completed_at": "2024-02-18T04:24:54.097202Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:54.099798Z", "completed_at": "2024-02-18T04:24:54.162756Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09478950500488281, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_procedure_date_voting", "compiled": true, "compiled_code": "\n\nwith distinct_count as(\n    select\n        claim_id\n        , data_source\n        , procedure_column\n        , count(*) as distinct_count\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_procedure_code_normalize\"\n    group by\n        claim_id\n        , data_source\n        , procedure_column\n)\n\nselect \n    norm.claim_id\n    , norm.data_source\n    , norm.procedure_column as column_name\n    , norm.procedure_date as normalized_code\n    , norm.procedure_date_occurrence_count as occurrence_count\n    , coalesce(lead(procedure_date_occurrence_count) \n        over (partition by norm.claim_id, norm.data_source, norm.procedure_column order by procedure_date_occurrence_count desc),0) as next_occurrence_count\n    , row_number() over (partition by norm.claim_id, norm.data_source, norm.procedure_column order by procedure_date_occurrence_count desc) as occurrence_row_count\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_procedure_date_normalize\" norm\ninner join distinct_count dist\n    on norm.claim_id = dist.claim_id\n    and norm.data_source = dist.data_source\n    and norm.procedure_column = dist.procedure_column", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_procedure_date_voting\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:54.351220Z", "completed_at": "2024-02-18T04:24:54.391161Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:54.402219Z", "completed_at": "2024-02-18T04:24:54.525819Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.18368840217590332, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators", "compiled": true, "compiled_code": "\n/*\n    Denominator logic for invalid value tests is dependent on whether that\n    specific field is populated or not. We created a macro to automatically\n    generate the CTE. All invalid value tests must have a\n    test_category = 'invalid_values' in the catalog seed.\n*/\nwith all_denominator as (\n\n    select\n        cast('all' as TEXT ) as test_denominator_name\n        , count(distinct patient_id) as denominator\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n\n)\n\n, invalid_value_denominators as (\n\n    select\n          cat.test_name\n        , count(distinct rel.patient_id) as denominator\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\" as rel\n         left join \"synthea\".\"data_quality\".\"_value_set_test_catalog\" as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__eligibility'\n           and cat.test_field = 'dual_status_code'\n    where rel.dual_status_code is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.patient_id) as denominator\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\" as rel\n         left join \"synthea\".\"data_quality\".\"_value_set_test_catalog\" as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__eligibility'\n           and cat.test_field = 'gender'\n    where rel.gender is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.patient_id) as denominator\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\" as rel\n         left join \"synthea\".\"data_quality\".\"_value_set_test_catalog\" as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__eligibility'\n           and cat.test_field = 'medicare_status_code'\n    where rel.medicare_status_code is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.patient_id) as denominator\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\" as rel\n         left join \"synthea\".\"data_quality\".\"_value_set_test_catalog\" as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__eligibility'\n           and cat.test_field = 'original_reason_entitlement_code'\n    where rel.original_reason_entitlement_code is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.patient_id) as denominator\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\" as rel\n         left join \"synthea\".\"data_quality\".\"_value_set_test_catalog\" as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__eligibility'\n           and cat.test_field = 'payer_type'\n    where rel.payer_type is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.patient_id) as denominator\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\" as rel\n         left join \"synthea\".\"data_quality\".\"_value_set_test_catalog\" as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__eligibility'\n           and cat.test_field = 'race'\n    where rel.race is not null\n    group by cat.test_name\n    \n\n)\n\nselect * from all_denominator\nunion all\nselect * from invalid_value_denominators", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_eligibility_denominators\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:54.562196Z", "completed_at": "2024-02-18T04:24:54.573693Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:54.577060Z", "completed_at": "2024-02-18T04:24:54.642786Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08588433265686035, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates", "compiled": true, "compiled_code": "\n\nwith eligibility as (\n\n    select\n          patient_id\n        , member_id\n        , payer\n        , plan\n        , enrollment_start_date\n        , enrollment_end_date\n        , data_source\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\nselect distinct\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'patient_id' as grain\n    , patient_id\n    , data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom eligibility\n     left join test_catalog\n       on test_catalog.test_name = 'duplicate eligibility'\n       and test_catalog.source_table = 'normalized_input__eligibility'\ngroup by\n      eligibility.patient_id\n    , eligibility.member_id\n    , eligibility.payer\n    , eligibility.plan\n    , eligibility.enrollment_start_date\n    , eligibility.enrollment_end_date\n    , eligibility.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\nhaving count(*) > 1", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_eligibility_duplicates\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:54.676932Z", "completed_at": "2024-02-18T04:24:54.702319Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:54.703916Z", "completed_at": "2024-02-18T04:24:54.888238Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.22495675086975098, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values", "compiled": true, "compiled_code": "\n\nwith eligiblity as (\n\n    select *\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\n, valid_gender as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.gender\n        , count(eligiblity.gender) as filled_row_count\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from eligiblity\n         left join \"synthea\".\"terminology\".\"gender\" gender\n           on eligiblity.gender = gender.gender\n         left join test_catalog\n           on test_catalog.test_name = 'gender invalid'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    where gender.gender is null\n    and eligiblity.gender is not null\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.gender\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_race as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.race\n        , count(eligiblity.race) as filled_row_count\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from eligiblity\n         left join \"synthea\".\"terminology\".\"race\" race\n           on eligiblity.race = race.description\n         left join test_catalog\n           on test_catalog.test_name = 'race invalid'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    where race.description is null\n    and eligiblity.race is not null\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.race\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_payer_type as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.payer_type\n        , count(eligiblity.payer_type) as filled_row_count\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from eligiblity\n         left join \"synthea\".\"terminology\".\"payer_type\" payer\n           on eligiblity.payer_type = payer.payer_type\n         left join test_catalog\n           on test_catalog.test_name = 'payer_type invalid'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    where payer.payer_type is null\n    and eligiblity.payer_type is not null\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.payer_type\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_orec as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.original_reason_entitlement_code\n        , count(eligiblity.original_reason_entitlement_code) as filled_row_count\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from eligiblity\n         left join \"synthea\".\"terminology\".\"medicare_orec\" orec\n           on eligiblity.original_reason_entitlement_code = orec.original_reason_entitlement_code\n         left join test_catalog\n           on test_catalog.test_name = 'original_reason_entitlement_code invalid'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    where orec.original_reason_entitlement_code is null\n    and eligiblity.original_reason_entitlement_code is not null\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.original_reason_entitlement_code\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_dual_status_code as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.dual_status_code\n        , count(eligiblity.dual_status_code) as filled_row_count\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from eligiblity\n         left join \"synthea\".\"terminology\".\"medicare_dual_eligibility\" dual\n           on eligiblity.dual_status_code = dual.dual_status_code\n         left join test_catalog\n           on test_catalog.test_name = 'dual_status_code invalid'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    where dual.dual_status_code is null\n    and eligiblity.dual_status_code is not null\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.dual_status_code\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_medicare_status_code as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.medicare_status_code\n        , count(eligiblity.medicare_status_code) as filled_row_count\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from eligiblity\n         left join \"synthea\".\"terminology\".\"medicare_status\" status\n           on eligiblity.medicare_status_code = status.medicare_status_code\n         left join test_catalog\n           on test_catalog.test_name = 'medicare_status_code invalid'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    where status.medicare_status_code is null\n    and eligiblity.medicare_status_code is not null\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.medicare_status_code\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\nselect * from valid_gender\nunion all\nselect * from valid_race\nunion all\nselect * from valid_payer_type\nunion all\nselect * from valid_orec\nunion all\nselect * from valid_dual_status_code\nunion all\nselect * from valid_medicare_status_code", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_eligibility_invalid_values\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:54.923728Z", "completed_at": "2024-02-18T04:24:54.942253Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:54.945497Z", "completed_at": "2024-02-18T04:24:55.065063Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.149247407913208, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values", "compiled": true, "compiled_code": "\n\nwith eligibility_missing as (\n\n \n        select\n              patient_id\n            , data_source\n            , 'patient_id' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where patient_id is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'member_id' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where member_id is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'gender' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where gender is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'race' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where race is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'birth_date' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where birth_date is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'death_date' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where death_date is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'death_flag' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where death_flag is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'enrollment_start_date' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where enrollment_start_date is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'enrollment_end_date' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where enrollment_end_date is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'payer' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where payer is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'payer_type' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where payer_type is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'dual_status_code' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where dual_status_code is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'medicare_status_code' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where medicare_status_code is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'first_name' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where first_name is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'last_name' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where last_name is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'address' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where address is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'city' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where city is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'state' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where state is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'zip_code' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where zip_code is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'phone' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where phone is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'data_source' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where data_source is null\n        \n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\nselect\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'patient_id' as grain\n    , eligibility_missing.patient_id\n    , eligibility_missing.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom eligibility_missing\n     left join test_catalog\n       on test_catalog.test_name = eligibility_missing.column_checked||' missing'\n       and test_catalog.source_table = 'normalized_input__eligibility'\ngroup by\n      eligibility_missing.patient_id\n    , eligibility_missing.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_eligibility_missing_values\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:55.085822Z", "completed_at": "2024-02-18T04:24:55.110880Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:55.112496Z", "completed_at": "2024-02-18T04:24:55.187606Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1092383861541748, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility", "compiled": true, "compiled_code": "\n\nwith eligiblity as (\n\n    select *\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\n, multiple_genders_test as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from eligiblity\n         left join test_catalog\n           on test_catalog.test_name = 'multiple genders'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n    having count(distinct eligiblity.gender) > 1\n\n)\n\n, multiple_races_test as(\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from eligiblity\n         left join test_catalog\n           on test_catalog.test_name = 'multiple races'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n    having count(distinct eligiblity.race) > 1\n\n)\n\n, multiple_birth_dates_test as(\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from eligiblity\n         left join test_catalog\n           on test_catalog.test_name = 'multiple birth dates'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n    having count(distinct eligiblity.birth_date) > 1\n\n)\n\n, multiple_death_dates_test as(\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from eligiblity\n         left join test_catalog\n           on test_catalog.test_name = 'multiple death dates'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n    having count(distinct eligiblity.death_date) > 1\n\n)\n\n, birth_date_after_death_date as(\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from eligiblity\n         left join test_catalog\n           on test_catalog.test_name = 'birth date after death date'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    where eligiblity.birth_date > eligiblity.death_date\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\nselect * from multiple_genders_test\nunion all\nselect * from multiple_races_test\nunion all\nselect * from multiple_birth_dates_test\nunion all\nselect * from multiple_death_dates_test\nunion all\nselect * from birth_date_after_death_date", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_eligibility_plausibility\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:55.226339Z", "completed_at": "2024-02-18T04:24:55.252268Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:55.257651Z", "completed_at": "2024-02-18T04:24:55.378303Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.16234397888183594, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_present_on_admit_final", "compiled": true, "compiled_code": "\n\nselect\n    claim_id\n    , data_source\n    , max(case when column_name = 'DIAGNOSIS_POA_1' then normalized_code else null end) as diagnosis_poa_1\n    , max(case when column_name = 'DIAGNOSIS_POA_2' then normalized_code else null end) as diagnosis_poa_2\n    , max(case when column_name = 'DIAGNOSIS_POA_3' then normalized_code else null end) as diagnosis_poa_3\n    , max(case when column_name = 'DIAGNOSIS_POA_4' then normalized_code else null end) as diagnosis_poa_4\n    , max(case when column_name = 'DIAGNOSIS_POA_5' then normalized_code else null end) as diagnosis_poa_5\n    , max(case when column_name = 'DIAGNOSIS_POA_6' then normalized_code else null end) as diagnosis_poa_6\n    , max(case when column_name = 'DIAGNOSIS_POA_7' then normalized_code else null end) as diagnosis_poa_7\n    , max(case when column_name = 'DIAGNOSIS_POA_8' then normalized_code else null end) as diagnosis_poa_8\n    , max(case when column_name = 'DIAGNOSIS_POA_9' then normalized_code else null end) as diagnosis_poa_9\n    , max(case when column_name = 'DIAGNOSIS_POA_10' then normalized_code else null end) as diagnosis_poa_10\n    , max(case when column_name = 'DIAGNOSIS_POA_11' then normalized_code else null end) as diagnosis_poa_11\n    , max(case when column_name = 'DIAGNOSIS_POA_12' then normalized_code else null end) as diagnosis_poa_12\n    , max(case when column_name = 'DIAGNOSIS_POA_13' then normalized_code else null end) as diagnosis_poa_13\n    , max(case when column_name = 'DIAGNOSIS_POA_14' then normalized_code else null end) as diagnosis_poa_14\n    , max(case when column_name = 'DIAGNOSIS_POA_15' then normalized_code else null end) as diagnosis_poa_15\n    , max(case when column_name = 'DIAGNOSIS_POA_16' then normalized_code else null end) as diagnosis_poa_16\n    , max(case when column_name = 'DIAGNOSIS_POA_17' then normalized_code else null end) as diagnosis_poa_17\n    , max(case when column_name = 'DIAGNOSIS_POA_18' then normalized_code else null end) as diagnosis_poa_18\n    , max(case when column_name = 'DIAGNOSIS_POA_19' then normalized_code else null end) as diagnosis_poa_19\n    , max(case when column_name = 'DIAGNOSIS_POA_20' then normalized_code else null end) as diagnosis_poa_20\n    , max(case when column_name = 'DIAGNOSIS_POA_21' then normalized_code else null end) as diagnosis_poa_21\n    , max(case when column_name = 'DIAGNOSIS_POA_22' then normalized_code else null end) as diagnosis_poa_22\n    , max(case when column_name = 'DIAGNOSIS_POA_23' then normalized_code else null end) as diagnosis_poa_23\n    , max(case when column_name = 'DIAGNOSIS_POA_24' then normalized_code else null end) as diagnosis_poa_24\n    , max(case when column_name = 'DIAGNOSIS_POA_25' then normalized_code else null end) as diagnosis_poa_25\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_present_on_admit_voting\"\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)\ngroup by\n    claim_id\n    , data_source", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_present_on_admit_final\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:55.418998Z", "completed_at": "2024-02-18T04:24:55.449206Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:55.450930Z", "completed_at": "2024-02-18T04:24:55.532254Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13016200065612793, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_procedure_code_final", "compiled": true, "compiled_code": "\n\nselect\n    claim_id\n    , data_source\n    , max(case when lower(column_name) = 'procedure_code_1' then normalized_code else null end) as procedure_code_1\n    , max(case when lower(column_name) = 'procedure_code_2' then normalized_code else null end) as procedure_code_2\n    , max(case when lower(column_name) = 'procedure_code_3' then normalized_code else null end) as procedure_code_3\n    , max(case when lower(column_name) = 'procedure_code_4' then normalized_code else null end) as procedure_code_4\n    , max(case when lower(column_name) = 'procedure_code_5' then normalized_code else null end) as procedure_code_5\n    , max(case when lower(column_name) = 'procedure_code_6' then normalized_code else null end) as procedure_code_6\n    , max(case when lower(column_name) = 'procedure_code_7' then normalized_code else null end) as procedure_code_7\n    , max(case when lower(column_name) = 'procedure_code_8' then normalized_code else null end) as procedure_code_8\n    , max(case when lower(column_name) = 'procedure_code_9' then normalized_code else null end) as procedure_code_9\n    , max(case when lower(column_name) = 'procedure_code_10' then normalized_code else null end) as procedure_code_10\n    , max(case when lower(column_name) = 'procedure_code_11' then normalized_code else null end) as procedure_code_11\n    , max(case when lower(column_name) = 'procedure_code_12' then normalized_code else null end) as procedure_code_12\n    , max(case when lower(column_name) = 'procedure_code_13' then normalized_code else null end) as procedure_code_13\n    , max(case when lower(column_name) = 'procedure_code_14' then normalized_code else null end) as procedure_code_14\n    , max(case when lower(column_name) = 'procedure_code_15' then normalized_code else null end) as procedure_code_15\n    , max(case when lower(column_name) = 'procedure_code_16' then normalized_code else null end) as procedure_code_16\n    , max(case when lower(column_name) = 'procedure_code_17' then normalized_code else null end) as procedure_code_17\n    , max(case when lower(column_name) = 'procedure_code_18' then normalized_code else null end) as procedure_code_18\n    , max(case when lower(column_name) = 'procedure_code_19' then normalized_code else null end) as procedure_code_19\n    , max(case when lower(column_name) = 'procedure_code_20' then normalized_code else null end) as procedure_code_20\n    , max(case when lower(column_name) = 'procedure_code_21' then normalized_code else null end) as procedure_code_21\n    , max(case when lower(column_name) = 'procedure_code_22' then normalized_code else null end) as procedure_code_22\n    , max(case when lower(column_name) = 'procedure_code_23' then normalized_code else null end) as procedure_code_23\n    , max(case when lower(column_name) = 'procedure_code_24' then normalized_code else null end) as procedure_code_24\n    , max(case when lower(column_name) = 'procedure_code_14' then normalized_code else null end) as procedure_code_25\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_procedure_code_voting\"\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)\ngroup by\n    claim_id\n    , data_source", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_procedure_code_final\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:55.542066Z", "completed_at": "2024-02-18T04:24:55.560167Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:55.561929Z", "completed_at": "2024-02-18T04:24:55.705797Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.16792011260986328, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_procedure_date_final", "compiled": true, "compiled_code": "\n\nselect\n    claim_id\n    , data_source\n    , max(case when lower(column_name) = 'procedure_date_1' then normalized_code else null end) as procedure_date_1\n    , max(case when lower(column_name) = 'procedure_date_2' then normalized_code else null end) as procedure_date_2\n    , max(case when lower(column_name) = 'procedure_date_3' then normalized_code else null end) as procedure_date_3\n    , max(case when lower(column_name) = 'procedure_date_4' then normalized_code else null end) as procedure_date_4\n    , max(case when lower(column_name) = 'procedure_date_5' then normalized_code else null end) as procedure_date_5\n    , max(case when lower(column_name) = 'procedure_date_6' then normalized_code else null end) as procedure_date_6\n    , max(case when lower(column_name) = 'procedure_date_7' then normalized_code else null end) as procedure_date_7\n    , max(case when lower(column_name) = 'procedure_date_8' then normalized_code else null end) as procedure_date_8\n    , max(case when lower(column_name) = 'procedure_date_9' then normalized_code else null end) as procedure_date_9\n    , max(case when lower(column_name) = 'procedure_date_10' then normalized_code else null end) as procedure_date_10\n    , max(case when lower(column_name) = 'procedure_date_11' then normalized_code else null end) as procedure_date_11\n    , max(case when lower(column_name) = 'procedure_date_12' then normalized_code else null end) as procedure_date_12\n    , max(case when lower(column_name) = 'procedure_date_13' then normalized_code else null end) as procedure_date_13\n    , max(case when lower(column_name) = 'procedure_date_14' then normalized_code else null end) as procedure_date_14\n    , max(case when lower(column_name) = 'procedure_date_15' then normalized_code else null end) as procedure_date_15\n    , max(case when lower(column_name) = 'procedure_date_16' then normalized_code else null end) as procedure_date_16\n    , max(case when lower(column_name) = 'procedure_date_17' then normalized_code else null end) as procedure_date_17\n    , max(case when lower(column_name) = 'procedure_date_18' then normalized_code else null end) as procedure_date_18\n    , max(case when lower(column_name) = 'procedure_date_19' then normalized_code else null end) as procedure_date_19\n    , max(case when lower(column_name) = 'procedure_date_20' then normalized_code else null end) as procedure_date_20\n    , max(case when lower(column_name) = 'procedure_date_21' then normalized_code else null end) as procedure_date_21\n    , max(case when lower(column_name) = 'procedure_date_22' then normalized_code else null end) as procedure_date_22\n    , max(case when lower(column_name) = 'procedure_date_23' then normalized_code else null end) as procedure_date_23\n    , max(case when lower(column_name) = 'procedure_date_24' then normalized_code else null end) as procedure_date_24\n    , max(case when lower(column_name) = 'procedure_date_14' then normalized_code else null end) as procedure_date_25\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_procedure_date_voting\"\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)\ngroup by\n    claim_id\n    , data_source", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_procedure_date_final\""}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:55.721996Z", "completed_at": "2024-02-18T04:24:55.750644Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:55.752679Z", "completed_at": "2024-02-18T04:24:55.788425Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07267951965332031, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      patient_id\n    , observation_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"core\".\"observation\"\n\n\n) select patient_id\nfrom __dbt__cte__quality_measures__stg_core__observation\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:55.807881Z", "completed_at": "2024-02-18T04:24:55.814984Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:55.816774Z", "completed_at": "2024-02-18T04:24:55.983772Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1905989646911621, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility", "compiled": true, "compiled_code": "\n\n\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , patient_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_eligibility_duplicates\"\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , patient_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_eligibility_missing_values\"\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , patient_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_eligibility_invalid_values\"\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , patient_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_eligibility_plausibility\"", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_test_detail_stage_eligibility\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:49.210982Z", "completed_at": "2024-02-18T04:24:49.216732Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:49.218336Z", "completed_at": "2024-02-18T04:24:58.382652Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 9.175639152526855, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__medication", "compiled": true, "compiled_code": "\n\n\nselect * from \"synthea\".\"core\".\"_stg_clinical_medication\"", "relation_name": "\"synthea\".\"core\".\"medication\""}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:58.450913Z", "completed_at": "2024-02-18T04:24:58.471645Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:58.474996Z", "completed_at": "2024-02-18T04:24:58.499303Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0677633285522461, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__quality_measures__stg_core__medication as (\n\n\nselect\n      patient_id\n    , dispensing_date\n    , source_code_type\n    , source_code\n    , ndc_code\n    , rxnorm_code\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"core\".\"medication\"\n\n\n) select patient_id\nfrom __dbt__cte__quality_measures__stg_core__medication\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:50.471888Z", "completed_at": "2024-02-18T04:24:50.488647Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:50.490020Z", "completed_at": "2024-02-18T04:24:58.713687Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 8.244505167007446, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__pharmacy_claim", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_pharmacy_claim as (\n\n\n\nselect\n      claim_id\n    , claim_line_number\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , prescribing_provider_npi\n    , dispensing_provider_npi\n    , dispensing_date\n    , ndc_code\n    , quantity\n    , days_supply\n    , refills\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"pharmacy_claim\"\n) select\n      cast(claim_id as TEXT ) as claim_id\n    , cast(claim_line_number as int ) as claim_line_number\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(member_id as TEXT ) as member_id\n    , cast(payer as TEXT ) as payer\n    , cast(plan as TEXT ) as plan\n    , cast(prescribing_provider_npi as TEXT ) as prescribing_provider_npi\n    , cast(dispensing_provider_npi as TEXT ) as dispensing_provider_npi\n    , cast(dispensing_date as date ) as dispensing_date\n    , cast(ndc_code as TEXT ) as ndc_code\n    , cast(quantity as int ) as quantity\n    , cast(days_supply as int ) as days_supply\n    , cast(refills as int ) as refills\n    , cast(paid_date as date ) as paid_date\n    , cast(paid_amount as numeric(28,6) ) as paid_amount\n    , cast(allowed_amount as numeric(28,6) ) as allowed_amount\n    , cast(coinsurance_amount as numeric(28,6) ) as coinsurance_amount\n    , cast(copayment_amount as numeric(28,6) ) as copayment_amount\n    , cast(deductible_amount as numeric(28,6) ) as deductible_amount\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-18 04:24:25.074170+00:00' as TEXT ) as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_pharmacy_claim", "relation_name": "\"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:58.734281Z", "completed_at": "2024-02-18T04:24:58.771112Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:58.784755Z", "completed_at": "2024-02-18T04:24:58.853778Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.13506245613098145, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers", "compiled": true, "compiled_code": "\n\nwith pharmacy_claim as (\n\n    select\n          claim_id\n        , claim_line_number\n        , data_source\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\n, add_row_num as (\n\n    select\n          claim_id\n        , data_source\n        , claim_line_number\n        , row_number() over (\n            partition by claim_id, data_source\n            order by claim_line_number\n          ) as expected_line_number\n    from pharmacy_claim\n\n)\n\n, line_num_check as (\n\n    select\n          add_row_num.claim_id\n        , add_row_num.data_source\n        , add_row_num.claim_line_number\n        , add_row_num.expected_line_number\n    from add_row_num\n         left join pharmacy_claim\n           on add_row_num.claim_id = pharmacy_claim.claim_id\n           and add_row_num.data_source = pharmacy_claim.data_source\n           and add_row_num.expected_line_number = pharmacy_claim.claim_line_number\n    where pharmacy_claim.claim_line_number is null\n\n)\n\nselect\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , line_num_check.claim_id\n    , line_num_check.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom line_num_check\n     left join test_catalog\n       on test_catalog.test_name = 'claim_line_number non-sequential'\n       and test_catalog.source_table = 'normalized_input__pharmacy_claim'\ngroup by\n      line_num_check.claim_id\n    , line_num_check.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_pharmacy_claim_line_numbers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:58.727325Z", "completed_at": "2024-02-18T04:24:58.748414Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:58.759580Z", "completed_at": "2024-02-18T04:24:58.869008Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1531686782836914, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates", "compiled": true, "compiled_code": "\n\nwith test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\nselect distinct\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , claim_id\n    , data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n     left join test_catalog\n       on test_catalog.test_name = 'duplicate pharmacy claims'\n       and test_catalog.source_table = 'normalized_input__pharmacy_claim'\ngroup by\n      claim_id\n    , claim_line_number\n    , data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\nhaving count(*) > 1", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_pharmacy_claim_duplicates\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:58.739741Z", "completed_at": "2024-02-18T04:24:58.770566Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:58.781422Z", "completed_at": "2024-02-18T04:24:58.891838Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.16807842254638672, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values", "compiled": true, "compiled_code": "\n\nwith pharmacy_claim_missing as (\n\n \n        select\n              claim_id\n            , data_source\n            , 'claim_id' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where claim_id is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'claim_line_number' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where claim_line_number is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'patient_id' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where patient_id is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'member_id' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where member_id is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'payer' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where payer is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'plan' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where plan is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'prescribing_provider_npi' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where prescribing_provider_npi is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'dispensing_provider_npi' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where dispensing_provider_npi is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'dispensing_date' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where dispensing_date is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'ndc_code' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where ndc_code is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'quantity' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where quantity is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'days_supply' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where days_supply is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'refills' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where refills is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'paid_date' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where paid_date is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'paid_amount' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where paid_amount is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'allowed_amount' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where allowed_amount is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'data_source' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where data_source is null\n        \n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\nselect\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , pharmacy_claim_missing.claim_id\n    , pharmacy_claim_missing.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom pharmacy_claim_missing\n     left join test_catalog\n       on test_catalog.test_name = pharmacy_claim_missing.column_checked||' missing'\n       and test_catalog.source_table = 'normalized_input__pharmacy_claim'\ngroup by\n      pharmacy_claim_missing.claim_id\n    , pharmacy_claim_missing.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_pharmacy_claim_missing_values\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:58.873641Z", "completed_at": "2024-02-18T04:24:58.883790Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:58.885494Z", "completed_at": "2024-02-18T04:24:58.919660Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.05016970634460449, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details", "compiled": true, "compiled_code": "\n\nwith pharmacy_header_duplicates as (\n\n \n        select\n              claim_id\n            , data_source\n            , 'claim_id' as column_checked\n            , count(distinct claim_id) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        group by claim_id, data_source\n        having count(distinct claim_id) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'patient_id' as column_checked\n            , count(distinct patient_id) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        group by claim_id, data_source\n        having count(distinct patient_id) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'member_id' as column_checked\n            , count(distinct member_id) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        group by claim_id, data_source\n        having count(distinct member_id) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'payer' as column_checked\n            , count(distinct payer) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        group by claim_id, data_source\n        having count(distinct payer) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'plan' as column_checked\n            , count(distinct plan) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        group by claim_id, data_source\n        having count(distinct plan) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'data_source' as column_checked\n            , count(distinct data_source) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        group by claim_id, data_source\n        having count(distinct data_source) > 1\n        \n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n        , claim_type\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\nselect\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , pharmacy_header_duplicates.claim_id\n    , pharmacy_header_duplicates.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom pharmacy_header_duplicates\n     left join test_catalog\n       on test_catalog.test_name = pharmacy_header_duplicates.column_checked||' non-unique'\n       and test_catalog.source_table = 'normalized_input__pharmacy_claim'\ngroup by \n      pharmacy_header_duplicates.claim_id\n    , pharmacy_header_duplicates.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_pharmacy_header_fail_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:58.925146Z", "completed_at": "2024-02-18T04:24:58.929369Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:58.930336Z", "completed_at": "2024-02-18T04:24:58.965697Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.043025970458984375, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim", "compiled": true, "compiled_code": "\n\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_pharmacy_claim_duplicates\"\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_pharmacy_claim_missing_values\"\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_pharmacy_header_fail_details\"\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_pharmacy_claim_line_numbers\"", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_test_detail_stage_pharmacy_claim\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:31.635826Z", "completed_at": "2024-02-18T04:24:31.689621Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:31.692436Z", "completed_at": "2024-02-18T04:24:59.503061Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 28.257421493530273, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_diagnosis_code_normalize", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n), pivot_diagnosis as(\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_1'  as diagnosis_column\n        ,  diagnosis_code_1  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_2'  as diagnosis_column\n        ,  diagnosis_code_2  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_3'  as diagnosis_column\n        ,  diagnosis_code_3  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_4'  as diagnosis_column\n        ,  diagnosis_code_4  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_5'  as diagnosis_column\n        ,  diagnosis_code_5  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_6'  as diagnosis_column\n        ,  diagnosis_code_6  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_7'  as diagnosis_column\n        ,  diagnosis_code_7  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_8'  as diagnosis_column\n        ,  diagnosis_code_8  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_9'  as diagnosis_column\n        ,  diagnosis_code_9  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_10'  as diagnosis_column\n        ,  diagnosis_code_10  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_11'  as diagnosis_column\n        ,  diagnosis_code_11  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_12'  as diagnosis_column\n        ,  diagnosis_code_12  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_13'  as diagnosis_column\n        ,  diagnosis_code_13  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_14'  as diagnosis_column\n        ,  diagnosis_code_14  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_15'  as diagnosis_column\n        ,  diagnosis_code_15  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_16'  as diagnosis_column\n        ,  diagnosis_code_16  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_17'  as diagnosis_column\n        ,  diagnosis_code_17  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_18'  as diagnosis_column\n        ,  diagnosis_code_18  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_19'  as diagnosis_column\n        ,  diagnosis_code_19  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_20'  as diagnosis_column\n        ,  diagnosis_code_20  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_21'  as diagnosis_column\n        ,  diagnosis_code_21  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_22'  as diagnosis_column\n        ,  diagnosis_code_22  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_23'  as diagnosis_column\n        ,  diagnosis_code_24  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_24'  as diagnosis_column\n        ,  diagnosis_code_24  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_25'  as diagnosis_column\n        ,  diagnosis_code_25  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n)\n\nselect\n    claim_id\n    , data_source\n    , diagnosis_code_type\n    , diagnosis_column\n    , coalesce(icd_9.icd_9_cm,icd_10.icd_10_cm) as normalized_diagnosis_code\n    , count(*) as diagnosis_code_occurrence_count\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom pivot_diagnosis piv\nleft join \"synthea\".\"terminology\".\"icd_10_cm\" icd_10\n    on replace(piv.diagnosis_code,'.','') = icd_10.icd_10_cm\n    and piv.diagnosis_code_type = 'icd-10-cm'\nleft join \"synthea\".\"terminology\".\"icd_9_cm\" icd_9\n    on replace(piv.diagnosis_code,'.','') = icd_9.icd_9_cm\n    and piv.diagnosis_code_type = 'icd-9-cm'\nwhere claim_type <> 'undetermined'\ngroup by \n    claim_id\n    , data_source\n    , diagnosis_code_type\n    , diagnosis_column\n    , coalesce(icd_9.icd_9_cm,icd_10.icd_10_cm)", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_diagnosis_code_normalize\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:24:59.885087Z", "completed_at": "2024-02-18T04:24:59.890765Z"}, {"name": "execute", "started_at": "2024-02-18T04:24:59.891737Z", "completed_at": "2024-02-18T04:25:00.142971Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.42106080055236816, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_diagnosis_code_voting", "compiled": true, "compiled_code": "\n\nwith distinct_count as(\n    select\n        claim_id\n        , data_source\n        , diagnosis_column\n        , count(*) as distinct_count\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_diagnosis_code_normalize\"\n    group by\n        claim_id\n        , data_source\n        , diagnosis_column\n)\n\nselect \n    norm.claim_id\n    , norm.data_source\n    , norm.diagnosis_column as column_name\n    , norm.normalized_diagnosis_code as normalized_code\n    , norm.diagnosis_code_occurrence_count as occurrence_count\n    , coalesce(lead(diagnosis_code_occurrence_count) \n        over (partition by norm.claim_id, norm.data_source, norm.diagnosis_column order by diagnosis_code_occurrence_count desc),0) as next_occurrence_count\n    , row_number() over (partition by norm.claim_id, norm.data_source, norm.diagnosis_column order by diagnosis_code_occurrence_count desc) as occurrence_row_count\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_diagnosis_code_normalize\" norm\ninner join distinct_count dist\n    on norm.claim_id = dist.claim_id\n    and norm.data_source = dist.data_source\n    and norm.diagnosis_column = dist.diagnosis_column", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_diagnosis_code_voting\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:00.309504Z", "completed_at": "2024-02-18T04:25:00.314741Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:00.315749Z", "completed_at": "2024-02-18T04:25:00.406213Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.19865775108337402, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_diagnosis_code_final", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , max(case when lower(column_name) = 'diagnosis_code_1' then normalized_code else null end) as diagnosis_code_1\n    , max(case when lower(column_name) = 'diagnosis_code_2' then normalized_code else null end) as diagnosis_code_2\n    , max(case when lower(column_name) = 'diagnosis_code_3' then normalized_code else null end) as diagnosis_code_3\n    , max(case when lower(column_name) = 'diagnosis_code_4' then normalized_code else null end) as diagnosis_code_4\n    , max(case when lower(column_name) = 'diagnosis_code_5' then normalized_code else null end) as diagnosis_code_5\n    , max(case when lower(column_name) = 'diagnosis_code_6' then normalized_code else null end) as diagnosis_code_6\n    , max(case when lower(column_name) = 'diagnosis_code_7' then normalized_code else null end) as diagnosis_code_7\n    , max(case when lower(column_name) = 'diagnosis_code_8' then normalized_code else null end) as diagnosis_code_8\n    , max(case when lower(column_name) = 'diagnosis_code_9' then normalized_code else null end) as diagnosis_code_9\n    , max(case when lower(column_name) = 'diagnosis_code_10' then normalized_code else null end) as diagnosis_code_10\n    , max(case when lower(column_name) = 'diagnosis_code_11' then normalized_code else null end) as diagnosis_code_11\n    , max(case when lower(column_name) = 'diagnosis_code_12' then normalized_code else null end) as diagnosis_code_12\n    , max(case when lower(column_name) = 'diagnosis_code_13' then normalized_code else null end) as diagnosis_code_13\n    , max(case when lower(column_name) = 'diagnosis_code_14' then normalized_code else null end) as diagnosis_code_14\n    , max(case when lower(column_name) = 'diagnosis_code_15' then normalized_code else null end) as diagnosis_code_15\n    , max(case when lower(column_name) = 'diagnosis_code_16' then normalized_code else null end) as diagnosis_code_16\n    , max(case when lower(column_name) = 'diagnosis_code_17' then normalized_code else null end) as diagnosis_code_17\n    , max(case when lower(column_name) = 'diagnosis_code_18' then normalized_code else null end) as diagnosis_code_18\n    , max(case when lower(column_name) = 'diagnosis_code_19' then normalized_code else null end) as diagnosis_code_19\n    , max(case when lower(column_name) = 'diagnosis_code_20' then normalized_code else null end) as diagnosis_code_20\n    , max(case when lower(column_name) = 'diagnosis_code_21' then normalized_code else null end) as diagnosis_code_21\n    , max(case when lower(column_name) = 'diagnosis_code_22' then normalized_code else null end) as diagnosis_code_22\n    , max(case when lower(column_name) = 'diagnosis_code_23' then normalized_code else null end) as diagnosis_code_23\n    , max(case when lower(column_name) = 'diagnosis_code_24' then normalized_code else null end) as diagnosis_code_24\n    , max(case when lower(column_name) = 'diagnosis_code_25' then normalized_code else null end) as diagnosis_code_25\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_diagnosis_code_voting\"\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)\ngroup by\n    claim_id\n    , data_source", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_diagnosis_code_final\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:00.511234Z", "completed_at": "2024-02-18T04:25:00.652021Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:00.652920Z", "completed_at": "2024-02-18T04:25:06.151842Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 5.715868234634399, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__medical_claim", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n) select\n\tcast(med.claim_id as TEXT ) as claim_id\n\t, cast(med.claim_line_number as int ) as claim_line_number\n\t, cast(med.claim_type as TEXT ) as claim_type\n\t, cast(med.patient_id as TEXT ) as patient_id\n\t, cast(med.member_id as TEXT ) as member_id\n\t, cast(med.payer as TEXT ) as payer\n\t, cast(med.plan as TEXT ) as plan\n\t, cast(coalesce(dates.minimum_claim_start_date, undetermined.claim_start_date) as date ) as claim_start_date\n\t, cast(coalesce(dates.maximum_claim_end_date, undetermined.claim_start_date) as date ) as claim_end_date\n\t, cast(coalesce(claim_line_dates.normalized_claim_line_start_date, undetermined.claim_line_start_date) as date ) as claim_line_start_date\n\t, cast(coalesce(claim_line_dates.normalized_claim_line_end_date, undetermined.claim_line_end_date) as date ) as claim_line_end_date\n\t, cast(coalesce(dates.minimum_admission_date, undetermined.admission_date) as date ) as admission_date\n\t, cast(coalesce(dates.maximum_discharge_date, undetermined.discharge_date) as date ) as discharge_date\n\t, cast(coalesce(ad_source.normalized_code, undetermined.admit_source_code) as TEXT ) as admit_source_code\n\t, cast(coalesce(ad_type.normalized_code, undetermined.admit_type_code) as TEXT ) as admit_type_code\n\t, cast(coalesce(disch_disp.normalized_code, undetermined.discharge_disposition_code) as TEXT ) as discharge_disposition_code\n\t, cast(coalesce(pos.normalized_code, undetermined.place_of_service_code) as TEXT ) as place_of_service_code\n\t, cast(coalesce(bill.normalized_code, undetermined.bill_type_code) as TEXT ) as bill_type_code\n\t, cast(coalesce(ms.normalized_code, undetermined.ms_drg_code) as TEXT ) as ms_drg_code\n\t, cast(coalesce(apr.normalized_code, undetermined.apr_drg_code) as TEXT ) as apr_drg_code\n\t, cast(coalesce(rev.normalized_code, undetermined.revenue_center_code) as TEXT ) as revenue_center_code\n\t, cast(med.service_unit_quantity as TEXT ) as service_unit_quantity\n\t, cast(med.hcpcs_code as TEXT ) as hcpcs_code\n\t, cast(med.hcpcs_modifier_1 as TEXT ) as hcpcs_modifier_1\n\t, cast(med.hcpcs_modifier_2 as TEXT ) as hcpcs_modifier_2\n\t, cast(med.hcpcs_modifier_3 as TEXT ) as hcpcs_modifier_3\n\t, cast(med.hcpcs_modifier_4 as TEXT ) as hcpcs_modifier_4\n\t, cast(med.hcpcs_modifier_5 as TEXT ) as hcpcs_modifier_5\n\t, cast(coalesce(med_npi.normalized_rendering_npi, undetermined.rendering_npi) as TEXT ) as rendering_npi\n\t, cast(coalesce(med_npi.normalized_billing_npi, undetermined.billing_npi) as TEXT ) as billing_npi\n\t, cast(coalesce(med_npi.normalized_facility_npi, undetermined.facility_npi) as TEXT ) as facility_npi\n\t, cast(med.paid_date as date ) as paid_date\n\t, cast(med.paid_amount as numeric(28,6) ) as paid_amount\n\t, cast(med.allowed_amount as numeric(28,6) ) as allowed_amount\n\t, cast(med.charge_amount as numeric(28,6) ) as charge_amount\n\t, cast(med.coinsurance_amount as numeric(28,6) ) as coinsurance_amount\n\t, cast(med.copayment_amount as numeric(28,6) ) as copayment_amount\n\t, cast(med.deductible_amount as numeric(28,6) ) as deductible_amount\n\t, cast(med.total_cost_amount as numeric(28,6) ) as total_cost_amount\n\t, cast(med.diagnosis_code_type as TEXT ) as diagnosis_code_type\n\t, cast(coalesce(dx_code.diagnosis_code_1, undetermined.diagnosis_code_1) as TEXT ) as diagnosis_code_1\n\t, cast(coalesce(dx_code.diagnosis_code_2, undetermined.diagnosis_code_2) as TEXT ) as diagnosis_code_2\n\t, cast(coalesce(dx_code.diagnosis_code_3, undetermined.diagnosis_code_3) as TEXT ) as diagnosis_code_3\n\t, cast(coalesce(dx_code.diagnosis_code_4, undetermined.diagnosis_code_4) as TEXT ) as diagnosis_code_4\n\t, cast(coalesce(dx_code.diagnosis_code_5, undetermined.diagnosis_code_5) as TEXT ) as diagnosis_code_5\n\t, cast(coalesce(dx_code.diagnosis_code_6, undetermined.diagnosis_code_6) as TEXT ) as diagnosis_code_6\n\t, cast(coalesce(dx_code.diagnosis_code_7, undetermined.diagnosis_code_7) as TEXT ) as diagnosis_code_7\n\t, cast(coalesce(dx_code.diagnosis_code_8, undetermined.diagnosis_code_8) as TEXT ) as diagnosis_code_8\n\t, cast(coalesce(dx_code.diagnosis_code_9, undetermined.diagnosis_code_9) as TEXT ) as diagnosis_code_9\n\t, cast(coalesce(dx_code.diagnosis_code_10, undetermined.diagnosis_code_10) as TEXT ) as diagnosis_code_10\n\t, cast(coalesce(dx_code.diagnosis_code_11, undetermined.diagnosis_code_11) as TEXT ) as diagnosis_code_11\n\t, cast(coalesce(dx_code.diagnosis_code_12, undetermined.diagnosis_code_12) as TEXT ) as diagnosis_code_12\n\t, cast(coalesce(dx_code.diagnosis_code_13, undetermined.diagnosis_code_13) as TEXT ) as diagnosis_code_13\n\t, cast(coalesce(dx_code.diagnosis_code_14, undetermined.diagnosis_code_14) as TEXT ) as diagnosis_code_14\n\t, cast(coalesce(dx_code.diagnosis_code_15, undetermined.diagnosis_code_15) as TEXT ) as diagnosis_code_15\n\t, cast(coalesce(dx_code.diagnosis_code_16, undetermined.diagnosis_code_16) as TEXT ) as diagnosis_code_16\n\t, cast(coalesce(dx_code.diagnosis_code_17, undetermined.diagnosis_code_17) as TEXT ) as diagnosis_code_17\n\t, cast(coalesce(dx_code.diagnosis_code_18, undetermined.diagnosis_code_18) as TEXT ) as diagnosis_code_18\n\t, cast(coalesce(dx_code.diagnosis_code_19, undetermined.diagnosis_code_19) as TEXT ) as diagnosis_code_19\n\t, cast(coalesce(dx_code.diagnosis_code_20, undetermined.diagnosis_code_20) as TEXT ) as diagnosis_code_20\n\t, cast(coalesce(dx_code.diagnosis_code_21, undetermined.diagnosis_code_21) as TEXT ) as diagnosis_code_21\n\t, cast(coalesce(dx_code.diagnosis_code_22, undetermined.diagnosis_code_22) as TEXT ) as diagnosis_code_22\n\t, cast(coalesce(dx_code.diagnosis_code_23, undetermined.diagnosis_code_23) as TEXT ) as diagnosis_code_23\n\t, cast(coalesce(dx_code.diagnosis_code_24, undetermined.diagnosis_code_24) as TEXT ) as diagnosis_code_24\n\t, cast(coalesce(dx_code.diagnosis_code_25, undetermined.diagnosis_code_25) as TEXT ) as diagnosis_code_25\n\t, cast(coalesce(poa.diagnosis_poa_1, undetermined.diagnosis_poa_1) as TEXT ) as diagnosis_poa_1\n\t, cast(coalesce(poa.diagnosis_poa_2, undetermined.diagnosis_poa_2) as TEXT ) as diagnosis_poa_2\n\t, cast(coalesce(poa.diagnosis_poa_3, undetermined.diagnosis_poa_3) as TEXT ) as diagnosis_poa_3\n\t, cast(coalesce(poa.diagnosis_poa_4, undetermined.diagnosis_poa_4) as TEXT ) as diagnosis_poa_4\n\t, cast(coalesce(poa.diagnosis_poa_5, undetermined.diagnosis_poa_5) as TEXT ) as diagnosis_poa_5\n\t, cast(coalesce(poa.diagnosis_poa_6, undetermined.diagnosis_poa_6) as TEXT ) as diagnosis_poa_6\n\t, cast(coalesce(poa.diagnosis_poa_7, undetermined.diagnosis_poa_7) as TEXT ) as diagnosis_poa_7\n\t, cast(coalesce(poa.diagnosis_poa_8, undetermined.diagnosis_poa_8) as TEXT ) as diagnosis_poa_8\n\t, cast(coalesce(poa.diagnosis_poa_9, undetermined.diagnosis_poa_9) as TEXT ) as diagnosis_poa_9\n\t, cast(coalesce(poa.diagnosis_poa_10, undetermined.diagnosis_poa_10) as TEXT ) as diagnosis_poa_10\n\t, cast(coalesce(poa.diagnosis_poa_11, undetermined.diagnosis_poa_11) as TEXT ) as diagnosis_poa_11\n\t, cast(coalesce(poa.diagnosis_poa_12, undetermined.diagnosis_poa_12) as TEXT ) as diagnosis_poa_12\n\t, cast(coalesce(poa.diagnosis_poa_13, undetermined.diagnosis_poa_13) as TEXT ) as diagnosis_poa_13\n\t, cast(coalesce(poa.diagnosis_poa_14, undetermined.diagnosis_poa_14) as TEXT ) as diagnosis_poa_14\n\t, cast(coalesce(poa.diagnosis_poa_15, undetermined.diagnosis_poa_15) as TEXT ) as diagnosis_poa_15\n\t, cast(coalesce(poa.diagnosis_poa_16, undetermined.diagnosis_poa_16) as TEXT ) as diagnosis_poa_16\n\t, cast(coalesce(poa.diagnosis_poa_17, undetermined.diagnosis_poa_17) as TEXT ) as diagnosis_poa_17\n\t, cast(coalesce(poa.diagnosis_poa_18, undetermined.diagnosis_poa_18) as TEXT ) as diagnosis_poa_18\n\t, cast(coalesce(poa.diagnosis_poa_19, undetermined.diagnosis_poa_19) as TEXT ) as diagnosis_poa_19\n\t, cast(coalesce(poa.diagnosis_poa_20, undetermined.diagnosis_poa_20) as TEXT ) as diagnosis_poa_20\n\t, cast(coalesce(poa.diagnosis_poa_21, undetermined.diagnosis_poa_21) as TEXT ) as diagnosis_poa_21\n\t, cast(coalesce(poa.diagnosis_poa_22, undetermined.diagnosis_poa_22) as TEXT ) as diagnosis_poa_22\n\t, cast(coalesce(poa.diagnosis_poa_23, undetermined.diagnosis_poa_23) as TEXT ) as diagnosis_poa_23\n\t, cast(coalesce(poa.diagnosis_poa_24, undetermined.diagnosis_poa_24) as TEXT ) as diagnosis_poa_24\n\t, cast(coalesce(poa.diagnosis_poa_25, undetermined.diagnosis_poa_25) as TEXT ) as diagnosis_poa_25\n\t, cast(med.procedure_code_type as TEXT ) as procedure_code_type\n\t, cast(coalesce(px_code.procedure_code_1, undetermined.procedure_code_1) as TEXT ) as procedure_code_1\n\t, cast(coalesce(px_code.procedure_code_2, undetermined.procedure_code_2) as TEXT ) as procedure_code_2\n\t, cast(coalesce(px_code.procedure_code_3, undetermined.procedure_code_3) as TEXT ) as procedure_code_3\n\t, cast(coalesce(px_code.procedure_code_4, undetermined.procedure_code_4) as TEXT ) as procedure_code_4\n\t, cast(coalesce(px_code.procedure_code_5, undetermined.procedure_code_5) as TEXT ) as procedure_code_5\n\t, cast(coalesce(px_code.procedure_code_6, undetermined.procedure_code_6) as TEXT ) as procedure_code_6\n\t, cast(coalesce(px_code.procedure_code_7, undetermined.procedure_code_7) as TEXT ) as procedure_code_7\n\t, cast(coalesce(px_code.procedure_code_8, undetermined.procedure_code_8) as TEXT ) as procedure_code_8\n\t, cast(coalesce(px_code.procedure_code_9, undetermined.procedure_code_9) as TEXT ) as procedure_code_9\n\t, cast(coalesce(px_code.procedure_code_10, undetermined.procedure_code_10) as TEXT ) as procedure_code_10\n\t, cast(coalesce(px_code.procedure_code_11, undetermined.procedure_code_11) as TEXT ) as procedure_code_11\n\t, cast(coalesce(px_code.procedure_code_12, undetermined.procedure_code_12) as TEXT ) as procedure_code_12\n\t, cast(coalesce(px_code.procedure_code_13, undetermined.procedure_code_13) as TEXT ) as procedure_code_13\n\t, cast(coalesce(px_code.procedure_code_14, undetermined.procedure_code_14) as TEXT ) as procedure_code_14\n\t, cast(coalesce(px_code.procedure_code_15, undetermined.procedure_code_15) as TEXT ) as procedure_code_15\n\t, cast(coalesce(px_code.procedure_code_16, undetermined.procedure_code_16) as TEXT ) as procedure_code_16\n\t, cast(coalesce(px_code.procedure_code_17, undetermined.procedure_code_17) as TEXT ) as procedure_code_17\n\t, cast(coalesce(px_code.procedure_code_18, undetermined.procedure_code_18) as TEXT ) as procedure_code_18\n\t, cast(coalesce(px_code.procedure_code_19, undetermined.procedure_code_19) as TEXT ) as procedure_code_19\n\t, cast(coalesce(px_code.procedure_code_20, undetermined.procedure_code_20) as TEXT ) as procedure_code_20\n\t, cast(coalesce(px_code.procedure_code_21, undetermined.procedure_code_21) as TEXT ) as procedure_code_21\n\t, cast(coalesce(px_code.procedure_code_22, undetermined.procedure_code_22) as TEXT ) as procedure_code_22\n\t, cast(coalesce(px_code.procedure_code_23, undetermined.procedure_code_23) as TEXT ) as procedure_code_23\n\t, cast(coalesce(px_code.procedure_code_24, undetermined.procedure_code_24) as TEXT ) as procedure_code_24\n\t, cast(coalesce(px_code.procedure_code_25, undetermined.procedure_code_25) as TEXT ) as procedure_code_25\n\t, cast(coalesce(px_date.procedure_date_1, undetermined.procedure_date_1) as date ) as procedure_date_1\n\t, cast(coalesce(px_date.procedure_date_2, undetermined.procedure_date_2) as date ) as procedure_date_2\n\t, cast(coalesce(px_date.procedure_date_3, undetermined.procedure_date_3) as date ) as procedure_date_3\n\t, cast(coalesce(px_date.procedure_date_4, undetermined.procedure_date_4) as date ) as procedure_date_4\n\t, cast(coalesce(px_date.procedure_date_5, undetermined.procedure_date_5) as date ) as procedure_date_5\n\t, cast(coalesce(px_date.procedure_date_6, undetermined.procedure_date_6) as date ) as procedure_date_6\n\t, cast(coalesce(px_date.procedure_date_7, undetermined.procedure_date_7) as date ) as procedure_date_7\n\t, cast(coalesce(px_date.procedure_date_8, undetermined.procedure_date_8) as date ) as procedure_date_8\n\t, cast(coalesce(px_date.procedure_date_9, undetermined.procedure_date_9) as date ) as procedure_date_9\n\t, cast(coalesce(px_date.procedure_date_10, undetermined.procedure_date_10) as date ) as procedure_date_10\n\t, cast(coalesce(px_date.procedure_date_11, undetermined.procedure_date_11) as date ) as procedure_date_11\n\t, cast(coalesce(px_date.procedure_date_12, undetermined.procedure_date_12) as date ) as procedure_date_12\n\t, cast(coalesce(px_date.procedure_date_13, undetermined.procedure_date_13) as date ) as procedure_date_13\n\t, cast(coalesce(px_date.procedure_date_14, undetermined.procedure_date_14) as date ) as procedure_date_14\n\t, cast(coalesce(px_date.procedure_date_15, undetermined.procedure_date_15) as date ) as procedure_date_15\n\t, cast(coalesce(px_date.procedure_date_16, undetermined.procedure_date_16) as date ) as procedure_date_16\n\t, cast(coalesce(px_date.procedure_date_17, undetermined.procedure_date_17) as date ) as procedure_date_17\n\t, cast(coalesce(px_date.procedure_date_18, undetermined.procedure_date_18) as date ) as procedure_date_18\n\t, cast(coalesce(px_date.procedure_date_19, undetermined.procedure_date_19) as date ) as procedure_date_19\n\t, cast(coalesce(px_date.procedure_date_20, undetermined.procedure_date_20) as date ) as procedure_date_20\n\t, cast(coalesce(px_date.procedure_date_21, undetermined.procedure_date_21) as date ) as procedure_date_21\n\t, cast(coalesce(px_date.procedure_date_22, undetermined.procedure_date_22) as date ) as procedure_date_22\n\t, cast(coalesce(px_date.procedure_date_23, undetermined.procedure_date_23) as date ) as procedure_date_23\n\t, cast(coalesce(px_date.procedure_date_24, undetermined.procedure_date_24) as date ) as procedure_date_24\n\t, cast(coalesce(px_date.procedure_date_25, undetermined.procedure_date_25) as date ) as procedure_date_25\n\t, cast(med.data_source as TEXT ) as data_source\n    , cast('2024-02-18 04:24:25.074170+00:00' as TEXT ) as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_medical_claim med\nleft join \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_admit_source_final\" ad_source\n    on med.claim_id = ad_source.claim_id\n    and med.data_source = ad_source.data_source\nleft join \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_admit_type_final\" ad_type\n    on med.claim_id = ad_type.claim_id\n    and med.data_source = ad_type.data_source\nleft join \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_apr_drg_final\" apr\n    on med.claim_id = apr.claim_id\n    and med.data_source = apr.data_source\nleft join \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_bill_type_final\" bill\n    on med.claim_id = bill.claim_id\n    and med.data_source = bill.data_source\nleft join \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_medical_claim_date_normalize\" claim_line_dates\n    on med.claim_id = claim_line_dates.claim_id\n    and med.claim_line_number = claim_line_dates.claim_line_number\n    and med.data_source = claim_line_dates.data_source\nleft join \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_medical_date_aggregation\" dates\n    on med.claim_id = dates.claim_id\n    and med.data_source = dates.data_source\nleft join \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_medical_npi_normalize\" med_npi\n    on med.claim_id = med_npi.claim_id\n    and med.claim_line_number = med_npi.claim_line_number\n    and med.data_source = med_npi.data_source\nleft join \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_discharge_disposition_final\" disch_disp\n    on med.claim_id = disch_disp.claim_id\n    and med.data_source = disch_disp.data_source\nleft join \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_ms_drg_final\" ms\n    on med.claim_id = ms.claim_id\n    and med.data_source = ms.data_source\nleft join \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_place_of_service_normalize\" pos\n    on med.claim_id = pos.claim_id\n    and med.claim_line_number = pos.claim_line_number\n    and med.data_source = pos.data_source\nleft join \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_diagnosis_code_final\" dx_code\n    on med.claim_id = dx_code.claim_id\n    and med.data_source = dx_code.data_source\nleft join \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_present_on_admit_final\" poa\n    on med.claim_id = poa.claim_id\n    and med.data_source = poa.data_source\nleft join \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_procedure_code_final\" px_code\n    on med.claim_id = px_code.claim_id\n    and med.data_source = px_code.data_source\nleft join \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_procedure_date_final\" px_date\n    on med.claim_id = px_date.claim_id\n    and med.data_source = px_date.data_source\nleft join \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_revenue_center_normalize\" rev\n    on med.claim_id = rev.claim_id\n    and med.claim_line_number = rev.claim_line_number\n    and med.data_source = rev.data_source\nleft join \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_undetermined_claim_type\" undetermined\n    on med.claim_id = undetermined.claim_id\n    and med.claim_line_number = undetermined.claim_line_number\n    and med.data_source = undetermined.data_source", "relation_name": "\"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:06.243848Z", "completed_at": "2024-02-18T04:25:06.257115Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:06.262915Z", "completed_at": "2024-02-18T04:25:06.344056Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.11221814155578613, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_claim_type_unmapped", "compiled": true, "compiled_code": "\n\nwith medical_claim as (\n\n    select\n          claim_id\n        , data_source\n        , claim_type\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\nselect\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , medical_claim.claim_id\n    , medical_claim.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom medical_claim\n     left join test_catalog\n       on test_catalog.test_name = 'claim_type missing'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\nwhere medical_claim.claim_type is null\ngroup by\n      medical_claim.claim_id\n    , medical_claim.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_claim_type_unmapped\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:06.240228Z", "completed_at": "2024-02-18T04:25:06.256582Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:06.259654Z", "completed_at": "2024-02-18T04:25:06.347115Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12780237197875977, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_claim_type_mapping_failures", "compiled": true, "compiled_code": "\n\nwith claim_type_mapping as (\n\n    select \n          claim_id\n        , claim_line_number\n        , data_source\n        , claim_type as source_claim_type\n        , case\n            when bill_type_code is not null or revenue_center_code is not null \n                then 'institutional'\n            when place_of_service_code is not null\n                then 'professional'\n            else null\n          end as data_profiling_claim_type\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\nselect\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , claim_type_mapping.claim_id\n    , claim_type_mapping.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom claim_type_mapping\n     left join test_catalog\n       on test_catalog.test_name = 'claim_type mapping incorrect'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\nwhere claim_type_mapping.source_claim_type <> claim_type_mapping.data_profiling_claim_type\ngroup by\n      claim_type_mapping.claim_id\n    , claim_type_mapping.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_claim_type_mapping_failures\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:06.271537Z", "completed_at": "2024-02-18T04:25:06.281267Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:06.311533Z", "completed_at": "2024-02-18T04:25:06.516530Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2562215328216553, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates", "compiled": true, "compiled_code": "\n\nwith claim_dates as (\n\n select\n          claim_id\n        , data_source\n        , 'claim_start_date' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.claim_start_date = cal.full_date\n    where cal.full_date is null\n    and rel.claim_start_date is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'claim_end_date' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.claim_end_date = cal.full_date\n    where cal.full_date is null\n    and rel.claim_end_date is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'claim_line_start_date' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.claim_line_start_date = cal.full_date\n    where cal.full_date is null\n    and rel.claim_line_start_date is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'claim_line_end_date' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.claim_line_end_date = cal.full_date\n    where cal.full_date is null\n    and rel.claim_line_end_date is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'paid_date' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.paid_date = cal.full_date\n    where cal.full_date is null\n    and rel.paid_date is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_1' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.procedure_date_1 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_1 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_2' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.procedure_date_2 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_2 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_3' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.procedure_date_3 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_3 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_4' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.procedure_date_4 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_4 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_5' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.procedure_date_5 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_5 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_6' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.procedure_date_6 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_6 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_7' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.procedure_date_7 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_7 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_8' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.procedure_date_8 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_8 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_9' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.procedure_date_9 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_9 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_10' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.procedure_date_10 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_10 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_11' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.procedure_date_11 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_11 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_12' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.procedure_date_12 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_12 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_13' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.procedure_date_13 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_13 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_14' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.procedure_date_14 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_14 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_15' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.procedure_date_15 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_15 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_16' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.procedure_date_16 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_16 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_17' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.procedure_date_17 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_17 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_18' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.procedure_date_18 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_18 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_19' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.procedure_date_19 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_19 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_20' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.procedure_date_20 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_20 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_21' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.procedure_date_21 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_21 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_22' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.procedure_date_22 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_22 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_23' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.procedure_date_23 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_23 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_24' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.procedure_date_24 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_24 is not null\n    union all\n    select\n          claim_id\n        , data_source\n        , 'procedure_date_25' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.procedure_date_25 = cal.full_date\n    where cal.full_date is null\n    and rel.procedure_date_25 is not null\n    \n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\nselect\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , claim_dates.claim_id\n    , claim_dates.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom claim_dates\n     left join test_catalog\n       on test_catalog.test_name = claim_dates.column_checked||' invalid'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\ngroup by\n      claim_dates.claim_id\n    , claim_dates.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_dates\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:06.374848Z", "completed_at": "2024-02-18T04:25:06.387082Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:06.397033Z", "completed_at": "2024-02-18T04:25:06.584815Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.21709942817687988, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates_inst", "compiled": true, "compiled_code": "\n\nwith claim_dates as (\n\n select\n          claim_id\n        , data_source\n        , 'admission_date' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.admission_date = cal.full_date\n    where cal.full_date is null\n    and rel.admission_date is not null\n    and rel.claim_type = 'institutional'\n    union all\n    select\n          claim_id\n        , data_source\n        , 'discharge_date' as column_checked\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"terminology\".\"calendar\" as cal\n           on rel.discharge_date = cal.full_date\n    where cal.full_date is null\n    and rel.discharge_date is not null\n    and rel.claim_type = 'institutional'\n    \n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\nselect\n      test_catalog.source_table\n    , 'institutional' as claim_type\n    , 'claim_id' as grain\n    , claim_dates.claim_id\n    , claim_dates.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom claim_dates\n     left join test_catalog\n       on test_catalog.test_name = claim_dates.column_checked||' invalid'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\ngroup by\n      claim_dates.claim_id\n    , claim_dates.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_dates_inst\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:06.247519Z", "completed_at": "2024-02-18T04:25:06.258414Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:06.266303Z", "completed_at": "2024-02-18T04:25:06.673638Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.4411439895629883, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_institutional_header_fail_details", "compiled": true, "compiled_code": "\n\nwith institutional_header_duplicates as (\n\n \n        select\n              claim_id\n            , data_source\n            , 'claim_id' as column_checked\n            , count(distinct claim_id) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct claim_id) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'claim_type' as column_checked\n            , count(distinct claim_type) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct claim_type) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'patient_id' as column_checked\n            , count(distinct patient_id) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct patient_id) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'member_id' as column_checked\n            , count(distinct member_id) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct member_id) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'payer' as column_checked\n            , count(distinct payer) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct payer) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'plan' as column_checked\n            , count(distinct plan) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct plan) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'claim_start_date' as column_checked\n            , count(distinct claim_start_date) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct claim_start_date) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'claim_end_date' as column_checked\n            , count(distinct claim_end_date) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct claim_end_date) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'admission_date' as column_checked\n            , count(distinct admission_date) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct admission_date) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'discharge_date' as column_checked\n            , count(distinct discharge_date) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct discharge_date) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'admit_source_code' as column_checked\n            , count(distinct admit_source_code) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct admit_source_code) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'admit_type_code' as column_checked\n            , count(distinct admit_type_code) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct admit_type_code) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'discharge_disposition_code' as column_checked\n            , count(distinct discharge_disposition_code) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct discharge_disposition_code) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'bill_type_code' as column_checked\n            , count(distinct bill_type_code) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct bill_type_code) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'ms_drg_code' as column_checked\n            , count(distinct ms_drg_code) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct ms_drg_code) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'facility_npi' as column_checked\n            , count(distinct facility_npi) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct facility_npi) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'billing_npi' as column_checked\n            , count(distinct billing_npi) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct billing_npi) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'rendering_npi' as column_checked\n            , count(distinct rendering_npi) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct rendering_npi) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_type' as column_checked\n            , count(distinct diagnosis_code_type) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_type) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_1' as column_checked\n            , count(distinct diagnosis_code_1) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_1) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_2' as column_checked\n            , count(distinct diagnosis_code_2) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_2) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_3' as column_checked\n            , count(distinct diagnosis_code_3) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_3) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_4' as column_checked\n            , count(distinct diagnosis_code_4) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_4) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_5' as column_checked\n            , count(distinct diagnosis_code_5) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_5) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_6' as column_checked\n            , count(distinct diagnosis_code_6) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_6) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_7' as column_checked\n            , count(distinct diagnosis_code_7) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_7) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_8' as column_checked\n            , count(distinct diagnosis_code_8) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_8) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_9' as column_checked\n            , count(distinct diagnosis_code_9) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_9) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_10' as column_checked\n            , count(distinct diagnosis_code_10) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_10) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_11' as column_checked\n            , count(distinct diagnosis_code_11) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_11) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_12' as column_checked\n            , count(distinct diagnosis_code_12) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_12) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_13' as column_checked\n            , count(distinct diagnosis_code_13) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_13) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_14' as column_checked\n            , count(distinct diagnosis_code_14) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_14) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_15' as column_checked\n            , count(distinct diagnosis_code_15) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_15) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_16' as column_checked\n            , count(distinct diagnosis_code_16) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_16) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_17' as column_checked\n            , count(distinct diagnosis_code_17) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_17) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_18' as column_checked\n            , count(distinct diagnosis_code_18) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_18) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_19' as column_checked\n            , count(distinct diagnosis_code_19) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_19) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_20' as column_checked\n            , count(distinct diagnosis_code_20) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_20) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_21' as column_checked\n            , count(distinct diagnosis_code_21) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_21) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_22' as column_checked\n            , count(distinct diagnosis_code_22) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_22) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_23' as column_checked\n            , count(distinct diagnosis_code_23) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_23) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_24' as column_checked\n            , count(distinct diagnosis_code_24) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_24) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_25' as column_checked\n            , count(distinct diagnosis_code_25) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_25) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_1' as column_checked\n            , count(distinct diagnosis_poa_1) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_1) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_2' as column_checked\n            , count(distinct diagnosis_poa_2) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_2) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_3' as column_checked\n            , count(distinct diagnosis_poa_3) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_3) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_4' as column_checked\n            , count(distinct diagnosis_poa_4) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_4) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_5' as column_checked\n            , count(distinct diagnosis_poa_5) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_5) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_6' as column_checked\n            , count(distinct diagnosis_poa_6) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_6) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_7' as column_checked\n            , count(distinct diagnosis_poa_7) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_7) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_8' as column_checked\n            , count(distinct diagnosis_poa_8) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_8) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_9' as column_checked\n            , count(distinct diagnosis_poa_9) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_9) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_10' as column_checked\n            , count(distinct diagnosis_poa_10) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_10) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_11' as column_checked\n            , count(distinct diagnosis_poa_11) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_11) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_12' as column_checked\n            , count(distinct diagnosis_poa_12) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_12) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_13' as column_checked\n            , count(distinct diagnosis_poa_13) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_13) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_14' as column_checked\n            , count(distinct diagnosis_poa_14) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_14) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_15' as column_checked\n            , count(distinct diagnosis_poa_15) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_15) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_16' as column_checked\n            , count(distinct diagnosis_poa_16) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_16) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_17' as column_checked\n            , count(distinct diagnosis_poa_17) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_17) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_18' as column_checked\n            , count(distinct diagnosis_poa_18) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_18) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_19' as column_checked\n            , count(distinct diagnosis_poa_19) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_19) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_20' as column_checked\n            , count(distinct diagnosis_poa_20) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_20) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_21' as column_checked\n            , count(distinct diagnosis_poa_21) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_21) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_22' as column_checked\n            , count(distinct diagnosis_poa_22) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_22) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_23' as column_checked\n            , count(distinct diagnosis_poa_23) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_23) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_24' as column_checked\n            , count(distinct diagnosis_poa_24) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_24) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_poa_25' as column_checked\n            , count(distinct diagnosis_poa_25) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_poa_25) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_type' as column_checked\n            , count(distinct procedure_code_type) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_type) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_1' as column_checked\n            , count(distinct procedure_code_1) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_1) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_2' as column_checked\n            , count(distinct procedure_code_2) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_2) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_3' as column_checked\n            , count(distinct procedure_code_3) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_3) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_4' as column_checked\n            , count(distinct procedure_code_4) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_4) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_5' as column_checked\n            , count(distinct procedure_code_5) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_5) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_6' as column_checked\n            , count(distinct procedure_code_6) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_6) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_7' as column_checked\n            , count(distinct procedure_code_7) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_7) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_8' as column_checked\n            , count(distinct procedure_code_8) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_8) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_9' as column_checked\n            , count(distinct procedure_code_9) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_9) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_10' as column_checked\n            , count(distinct procedure_code_10) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_10) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_11' as column_checked\n            , count(distinct procedure_code_11) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_11) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_12' as column_checked\n            , count(distinct procedure_code_12) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_12) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_13' as column_checked\n            , count(distinct procedure_code_13) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_13) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_14' as column_checked\n            , count(distinct procedure_code_14) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_14) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_15' as column_checked\n            , count(distinct procedure_code_15) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_15) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_16' as column_checked\n            , count(distinct procedure_code_16) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_16) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_17' as column_checked\n            , count(distinct procedure_code_17) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_17) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_18' as column_checked\n            , count(distinct procedure_code_18) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_18) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_19' as column_checked\n            , count(distinct procedure_code_19) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_19) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_20' as column_checked\n            , count(distinct procedure_code_20) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_20) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_21' as column_checked\n            , count(distinct procedure_code_21) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_21) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_22' as column_checked\n            , count(distinct procedure_code_22) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_22) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_23' as column_checked\n            , count(distinct procedure_code_23) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_23) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_24' as column_checked\n            , count(distinct procedure_code_24) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_24) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_code_25' as column_checked\n            , count(distinct procedure_code_25) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_code_25) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_1' as column_checked\n            , count(distinct procedure_date_1) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_1) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_2' as column_checked\n            , count(distinct procedure_date_2) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_2) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_3' as column_checked\n            , count(distinct procedure_date_3) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_3) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_4' as column_checked\n            , count(distinct procedure_date_4) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_4) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_5' as column_checked\n            , count(distinct procedure_date_5) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_5) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_6' as column_checked\n            , count(distinct procedure_date_6) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_6) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_7' as column_checked\n            , count(distinct procedure_date_7) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_7) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_8' as column_checked\n            , count(distinct procedure_date_8) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_8) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_9' as column_checked\n            , count(distinct procedure_date_9) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_9) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_10' as column_checked\n            , count(distinct procedure_date_10) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_10) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_11' as column_checked\n            , count(distinct procedure_date_11) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_11) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_12' as column_checked\n            , count(distinct procedure_date_12) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_12) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_13' as column_checked\n            , count(distinct procedure_date_13) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_13) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_14' as column_checked\n            , count(distinct procedure_date_14) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_14) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_15' as column_checked\n            , count(distinct procedure_date_15) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_15) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_16' as column_checked\n            , count(distinct procedure_date_16) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_16) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_17' as column_checked\n            , count(distinct procedure_date_17) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_17) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_18' as column_checked\n            , count(distinct procedure_date_18) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_18) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_19' as column_checked\n            , count(distinct procedure_date_19) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_19) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_20' as column_checked\n            , count(distinct procedure_date_20) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_20) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_21' as column_checked\n            , count(distinct procedure_date_21) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_21) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_22' as column_checked\n            , count(distinct procedure_date_22) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_22) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_23' as column_checked\n            , count(distinct procedure_date_23) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_23) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_24' as column_checked\n            , count(distinct procedure_date_24) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_24) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'procedure_date_25' as column_checked\n            , count(distinct procedure_date_25) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct procedure_date_25) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'data_source' as column_checked\n            , count(distinct data_source) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'institutional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct data_source) > 1\n        \n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n        , claim_type\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\nselect\n      test_catalog.source_table\n    , 'institutional' as claim_type\n    , 'claim_id' as grain\n    , institutional_header_duplicates.claim_id\n    , institutional_header_duplicates.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom institutional_header_duplicates\n     left join test_catalog\n       on test_catalog.test_name = institutional_header_duplicates.column_checked||' non-unique'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\n       and test_catalog.claim_type = 'institutional'\ngroup by \n      institutional_header_duplicates.claim_id\n    , institutional_header_duplicates.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_institutional_header_fail_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:06.381863Z", "completed_at": "2024-02-18T04:25:06.422353Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:06.426271Z", "completed_at": "2024-02-18T04:25:06.680654Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.30428433418273926, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_denominators", "compiled": true, "compiled_code": "\n/*\n    Denominator logic for invalid value tests is dependent on whether that\n    specific field is populated or not. We created a macro to automatically\n    generate the CTE. All invalid value tests must have a\n    test_category = 'invalid_values' in the catalog seed.\n*/\nwith professional_denominator as (\n\n    select\n          cast('professional' as TEXT ) as test_denominator_name\n        , cast(count(distinct claim_id||data_source) as int) as denominator\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n    where claim_type = 'professional'\n\n)\n\n, institutional_denominator as (\n\n    select\n          cast('institutional' as TEXT ) as test_denominator_name\n        , count(distinct claim_id||data_source) as denominator\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n    where claim_type = 'institutional'\n\n)\n\n, all_claim_denominator as (\n\n    select\n          cast('all' as TEXT ) as test_denominator_name\n        , count(distinct claim_id||data_source) as denominator\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n    where claim_type is not null\n\n)\n\n, invalid_value_denominators as (\n\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"data_quality\".\"_value_set_test_catalog\" as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'admit_source_code'\n    where rel.admit_source_code is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"data_quality\".\"_value_set_test_catalog\" as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'admit_type_code'\n    where rel.admit_type_code is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"data_quality\".\"_value_set_test_catalog\" as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'apr_drg_code'\n    where rel.apr_drg_code is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"data_quality\".\"_value_set_test_catalog\" as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'bill_type_code'\n    where rel.bill_type_code is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"data_quality\".\"_value_set_test_catalog\" as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'billing_npi'\n    where rel.billing_npi is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"data_quality\".\"_value_set_test_catalog\" as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'claim_type'\n    where rel.claim_type is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"data_quality\".\"_value_set_test_catalog\" as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'diagnosis_code_1'\n    where rel.diagnosis_code_1 is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"data_quality\".\"_value_set_test_catalog\" as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'diagnosis_code_type'\n    where rel.diagnosis_code_type is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"data_quality\".\"_value_set_test_catalog\" as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'diagnosis_poa_1'\n    where rel.diagnosis_poa_1 is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"data_quality\".\"_value_set_test_catalog\" as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'discharge_disposition_code'\n    where rel.discharge_disposition_code is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"data_quality\".\"_value_set_test_catalog\" as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'facility_npi'\n    where rel.facility_npi is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"data_quality\".\"_value_set_test_catalog\" as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'ms_drg_code'\n    where rel.ms_drg_code is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"data_quality\".\"_value_set_test_catalog\" as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'place_of_service_code'\n    where rel.place_of_service_code is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"data_quality\".\"_value_set_test_catalog\" as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'procedure_code_type'\n    where rel.procedure_code_type is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"data_quality\".\"_value_set_test_catalog\" as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'rendering_npi'\n    where rel.rendering_npi is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.claim_id||rel.data_source) as denominator\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\" as rel\n         left join \"synthea\".\"data_quality\".\"_value_set_test_catalog\" as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__medical_claim'\n           and cat.test_field = 'revenue_center_code'\n    where rel.revenue_center_code is not null\n    group by cat.test_name\n    \n\n)\n\nselect * from institutional_denominator\nunion all \nselect * from professional_denominator\nunion all\nselect * from all_claim_denominator\nunion all\nselect * from invalid_value_denominators", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_denominators\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:06.550196Z", "completed_at": "2024-02-18T04:25:06.558927Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:06.574721Z", "completed_at": "2024-02-18T04:25:06.685664Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.14442849159240723, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_duplicates", "compiled": true, "compiled_code": "\n\nwith test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\nselect distinct\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , claim_id\n    , data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n     left join test_catalog\n       on test_catalog.test_name = 'duplicate medical claims'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\ngroup by\n      claim_id\n    , claim_line_number\n    , data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\nhaving count(*) > 1", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_duplicates\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:06.646649Z", "completed_at": "2024-02-18T04:25:06.657401Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:06.663920Z", "completed_at": "2024-02-18T04:25:06.757161Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.12106633186340332, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_inst_missing_values", "compiled": true, "compiled_code": "\n\nwith institutional_missing as (\n\n \n        select\n              claim_id\n            , data_source\n            , 'claim_id' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  claim_id is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'claim_line_number' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  claim_line_number is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'patient_id' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  patient_id is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'member_id' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  member_id is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'payer' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  payer is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'plan' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  plan is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'claim_start_date' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  claim_start_date is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'claim_end_date' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  claim_end_date is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'bill_type_code' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  bill_type_code is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'revenue_center_code' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  revenue_center_code is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'hcpcs_code' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  hcpcs_code is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'rendering_npi' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  rendering_npi is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'billing_npi' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  billing_npi is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'facility_npi' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  facility_npi is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'paid_date' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  paid_date is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'paid_amount' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  paid_amount is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_type' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  diagnosis_code_type is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_1' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  diagnosis_code_1 is null\n        and claim_type = 'institutional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'data_source' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  data_source is null\n        and claim_type = 'institutional'\n        \n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\nselect\n      test_catalog.source_table\n    , 'institutional' as claim_type\n    , 'claim_id' as grain\n    , institutional_missing.claim_id\n    , institutional_missing.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom institutional_missing\n     left join test_catalog\n       on test_catalog.test_name = institutional_missing.column_checked||' missing'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\ngroup by\n      institutional_missing.claim_id\n    , institutional_missing.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_inst_missing_values\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:06.696236Z", "completed_at": "2024-02-18T04:25:06.707048Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:06.725051Z", "completed_at": "2024-02-18T04:25:06.823805Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.13541769981384277, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_npi", "compiled": true, "compiled_code": "\n\nwith medical_claim as (\n\n    select *\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\n, valid_billing_npi as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.billing_npi) as filled_row_count\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from medical_claim\n         left join \"synthea\".\"terminology\".\"provider\" pro\n           on medical_claim.billing_npi = pro.npi\n         left join test_catalog\n           on test_catalog.test_name = 'billing_npi invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where pro.npi is null\n    and medical_claim.billing_npi is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_facility_npi as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.facility_npi) as filled_row_count\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from medical_claim\n         left join \"synthea\".\"terminology\".\"provider\" pro\n           on medical_claim.facility_npi = pro.npi\n         left join test_catalog\n           on test_catalog.test_name = 'facility_npi invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where pro.npi is null\n    and medical_claim.facility_npi is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_rendering_npi as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.rendering_npi) as filled_row_count\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from medical_claim\n         left join \"synthea\".\"terminology\".\"provider\" pro\n           on medical_claim.rendering_npi = pro.npi\n         left join test_catalog\n           on test_catalog.test_name = 'rendering_npi invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where pro.npi is null\n    and medical_claim.rendering_npi is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\nselect * from valid_billing_npi\nunion all\nselect * from valid_facility_npi\nunion all\nselect * from valid_rendering_npi", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_invalid_npi\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:06.731185Z", "completed_at": "2024-02-18T04:25:06.741643Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:06.744780Z", "completed_at": "2024-02-18T04:25:06.926933Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.20888996124267578, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_line_numbers", "compiled": true, "compiled_code": "\n\nwith medical_claim as (\n\n    select\n          claim_id\n        , claim_line_number\n        , data_source\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\n, add_row_num as (\n\n    select\n          claim_id\n        , data_source\n        , claim_line_number\n        , row_number() over (\n            partition by claim_id, data_source\n            order by claim_line_number\n          ) as expected_line_number\n    from medical_claim\n\n)\n\n, line_num_check as (\n\n    select\n          add_row_num.claim_id\n        , add_row_num.data_source\n        , add_row_num.claim_line_number\n        , add_row_num.expected_line_number\n    from add_row_num\n         left join medical_claim\n           on add_row_num.claim_id = medical_claim.claim_id\n           and add_row_num.data_source = medical_claim.data_source\n           and add_row_num.expected_line_number = medical_claim.claim_line_number\n    where medical_claim.claim_line_number is null\n\n)\n\nselect\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , line_num_check.claim_id\n    , line_num_check.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom line_num_check\n     left join test_catalog\n       on test_catalog.test_name = 'claim_line_number non-sequential'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\ngroup by\n      line_num_check.claim_id\n    , line_num_check.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_line_numbers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:06.707954Z", "completed_at": "2024-02-18T04:25:06.728074Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:06.737127Z", "completed_at": "2024-02-18T04:25:06.933965Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.23537492752075195, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_values", "compiled": true, "compiled_code": "\n\nwith medical_claim as (\n\n    select *\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\n, valid_bill_type as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.bill_type_code) as filled_row_count\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from medical_claim\n         left join \"synthea\".\"terminology\".\"bill_type\" tob\n           on medical_claim.bill_type_code = tob.bill_type_code\n         left join test_catalog\n           on test_catalog.test_name = 'bill_type_code invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and tob.bill_type_code is null\n    and medical_claim.bill_type_code is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_revenue_center as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.revenue_center_code) as filled_row_count\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from medical_claim\n         left join \"synthea\".\"terminology\".\"revenue_center\" rev\n           on medical_claim.revenue_center_code = rev.revenue_center_code\n         left join test_catalog\n           on test_catalog.test_name = 'revenue_center_code invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and rev.revenue_center_code is null\n    and medical_claim.revenue_center_code is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_discharge_disposition as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.discharge_disposition_code) as filled_row_count\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from medical_claim\n         left join \"synthea\".\"terminology\".\"discharge_disposition\" discharge\n           on medical_claim.discharge_disposition_code = discharge.discharge_disposition_code\n         left join test_catalog\n           on test_catalog.test_name = 'discharge_disposition_code invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and discharge.discharge_disposition_code is null\n    and medical_claim.discharge_disposition_code is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_admit_source as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.admit_source_code) as filled_row_count\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from medical_claim\n         left join \"synthea\".\"terminology\".\"admit_source\" adsource\n           on medical_claim.admit_source_code = adsource.admit_source_code\n         left join test_catalog\n           on test_catalog.test_name = 'admit_source_code invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and adsource.admit_source_code is null\n    and medical_claim.admit_source_code is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_admit_type as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.admit_type_code) as filled_row_count\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from medical_claim\n         left join \"synthea\".\"terminology\".\"admit_type\" adtype\n           on medical_claim.admit_type_code = adtype.admit_type_code\n         left join test_catalog\n           on test_catalog.test_name = 'admit_type_code invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and adtype.admit_type_code is null\n    and medical_claim.admit_type_code is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_ms_drg as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.ms_drg_code) as filled_row_count\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from medical_claim\n         left join \"synthea\".\"terminology\".\"ms_drg\" msdrg\n           on medical_claim.ms_drg_code = msdrg.ms_drg_code\n         left join test_catalog\n           on test_catalog.test_name = 'ms_drg_code invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and msdrg.ms_drg_code is null\n    and medical_claim.ms_drg_code is not null\n    group by\n           medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_apr_drg as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.apr_drg_code) as filled_row_count\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from medical_claim\n         left join \"synthea\".\"terminology\".\"apr_drg\" aprdrg\n           on medical_claim.apr_drg_code = aprdrg.apr_drg_code\n         left join test_catalog\n           on test_catalog.test_name = 'apr_drg_code invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and aprdrg.apr_drg_code is null\n    and medical_claim.apr_drg_code is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_present_on_admission as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.diagnosis_poa_1) as filled_row_count\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from medical_claim\n         left join \"synthea\".\"terminology\".\"present_on_admission\" poa\n           on medical_claim.diagnosis_poa_1 = poa.present_on_admit_code\n         left join test_catalog\n           on test_catalog.test_name = 'diagnosis_poa_1 invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and poa.present_on_admit_code is null\n    and medical_claim.diagnosis_poa_1 is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_procedure_code_type as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.procedure_code_type) as filled_row_count\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from medical_claim\n         left join \"synthea\".\"terminology\".\"code_type\" codetype\n           on medical_claim.procedure_code_type = codetype.code_type\n         left join test_catalog\n           on test_catalog.test_name = 'procedure_code_type invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where claim_type = 'institutional'\n    and codetype.code_type is null\n    and medical_claim.procedure_code_type is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_place_of_service as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'professional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.place_of_service_code) as filled_row_count\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from medical_claim\n         left join \"synthea\".\"terminology\".\"place_of_service\" pos\n           on medical_claim.place_of_service_code = pos.place_of_service_code\n         left join test_catalog\n           on test_catalog.test_name = 'place_of_service_code invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where claim_type = 'professional'\n    and pos.place_of_service_code is null\n    and medical_claim.place_of_service_code is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_diagnosis_code_type as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.diagnosis_code_type) as filled_row_count\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from medical_claim\n         left join \"synthea\".\"terminology\".\"code_type\" codetype\n           on medical_claim.diagnosis_code_type = codetype.code_type\n         left join test_catalog\n           on test_catalog.test_name = 'diagnosis_code_type invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where codetype.code_type is null\n    and medical_claim.diagnosis_code_type is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_diagnosis_code as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.diagnosis_code_1) as filled_row_count\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from medical_claim\n         left join \"synthea\".\"terminology\".\"icd_10_cm\" icd\n           on medical_claim.diagnosis_code_1 = icd.icd_10_cm\n         left join test_catalog\n           on test_catalog.test_name = 'diagnosis_code_1 invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where diagnosis_code_type = 'icd-10-cm'\n    and icd.icd_10_cm is null\n    and medical_claim.diagnosis_code_1 is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_claim_type as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(medical_claim.claim_type) as filled_row_count\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from medical_claim\n         left join \"synthea\".\"terminology\".\"claim_type\" claimtype\n           on medical_claim.claim_type = claimtype.claim_type\n         left join test_catalog\n           on test_catalog.test_name = 'claim_type invalid'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where claimtype.claim_type is null\n    and medical_claim.claim_type is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\nselect * from valid_bill_type\nunion all \nselect * from valid_revenue_center\nunion all \nselect * from valid_discharge_disposition\nunion all \nselect * from valid_admit_source\nunion all \nselect * from valid_admit_type\nunion all \nselect * from valid_ms_drg\nunion all \nselect * from valid_apr_drg\nunion all \nselect * from valid_present_on_admission\nunion all \nselect * from valid_diagnosis_code_type\nunion all \nselect * from valid_procedure_code_type\nunion all \nselect * from valid_diagnosis_code\nunion all \nselect * from valid_claim_type\nunion all \nselect * from valid_place_of_service", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_invalid_values\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:06.830744Z", "completed_at": "2024-02-18T04:25:06.844318Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:06.845534Z", "completed_at": "2024-02-18T04:25:07.002407Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.17686080932617188, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_prof_missing_values", "compiled": true, "compiled_code": "\n\nwith professional_missing as (\n\n \n        select\n              claim_id\n            , data_source\n            , 'claim_id' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  claim_id is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'claim_line_number' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  claim_line_number is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'patient_id' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  patient_id is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'member_id' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  member_id is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'payer' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  payer is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'plan' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  plan is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'claim_start_date' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  claim_start_date is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'claim_end_date' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  claim_end_date is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'place_of_service_code' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  place_of_service_code is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'hcpcs_code' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  hcpcs_code is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'rendering_npi' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  rendering_npi is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'billing_npi' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  billing_npi is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'paid_date' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  paid_date is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'paid_amount' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  paid_amount is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_type' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  diagnosis_code_type is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_1' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  diagnosis_code_1 is null\n        and claim_type = 'professional'\n        union all\n        select\n              claim_id\n            , data_source\n            , 'data_source' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where  data_source is null\n        and claim_type = 'professional'\n        \n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\nselect\n      test_catalog.source_table\n    , 'professional' as claim_type\n    , 'claim_id' as grain\n    , professional_missing.claim_id\n    , professional_missing.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom professional_missing\n     left join test_catalog\n       on test_catalog.test_name = professional_missing.column_checked||' missing'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\ngroup by\n      professional_missing.claim_id\n    , professional_missing.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_prof_missing_values\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:06.768953Z", "completed_at": "2024-02-18T04:25:06.780756Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:06.787294Z", "completed_at": "2024-02-18T04:25:07.003393Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3977518081665039, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_plausibility", "compiled": true, "compiled_code": "\n\nwith medical_claim as (\n\n    select *\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\n, claim_start_date_after_claim_end_date as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(*) as counts\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from medical_claim\n         left join test_catalog\n           on test_catalog.test_name = 'claim_start_date after claim_end_date'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_start_date > medical_claim.claim_end_date\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, admission_date_after_discharge_date as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'institutional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(*) as counts\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from medical_claim\n         left join test_catalog\n           on test_catalog.test_name = 'admission_date after discharge_date'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and medical_claim.admission_date > medical_claim.discharge_date\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, admission_date_incorrect as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'professional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(*) as counts\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from medical_claim\n         left join test_catalog\n           on test_catalog.test_name = 'admission_date incorrectly populated'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'professional'\n    and medical_claim.admission_date is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, discharge_date_incorrect as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'professional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(*) as counts\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from medical_claim\n         left join test_catalog\n           on test_catalog.test_name = 'discharge_date incorrectly populated'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'professional'\n    and medical_claim.discharge_date is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, revenue_center_code_incorrect as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'professional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(*) as counts\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from medical_claim\n         left join test_catalog\n           on test_catalog.test_name = 'revenue_center_code incorrectly populated'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'professional'\n    and medical_claim.revenue_center_code is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, institutional_header_incorrect as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'professional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(*) as counts\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from medical_claim\n         left join test_catalog\n           on test_catalog.test_name = 'institutional header-level fields incorrectly populated'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'professional'\n    and (\n        medical_claim.admit_type_code is not null\n        or medical_claim.admit_type_code is not null\n        or medical_claim.admit_source_code is not null\n        or medical_claim.discharge_disposition_code is not null\n        or medical_claim.bill_type_code is not null\n        or medical_claim.ms_drg_code is not null\n        or medical_claim.apr_drg_code is not null\n    )\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, place_of_service_code_incorrect as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'professional' as claim_type\n        , test_catalog.test_category\n        , 'claim_id' as grain\n        , medical_claim.claim_id\n        , medical_claim.data_source\n        , count(*) as counts\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from medical_claim\n         left join test_catalog\n           on test_catalog.test_name = 'place_of_service_code incorrectly populated'\n           and test_catalog.source_table = 'normalized_input__medical_claim'\n    where medical_claim.claim_type = 'institutional'\n    and medical_claim.place_of_service_code is not null\n    group by\n          medical_claim.claim_id\n        , medical_claim.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\nselect * from claim_start_date_after_claim_end_date\nunion all\nselect * from admission_date_after_discharge_date\nunion all\nselect * from admission_date_incorrect\nunion all\nselect * from discharge_date_incorrect\nunion all\nselect * from revenue_center_code_incorrect\nunion all\nselect * from institutional_header_incorrect\nunion all\nselect * from place_of_service_code_incorrect", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_plausibility\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:07.245189Z", "completed_at": "2024-02-18T04:25:07.252894Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:07.260936Z", "completed_at": "2024-02-18T04:25:07.387043Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1916513442993164, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__ambulance_professional", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select distinct \n  claim_id\n, claim_line_number\n, 'Ambulance' as service_category_2\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and (hcpcs_code between 'A0425' and 'A0436' or place_of_service_code in ('41','42'))", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_ambulance_professional\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:07.229652Z", "completed_at": "2024-02-18T04:25:07.251892Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:07.254635Z", "completed_at": "2024-02-18T04:25:07.392164Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.19624567031860352, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__acute_inpatient_institutional", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n), room_and_board_requirement as (\nselect distinct \n  claim_id\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and revenue_center_code in\n  ('0100','0101',\n   '0110','0111','0112','0113','0114','0116','0117','0118','0119',\n   '0120','0121','0122','0123','0124','0126','0127','0128','0129',\n   '0130','0131','0132','0133','0134','0136','0137','0138','0139',\n   '0140','0141','0142','0143','0144','0146','0147','0148','0149',\n   '0150','0151','0152','0153','0154','0156','0157','0158','0159',\n   '0160','0164','0167','0169',\n   '0170','0171','0172','0173','0174','0179',\n   '0190','0191','0192','0193','0194','0199',\n   '0200','0201','0202','0203','0204','0206','0207','0208','0209',\n   '0210','0211','0212','0213','0214','0219',\n   '1000','1001','1002')\n)\n\n, drg_requirement as (\nselect distinct \n  mc.claim_id\nfrom __dbt__cte__service_category__stg_medical_claim mc\nleft join \"synthea\".\"terminology\".\"ms_drg\" msdrg\n  on mc.ms_drg_code = msdrg.ms_drg_code\nleft join \"synthea\".\"terminology\".\"apr_drg\" aprdrg\n  on mc.apr_drg_code = aprdrg.apr_drg_code\nwhere claim_type = 'institutional'\n  and (msdrg.ms_drg_code is not null or aprdrg.apr_drg_code is not null)\n)\n\n, bill_type_requirement as (\nselect distinct \n  claim_id\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and left(bill_type_code,2) in ('11','12') \n)\n\nselect distinct \n  a.claim_id\n, 'Acute Inpatient' as service_category_2\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim a\ninner join room_and_board_requirement b\n  on a.claim_id = b.claim_id\ninner join drg_requirement c\n  on a.claim_id = c.claim_id\ninner join bill_type_requirement d\n  on a.claim_id = d.claim_id", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:07.240693Z", "completed_at": "2024-02-18T04:25:07.252315Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:07.257888Z", "completed_at": "2024-02-18T04:25:07.414199Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.22075915336608887, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__acute_inpatient_professional", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select distinct\n  claim_id\n, claim_line_number\n, 'Acute Inpatient' as service_category_2\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code = '21'", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_professional\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:07.183170Z", "completed_at": "2024-02-18T04:25:07.191511Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:07.192467Z", "completed_at": "2024-02-18T04:25:07.422657Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3539435863494873, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_professional_header_fail_details", "compiled": true, "compiled_code": "\n\nwith professional_header_duplicates as (\n\n \n        select\n              claim_id\n            , data_source\n            , 'claim_id' as column_checked\n            , count(distinct claim_id) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct claim_id) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'claim_type' as column_checked\n            , count(distinct claim_type) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct claim_type) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'patient_id' as column_checked\n            , count(distinct patient_id) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct patient_id) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'member_id' as column_checked\n            , count(distinct member_id) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct member_id) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'payer' as column_checked\n            , count(distinct payer) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct payer) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'plan' as column_checked\n            , count(distinct plan) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct plan) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'claim_start_date' as column_checked\n            , count(distinct claim_start_date) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct claim_start_date) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'claim_end_date' as column_checked\n            , count(distinct claim_end_date) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct claim_end_date) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'place_of_service_code' as column_checked\n            , count(distinct place_of_service_code) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct place_of_service_code) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'billing_npi' as column_checked\n            , count(distinct billing_npi) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct billing_npi) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'paid_date' as column_checked\n            , count(distinct paid_date) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct paid_date) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_type' as column_checked\n            , count(distinct diagnosis_code_type) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_type) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_1' as column_checked\n            , count(distinct diagnosis_code_1) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_1) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_2' as column_checked\n            , count(distinct diagnosis_code_2) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_2) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_3' as column_checked\n            , count(distinct diagnosis_code_3) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_3) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_4' as column_checked\n            , count(distinct diagnosis_code_4) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_4) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_5' as column_checked\n            , count(distinct diagnosis_code_5) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_5) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_6' as column_checked\n            , count(distinct diagnosis_code_6) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_6) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_7' as column_checked\n            , count(distinct diagnosis_code_7) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_7) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_8' as column_checked\n            , count(distinct diagnosis_code_8) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_8) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_9' as column_checked\n            , count(distinct diagnosis_code_9) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_9) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_10' as column_checked\n            , count(distinct diagnosis_code_10) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_10) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_11' as column_checked\n            , count(distinct diagnosis_code_11) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_11) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_12' as column_checked\n            , count(distinct diagnosis_code_12) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_12) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_13' as column_checked\n            , count(distinct diagnosis_code_13) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_13) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_14' as column_checked\n            , count(distinct diagnosis_code_14) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_14) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_15' as column_checked\n            , count(distinct diagnosis_code_15) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_15) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_16' as column_checked\n            , count(distinct diagnosis_code_16) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_16) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_17' as column_checked\n            , count(distinct diagnosis_code_17) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_17) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_18' as column_checked\n            , count(distinct diagnosis_code_18) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_18) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_19' as column_checked\n            , count(distinct diagnosis_code_19) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_19) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_20' as column_checked\n            , count(distinct diagnosis_code_20) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_20) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_21' as column_checked\n            , count(distinct diagnosis_code_21) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_21) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_22' as column_checked\n            , count(distinct diagnosis_code_22) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_22) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_23' as column_checked\n            , count(distinct diagnosis_code_23) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_23) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_24' as column_checked\n            , count(distinct diagnosis_code_24) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_24) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'diagnosis_code_25' as column_checked\n            , count(distinct diagnosis_code_25) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct diagnosis_code_25) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'data_source' as column_checked\n            , count(distinct data_source) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n        where claim_type = 'professional'\n        group by\n              claim_id\n            , data_source\n        having count(distinct data_source) > 1\n        \n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n        , claim_type\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\nselect\n      test_catalog.source_table\n    , 'professional' as claim_type\n    , 'claim_id' as grain\n    , professional_header_duplicates.claim_id\n    , professional_header_duplicates.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom professional_header_duplicates\n     left join test_catalog\n       on test_catalog.test_name = professional_header_duplicates.column_checked||' non-unique'\n       and test_catalog.source_table = 'normalized_input__medical_claim'\n       and test_catalog.claim_type = 'professional'\ngroup by \n      professional_header_duplicates.claim_id\n    , professional_header_duplicates.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_professional_header_fail_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:07.409460Z", "completed_at": "2024-02-18T04:25:07.416351Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:07.423912Z", "completed_at": "2024-02-18T04:25:07.635675Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.24293279647827148, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__dialysis_institutional", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select distinct \n  claim_id\n, 'Dialysis' as service_category_2\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and left(bill_type_code,2) in ('72')", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_dialysis_institutional\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:07.417078Z", "completed_at": "2024-02-18T04:25:07.426849Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:07.530149Z", "completed_at": "2024-02-18T04:25:07.652208Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.2479686737060547, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__dialysis_professional", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select distinct \n  claim_id\n, claim_line_number\n, 'Dialysis' as service_category_2\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('65')", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_dialysis_professional\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:07.568417Z", "completed_at": "2024-02-18T04:25:07.575469Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:07.607415Z", "completed_at": "2024-02-18T04:25:07.678827Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1520214080810547, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__dme_professional", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select distinct \n  claim_id\n, claim_line_number\n, 'Durable Medical Equipment' as service_category_2\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and hcpcs_code between 'E0100' and 'E8002'", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_dme_professional\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:07.576756Z", "completed_at": "2024-02-18T04:25:07.611770Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:07.615606Z", "completed_at": "2024-02-18T04:25:07.707545Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.14223527908325195, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__dq_input_layer_tests", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select distinct \n  claim_id\n, 'Multiple claim_type' as dq_problem\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\ngroup by 1\nhaving count(distinct claim_type) > 1\n\nunion all\n\nselect distinct \n  claim_id\n, 'Multiple bill_type_code' as dq_problem\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\ngroup by 1\nhaving count(distinct bill_type_code) > 1\n\nunion all\n\nselect distinct \n  claim_id\n, 'Missing claim_type' as dq_problem\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Missing place_of_service_code' as dq_problem\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Missing bill_type_code' as dq_problem\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and bill_type_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Missing revenue_center_code' as dq_problem\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and revenue_center_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Missing hcpcs_code' as dq_problem\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and hcpcs_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Invalid claim_type' as dq_problem\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim a\ninner join \"synthea\".\"terminology\".\"claim_type\" b\n  on a.claim_type = b.claim_type\nwhere b.claim_type is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Invalid place_of_service_code' as dq_problem\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim a\ninner join \"synthea\".\"terminology\".\"place_of_service\" b\n  on a.place_of_service_code = b.place_of_service_code\nwhere a.claim_type = 'professional'\n  and b.place_of_service_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Invalid bill_type_code' as dq_problem\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim a\ninner join \"synthea\".\"terminology\".\"bill_type\" b\n  on a.bill_type_code = b.bill_type_code\nwhere a.claim_type = 'institutional'\n  and b.bill_type_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Invalid revenue_center_code' as dq_problem\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim a\ninner join \"synthea\".\"terminology\".\"revenue_center\" b\n  on a.revenue_center_code = b.revenue_center_code\nwhere a.claim_type = 'institutional'\n  and b.revenue_center_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Invalid hcpcs_code' as dq_problem\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim a\ninner join \"synthea\".\"terminology\".\"hcpcs_level_2\" b\n  on a.hcpcs_code = b.hcpcs\nwhere a.claim_type = 'professional'\n  and b.hcpcs is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Invalid ms_drg_code' as dq_problem\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim a\ninner join \"synthea\".\"terminology\".\"ms_drg\" b\n  on a.ms_drg_code = b.ms_drg_code\nwhere a.claim_type = 'institutional'\n  and b.ms_drg_code is null\n\nunion all\n\nselect distinct \n  claim_id\n, 'Invalid apr_drg_code' as dq_problem\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim a\ninner join \"synthea\".\"terminology\".\"apr_drg\" b\n  on a.apr_drg_code = b.apr_drg_code\nwhere a.claim_type = 'institutional'\n  and b.apr_drg_code is null", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_dq_input_layer_tests\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:07.679291Z", "completed_at": "2024-02-18T04:25:07.689409Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:07.692974Z", "completed_at": "2024-02-18T04:25:07.759214Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.08881235122680664, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__emergency_department_professional", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select distinct \n  claim_id\n, claim_line_number\n, 'Emergency Department' as service_category_2\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code = '23'", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_emergency_department_professional\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:07.667428Z", "completed_at": "2024-02-18T04:25:07.675452Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:07.683407Z", "completed_at": "2024-02-18T04:25:07.761056Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.10452866554260254, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__duplicate_bill_types", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select distinct\n  claim_id\n, count(distinct bill_type_code) as cnt\nfrom __dbt__cte__service_category__stg_medical_claim\ngroup by 1\nhaving count(distinct bill_type_code) > 1", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_duplicate_bill_types\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:07.708170Z", "completed_at": "2024-02-18T04:25:07.715774Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:07.721049Z", "completed_at": "2024-02-18T04:25:07.790543Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0907754898071289, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__home_health_institutional", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select distinct \n  claim_id\n, 'Home Health' as service_category_2\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and left(bill_type_code,2) in ('31','32','33')", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_home_health_institutional\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:07.738279Z", "completed_at": "2024-02-18T04:25:07.744754Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:07.750296Z", "completed_at": "2024-02-18T04:25:07.815840Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.08995771408081055, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__hospice_institutional", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select distinct \n  claim_id\n, 'Hospice' as service_category_2\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and left(bill_type_code,2) in ('81','82')", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_hospice_institutional\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:07.781056Z", "completed_at": "2024-02-18T04:25:07.791437Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:07.795790Z", "completed_at": "2024-02-18T04:25:07.862412Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.09167075157165527, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__hospice_professional", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select distinct \n  claim_id\n, claim_line_number\n, 'Hospice' as service_category_2\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('34')", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_hospice_professional\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:07.785426Z", "completed_at": "2024-02-18T04:25:07.793562Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:07.800062Z", "completed_at": "2024-02-18T04:25:07.868844Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.09680652618408203, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__inpatient_psychiatric_professional", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select distinct \n  claim_id\n, claim_line_number\n, 'Inpatient Psychiatric' as service_category_2\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('51','55','56')", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_inpatient_psychiatric_professional\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:07.816307Z", "completed_at": "2024-02-18T04:25:07.823620Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:07.828835Z", "completed_at": "2024-02-18T04:25:07.893919Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09458398818969727, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__inpatient_rehab_professional", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select distinct \n  claim_id\n, claim_line_number\n, 'Inpatient Rehabilitation' as service_category_2\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('61')", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_inpatient_rehab_professional\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:07.844989Z", "completed_at": "2024-02-18T04:25:07.853918Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:07.858647Z", "completed_at": "2024-02-18T04:25:07.928334Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.09321403503417969, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__lab_institutional", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select distinct \n  claim_id\n, 'Lab' as service_category_2\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and left(bill_type_code,2) in ('14')", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_lab_institutional\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:07.883509Z", "completed_at": "2024-02-18T04:25:07.892042Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:07.899866Z", "completed_at": "2024-02-18T04:25:07.966466Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.09650421142578125, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__lab_professional", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select distinct \n  claim_id\n, claim_line_number\n, 'Lab' as service_category_2\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code = '81'", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_lab_professional\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:07.895230Z", "completed_at": "2024-02-18T04:25:07.907233Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:07.910846Z", "completed_at": "2024-02-18T04:25:07.976471Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.09066581726074219, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__office_visit_professional", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select distinct \n  claim_id\n, claim_line_number\n, 'Office Visit' as service_category_2\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('11','02')", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_office_visit_professional\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:07.922787Z", "completed_at": "2024-02-18T04:25:07.930606Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:07.936352Z", "completed_at": "2024-02-18T04:25:08.009507Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09564447402954102, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_hospital_or_clinic_professional", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select distinct \n  claim_id\n, claim_line_number\n, 'Outpatient Hospital or Clinic' as service_category_2\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('15','17','19','22','49','50','60','71','72')", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_outpatient_hospital_or_clinic_professional\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:07.952437Z", "completed_at": "2024-02-18T04:25:07.960634Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:07.967252Z", "completed_at": "2024-02-18T04:25:08.031159Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0921177864074707, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_psychiatric_institutional", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select distinct \n  claim_id\n, 'Outpatient Psychiatric' as service_category_2\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and left(bill_type_code,2) in ('52')", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_outpatient_psychiatric_institutional\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:07.988520Z", "completed_at": "2024-02-18T04:25:07.998582Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:08.005697Z", "completed_at": "2024-02-18T04:25:08.070356Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.09577703475952148, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_psychiatric_professional", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select distinct \n  claim_id\n, claim_line_number\n, 'Outpatient Psychiatric' as service_category_2\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('52','53','57','58')", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_outpatient_psychiatric_professional\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:08.001106Z", "completed_at": "2024-02-18T04:25:08.011887Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:08.015894Z", "completed_at": "2024-02-18T04:25:08.083412Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.09258770942687988, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_rehab_professional", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select distinct \n  claim_id\n, claim_line_number\n, 'Outpatient Rehabilitation' as service_category_2\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('62')", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_outpatient_rehab_professional\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:08.032077Z", "completed_at": "2024-02-18T04:25:08.041159Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:08.045030Z", "completed_at": "2024-02-18T04:25:08.110374Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09382748603820801, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__skilled_nursing_institutional", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select distinct \n  claim_id\n, 'Skilled Nursing' as service_category_2\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'institutional'\n  and left(bill_type_code,2) in ('21','22')", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_skilled_nursing_institutional\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:08.059151Z", "completed_at": "2024-02-18T04:25:08.067432Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:08.071165Z", "completed_at": "2024-02-18T04:25:08.137206Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.09043526649475098, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__urgent_care_professional", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select distinct \n  claim_id\n, claim_line_number\n, 'Urgent Care' as service_category_2\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim\nwhere claim_type = 'professional'\n  and place_of_service_code in ('20')", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_urgent_care_professional\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:08.097914Z", "completed_at": "2024-02-18T04:25:08.107388Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:08.114883Z", "completed_at": "2024-02-18T04:25:08.184339Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.09705305099487305, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__emergency_department_institutional", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select distinct \n    med.claim_id\n    , 'Emergency Department' as service_category_2\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim med\nleft join \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional\" inpatient\n    on med.claim_id = inpatient.claim_id\nwhere claim_type = 'institutional'\nand revenue_center_code in ('0450','0451','0452','0459','0981')\nand inpatient.claim_id is null\n-- 0456, urgent care, is included in most published definitions\n-- that also include a requirement of a bill type code for\n-- inpatient or outpatient hospital.", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_emergency_department_institutional\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:08.110791Z", "completed_at": "2024-02-18T04:25:08.121358Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:08.124975Z", "completed_at": "2024-02-18T04:25:08.265632Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.163895845413208, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_medical_claim", "compiled": true, "compiled_code": "\n    \nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_institutional_header_fail_details\"\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_professional_header_fail_details\"\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_inst_missing_values\"\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_prof_missing_values\"\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_invalid_values\"\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_claim_type_unmapped\"\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_claim_type_mapping_failures\"\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_duplicates\"\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_plausibility\"\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_dates\"\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_dates_inst\"\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_line_numbers\"\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_invalid_npi\"", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_test_detail_stage_medical_claim\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:08.139747Z", "completed_at": "2024-02-18T04:25:08.150090Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:08.153087Z", "completed_at": "2024-02-18T04:25:08.267027Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1365063190460205, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__ambulatory_surgery_professional", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select distinct \n  a.claim_id\n, a.claim_line_number\n, 'Ambulatory Surgery' as service_category_2\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim a\nleft join \"synthea\".\"claims_preprocessing\".\"_int_dme_professional\" b\n  on a.claim_id = b.claim_id\n  and a.claim_line_number = b.claim_line_number\nwhere a.claim_type = 'professional'\n  and a.place_of_service_code in ('24')\n  and (b.claim_id is null and b.claim_line_number is null)", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_ambulatory_surgery_professional\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:08.164610Z", "completed_at": "2024-02-18T04:25:08.176062Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:08.179413Z", "completed_at": "2024-02-18T04:25:08.290206Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.13173151016235352, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__home_health_professional", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select distinct \n  a.claim_id\n, a.claim_line_number\n, 'Home Health' as service_category_2\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim a\nleft join \"synthea\".\"claims_preprocessing\".\"_int_dme_professional\" b\n  on a.claim_id = b.claim_id\n  and a.claim_line_number = b.claim_line_number\nwhere a.claim_type = 'professional'\n  and a.place_of_service_code in ('12')\n  and (b.claim_id is null and b.claim_line_number is null)", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_home_health_professional\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:08.202317Z", "completed_at": "2024-02-18T04:25:08.208795Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:08.209682Z", "completed_at": "2024-02-18T04:25:08.291253Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.21532964706420898, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__skilled_nursing_professional", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select distinct \n  a.claim_id\n, a.claim_line_number\n, 'Skilled Nursing' as service_category_2\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim a\nleft join \"synthea\".\"claims_preprocessing\".\"_int_dme_professional\" b\n  on a.claim_id = b.claim_id\n  and a.claim_line_number = b.claim_line_number\nwhere claim_type = 'professional'\n  and place_of_service_code in ('31','32')\n  and (b.claim_id is null and b.claim_line_number is null)", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_skilled_nursing_professional\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:08.285118Z", "completed_at": "2024-02-18T04:25:08.292032Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:08.416325Z", "completed_at": "2024-02-18T04:25:08.463074Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2750704288482666, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__dq_input_layer_results", "compiled": true, "compiled_code": "\n\nselect\n  dq_problem\n, count(distinct claim_id) as distinct_claims\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_dq_input_layer_tests\"\ngroup by 1", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_dq_input_layer_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:08.568884Z", "completed_at": "2024-02-18T04:25:08.584179Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:08.585515Z", "completed_at": "2024-02-18T04:25:08.650935Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08764266967773438, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__urgent_care_institutional", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select distinct \n  a.claim_id\n, 'Urgent Care' as service_category_2\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim a\nleft join \"synthea\".\"claims_preprocessing\".\"_int_emergency_department_institutional\" b\n  on a.claim_id = b.claim_id\nwhere claim_type = 'institutional'\n  and revenue_center_code = '0456'\n  and left(bill_type_code,2) in ('13','71','73')\n  and b.claim_id is null", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_urgent_care_institutional\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:08.577653Z", "completed_at": "2024-02-18T04:25:08.589041Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:08.591170Z", "completed_at": "2024-02-18T04:25:08.666079Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.10838532447814941, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__combined_professional", "compiled": true, "compiled_code": "\n\nwith combined as (\nselect *\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_professional\"\n\nunion all\n\nselect *\nfrom \"synthea\".\"claims_preprocessing\".\"_int_ambulatory_surgery_professional\"\n\nunion all\n\nselect *\nfrom \"synthea\".\"claims_preprocessing\".\"_int_dialysis_professional\"\n\nunion all\n\nselect *\nfrom \"synthea\".\"claims_preprocessing\".\"_int_emergency_department_professional\"\n\nunion all\n\nselect *\nfrom \"synthea\".\"claims_preprocessing\".\"_int_home_health_professional\"\n\nunion all\n\nselect *\nfrom \"synthea\".\"claims_preprocessing\".\"_int_hospice_professional\"\n\nunion all\n\nselect *\nfrom \"synthea\".\"claims_preprocessing\".\"_int_inpatient_psychiatric_professional\"\n\nunion all\n\nselect *\nfrom \"synthea\".\"claims_preprocessing\".\"_int_inpatient_rehab_professional\"\n\nunion all\n\nselect *\nfrom \"synthea\".\"claims_preprocessing\".\"_int_lab_professional\"\n\nunion all\n\nselect *\nfrom \"synthea\".\"claims_preprocessing\".\"_int_office_visit_professional\"\n\nunion all\n\nselect *\nfrom \"synthea\".\"claims_preprocessing\".\"_int_outpatient_hospital_or_clinic_professional\"\n\nunion all\n\nselect *\nfrom \"synthea\".\"claims_preprocessing\".\"_int_outpatient_psychiatric_professional\"\n\nunion all\n\nselect *\nfrom \"synthea\".\"claims_preprocessing\".\"_int_outpatient_rehab_professional\"\n\nunion all\n\nselect *\nfrom \"synthea\".\"claims_preprocessing\".\"_int_skilled_nursing_professional\"\n\nunion all\n\nselect *\nfrom \"synthea\".\"claims_preprocessing\".\"_int_urgent_care_professional\"\n)\n\nselect \n  claim_id\n, claim_line_number\n, service_category_2\n, tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_dme_professional\"\n\nunion all\n\nselect \n  a.claim_id\n, a.claim_line_number\n, a.service_category_2\n, a.tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_ambulance_professional\" a\nleft join \"synthea\".\"claims_preprocessing\".\"_int_dme_professional\" b\n  on a.claim_id = b.claim_id\n  and a.claim_line_number = b.claim_line_number\nwhere (b.claim_id is null and b.claim_line_number is null)\n\nunion all\n\nselect \n  a.claim_id\n, a.claim_line_number\n, a.service_category_2\n, a.tuva_last_run\nfrom combined a\nleft join \"synthea\".\"claims_preprocessing\".\"_int_dme_professional\" b\n  on a.claim_id = b.claim_id\n  and a.claim_line_number = b.claim_line_number\nleft join \"synthea\".\"claims_preprocessing\".\"_int_ambulance_professional\" c\n  on a.claim_id = c.claim_id\n  and a.claim_line_number = c.claim_line_number\nwhere (b.claim_id is null and b.claim_line_number is null)\n  and (c.claim_id is null and c.claim_line_number is null)", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_combined_professional\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:08.574242Z", "completed_at": "2024-02-18T04:25:08.589442Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:08.594498Z", "completed_at": "2024-02-18T04:25:08.766726Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.20621967315673828, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail", "compiled": true, "compiled_code": "\n\nwith test_detail_union as(\n\nselect * from \"synthea\".\"data_quality\".\"_int_claims_preprocessing_test_detail_stage_medical_claim\"\nunion all\nselect * from \"synthea\".\"data_quality\".\"_int_claims_preprocessing_test_detail_stage_eligibility\"\nunion all\nselect * from \"synthea\".\"data_quality\".\"_int_claims_preprocessing_test_detail_stage_pharmacy_claim\"\n\n\n)\n\nselect \n    source_table\n    , case \n        when source_table = 'normalized_input__medical_claim' and test_category = 'duplicate_claims'\n            then '1_duplicate_claims'\n        when source_table = 'normalized_input__medical_claim' and test_category = 'claim_type'\n            then '2_claim_type'\n        when source_table = 'normalized_input__medical_claim' and test_category = 'header'\n            then '3_header'\n        when source_table = 'normalized_input__medical_claim' and test_category = 'invalid_values'\n            then '4_invalid_values'\n        when source_table = 'normalized_input__medical_claim' and test_category = 'missing_values'\n            then '5_missing_values'\n        when source_table = 'normalized_input__medical_claim' and test_category = 'plausibility'\n            then '6_plausibility'            \n        when source_table = 'normalized_input__eligibility' and test_category = 'duplicate_eligibility'\n            then '1_duplicate_eligibility'\n        when source_table = 'normalized_input__eligibility' and test_category = 'invalid_values'\n            then '2_invalid_values'\n        when source_table = 'normalized_input__eligibility' and test_category = 'missing_values'\n            then '3_missing_values'\n        when source_table = 'normalized_input__eligibility' and test_category = 'plausibility'\n            then '4_plausibility'\n        when source_table = 'normalized_input__pharmacy_claim' and test_category = 'duplicate_claims'\n            then '1_duplicate_claims'\n        when source_table = 'normalized_input__pharmacy_claim' and test_category = 'missing_values'\n            then '2_missing_values'\n        when source_table = 'normalized_input__pharmacy_claim' and test_category = 'plausibility'\n            then '3_plausibility'\n        else test_category \n      end as test_category\n    , test_name \n    , grain\n    , claim_type\n    , pipeline_test\n    , foreign_key\n    , data_source\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom test_detail_union", "relation_name": "\"synthea\".\"data_quality\".\"claims_preprocessing_test_detail\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:08.739183Z", "completed_at": "2024-02-18T04:25:08.744297Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:08.746233Z", "completed_at": "2024-02-18T04:25:08.797137Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06364059448242188, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__dq_multiple_service_categories_professional", "compiled": true, "compiled_code": "\n\nselect\n  claim_id\n, claim_line_number\n, count(distinct service_category_2) as distinct_service_category_count\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_combined_professional\"\ngroup by 1,2\nhaving count(distinct service_category_2) > 1", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_dq_multiple_service_categories_professional\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:08.666678Z", "completed_at": "2024-02-18T04:25:08.676434Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:08.678343Z", "completed_at": "2024-02-18T04:25:08.800350Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.2526395320892334, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_hospital_or_clinic_institutional", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select distinct \n  a.claim_id\n, 'Outpatient Hospital or Clinic' as service_category_2\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom __dbt__cte__service_category__stg_medical_claim a\nleft join \"synthea\".\"claims_preprocessing\".\"_int_emergency_department_institutional\" b\n  on a.claim_id = b.claim_id\nleft join \"synthea\".\"claims_preprocessing\".\"_int_urgent_care_institutional\" c\n  on a.claim_id = c.claim_id\nwhere a.claim_type = 'institutional'\n  and left(a.bill_type_code,2) in ('13','71','73')\n  and b.claim_id is null\n  and c.claim_id is null", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_outpatient_hospital_or_clinic_institutional\""}, {"status": "fail", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:08.788424Z", "completed_at": "2024-02-18T04:25:08.799260Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:08.803519Z", "completed_at": "2024-02-18T04:25:08.974112Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2024250030517578, "adapter_response": {"_message": "OK"}, "message": "Got 603 results, configured to fail if != 0", "failures": 603, "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_source_table.cf991d30ab", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect source_table\nfrom \"synthea\".\"data_quality\".\"claims_preprocessing_test_detail\"\nwhere source_table is null\n\n\n", "relation_name": null}, {"status": "fail", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:08.792468Z", "completed_at": "2024-02-18T04:25:08.800790Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:08.916855Z", "completed_at": "2024-02-18T04:25:08.975617Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.20472979545593262, "adapter_response": {"_message": "OK"}, "message": "Got 603 results, configured to fail if != 0", "failures": 603, "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_test_category.ced96217c6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect test_category\nfrom \"synthea\".\"data_quality\".\"claims_preprocessing_test_detail\"\nwhere test_category is null\n\n\n", "relation_name": null}, {"status": "fail", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:08.958609Z", "completed_at": "2024-02-18T04:25:08.965080Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:08.971262Z", "completed_at": "2024-02-18T04:25:09.026942Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10819292068481445, "adapter_response": {"_message": "OK"}, "message": "Got 603 results, configured to fail if != 0", "failures": 603, "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_test_name.dba1927ba6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect test_name\nfrom \"synthea\".\"data_quality\".\"claims_preprocessing_test_detail\"\nwhere test_name is null\n\n\n", "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_summary", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"data_quality\".\"claims_preprocessing_summary\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_eligibility", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_test_result_stage_eligibility\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_medical_claim", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_test_result_stage_medical_claim\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_pharmacy_claim", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_test_result_stage_pharmacy_claim\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_use_case", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"data_quality\".\"claims_preprocessing_use_case\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.claims_preprocessing_pipeline_checks_data_quality__claims_preprocessing_summary_.b6e0d43468", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_summary_source_table.69a94b9930", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_summary_test_category.096fbc6a15", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_result", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"data_quality\".\"claims_preprocessing_test_result\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:08.965458Z", "completed_at": "2024-02-18T04:25:08.974518Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:08.978452Z", "completed_at": "2024-02-18T04:25:09.048452Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.18457865715026855, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__combined_institutional", "compiled": true, "compiled_code": "\n\nwith duplicate_bill_types as (\nselect distinct\n  claim_id\n, 'Other' as service_category_2\nfrom \"synthea\".\"claims_preprocessing\".\"_int_duplicate_bill_types\"\n)\n\n, combine as (\nselect *\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional\"\n\nunion all\n\nselect *\nfrom \"synthea\".\"claims_preprocessing\".\"_int_dialysis_institutional\"\n\nunion all\n\nselect *\nfrom \"synthea\".\"claims_preprocessing\".\"_int_emergency_department_institutional\"\n\nunion all\n\nselect *\nfrom \"synthea\".\"claims_preprocessing\".\"_int_home_health_institutional\"\n\nunion all\n\nselect *\nfrom \"synthea\".\"claims_preprocessing\".\"_int_hospice_institutional\"\n\nunion all\n\nselect *\nfrom \"synthea\".\"claims_preprocessing\".\"_int_lab_institutional\"\n\nunion all\n\nselect *\nfrom \"synthea\".\"claims_preprocessing\".\"_int_outpatient_hospital_or_clinic_institutional\"\n\nunion all\n\nselect *\nfrom \"synthea\".\"claims_preprocessing\".\"_int_outpatient_psychiatric_institutional\"\n\nunion all\n\nselect *\nfrom \"synthea\".\"claims_preprocessing\".\"_int_skilled_nursing_institutional\"\n\nunion all\n\nselect *\nfrom \"synthea\".\"claims_preprocessing\".\"_int_urgent_care_institutional\"\n)\n\nselect\n  claim_id\n, service_category_2\nfrom duplicate_bill_types\n\nunion all\n\nselect\n  a.claim_id\n, a.service_category_2\nfrom combine a\nleft join duplicate_bill_types b\n  on a.claim_id = b.claim_id\nwhere b.claim_id is null", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_combined_institutional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_source_table.aa47c26a47", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_test_name.d9661e41fa", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_use_case.50708d3a7d", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_eligibility", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"_stg_claims_eligibility\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_patient", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"_stg_claims_patient\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_pharmacy_claim", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"_stg_claims_pharmacy_claim\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_source_table.6995ae2e57", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_test_category.70042a7a27", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_test_name.745065a5e9", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__eligibility", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"eligibility\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__patient", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"patient\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__pharmacy_claim", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"pharmacy_claim\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__member_months", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"financial_pmpm\".\"member_months\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_members", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"cms_hcc\".\"_int_members\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.accepted_values_quality_measures__stg_core__patient_sex__female__male__unknown.e6adc9ce2b", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__patient_birth_date.4b3a2e74e6", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__patient_patient_id.5510e1a0fd", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__patient_sex.e2f34cab69", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_cms_hcc__int_members_patient_id.75e528329b", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_cms_hcc__int_members_patient_id.4d202f2bbb", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:09.164119Z", "completed_at": "2024-02-18T04:25:09.197128Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:09.200291Z", "completed_at": "2024-02-18T04:25:09.282546Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.12732863426208496, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__dq_multiple_service_categories_institutional", "compiled": true, "compiled_code": "\n\nselect\n  claim_id\n, count(distinct service_category_2) as distinct_service_category_count\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_combined_institutional\"\ngroup by 1\nhaving count(distinct service_category_2) > 1", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_dq_multiple_service_categories_institutional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_demographic_factors", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"cms_hcc\".\"_int_demographic_factors\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_cms_hcc__int_demographic_factors__patient_id_model_version_.21c6216400", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_enrollment_interaction_factors", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"cms_hcc\".\"_int_enrollment_interaction_factors\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:09.167513Z", "completed_at": "2024-02-18T04:25:09.199125Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:09.205276Z", "completed_at": "2024-02-18T04:25:09.303430Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.23880934715270996, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.service_category__service_category_grouper", "compiled": true, "compiled_code": "\nwith  __dbt__cte__service_category__stg_medical_claim as (\n\n\nselect\nAPR_DRG_CODE,\nBILL_TYPE_CODE,\nCLAIM_ID,\nCLAIM_LINE_NUMBER,\nCLAIM_TYPE,\nHCPCS_CODE,\nMS_DRG_CODE,\nPLACE_OF_SERVICE_CODE,\nREVENUE_CENTER_CODE,\n'2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n), service_category_1_mapping as(\n    select distinct \n        a.claim_id\n        , a.claim_line_number\n        , a.claim_type\n        , case\n            when service_category_2 = 'Acute Inpatient'               then 'Inpatient'\n            when service_category_2 = 'Ambulance'                     then 'Ancillary'\n            when service_category_2 = 'Ambulatory Surgery'            then 'Outpatient'\n            when service_category_2 = 'Dialysis'                      then 'Outpatient'\n            when service_category_2 = 'Durable Medical Equipment'     then 'Ancillary'\n            when service_category_2 = 'Emergency Department'          then 'Outpatient'\n            when service_category_2 = 'Home Health'                   then 'Outpatient'\n            when service_category_2 = 'Hospice'                       then 'Outpatient'\n            when service_category_2 = 'Inpatient Psychiatric'         then 'Inpatient'\n            when service_category_2 = 'Inpatient Rehabilitation'      then 'Inpatient'\n            when service_category_2 = 'Lab'                           then 'Ancillary'\n            when service_category_2 = 'Office Visit'                  then 'Office Visit'\n            when service_category_2 = 'Outpatient Hospital or Clinic' then 'Outpatient'\n            when service_category_2 = 'Outpatient Psychiatric'        then 'Outpatient'\n            when service_category_2 = 'Outpatient Rehabilitation'     then 'Outpatient'\n            when service_category_2 = 'Skilled Nursing'               then 'Inpatient'\n            when service_category_2 = 'Urgent Care'                   then 'Outpatient'\n            when service_category_2 is null                           then 'Other'\n        end service_category_1\n        , case\n            when service_category_2 is null then 'Other'\n            else service_category_2\n        end service_category_2\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from __dbt__cte__service_category__stg_medical_claim a\n    left join \"synthea\".\"claims_preprocessing\".\"_int_combined_professional\" b\n    on a.claim_id = b.claim_id\n    and a.claim_line_number = b.claim_line_number\n    where a.claim_type = 'professional'\n\n    union all\n\n    select distinct \n        a.claim_id\n        , a.claim_line_number\n        , a.claim_type\n        , case\n            when service_category_2 = 'Acute Inpatient'               then 'Inpatient'\n            when service_category_2 = 'Ambulatory Surgery'            then 'Outpatient'\n            when service_category_2 = 'Dialysis'                      then 'Outpatient'\n            when service_category_2 = 'Emergency Department'          then 'Outpatient'\n            when service_category_2 = 'Home Health'                   then 'Outpatient'\n            when service_category_2 = 'Hospice'                       then 'Outpatient'\n            when service_category_2 = 'Inpatient Psychiatric'         then 'Inpatient'\n            when service_category_2 = 'Inpatient Rehabilitation'      then 'Inpatient'\n            when service_category_2 = 'Lab'                           then 'Ancillary'\n            when service_category_2 = 'Office Visit'                  then 'Office Visit'\n            when service_category_2 = 'Outpatient Hospital or Clinic' then 'Outpatient'\n            when service_category_2 = 'Outpatient Psychiatric'        then 'Outpatient'\n            when service_category_2 = 'Skilled Nursing'               then 'Inpatient'\n            when service_category_2 = 'Urgent Care'                   then 'Outpatient'\n            when service_category_2 is null                           then 'Other'\n        end service_category_1\n        , case\n            when service_category_2 is null then 'Other'\n            else service_category_2\n        end service_category_2\n        , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n    from __dbt__cte__service_category__stg_medical_claim a\n    left join \"synthea\".\"claims_preprocessing\".\"_int_combined_institutional\" b\n    on a.claim_id = b.claim_id\n    where a.claim_type = 'institutional'\n)\n, service_category_2_deduplication as(\n    select \n        claim_id\n        , claim_line_number\n        , claim_type\n        , service_category_1\n        , service_category_2\n        , row_number() over (partition by claim_id, claim_line_number order by \n            case\n            when service_category_2 = 'Acute Inpatient'               then 3\n            when service_category_2 = 'Ambulance'                     then 7\n            when service_category_2 = 'Ambulatory Surgery'            then 8\n            when service_category_2 = 'Dialysis'                      then 17\n            when service_category_2 = 'Durable Medical Equipment'     then 1\n            when service_category_2 = 'Emergency Department'          then 5\n            when service_category_2 = 'Home Health'                   then 9\n            when service_category_2 = 'Hospice'                       then 10\n            when service_category_2 = 'Inpatient Psychiatric'         then 11\n            when service_category_2 = 'Inpatient Rehabilitation'      then 12\n            when service_category_2 = 'Lab'                           then 13\n            when service_category_2 = 'Office Visit'                  then 4\n            when service_category_2 = 'Outpatient Hospital or Clinic' then 14\n            when service_category_2 = 'Outpatient Psychiatric'        then 15\n            when service_category_2 = 'Outpatient Rehabilitation'     then 16\n            when service_category_2 = 'Skilled Nursing'               then 6\n            when service_category_2 = 'Urgent Care'                   then 2\n            when service_category_2 is null                           then 18\n                else 99 end) as duplicate_row_number\n    from service_category_1_mapping\n)\n\nselect\n    claim_id\n    , claim_line_number\n    , claim_type\n    , service_category_1\n    , service_category_2\nfrom service_category_2_deduplication\nwhere duplicate_row_number = 1", "relation_name": "\"synthea\".\"claims_preprocessing\".\"service_category_grouper\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:09.435542Z", "completed_at": "2024-02-18T04:25:09.501826Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:09.506505Z", "completed_at": "2024-02-18T04:25:09.573733Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.15774869918823242, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.emergency_department__int_institutional_claims", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__emergency_department__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n),  __dbt__cte__emergency_department__stg_service_category as (\n\n\n\nselect\n    claim_id\n    , claim_type\n    , claim_line_number\n    , service_category_2\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"service_category_grouper\"\n), emergency_department_claim_lines as (\nselect\n  mc.patient_id,\n  mc.claim_id,\n  mc.claim_line_number,\n  mc.claim_start_date,\n  mc.claim_end_date,\n  mc.admission_date,\n  mc.discharge_date,\n  mc.admit_source_code,\n  mc.admit_type_code,\n  mc.discharge_disposition_code,\n  mc.facility_npi,\n  mc.claim_type,\n  mc.data_source\nfrom __dbt__cte__emergency_department__stg_medical_claim mc\ninner join __dbt__cte__emergency_department__stg_service_category sc\n  on mc.claim_id = sc.claim_id\nwhere mc.claim_type = 'institutional'\n  and sc.service_category_2 = 'Emergency Department'\n),\n\ndata_quality_flags as (\nselect\n  claim_id,\n-- patient_id_not_unique:\n  case\n    when count(distinct patient_id) > 1 then 1\n    else 0\n  end as patient_id_not_unique,\n-- patient_id_missing:  \n  case\n    when max(patient_id) is null then 1\n    else 0\n  end as patient_id_missing,  \n-- claim_start_date_not_unique:\n  case\n    when count(distinct claim_start_date) > 1 then 1\n    else 0\n  end as claim_start_date_not_unique,\n-- claim_start_date_missing:  \n  case\n    when max(claim_start_date) is null then 1\n    else 0\n  end as claim_start_date_missing,\n-- claim_end_date_not_unique:\n  case\n    when count(distinct claim_end_date) > 1 then 1\n    else 0\n  end as claim_end_date_not_unique,\n-- claim_end_date_missing:  \n  case\n    when max(claim_end_date) is null then 1\n    else 0\n  end as claim_end_date_missing,\n-- claim_start_date_after_claim_end_date:\n  case\n    when min(claim_start_date) > max(claim_end_date) then 1\n    else 0\n  end as claim_start_date_after_claim_end_date,\n-- admission_date_not_unique:\n  case\n    when count(distinct admission_date) > 1 then 1\n    else 0\n  end as admission_date_not_unique,\n-- admission_date_missing:  \n  case\n    when max(admission_date) is null then 1\n    else 0\n  end as admission_date_missing,\n-- discharge_date_not_unique:\n  case\n    when count(distinct discharge_date) > 1 then 1\n    else 0\n  end as discharge_date_not_unique,\n-- discharge_date_missing:  \n  case\n    when max(discharge_date) is null then 1\n    else 0\n  end as discharge_date_missing,\n-- admission_date_after_discharge_date:\n  case\n    when min(admission_date) > max(discharge_date) then 1\n    else 0\n  end as admission_date_after_discharge_date,\n-- admit_type_code_not_unique:\n  case\n    when count(distinct admit_type_code) > 1 then 1\n    else 0\n  end as admit_type_code_not_unique,\n-- admit_type_code_missing:  \n  case\n    when max(admit_type_code) is null then 1\n    else 0\n  end as admit_type_code_missing,  \n-- admit_source_code_not_unique:\n  case\n    when count(distinct admit_source_code) > 1 then 1\n    else 0\n  end as admit_source_code_not_unique,\n-- admit_source_code_missing:  \n  case\n    when max(admit_source_code) is null then 1\n    else 0\n  end as admit_source_code_missing,  \n-- discharge_disposition_code_not_unique:\n  case\n    when count(distinct discharge_disposition_code) > 1 then 1\n    else 0\n  end as discharge_disposition_code_not_unique,\n-- discharge_disposition_code_missing:  \n  case\n    when max(discharge_disposition_code) is null then 1\n    else 0\n  end as discharge_disposition_code_missing,\n-- facility_npi_not_unique:\n  case\n    when count(distinct facility_npi) > 1 then 1\n    else 0\n  end as facility_npi_not_unique,\n-- facility_npi_missing:  \n  case\n    when max(facility_npi) is null then 1\n    else 0\n  end as facility_npi_missing,\n-- claim_type_not_unique:\n  case\n    when count(distinct claim_type) > 1 then 1\n    else 0\n  end as claim_type_not_unique,\n-- claim_type_missing:  \n  case\n    when max(claim_type) is null then 1\n    else 0\n  end as claim_type_missing,\n-- claim_type_not_institutional:\n  case\n    when max(claim_type) <> 'institutional'\n     and min(claim_type) <> 'institutional' then 1\n    else 0\n  end as claim_type_not_institutional\nfrom emergency_department_claim_lines\ngroup by claim_id\n),\n\n\nheader_level_values as (\nselect\n  claim_id,\n  max(patient_id) as patient_id,\n  min(claim_start_date) as claim_start_date,\n  max(claim_end_date) as claim_end_date,\n  min(admission_date) as admission_date,\n  max(discharge_date) as discharge_date,\n  max(admit_source_code) as admit_source_code,\n  max(admit_type_code) as admit_type_code,\n  max(discharge_disposition_code) as discharge_disposition_code,\n  max(facility_npi) as facility_npi,\n  max(claim_type) as claim_type,\n  coalesce(min(admission_date),\n           min(claim_start_date)) as start_date,\n  coalesce(max(discharge_date),\n           max(claim_end_date)) as end_date,\n  case\n    when min(admission_date) is not null then 'admission_date'\n    when min(claim_start_date) is not null then 'claim_start_date'\n    else null\n  end as date_used_as_start_date,\n  case\n    when max(discharge_date) is not null then 'discharge_date'\n    when max(claim_end_date) is not null then 'claim_end_date'\n    else null\n  end as date_used_as_end_date,\n  data_source\nfrom emergency_department_claim_lines\ngroup by claim_id, data_source\n)\n\nselect\n  h.patient_id as patient_id,\n  h.claim_id as claim_id,  \n  h.claim_start_date as claim_start_date,\n  h.claim_end_date as claim_end_date,\n  h.admission_date as admission_date,\n  h.discharge_date as discharge_date,\n  h.admit_source_code as admit_source_code,\n  h.admit_type_code as admit_type_code,\n  h.discharge_disposition_code as discharge_disposition_code,\n  h.facility_npi as facility_npi,\n  h.claim_type as claim_type,\n  h.start_date as start_date,\n  h.end_date as end_date,\n  h.date_used_as_start_date,\n  h.date_used_as_end_date, \n\n  case\n    when\n      ( (dq.patient_id_not_unique = 1) or\n        (dq.patient_id_missing = 1) or\n        (dq.discharge_disposition_code_not_unique = 1) or\n        (dq.discharge_disposition_code_missing = 1) or\n        (dq.facility_npi_not_unique = 1) or\n        (dq.facility_npi_missing = 1) or\n        (h.date_used_as_start_date is null) or\n\t(h.date_used_as_end_date is null) or\n\t(h.start_date > h.end_date) ) then 1\n    else 0\n  end as dq_problem,\n\n  case\n    when\n      ( (dq.claim_start_date_not_unique = 1) or\n\t(dq.claim_start_date_missing = 1) or\n        (dq.claim_end_date_not_unique = 1) or\n        (dq.claim_end_date_missing = 1) or\n        (dq.claim_start_date_after_claim_end_date = 1) or\n        (dq.admission_date_not_unique = 1) or\n        (dq.admission_date_missing = 1) or\n        (dq.discharge_date_not_unique = 1) or\n        (dq.discharge_date_missing = 1) or\n        (dq.admission_date_after_discharge_date = 1) or\n        (dq.admit_type_code_not_unique = 1) or\n        (dq.admit_type_code_missing = 1) or\n        (dq.admit_source_code_not_unique = 1) or\n        (dq.admit_source_code_missing = 1) or\t\n        (dq.claim_type_not_unique = 1) or\n        (dq.claim_type_missing = 1) or\n        (dq.claim_type_not_institutional = 1) ) then 1\n    else 0\n  end as dq_insight,\n\n  case\n    when (h.date_used_as_start_date is null) then 1\n    else 0\n  end as start_date_not_determined,\n  \n  case\n    when (h.date_used_as_end_date is null) then 1\n    else 0\n  end as end_date_not_determined,\n\n  case\n    when (h.start_date > h.end_date) then 1\n    else 0\n  end as start_date_after_end_date,\n  \n  dq.patient_id_not_unique as patient_id_not_unique,\n  dq.patient_id_missing as patient_id_missing,\n  dq.claim_start_date_not_unique as claim_start_date_not_unique,\n  dq.claim_start_date_missing as claim_start_date_missing,\n  dq.claim_end_date_not_unique as claim_end_date_not_unique,\n  dq.claim_end_date_missing as claim_end_date_missing,\n  dq.claim_start_date_after_claim_end_date\n       as claim_start_date_after_claim_end_date,\n  dq.admission_date_not_unique as admission_date_not_unique,\n  dq.admission_date_missing as admission_date_missing,\n  dq.discharge_date_not_unique as discharge_date_not_unique,\n  dq.discharge_date_missing as discharge_date_missing,\n  dq.admission_date_after_discharge_date\n       as admission_date_after_discharge_date,\n  dq.admit_type_code_not_unique\n       as admit_type_code_not_unique,\n  dq.admit_type_code_missing\n       as admit_type_code_missing,\n  dq.admit_source_code_not_unique\n       as admit_source_code_not_unique,\n  dq.admit_source_code_missing\n       as admit_source_code_missing,\n  dq.discharge_disposition_code_not_unique\n       as discharge_disposition_code_not_unique,\n  dq.discharge_disposition_code_missing\n       as discharge_disposition_code_missing,\n  dq.facility_npi_not_unique as facility_npi_not_unique,\n  dq.facility_npi_missing as facility_npi_missing,\n  dq.claim_type_not_unique as claim_type_not_unique,\n  dq.claim_type_missing as claim_type_missing,\n  dq.claim_type_not_institutional as claim_type_not_institutional,\n  h.data_source,\n  '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n\nfrom header_level_values h\nleft join data_quality_flags dq\n  on h.claim_id = dq.claim_id", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_emergency_department_institutional_claims\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:09.419923Z", "completed_at": "2024-02-18T04:25:09.501324Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:09.502986Z", "completed_at": "2024-02-18T04:25:09.574831Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2507929801940918, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__institutional_claims", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model gives us all acute inpatient institutional claims.\n-- We have one row per claim_id (for all claim_ids belonging to\n-- acute inpatient institutinal claims).\n-- The number of rows in the table is equal to the number of unique\n-- claim_ids (i.e. claim_id is a primary key).\n-- Note that we are assuming that a claim_id is unique across\n-- all people in the datset, i.e.\n-- that no two people can have the same claim_id.\n-- *************************************************\n\nwith  __dbt__cte__acute_inpatient__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n),  __dbt__cte__acute_inpatient__stg_service_category as (\n\n\n\nSELECT\n  claim_id\n, claim_type\n, claim_line_number\n, service_category_2\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"service_category_grouper\"\n), acute_inpatient_claim_lines as (\nselect\n  mc.patient_id,\n  mc.claim_id,\n  mc.claim_line_number,\n  mc.claim_start_date,\n  mc.claim_end_date,\n  mc.admission_date,\n  mc.discharge_date,\n  mc.admit_source_code,\n  mc.admit_type_code,\n  mc.discharge_disposition_code,\n  mc.facility_npi,\n  mc.claim_type,\n  mc.data_source\nfrom __dbt__cte__acute_inpatient__stg_medical_claim mc\ninner join __dbt__cte__acute_inpatient__stg_service_category sc\n  on mc.claim_id = sc.claim_id\nwhere mc.claim_type = 'institutional'\n  and sc.service_category_2 = 'Acute Inpatient'\n),\n\ndata_quality_flags as (\nselect\n  claim_id,\n-- patient_id_not_unique:\n  case\n    when count(distinct patient_id) > 1 then 1\n    else 0\n  end as patient_id_not_unique,\n-- patient_id_missing:  \n  case\n    when max(patient_id) is null then 1\n    else 0\n  end as patient_id_missing,  \n-- claim_start_date_not_unique:\n  case\n    when count(distinct claim_start_date) > 1 then 1\n    else 0\n  end as claim_start_date_not_unique,\n-- claim_start_date_missing:  \n  case\n    when max(claim_start_date) is null then 1\n    else 0\n  end as claim_start_date_missing,\n-- claim_end_date_not_unique:\n  case\n    when count(distinct claim_end_date) > 1 then 1\n    else 0\n  end as claim_end_date_not_unique,\n-- claim_end_date_missing:  \n  case\n    when max(claim_end_date) is null then 1\n    else 0\n  end as claim_end_date_missing,\n-- claim_start_date_after_claim_end_date:\n  case\n    when min(claim_start_date) > max(claim_end_date) then 1\n    else 0\n  end as claim_start_date_after_claim_end_date,\n-- admission_date_not_unique:\n  case\n    when count(distinct admission_date) > 1 then 1\n    else 0\n  end as admission_date_not_unique,\n-- admission_date_missing:  \n  case\n    when max(admission_date) is null then 1\n    else 0\n  end as admission_date_missing,\n-- discharge_date_not_unique:\n  case\n    when count(distinct discharge_date) > 1 then 1\n    else 0\n  end as discharge_date_not_unique,\n-- discharge_date_missing:  \n  case\n    when max(discharge_date) is null then 1\n    else 0\n  end as discharge_date_missing,\n-- admission_date_after_discharge_date:\n  case\n    when min(admission_date) > max(discharge_date) then 1\n    else 0\n  end as admission_date_after_discharge_date,\n-- admit_type_code_not_unique:\n  case\n    when count(distinct admit_type_code) > 1 then 1\n    else 0\n  end as admit_type_code_not_unique,\n-- admit_type_code_missing:  \n  case\n    when max(admit_type_code) is null then 1\n    else 0\n  end as admit_type_code_missing,  \n-- admit_source_code_not_unique:\n  case\n    when count(distinct admit_source_code) > 1 then 1\n    else 0\n  end as admit_source_code_not_unique,\n-- admit_source_code_missing:  \n  case\n    when max(admit_source_code) is null then 1\n    else 0\n  end as admit_source_code_missing,  \n-- discharge_disposition_code_not_unique:\n  case\n    when count(distinct discharge_disposition_code) > 1 then 1\n    else 0\n  end as discharge_disposition_code_not_unique,\n-- discharge_disposition_code_missing:  \n  case\n    when max(discharge_disposition_code) is null then 1\n    else 0\n  end as discharge_disposition_code_missing,\n-- facility_npi_not_unique:\n  case\n    when count(distinct facility_npi) > 1 then 1\n    else 0\n  end as facility_npi_not_unique,\n-- facility_npi_missing:  \n  case\n    when max(facility_npi) is null then 1\n    else 0\n  end as facility_npi_missing,\n-- claim_type_not_unique:\n  case\n    when count(distinct claim_type) > 1 then 1\n    else 0\n  end as claim_type_not_unique,\n-- claim_type_missing:  \n  case\n    when max(claim_type) is null then 1\n    else 0\n  end as claim_type_missing,\n-- claim_type_not_institutional:\n  case\n    when max(claim_type) <> 'institutional'\n     and min(claim_type) <> 'institutional' then 1\n    else 0\n  end as claim_type_not_institutional\nfrom acute_inpatient_claim_lines\ngroup by claim_id\n),\n\n\nheader_level_values as (\nselect\n  claim_id,\n  max(patient_id) as patient_id,\n  min(claim_start_date) as claim_start_date,\n  max(claim_end_date) as claim_end_date,\n  min(admission_date) as admission_date,\n  max(discharge_date) as discharge_date,\n  max(admit_source_code) as admit_source_code,\n  max(admit_type_code) as admit_type_code,\n  max(discharge_disposition_code) as discharge_disposition_code,\n  max(facility_npi) as facility_npi,\n  max(claim_type) as claim_type,\n  coalesce(min(admission_date),\n           min(claim_start_date)) as start_date,\n  coalesce(max(discharge_date),\n           max(claim_end_date)) as end_date,\n  case\n    when min(admission_date) is not null then 'admission_date'\n    when min(claim_start_date) is not null then 'claim_start_date'\n    else null\n  end as date_used_as_start_date,\n  case\n    when max(discharge_date) is not null then 'discharge_date'\n    when max(claim_end_date) is not null then 'claim_end_date'\n    else null\n  end as date_used_as_end_date,\n  data_source\nfrom acute_inpatient_claim_lines\ngroup by claim_id, data_source\n)\n\nselect\n  h.patient_id as patient_id,\n  h.claim_id as claim_id,  \n  h.claim_start_date as claim_start_date,\n  h.claim_end_date as claim_end_date,\n  h.admission_date as admission_date,\n  h.discharge_date as discharge_date,\n  h.admit_source_code as admit_source_code,\n  h.admit_type_code as admit_type_code,\n  h.discharge_disposition_code as discharge_disposition_code,\n  h.facility_npi as facility_npi,\n  h.claim_type as claim_type,\n  h.start_date as start_date,\n  h.end_date as end_date,\n  h.date_used_as_start_date,\n  h.date_used_as_end_date, \n\n  case\n    when\n      ( (dq.patient_id_not_unique = 1) or\n        (dq.patient_id_missing = 1) or\n        (dq.discharge_disposition_code_not_unique = 1) or\n        (dq.discharge_disposition_code_missing = 1) or\n        (dq.facility_npi_not_unique = 1) or\n        (dq.facility_npi_missing = 1) or\n        (h.date_used_as_start_date is null) or\n\t(h.date_used_as_end_date is null) or\n\t(h.start_date > h.end_date) ) then 1\n    else 0\n  end as dq_problem,\n\n  case\n    when\n      ( (dq.claim_start_date_not_unique = 1) or\n\t(dq.claim_start_date_missing = 1) or\n        (dq.claim_end_date_not_unique = 1) or\n        (dq.claim_end_date_missing = 1) or\n        (dq.claim_start_date_after_claim_end_date = 1) or\n        (dq.admission_date_not_unique = 1) or\n        (dq.admission_date_missing = 1) or\n        (dq.discharge_date_not_unique = 1) or\n        (dq.discharge_date_missing = 1) or\n        (dq.admission_date_after_discharge_date = 1) or\n        (dq.admit_type_code_not_unique = 1) or\n        (dq.admit_type_code_missing = 1) or\n        (dq.admit_source_code_not_unique = 1) or\n        (dq.admit_source_code_missing = 1) or\t\n        (dq.claim_type_not_unique = 1) or\n        (dq.claim_type_missing = 1) or\n        (dq.claim_type_not_institutional = 1) ) then 1\n    else 0\n  end as dq_insight,\n\n  case\n    when (h.date_used_as_start_date is null) then 1\n    else 0\n  end as start_date_not_determined,\n  \n  case\n    when (h.date_used_as_end_date is null) then 1\n    else 0\n  end as end_date_not_determined,\n\n  case\n    when (h.start_date > h.end_date) then 1\n    else 0\n  end as start_date_after_end_date,\n  \n  dq.patient_id_not_unique as patient_id_not_unique,\n  dq.patient_id_missing as patient_id_missing,\n  dq.claim_start_date_not_unique as claim_start_date_not_unique,\n  dq.claim_start_date_missing as claim_start_date_missing,\n  dq.claim_end_date_not_unique as claim_end_date_not_unique,\n  dq.claim_end_date_missing as claim_end_date_missing,\n  dq.claim_start_date_after_claim_end_date\n       as claim_start_date_after_claim_end_date,\n  dq.admission_date_not_unique as admission_date_not_unique,\n  dq.admission_date_missing as admission_date_missing,\n  dq.discharge_date_not_unique as discharge_date_not_unique,\n  dq.discharge_date_missing as discharge_date_missing,\n  dq.admission_date_after_discharge_date\n       as admission_date_after_discharge_date,\n  dq.admit_type_code_not_unique\n       as admit_type_code_not_unique,\n  dq.admit_type_code_missing\n       as admit_type_code_missing,\n  dq.admit_source_code_not_unique\n       as admit_source_code_not_unique,\n  dq.admit_source_code_missing\n       as admit_source_code_missing,\n  dq.discharge_disposition_code_not_unique\n       as discharge_disposition_code_not_unique,\n  dq.discharge_disposition_code_missing\n       as discharge_disposition_code_missing,\n  dq.facility_npi_not_unique as facility_npi_not_unique,\n  dq.facility_npi_missing as facility_npi_missing,\n  dq.claim_type_not_unique as claim_type_not_unique,\n  dq.claim_type_missing as claim_type_missing,\n  dq.claim_type_not_institutional as claim_type_not_institutional,\n  h.data_source,\n  '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\n\nfrom header_level_values h\nleft join data_quality_flags dq\n  on h.claim_id = dq.claim_id", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:09.678536Z", "completed_at": "2024-02-18T04:25:09.695978Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:09.698702Z", "completed_at": "2024-02-18T04:25:09.806583Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.13587570190429688, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.emergency_department__int_institutional_encounter_id", "compiled": true, "compiled_code": "\n\n\nwith add_row_num as (\nselect\n  patient_id,\n  claim_id,\n  start_date,\n  end_date,\n  discharge_disposition_code,\n  facility_npi,\n  row_number() over (partition by patient_id order by end_date, start_date, claim_id) as row_num\nfrom \"synthea\".\"claims_preprocessing\".\"_int_emergency_department_institutional_claims\"\n),\n\ncheck_for_merges_with_larger_row_num as (\nselect\n  aa.patient_id,\n  aa.claim_id as claim_id_a,\n  bb.claim_id as claim_id_b,\n  aa.row_num as row_num_a,\n  bb.row_num as row_num_b,\n  case\n    -- Claims with same end_date and same facility_npi should be merged:\n    when (aa.end_date = bb.end_date\n          and aa.facility_npi = bb.facility_npi) then 1\n    -- Claims with different end_date \n    -- should be merged if they overlap:\n    when ( (aa.end_date <> bb.end_date) and \n           (aa.end_date >= bb.start_date) and --overlap requirement\n           (aa.facility_npi = bb.facility_npi)\n\t )then 1\n    else 0\n  end as merge_flag\nfrom add_row_num aa\n     inner join add_row_num bb\n     on aa.patient_id = bb.patient_id\n     and aa.row_num < bb.row_num\n),\n\nmerges_with_larger_row_num as (\nselect\n  patient_id,\n  claim_id_a,\n  claim_id_b,\n  row_num_a,\n  row_num_b,\n  merge_flag\nfrom check_for_merges_with_larger_row_num\nwhere merge_flag = 1\n),\n\n\nclaim_ids_that_merge_with_larger_row_num as (\nselect distinct claim_id_a as claim_id\nfrom merges_with_larger_row_num\n),\n\n\nclaim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as (\nselect distinct aa.claim_id as claim_id\nfrom add_row_num aa\n     inner join\n     merges_with_larger_row_num bb\n     on aa.patient_id = bb.patient_id\n     and bb.row_num_a < aa.row_num\n     and bb.row_num_b > aa.row_num\n),\n\n\nclose_flags as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.start_date,\n  aa.end_date,\n  aa.discharge_disposition_code,\n  aa.facility_npi,\n  aa.row_num,\n  case when (bb.claim_id is null and cc.claim_id is null) then 1\n       else 0\n  end as close_flag\n\nfrom add_row_num aa\n\nleft join claim_ids_that_merge_with_larger_row_num bb\non aa.claim_id = bb.claim_id\n\nleft join claim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num cc\non aa.claim_id = cc.claim_id\n),\n\n\njoin_every_row_to_later_closes as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.row_num as row_num,\n  bb.row_num as row_num_b\nfrom close_flags aa inner join close_flags bb\n     on aa.patient_id = bb.patient_id\n     and aa.row_num <= bb.row_num\nwhere bb.close_flag = 1\n),\n\n\nfind_min_closing_row_num_for_every_claim as (\nselect\n  patient_id,\n  claim_id,\n  min(row_num_b) as min_closing_row\nfrom join_every_row_to_later_closes\ngroup by patient_id, claim_id\n),\n\n\nadd_min_closing_row_to_every_claim as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.start_date as start_date,\n  aa.end_date as end_date,\n  aa.discharge_disposition_code as discharge_disposition_code,\n  aa.facility_npi as facility_npi,\n  aa.row_num as row_num,\n  aa.close_flag as close_flag,\n  bb.min_closing_row as min_closing_row\nfrom close_flags aa\n     left join find_min_closing_row_num_for_every_claim bb\n     on aa.patient_id = bb.patient_id\n     and aa.claim_id = bb.claim_id\n),\n\n\nadd_encounter_id as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.start_date as start_date,\n  aa.end_date as end_date,\n  aa.discharge_disposition_code as discharge_disposition_code,\n  aa.facility_npi as facility_npi,\n  aa.row_num as row_num,\n  aa.close_flag as close_flag,\n  aa.min_closing_row as min_closing_row,\n  bb.claim_id as encounter_id\nfrom add_min_closing_row_to_every_claim aa\n     left join add_min_closing_row_to_every_claim bb\n     on aa.patient_id = bb.patient_id\n     and aa.min_closing_row = bb.row_num\n)\n\nselect *, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom add_encounter_id", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_emergency_department_institutional_encounter_id\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:09.689289Z", "completed_at": "2024-02-18T04:25:09.698287Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:09.707869Z", "completed_at": "2024-02-18T04:25:09.808103Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.13521957397460938, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__institutional_encounter_id", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model groups acute inpatient institutional\n-- claims into encounters. It assigns an encounter_id\n-- to each acute inpatient institutional claim.\n-- This returns a table with 3 fields:\n--      patient_id\n--      claim_id\n--      encounter_id\n-- The number of rows in the table should be equal\n-- to the number of acute inpatient institutional claims.\n-- *************************************************\n\n\nwith add_row_num as (\nselect\n  patient_id,\n  claim_id,\n  start_date,\n  end_date,\n  discharge_disposition_code,\n  facility_npi,\n  row_number() over (partition by patient_id order by end_date, start_date, claim_id) as row_num\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\n),\n\ncheck_for_merges_with_larger_row_num as (\nselect\n  aa.patient_id,\n  aa.claim_id as claim_id_a,\n  bb.claim_id as claim_id_b,\n  aa.row_num as row_num_a,\n  bb.row_num as row_num_b,\n  case\n    -- Claims with same end_date and same facility_npi should be merged:\n    when (aa.end_date = bb.end_date\n          and aa.facility_npi = bb.facility_npi) then 1\n\n    -- Claims with different end_date and start_date that are\n    -- adjacent (i.e. separated by 1 day) should be merged:\n    when  ( \n\n    aa.end_date + ((interval '1 day') * (1))\n\n  = bb.start_date\n          and aa.facility_npi = bb.facility_npi\n\t  and aa.discharge_disposition_code = '30') then 1\n\n    -- Claims with different end_date \n    -- should be merged if they overlap:\n    when ( (aa.end_date <> bb.end_date) and \n           (aa.end_date >= bb.start_date) and --overlap requirement\n           (aa.facility_npi = bb.facility_npi)\n\t )then 1\n    else 0\n  end as merge_flag\nfrom add_row_num aa\n     inner join add_row_num bb\n     on aa.patient_id = bb.patient_id\n     and aa.row_num < bb.row_num\n),\n\nmerges_with_larger_row_num as (\nselect\n  patient_id,\n  claim_id_a,\n  claim_id_b,\n  row_num_a,\n  row_num_b,\n  merge_flag\nfrom check_for_merges_with_larger_row_num\nwhere merge_flag = 1\n),\n\n\nclaim_ids_that_merge_with_larger_row_num as (\nselect distinct claim_id_a as claim_id\nfrom merges_with_larger_row_num\n),\n\n\nclaim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as (\nselect distinct aa.claim_id as claim_id\nfrom add_row_num aa\n     inner join\n     merges_with_larger_row_num bb\n     on aa.patient_id = bb.patient_id\n     and bb.row_num_a < aa.row_num\n     and bb.row_num_b > aa.row_num\n),\n\n\nclose_flags as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.start_date,\n  aa.end_date,\n  aa.discharge_disposition_code,\n  aa.facility_npi,\n  aa.row_num,\n  case when (bb.claim_id is null and cc.claim_id is null) then 1\n       else 0\n  end as close_flag\n\nfrom add_row_num aa\n\nleft join claim_ids_that_merge_with_larger_row_num bb\non aa.claim_id = bb.claim_id\n\nleft join claim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num cc\non aa.claim_id = cc.claim_id\n),\n\n\njoin_every_row_to_later_closes as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.row_num as row_num,\n  bb.row_num as row_num_b\nfrom close_flags aa inner join close_flags bb\n     on aa.patient_id = bb.patient_id\n     and aa.row_num <= bb.row_num\nwhere bb.close_flag = 1\n),\n\n\nfind_min_closing_row_num_for_every_claim as (\nselect\n  patient_id,\n  claim_id,\n  min(row_num_b) as min_closing_row\nfrom join_every_row_to_later_closes\ngroup by patient_id, claim_id\n),\n\n\nadd_min_closing_row_to_every_claim as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.start_date as start_date,\n  aa.end_date as end_date,\n  aa.discharge_disposition_code as discharge_disposition_code,\n  aa.facility_npi as facility_npi,\n  aa.row_num as row_num,\n  aa.close_flag as close_flag,\n  bb.min_closing_row as min_closing_row\nfrom close_flags aa\n     left join find_min_closing_row_num_for_every_claim bb\n     on aa.patient_id = bb.patient_id\n     and aa.claim_id = bb.claim_id\n),\n\n\nadd_encounter_id as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.start_date as start_date,\n  aa.end_date as end_date,\n  aa.discharge_disposition_code as discharge_disposition_code,\n  aa.facility_npi as facility_npi,\n  aa.row_num as row_num,\n  aa.close_flag as close_flag,\n  aa.min_closing_row as min_closing_row,\n  bb.claim_id as encounter_id\nfrom add_min_closing_row_to_every_claim aa\n     left join add_min_closing_row_to_every_claim bb\n     on aa.patient_id = bb.patient_id\n     and aa.min_closing_row = bb.row_num\n)\n\nselect *, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom add_encounter_id", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_encounter_id\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:09.682675Z", "completed_at": "2024-02-18T04:25:09.696886Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:09.702526Z", "completed_at": "2024-02-18T04:25:09.809559Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2330946922302246, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__data_quality_summary", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model summarizes data quality issues\n-- that could affect claims preprocessing.\n-- The table returns 2 fields:\n--        field\n--        total_count\n--\n-- If we order the results by 'field', the first\n-- 3 rows give us a high level summary:\n--\n--       01 Total acute inpatient institutional claims:\n--             This is the total number of acute inpatient\n--             institutional claims\n--       02 Acute inpatient institutional claims with insights:\n--             This is the number of acute inpatient institutional\n--             claims for which something is not ideal (e.g. they\n--             are missing a claim_start_date) but it's not something\n--             that prevents the claim from being used in the\n--             encounter grouper.\n\n--       03 Acute inpatient institutional claims with problems:\n--             This is the number of acute inpatient institutional\n--             claims that have a data quality problem that\n--             prevents them from being used in the encounter grouper.\n\n-- The rest of the rows in the table give us counts\n-- of the number of acute inpatient institutional claims\n-- that have specific data quality problems.\n-- *************************************************\n\n\n\n\nwith total_acute_inpatient__institutional_claims as (\nselect\n  '01 Total acute inpatient institutional claims' as field,\n  count(*) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\n),\n\n\ntotal_claims_with_insights as (\nselect\n  '02 Acute inpatient institutional claims with insights' as field,\n  count(*) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\nwhere dq_insight = 1\n),\n\n\ntotal_claims_with_problems as (\nselect\n  '03 Acute inpatient institutional claims with problems' as field,\n  count(*) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\nwhere dq_problem = 1\n),\n\n\npatient_id_not_unique as (\nselect\n  '04 patient_id_not_unique' as field,\n  sum(patient_id_not_unique) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\n),\n\n\npatient_id_missing as (\nselect\n  '05 patient_id_missing' as field,\n  sum(patient_id_missing) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\n),\n\n\nclaim_start_date_not_unique as (\nselect\n  '06 claim_start_date_not_unique' as field,\n  sum(claim_start_date_not_unique) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\n),\n\n\nclaim_start_date_missing as (\nselect\n  '07 claim_start_date_missing' as field,\n  sum(claim_start_date_missing) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\n),\n\n\nclaim_end_date_not_unique as (\nselect\n  '08 claim_end_date_not_unique' as field,\n  sum(claim_end_date_not_unique) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\n),\n\n\nclaim_end_date_missing as (\nselect\n  '09 claim_end_date_missing' as field,\n  sum(claim_end_date_missing) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\n),\n\n\nclaim_start_date_after_claim_end_date as (\nselect\n  '10 claim_start_date_after_claim_end_date' as field,\n  sum(claim_start_date_after_claim_end_date) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\n),\n\n\nadmission_date_not_unique as (\nselect\n  '11 admission_date_not_unique' as field,\n  sum(admission_date_not_unique) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\n),\n\n\nadmission_date_missing as (\nselect\n  '12 admission_date_missing' as field,\n  sum(admission_date_missing) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\n),\n\n\ndischarge_date_not_unique as (\nselect\n  '13 discharge_date_not_unique' as field,\n  sum(discharge_date_not_unique) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\n),\n\n\ndischarge_date_missing as (\nselect\n  '14 discharge_date_missing' as field,\n  sum(discharge_date_missing) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\n),\n\n\nadmission_date_after_discharge_date as (\nselect\n  '15 admission_date_after_discharge_date' as field,\n  sum(admission_date_after_discharge_date) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\n),\n\n\nadmit_type_code_not_unique as (\nselect\n  '16 admit_type_code_not_unique' as field,\n  sum(admit_type_code_not_unique) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\n),\n\n\nadmit_type_code_missing as (\nselect\n  '17 admit_type_code_missing' as field,\n  sum(admit_type_code_missing) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\n),\n\n\nadmit_source_code_not_unique as (\nselect\n  '18 admit_source_code_not_unique' as field,\n  sum(admit_source_code_not_unique) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\n),\n\n\nadmit_source_code_missing as (\nselect\n  '19 admit_source_code_missing' as field,\n  sum(admit_source_code_missing) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\n),\n\n\ndischarge_disposition_code_not_unique as (\nselect\n  '20 discharge_disposition_code_not_unique' as field,\n  sum(discharge_disposition_code_not_unique) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\n),\n\n\ndischarge_disposition_code_missing as (\nselect\n  '21 discharge_disposition_code_missing' as field,\n  sum(discharge_disposition_code_missing) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\n),\n\n\nfacility_npi_not_unique as (\nselect\n  '22 facility_npi_not_unique' as field,\n  sum(facility_npi_not_unique) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\n),\n\n\nfacility_npi_missing as (\nselect\n  '23 facility_npi_missing' as field,\n  sum(facility_npi_missing) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\n),\n\n\nclaim_type_not_unique as (\nselect\n  '24 claim_type_not_unique' as field,\n  sum(claim_type_not_unique) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\n),\n\n\nclaim_type_missing as (\nselect\n  '25 claim_type_missing' as field,\n  sum(claim_type_missing) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\n),\n\n\nclaim_type_not_institutional as (\nselect\n  '26 claim_type_not_institutional' as field,\n  sum(claim_type_not_institutional) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\n),\n\n\nstart_date_not_determined as (\nselect\n  '27 start_date_not_determined' as field,\n  sum(start_date_not_determined) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\n),\n\n\nend_date_not_determined as (\nselect\n  '28 end_date_not_determined' as field,\n  sum(end_date_not_determined) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\n),\n\n\nstart_date_after_end_date as (\nselect\n  '29 start_date_after_end_date' as field,\n  sum(start_date_after_end_date) as total_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\"\n),\n\n\n\nunion_cte as (\nselect *\nfrom total_acute_inpatient__institutional_claims\n\nunion all\n\nselect *\nfrom total_claims_with_insights\n\nunion all\n\nselect *\nfrom total_claims_with_problems\n\nunion all\n\nselect *\nfrom patient_id_not_unique\n\nunion all\n\nselect *\nfrom patient_id_missing\n\nunion all\n\nselect *\nfrom claim_start_date_not_unique\n\nunion all\n\nselect *\nfrom claim_start_date_missing\n\nunion all\n\nselect *\nfrom claim_end_date_not_unique\n\nunion all\n\nselect *\nfrom claim_end_date_missing\n\nunion all\n\nselect *\nfrom claim_start_date_after_claim_end_date\n\nunion all\n\nselect *\nfrom admission_date_not_unique\n\nunion all\n\nselect *\nfrom admission_date_missing\n\nunion all\n\nselect *\nfrom discharge_date_not_unique\n\nunion all\n\nselect *\nfrom discharge_date_missing\n\nunion all\n\nselect *\nfrom admission_date_after_discharge_date\n\nunion all\n\nselect *\nfrom admit_type_code_not_unique\n\nunion all\n\nselect *\nfrom admit_type_code_missing\n\nunion all\n\nselect *\nfrom admit_source_code_not_unique\n\nunion all\n\nselect *\nfrom admit_source_code_missing\n\nunion all\n\nselect *\nfrom discharge_disposition_code_not_unique\n\nunion all\n\nselect *\nfrom discharge_disposition_code_missing\n\nunion all\n\nselect *\nfrom facility_npi_not_unique\n\nunion all\n\nselect *\nfrom facility_npi_missing\n\nunion all\n\nselect *\nfrom claim_type_not_unique\n\nunion all\n\nselect *\nfrom claim_type_missing\n\nunion all\n\nselect *\nfrom claim_type_not_institutional\n\nunion all\n\nselect *\nfrom start_date_not_determined\n\nunion all\n\nselect *\nfrom end_date_not_determined\n\nunion all\n\nselect *\nfrom start_date_after_end_date\n)\n\n\n\nselect *, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom union_cte", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_data_quality_summary\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:09.920302Z", "completed_at": "2024-02-18T04:25:09.925212Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:09.929525Z", "completed_at": "2024-02-18T04:25:09.998381Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.08593916893005371, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__encounter_start_and_end_dates", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model assigns an encounter_start_date and\n-- an encounter_end_date to each acute inpatient\n-- encounter_id.\n-- This returns a table with 4 fields:\n--      patient_id\n--      encounter_id\n--      encounter_start_date\n--      encounter_end_date\n-- The number of rows in the table should be equal\n-- to the number of acute inpatient encounters.\n-- *************************************************\n\n\nwith add_encounter_id_to_acute_inpatient_encounters as (\nselect\n  aip.claim_id as claim_id,\n  aip.patient_id as patient_id,\n  aip.start_date as start_date,\n  aip.end_date as end_date,\n  eid.encounter_id as encounter_id\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\" aip\nleft join \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_encounter_id\" eid\n  on aip.patient_id = eid.patient_id\n  and aip.claim_id = eid.claim_id\n),\n\nencounter_start_and_end_dates as (\nselect\n  patient_id,\n  encounter_id,\n  min(start_date) as encounter_start_date,\n  max(end_date) as encounter_end_date\nfrom add_encounter_id_to_acute_inpatient_encounters\ngroup by patient_id, encounter_id\n)\n\nselect\n    patient_id\n    , encounter_id\n    , encounter_start_date\n    , encounter_end_date\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom encounter_start_and_end_dates", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_encounter_start_and_end_dates\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:09.916500Z", "completed_at": "2024-02-18T04:25:09.924379Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:09.925554Z", "completed_at": "2024-02-18T04:25:09.999391Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.17790842056274414, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.emergency_department__int_encounter_start_and_end_dates", "compiled": true, "compiled_code": "\n\n\nwith add_encounter_id_to_emergency_department_encounters as (\nselect\n  aip.claim_id as claim_id,\n  aip.patient_id as patient_id,\n  aip.start_date as start_date,\n  aip.end_date as end_date,\n  eid.encounter_id as encounter_id\nfrom \"synthea\".\"claims_preprocessing\".\"_int_emergency_department_institutional_claims\" aip\nleft join \"synthea\".\"claims_preprocessing\".\"_int_emergency_department_institutional_encounter_id\" eid\n  on aip.patient_id = eid.patient_id\n  and aip.claim_id = eid.claim_id\n),\n\nencounter_start_and_end_dates as (\nselect\n  patient_id,\n  encounter_id,\n  min(start_date) as encounter_start_date,\n  max(end_date) as encounter_end_date\nfrom add_encounter_id_to_emergency_department_encounters\ngroup by patient_id, encounter_id\n)\n\nselect \n    patient_id\n    , encounter_id\n    , encounter_start_date\n    , encounter_end_date\n    , coalesce(encounter_start_date, encounter_end_date) as determined_encounter_start_date\n    , coalesce(encounter_end_date, encounter_start_date) as determined_encounter_end_date\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom encounter_start_and_end_dates", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_emergency_department_encounter_start_and_end_dates\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:10.115658Z", "completed_at": "2024-02-18T04:25:10.133086Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:10.138090Z", "completed_at": "2024-02-18T04:25:10.199901Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.10329031944274902, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.emergency_department__int_professional_encounter_id", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__emergency_department__stg_service_category as (\n\n\n\nselect\n    claim_id\n    , claim_type\n    , claim_line_number\n    , service_category_2\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"service_category_grouper\"\n),  __dbt__cte__emergency_department__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n), emergency_department_professional_claim_ids as (\nselect \n    claim_id\n    , claim_line_number\nfrom __dbt__cte__emergency_department__stg_service_category \nwhere claim_type = 'professional'\n  and service_category_2 = 'Emergency Department'\n),\n\nemergency_department_professional_claim_lines as (\nselect\n  mc.claim_id\n  , mc.claim_line_number\n  , mc.patient_id\n  , mc.claim_start_date as start_date\n  , mc.claim_end_date as end_date\t   \nfrom __dbt__cte__emergency_department__stg_medical_claim mc\ninner join emergency_department_professional_claim_ids prof\n  on mc.claim_id = prof.claim_id\n  and mc.claim_line_number = prof.claim_line_number\n),\n\n\nemergency_department_professional_claim_dates as (\nselect\n  claim_id\n  , claim_line_number\n  , patient_id\n  , min(start_date) as start_date\n  , max(end_date) as end_date\nfrom emergency_department_professional_claim_lines\ngroup by \n    claim_id\n    , claim_line_number\n    , patient_id\n),\n\n\nroll_up_professional_claims_to_institutional_claims as (\n    select\n    aa.patient_id\n    , aa.claim_id\n    , aa.claim_line_number\n    , aa.start_date\n    , aa.end_date\n    , bb.encounter_id\n    , case\n            when bb.encounter_id is null then 1\n            else 0\n    end as orphan_claim_flag\n    from emergency_department_professional_claim_dates aa\n    left join \"synthea\".\"claims_preprocessing\".\"_int_emergency_department_encounter_start_and_end_dates\" bb\n    on aa.patient_id = bb.patient_id\n    and (coalesce(aa.start_date, aa.end_date) between coalesce(bb.encounter_start_date, bb.determined_encounter_start_date) and coalesce(bb.encounter_end_date, bb.determined_encounter_end_date))\n    and (coalesce(aa.end_date, aa.start_date) between coalesce(bb.encounter_start_date, bb.determined_encounter_start_date) and coalesce(bb.encounter_end_date, bb.determined_encounter_end_date))\n),\n\nprofessional_claims_in_more_than_one_encounter as (\nselect\n  patient_id\n , claim_id\n , claim_line_number\n , min(start_date) as start_date\n , max(end_date) as end_date\n , count(distinct encounter_id) as encounter_count\nfrom roll_up_professional_claims_to_institutional_claims\ngroup by patient_id, claim_id, claim_line_number\nhaving count(distinct encounter_id) > 1\n),\n\n\nprofessional_claims_not_in_more_than_one_encounter as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.claim_line_number,\n  aa.start_date,\n  aa.end_date,\n  aa.encounter_id,\n  aa.orphan_claim_flag,\n  case\n    when (aa.orphan_claim_flag = 1) then 0\n    else 1\n  end as encounter_count\nfrom roll_up_professional_claims_to_institutional_claims aa\nleft join professional_claims_in_more_than_one_encounter bb\non aa.claim_id = bb.claim_id\nand aa.claim_line_number = bb.claim_line_number\nand aa.patient_id = bb.patient_id\nwhere (bb.patient_id is null) and (bb.claim_id is null)\n),\n\n\nall_emergency_department_professional_claims as (\nselect\n  patient_id,\n  claim_id,\n  claim_line_number,\n  start_date,\n  end_date,\n  encounter_id,\n  orphan_claim_flag,\n  encounter_count\nfrom professional_claims_not_in_more_than_one_encounter\n\nunion all\n\nselect\n  patient_id,\n  claim_id,\n  claim_line_number,\n  start_date,\n  end_date,\n  null as encounter_id,\n  0 as orphan_claim_count,\n  encounter_count\nfrom professional_claims_in_more_than_one_encounter\n)\n\n\n\nselect *, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom all_emergency_department_professional_claims", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_emergency_department_professional_encounter_id\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:10.099392Z", "completed_at": "2024-02-18T04:25:10.132422Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:10.134623Z", "completed_at": "2024-02-18T04:25:10.230066Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.1346433162689209, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__professional_encounter_id", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model assigns professional acute inpatient\n-- claims to acute inpatient encounters.\n-- Some acute inpatient professional claims do not fall\n-- within an acute inpatient encounter. We call these\n-- orphan claims, and they do not have an encounter_id.\n-- Some acute inpatient professional claims fall within\n-- more than one acute inpatient encounter. Since we do not\n-- know what encounter these claims should be mapped to\n-- we do not assign them an encounter_id. These claims\n-- have encounter_count > 1.\n-- This model returns a table with 5 fields:\n--      patient_id\n--      claim_id\n--      encounter_id (is null for orphan claims or claims\n--                    that fall within more than one encounter)\n--      orphan_claim_flag (is always 0 or 1)\n--      encounter_count (an integer that represents the number\n--                       of acute inpatient encounters this\n--                       professional claim could fall into:\n--                       could be 0,1,2,3,...  but is never null\n--                       for acute inpatient professional claims)\n-- *************************************************\n\n\n\n\nwith  __dbt__cte__acute_inpatient__stg_service_category as (\n\n\n\nSELECT\n  claim_id\n, claim_type\n, claim_line_number\n, service_category_2\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"service_category_grouper\"\n),  __dbt__cte__acute_inpatient__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n), acute_inpatient_professional_claim_ids as (\nselect distinct \n    claim_id\n    , claim_line_number\nfrom __dbt__cte__acute_inpatient__stg_service_category \nwhere claim_type = 'professional'\n  and service_category_2 = 'Acute Inpatient'\n),\n\nacute_inpatient_professional_claim_lines as (\nselect\n  mc.claim_id,\n  mc.claim_line_number,\n  mc.patient_id,\n  mc.claim_start_date as start_date,\n  mc.claim_end_date as end_date\t   \nfrom __dbt__cte__acute_inpatient__stg_medical_claim mc\ninner join acute_inpatient_professional_claim_ids prof\n  on mc.claim_id = prof.claim_id\n  and mc.claim_line_number = prof.claim_line_number\n),\n\n\nacute_inpatient_professional_claim_dates as (\nselect\n  claim_id,\n  claim_line_number,\n  patient_id,\n  min(start_date) as start_date,\n  max(end_date) as end_date\nfrom acute_inpatient_professional_claim_lines\ngroup by claim_id, claim_line_number, patient_id\n),\n\n\nroll_up_professional_claims_to_institutional_claims as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.claim_line_number,\n  aa.start_date,\n  aa.end_date,\n  bb.encounter_id,\n  case\n    when bb.encounter_id is null then 1\n    else 0\n  end as orphan_claim_flag\nfrom acute_inpatient_professional_claim_dates aa\nleft join \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_encounter_start_and_end_dates\" bb\n  on aa.patient_id = bb.patient_id\n  and (coalesce(aa.start_date, aa.end_date) between bb.encounter_start_date and bb.encounter_end_date)\n  and (coalesce(aa.end_date, aa.start_date) between bb.encounter_start_date and bb.encounter_end_date)\n),\n\nprofessional_claims_in_more_than_one_encounter as (\nselect\n  patient_id,\n  claim_id,\n  claim_line_number,\n  min(start_date) as start_date,\n  max(end_date) as end_date,\n  count(distinct encounter_id) as encounter_count\nfrom roll_up_professional_claims_to_institutional_claims\ngroup by patient_id, claim_line_number, claim_id\nhaving count(distinct encounter_id) > 1\n),\n\n\nprofessional_claims_not_in_more_than_one_encounter as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.claim_line_number,\n  aa.start_date,\n  aa.end_date,\n  aa.encounter_id,\n  aa.orphan_claim_flag,\n  case\n    when (aa.orphan_claim_flag = 1) then 0\n    else 1\n  end as encounter_count\nfrom roll_up_professional_claims_to_institutional_claims aa\nleft join professional_claims_in_more_than_one_encounter bb\non aa.claim_id = bb.claim_id\nand aa.claim_line_number = bb.claim_line_number\nand aa.patient_id = bb.patient_id\nwhere (bb.patient_id is null) and (bb.claim_id is null)\n),\n\n\nall_acute_inpatient_professional_claims as (\nselect\n  patient_id,\n  claim_id,\n  claim_line_number,\n  start_date,\n  end_date,\n  encounter_id,\n  orphan_claim_flag,\n  encounter_count\nfrom professional_claims_not_in_more_than_one_encounter\n\nunion all\n\nselect\n  patient_id,\n  claim_id,\n  claim_line_number,\n  start_date,\n  end_date,\n  null as encounter_id,\n  0 as orphan_claim_count,\n  encounter_count\nfrom professional_claims_in_more_than_one_encounter\n)\n\n\n\nselect *, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom all_acute_inpatient_professional_claims", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_professional_encounter_id\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:10.210339Z", "completed_at": "2024-02-18T04:25:10.219647Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:10.220609Z", "completed_at": "2024-02-18T04:25:10.259571Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05255627632141113, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.emergency_department__int_encounter_id", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__emergency_department__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) select\n  inst.patient_id,\n  inst.claim_id,\n  med.claim_line_number,\n  inst.encounter_id,\n  '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_emergency_department_institutional_encounter_id\" inst\nleft join __dbt__cte__emergency_department__stg_medical_claim med\n    on inst.claim_id = med.claim_id\n\nunion distinct\n\nselect\n  patient_id,\n  claim_id,\n  claim_line_number,\n  encounter_id,\n  '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_emergency_department_professional_encounter_id\"\nwhere (orphan_claim_flag = 0) and (encounter_count = 1)", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_emergency_department_encounter_id\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:10.236686Z", "completed_at": "2024-02-18T04:25:10.246624Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:10.247757Z", "completed_at": "2024-02-18T04:25:10.301003Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.06752490997314453, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__encounter_id", "compiled": true, "compiled_code": "\n\nwith __dbt__cte__acute_inpatient__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n) -- *************************************************\n-- This dbt model assigns an encounter_id to each\n-- institutional or professional acute inpatient claim\n-- that is eligible to be part of an encounter.\n-- Professional acute inpatient claims that are\n-- orphan claims (don't overlap with an institutional\n-- acute inpatient claim) or that have\n-- encounter_count > 1 (overlap with more than one different\n-- acute inpatient encounter) are not included here.\n-- It returns a table with these 3 columns:\n--      patient_id\n--      claim_id\n--      encounter_id\n-- *************************************************\n\n\n\n\nselect\n  inst.patient_id,\n  inst.claim_id,\n  med.claim_line_number,\n  inst.encounter_id,\n  '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_encounter_id\" inst\nleft join __dbt__cte__acute_inpatient__stg_medical_claim med\n    on inst.claim_id = med.claim_id\n\nunion distinct\n\nselect\n  patient_id,\n  claim_id,\n  claim_line_number,\n  encounter_id,\n  '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_professional_encounter_id\"\nwhere (orphan_claim_flag = 0) and (encounter_count = 1)", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_encounter_id\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:10.272812Z", "completed_at": "2024-02-18T04:25:10.281810Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:10.288932Z", "completed_at": "2024-02-18T04:25:10.355860Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.09376096725463867, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.emergency_department__int_last_claim_values", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__emergency_department__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n), first_claim_values as(\n    select distinct\n        e.encounter_id\n        , coalesce(claim_start_date, admission_date) as claim_start\n        , discharge_disposition_code\n    from \"synthea\".\"claims_preprocessing\".\"_int_emergency_department_encounter_id\" e\n    inner join __dbt__cte__emergency_department__stg_medical_claim m\n        on e.claim_id = m.claim_id\n    where claim_type = 'institutional'\n)\n\nselect\n    encounter_id\n    , claim_start\n    , discharge_disposition_code\n    , row_number() over (partition by encounter_id order by claim_start desc) as claim_row\nfrom first_claim_values", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_emergency_department_last_claim_values\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:10.266087Z", "completed_at": "2024-02-18T04:25:10.280524Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:10.283238Z", "completed_at": "2024-02-18T04:25:10.356921Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.09500932693481445, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.emergency_department__int_first_claim_values", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__emergency_department__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n), first_claim_values as(\n    select distinct\n        e.encounter_id\n        , coalesce(claim_start_date, admission_date) as claim_start\n        , diagnosis_code_1\n        , diagnosis_code_type\n        , admit_source_code\n        , admit_type_code\n        , facility_npi\n        , ms_drg_code\n        , apr_drg_code\n    from \"synthea\".\"claims_preprocessing\".\"_int_emergency_department_encounter_id\" e\n    inner join __dbt__cte__emergency_department__stg_medical_claim m\n        on e.claim_id = m.claim_id\n    where claim_type = 'institutional'\n)\n\nselect\n    encounter_id\n    , claim_start\n    , diagnosis_code_1\n    , diagnosis_code_type\n    , admit_source_code\n    , admit_type_code\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , row_number() over (partition by encounter_id order by claim_start) as claim_row\nfrom first_claim_values", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_emergency_department_first_claim_values\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_condition", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"_stg_claims_condition\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_medical_claim", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"_stg_claims_medical_claim\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_procedure", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"_stg_claims_procedure\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:10.313085Z", "completed_at": "2024-02-18T04:25:10.328379Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:10.334322Z", "completed_at": "2024-02-18T04:25:10.422978Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.1178278923034668, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__first_claim_values", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__acute_inpatient__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n), first_claim_values as(\n    select distinct\n        e.encounter_id\n        , coalesce(claim_start_date, admission_date) as claim_start\n        , diagnosis_code_1\n        , diagnosis_code_type\n        , admit_source_code\n        , admit_type_code\n        , facility_npi\n        , ms_drg_code\n        , apr_drg_code\n    from \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_encounter_id\" e\n    inner join __dbt__cte__acute_inpatient__stg_medical_claim m\n        on e.claim_id = m.claim_id\n    where claim_type = 'institutional'\n)\n\nselect\n    encounter_id\n    , claim_start\n    , diagnosis_code_1\n    , diagnosis_code_type\n    , admit_source_code\n    , admit_type_code\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , row_number() over (partition by encounter_id order by claim_start) as claim_row\nfrom first_claim_values", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_first_claim_values\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__condition", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"condition\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__medical_claim", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"medical_claim\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:10.309117Z", "completed_at": "2024-02-18T04:25:10.327542Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:10.330882Z", "completed_at": "2024-02-18T04:25:10.441264Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13759922981262207, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__claims_with_encounter_data", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model returns relevant encounter-level\n-- data for every professional or institutional\n-- acute inpatient claim that is part of an encounter\n-- (note that all institutional acute inpatienet claims\n--  are part of an acute inpatient encounter, but only\n--  professional acute inpatient claims that are not\n--  orphan claims and that belong to one and only\n--  one encounter, i.e. have encounter_count = 1,\n--  are part of an acute inpatient encounter).\n-- It returns a table with these columns:\n--      patient_id\n--      claim_id\n--      start_date (date used for merging claims into encounters)\n--      end_date (date used for merging claims into encounters)\n--      encounter_id\n--      encounter_start_date,\n--      encounter_end_date,\n--      encounter_admit_source_code,\n--      encounter_admit_type_code,\n--      encounter_discharge_disposition_code\n-- *************************************************\n\n\n\n\nwith useful_fields_at_claim_id_level as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.admit_type_code,\n  aa.admit_source_code,\n  aa.discharge_disposition_code,\n  aa.start_date,\n  aa.end_date,\n\n  bb.encounter_id,\n\n  cc.encounter_start_date,\n  cc.encounter_end_date\n\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\" aa\n\nleft join\n\"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_encounter_id\" bb\non aa.claim_id = bb.claim_id\nand aa.patient_id = bb.patient_id\n\nleft join\n\"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_encounter_start_and_end_dates\" cc\non bb.encounter_id = cc.encounter_id\nand bb.patient_id = cc.patient_id\n),\n\n\n\nadmit_codes as (\nselect\n  encounter_id,\n  max(admit_source_code) as encounter_admit_source_code,\n  max(admit_type_code) as encounter_admit_type_code\nfrom useful_fields_at_claim_id_level\nwhere start_date = encounter_start_date\ngroup by encounter_id\n),\n\n\ndischarge_code as (\nselect\n  encounter_id,\n  max(discharge_disposition_code) as encounter_discharge_disposition_code\nfrom useful_fields_at_claim_id_level\nwhere end_date = encounter_end_date\ngroup by encounter_id\n),\n\n\nall_useful_fields_at_claim_id_level as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.start_date,\n  aa.end_date,\n  aa.encounter_id,\n  aa.encounter_start_date,\n  aa.encounter_end_date,\n\n  bb.encounter_admit_source_code,\n  bb.encounter_admit_type_code,\n  \n  cc.encounter_discharge_disposition_code\n\nfrom useful_fields_at_claim_id_level aa \n     left join admit_codes bb on aa.encounter_id = bb.encounter_id\n     left join discharge_code cc on aa.encounter_id = cc.encounter_id\n)\n\n\n\nselect \n *, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom all_useful_fields_at_claim_id_level", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_claims_with_encounter_data\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_location", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"_stg_claims_location\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_practitioner", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"_stg_claims_practitioner\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__procedure", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"procedure\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_core__condition_condition_id.ef1067e2f0", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_core__medical_claim__claim_id_claim_line_number_.b9ab42f1f0", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:10.366493Z", "completed_at": "2024-02-18T04:25:10.375711Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:10.381695Z", "completed_at": "2024-02-18T04:25:10.458764Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.09792780876159668, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__last_claim_values", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__acute_inpatient__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n), first_claim_values as(\n    select distinct\n        e.encounter_id\n        , coalesce(claim_start_date, admission_date) as claim_start\n        , discharge_disposition_code\n    from \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_encounter_id\" e\n    inner join __dbt__cte__acute_inpatient__stg_medical_claim m\n        on e.claim_id = m.claim_id\n    where claim_type = 'institutional'\n)\n\nselect\n    encounter_id\n    , claim_start\n    , discharge_disposition_code\n    , row_number() over (partition by encounter_id order by claim_start desc) as claim_row\nfrom first_claim_values", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_last_claim_values\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__location", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"location\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__practitioner", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"practitioner\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_core__procedure_procedure_id.feb1b6b4d5", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:10.392679Z", "completed_at": "2024-02-18T04:25:10.411793Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:10.416279Z", "completed_at": "2024-02-18T04:25:10.481996Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.10757851600646973, "adapter_response": {}, "message": "Runtime Error in model emergency_department__summary (models/claims_preprocessing/emergency_department/final/emergency_department__summary.sql)\n  Binder Error: Table \"b\" does not have a column named \"provider_first_name\"", "failures": null, "unique_id": "model.the_tuva_project.emergency_department__summary", "compiled": true, "compiled_code": "\n\nwith distinct_encounters as (\nselect distinct\n  a.encounter_id\n, a.patient_id\n, b.encounter_start_date\n, b.encounter_end_date\nfrom \"synthea\".\"claims_preprocessing\".\"_int_emergency_department_encounter_id\" a\ninner join \"synthea\".\"claims_preprocessing\".\"_int_emergency_department_encounter_start_and_end_dates\" b\n  on a.encounter_id = b.encounter_id\n)\n\n, institutional_claim_details as (\n    select\n        b.encounter_id\n        , first.diagnosis_code_1\n        , first.diagnosis_code_type\n        , first.facility_npi as facility_npi\n        , first.ms_drg_code as ms_drg_code\n        , first.apr_drg_code as apr_drg_code\n        , first.admit_source_code as admit_source_code\n        , first.admit_type_code as admit_type_code\n        , last.discharge_disposition_code as discharge_disposition_code\n        , sum(paid_amount) as inst_paid_amount\n        , sum(allowed_amount) as inst_allowed_amount\n        , sum(charge_amount) as inst_charge_amount\n        , max(data_source) as data_source\n    from \"synthea\".\"tuva_input\".\"medical_claim\" a\n    inner join \"synthea\".\"claims_preprocessing\".\"_int_emergency_department_encounter_id\" b\n        on a.claim_id = b.claim_id\n        and a.claim_line_number = b.claim_line_number\n        and a.claim_type = 'institutional'\n    inner join \"synthea\".\"claims_preprocessing\".\"_int_emergency_department_first_claim_values\" first\n        on b.encounter_id = first.encounter_id\n        and first.claim_row = 1\n    inner join \"synthea\".\"claims_preprocessing\".\"_int_emergency_department_last_claim_values\" last\n        on b.encounter_id = last.encounter_id\n        and last.claim_row = 1\n    group by\n    b.encounter_id\n    , first.diagnosis_code_1\n    , first.diagnosis_code_type\n    , first.facility_npi\n    , first.ms_drg_code\n    , first.apr_drg_code\n    , first.admit_source_code\n    , first.admit_type_code\n    , last.discharge_disposition_code\n)\n\n, professional_claim_details as (\nselect\n  b.encounter_id\n, sum(paid_amount) as prof_paid_amount\n, sum(allowed_amount) as prof_allowed_amount\n, sum(charge_amount) as prof_charge_amount\nfrom \"synthea\".\"tuva_input\".\"medical_claim\" a\ninner join \"synthea\".\"claims_preprocessing\".\"_int_emergency_department_encounter_id\" b\n  on a.claim_id = b.claim_id\n  and a.claim_line_number = b.claim_line_number\n  and a.claim_type = 'professional'\ngroup by 1\n)\n\n, patient as (\nselect distinct\n  patient_id\n, birth_date\n, gender\n, race\nfrom \"synthea\".\"tuva_input\".\"eligibility\"\n)\n\n, provider as (\nselect\n  a.encounter_id\n, max(a.facility_npi) as facility_npi\n, b.provider_first_name\n, b.provider_last_name\n, count(distinct facility_npi) as npi_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_emergency_department_institutional_encounter_id\" a\nleft join \"synthea\".\"terminology\".\"provider\" b\n  on a.facility_npi = b.npi\ngroup by 1,3,4\n)\n\nselect\n    a.encounter_id\n    , a.encounter_start_date\n    , a.encounter_end_date\n    , a.patient_id\n    , \n        ((encounter_end_date)::date - (birth_date)::date)\n    /365 as admit_age\n    , e.gender\n    , e.race\n    , c.diagnosis_code_type as primary_diagnosis_code_type\n    , c.diagnosis_code_1 as primary_diagnosis_code\n    , coalesce(icd10cm.description, icd9cm.long_description) as primary_diagnosis_description\n    , f.facility_npi\n    , f.provider_first_name\n    , f.provider_last_name\n    , c.ms_drg_code\n    , j.ms_drg_description\n    , j.medical_surgical\n    , c.apr_drg_code\n    , k.apr_drg_description\n    , c.admit_source_code\n    , h.admit_source_description\n    , c.admit_type_code\n    , i.admit_type_description\n    , c.discharge_disposition_code\n    , g.discharge_disposition_description\n    , c.inst_paid_amount + coalesce(d.prof_paid_amount,0) as total_paid_amount\n    , c.inst_allowed_amount + coalesce(d.prof_allowed_amount,0) as total_allowed_amount\n    , c.inst_charge_amount + coalesce(d.prof_charge_amount,0) as total_charge_amount\n    , \n        ((a.encounter_end_date)::date - (a.encounter_start_date)::date)\n     as length_of_stay\n    , case\n        when c.discharge_disposition_code = '20' then 1\n        else 0\n    end mortality_flag\n    , data_source\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom distinct_encounters a\nleft join institutional_claim_details c\n  on a.encounter_id = c.encounter_id\nleft join professional_claim_details d\n  on a.encounter_id = d.encounter_id\nleft join patient e\n  on a.patient_id = e.patient_id\nleft join provider f\n  on a.encounter_id = f.encounter_id\nleft join \"synthea\".\"terminology\".\"discharge_disposition\" g\n  on c.discharge_disposition_code = g.discharge_disposition_code\nleft join \"synthea\".\"terminology\".\"admit_source\" h\n  on c.admit_source_code = h.admit_source_code\nleft join \"synthea\".\"terminology\".\"admit_type\" i\n  on c.admit_type_code = i.admit_type_code\nleft join \"synthea\".\"terminology\".\"ms_drg\" j\n  on c.ms_drg_code = j.ms_drg_code\nleft join \"synthea\".\"terminology\".\"apr_drg\" k\n  on c.apr_drg_code = k.apr_drg_code\nleft join \"synthea\".\"terminology\".\"icd_10_cm\" icd10cm\n  on c.diagnosis_code_1 = icd10cm.icd_10_cm\n  and c.diagnosis_code_type = 'icd-10-cm'\nleft join \"synthea\".\"terminology\".\"icd_9_cm\" icd9cm\n  on c.diagnosis_code_1 = icd9cm.icd_9_cm\n  and c.diagnosis_code_type = 'icd-9-cm'", "relation_name": "\"synthea\".\"claims_preprocessing\".\"emergency_department_summary\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.insights__count_claim_by_claim_type", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"insights\".\"count_claim_by_claim_type\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.insights__count_claim_by_date_column", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"insights\".\"count_claim_by_date_column\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.insights__count_claim_by_service_category", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"insights\".\"count_claim_by_service_category\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.insights__orphan_claim_by_claim_type", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"insights\".\"orphan_claim_by_claim_type\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.insights__sum_amount_by_claim_type", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"insights\".\"sum_amount_by_claim_type\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.insights__sum_amount_by_service_category", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"insights\".\"sum_amount_by_service_category\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.insights__trend_count_claim_by_claim_type", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"insights\".\"trend_count_claim_by_claim_type\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.insights__trend_count_claim_by_service_category", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"insights\".\"trend_count_claim_by_service_category\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.insights__trend_sum_amount_by_claim_type", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"insights\".\"trend_sum_amount_by_claim_type\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.insights__trend_sum_amount_by_service_category", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"insights\".\"trend_sum_amount_by_service_category\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:10.466771Z", "completed_at": "2024-02-18T04:25:10.474876Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:10.477629Z", "completed_at": "2024-02-18T04:25:10.529075Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.16542744636535645, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__encounter_data_for_medical_claims", "compiled": true, "compiled_code": "\n\n-- *************************************************\n-- This dbt model returns all the columns with relevant\n-- encounter fields that we will append to the medical_claim\n-- table.\n\n-- It returns a table with these columns:\n--      patient_id\n--      claim_id\n--      encounter_type\n--      encounter_id\n--      start_date (date used for merging claims into encounters)\n--      end_date (date used for merging claims into encounters)\n--      encounter_start_date,\n--      encounter_end_date,\n--      encounter_admit_source_code,\n--      encounter_admit_type_code,\n--      encounter_discharge_disposition_code\n--      orphan_claim_flag (always 0 or 1) (never null)\n--      encounter_count (could be 0,1,2,3,...) (never null)\n-- *************************************************\n\n\n\n\nwith acute_inpatient_claims_with_encounter_id as (\nselect\n  patient_id,\n  claim_id,\n  start_date,\n  end_date,  \n-- Relevant encounter-level fields for\n-- professional and institutional acute inpatient\n-- claims that are assigned to an encounter:\n  'acute inpatient' as encounter_type,\n  encounter_id,\n  encounter_start_date,\n  encounter_end_date,\n  encounter_admit_source_code,\n  encounter_admit_type_code,\n  encounter_discharge_disposition_code,\n-- Fields that are only relevant for professional\n-- acute inpatient claims that are not assigned to\n-- an encounter because they are orphan claims or because\n-- they overlap with more than one encounter:\n  0 as orphan_claim_flag,\n  1 as encounter_count\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_claims_with_encounter_data\"\n),\n\n\nacute_inpatient_claims_without_encounter_id as (\nselect\n  patient_id,\n  claim_id,\n  start_date,\n  end_date,  \n-- Relevant encounter-level fields for\n-- professional and institutional acute inpatient\n-- claims that are assigned to an encounter:\n  'acute inpatient' encounter_type,\n  cast(null as TEXT) as encounter_id,\n  cast(null as date) as encounter_start_date,\n  cast(null as date) as encounter_end_date,\n  cast(null as TEXT) as encounter_admit_source_code,\n  cast(null as TEXT) as encounter_admit_type_code,\n  cast(null as TEXT) as encounter_discharge_disposition_code,\n-- Fields that are only relevant for professional\n-- acute inpatient claims that are not assigned to\n-- an encounter because they are orphan claims or because\n-- they overlap with more than one encounter:\n  orphan_claim_flag,\n  encounter_count\n  \nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_professional_encounter_id\"\nwhere (orphan_claim_flag = 1) or (encounter_count > 1)\n)\n\n\nselect *, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom acute_inpatient_claims_with_encounter_id\n\nunion all\n\nselect *, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom acute_inpatient_claims_without_encounter_id", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_encounter_data_for_medical_claims\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ccsr__long_condition_category", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"ccsr\".\"long_condition_category\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"chronic_conditions\".\"_int_cms_chronic_condition_hiv_aids\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__int_prep_conditions", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"hcc_suspecting\".\"_int_prep_conditions\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__condition_patient_id.1f1222e348", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_long", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"chronic_conditions\".\"tuva_chronic_conditions_long\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_eligible_conditions", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"cms_hcc\".\"_int_eligible_conditions\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__patient_spend_with_service_categories", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"financial_pmpm\".\"_int_patient_spend_with_service_categories\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ccsr__long_procedure_category", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"ccsr\".\"long_procedure_category\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"chronic_conditions\".\"_int_cms_chronic_condition_all\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__procedure_patient_id.0b52ff75d9", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__procedure_ccs", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"readmissions\".\"_int_procedure_ccs\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ccsr__singular_condition_category", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"ccsr\".\"singular_condition_category\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.accepted_values_chronic_conditions__cms_chronic_conditions_hiv_aids_condition__Human_Immunodeficiency_Virus_and_or_Acquired_Immunodeficiency_Syndrome_HIV_AIDS_.c54d45a2c6", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_claim_id.9baa48027d", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_condition.da32954f00", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_patient_id.b6c58add4b", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__int_all_conditions", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"hcc_suspecting\".\"_int_all_conditions\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_chronic_conditions__tuva_chronic_conditions_long__patient_id___condition_.c9509bb46f", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_cms_hcc__int_eligible_conditions_condition_code.e811a078bc", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__service_category_1_allowed_pivot", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"financial_pmpm\".\"_int_service_category_1_allowed_pivot\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__service_category_1_paid_pivot", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"financial_pmpm\".\"_int_service_category_1_paid_pivot\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__service_category_2_allowed_pivot", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"financial_pmpm\".\"_int_service_category_2_allowed_pivot\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__service_category_2_paid_pivot", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"financial_pmpm\".\"_int_service_category_2_paid_pivot\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_claim_id.84015aec48", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_condition.bb780b4840", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_patient_id.95fc066008", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_exclude_colectomy_cancer", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf0034_exclude_colectomy_cancer\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_exclude_hospice_palliative", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf0034_exclude_hospice_palliative\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_ccsr__singular_condition_category_claim_id.41e0e51ac8", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_ccsr__singular_condition_category_claim_id.21b76e504b", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__int_patient_hcc_history", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"hcc_suspecting\".\"_int_patient_hcc_history\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_wide", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"chronic_conditions\".\"tuva_chronic_conditions_wide\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_hcc_mapping", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"cms_hcc\".\"_int_hcc_mapping\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__pmpm_prep", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"financial_pmpm\".\"pmpm_prep\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"chronic_conditions\".\"_int_cms_chronic_condition_oud\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__list", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"hcc_suspecting\".\"list\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__tuva_chronic_conditions_wide_patient_id.705b1ca561", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_chronic_conditions__tuva_chronic_conditions_wide_patient_id.02386b9158", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_hcc_hierarchy", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"cms_hcc\".\"_int_hcc_hierarchy\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_financial_pmpm__pmpm_prep__patient_id___year_month___plan_.b941ddaf9e", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.accepted_values_chronic_conditions__cms_chronic_conditions_oud_condition__Opioid_Use_Disorder_OUD_.f44489eec5", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_claim_id.7ee5fe28fe", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_condition.6800b245ea", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_patient_id.382354e0d0", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__summary", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"hcc_suspecting\".\"summary\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_disabled_interaction_factors", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"cms_hcc\".\"_int_disabled_interaction_factors\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_disease_factors", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"cms_hcc\".\"_int_disease_factors\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_disease_interaction_factors", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"cms_hcc\".\"_int_disease_interaction_factors\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_hcc_count_factors", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"cms_hcc\".\"_int_hcc_count_factors\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__pmpm", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"financial_pmpm\".\"pmpm\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"chronic_conditions\".\"cms_chronic_conditions_long\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__patient_risk_factors", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"cms_hcc\".\"patient_risk_factors\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_claim_id.74242d2abc", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_condition.e794460ae3", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_patient_id.551c145c85", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_chronic_conditions__cms_chronic_conditions_long__patient_id_claim_id_start_date_condition_.fba1518320", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__patient_risk_scores", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"cms_hcc\".\"patient_risk_scores\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_wide", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"chronic_conditions\".\"cms_chronic_conditions_wide\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_cms_hcc__patient_risk_scores_patient_id.05b154e126", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_wide_patient_id.5c2c8ae105", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_chronic_conditions__cms_chronic_conditions_wide_patient_id.60c2d9a586", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "error", "timing": [{"name": "compile", "started_at": "2024-02-18T04:25:10.629319Z", "completed_at": "2024-02-18T04:25:10.659782Z"}, {"name": "execute", "started_at": "2024-02-18T04:25:10.663412Z", "completed_at": "2024-02-18T04:25:10.741426Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.22661662101745605, "adapter_response": {}, "message": "Runtime Error in model acute_inpatient__summary (models/claims_preprocessing/acute_inpatient/final/acute_inpatient__summary.sql)\n  Binder Error: Table \"b\" does not have a column named \"provider_first_name\"", "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__summary", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__acute_inpatient__stg_medical_claim as (\n\n\nselect \n    claim_id\n    , claim_line_number\n    , patient_id\n    , claim_type\n    , claim_start_date\n    , claim_end_date\n    , admission_date\n    , discharge_date\n    , facility_npi\n    , ms_drg_code\n    , apr_drg_code\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , data_source\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\"\n),  __dbt__cte__acute_inpatient__stg_eligibility as (\n\n\nselect\n    patient_id\n    , birth_date\n    , gender\n    , race\n    , '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n), distinct_encounters as (\n    select distinct\n    a.encounter_id\n    , a.patient_id\n    , b.encounter_start_date\n    , b.encounter_end_date\nfrom \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_encounter_id\" a\ninner join \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_encounter_start_and_end_dates\" b\n  on a.encounter_id = b.encounter_id\n)\n\n, institutional_claim_details as (\n    select\n        b.encounter_id\n        , first.diagnosis_code_1\n        , first.diagnosis_code_type\n        , first.facility_npi as facility_npi\n        , first.ms_drg_code as ms_drg_code\n        , first.apr_drg_code as apr_drg_code\n        , first.admit_source_code as admit_source_code\n        , first.admit_type_code as admit_type_code\n        , last.discharge_disposition_code as discharge_disposition_code\n        , sum(paid_amount) as inst_paid_amount\n        , sum(allowed_amount) as inst_allowed_amount\n        , sum(charge_amount) as inst_charge_amount\n        , max(data_source) as data_source\n    from \"synthea\".\"tuva_input\".\"medical_claim\" a\n    inner join \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_encounter_id\" b\n    on a.claim_id = b.claim_id\n    and a.claim_line_number = b.claim_line_number\n    and a.claim_type = 'institutional'\n    inner join \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_first_claim_values\" first\n        on b.encounter_id = first.encounter_id\n        and first.claim_row = 1\n    inner join \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_last_claim_values\" last\n        on b.encounter_id = last.encounter_id\n        and last.claim_row = 1\n    group by\n        b.encounter_id\n        , first.diagnosis_code_1\n        , first.diagnosis_code_type\n        , first.facility_npi\n        , first.ms_drg_code\n        , first.apr_drg_code\n        , first.admit_source_code\n        , first.admit_type_code\n        , last.discharge_disposition_code\n)\n\n, professional_claim_details as (\n    select\n        b.encounter_id\n        , sum(paid_amount) as prof_paid_amount\n        , sum(allowed_amount) as prof_allowed_amount\n        , sum(charge_amount) as prof_charge_amount\n    from __dbt__cte__acute_inpatient__stg_medical_claim a\n    inner join \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_encounter_id\" b\n    on a.claim_id = b.claim_id\n    and a.claim_line_number = b.claim_line_number\n    and a.claim_type = 'professional'\ngroup by 1\n)\n\n, patient as (\n    select distinct\n        patient_id\n        , birth_date\n        , gender\n        , race\n    from __dbt__cte__acute_inpatient__stg_eligibility\n    )\n\n, provider as (\n    select\n        a.encounter_id\n        , max(a.facility_npi) as facility_npi\n        , b.provider_first_name\n        , b.provider_last_name\n        , count(distinct facility_npi) as npi_count\n    from \"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_encounter_id\" a\n    left join \"synthea\".\"terminology\".\"provider\" b\n    on a.facility_npi = b.npi\n    group by 1,3,4\n)\n\nselect\n  a.encounter_id\n, a.encounter_start_date\n, a.encounter_end_date\n, a.patient_id\n, \n        ((encounter_end_date)::date - (birth_date)::date)\n    /365 as admit_age\n, e.gender\n, e.race\n, c.diagnosis_code_type as primary_diagnosis_code_type\n, c.diagnosis_code_1 as primary_diagnosis_code\n, coalesce(icd10cm.description, icd9cm.long_description) as primary_diagnosis_description\n, f.facility_npi\n, f.provider_first_name\n, f.provider_last_name\n, c.ms_drg_code\n, j.ms_drg_description\n, j.medical_surgical\n, c.apr_drg_code\n, k.apr_drg_description\n, c.admit_source_code\n, h.admit_source_description\n, c.admit_type_code\n, i.admit_type_description\n, c.discharge_disposition_code\n, g.discharge_disposition_description\n, c.inst_paid_amount + coalesce(d.prof_paid_amount,0) as total_paid_amount\n, c.inst_allowed_amount + coalesce(d.prof_allowed_amount,0) as total_allowed_amount\n, c.inst_charge_amount + coalesce(d.prof_charge_amount,0) as total_charge_amount\n, \n        ((a.encounter_end_date)::date - (a.encounter_start_date)::date)\n     as length_of_stay\n, case\n    when c.discharge_disposition_code = '20' then 1\n    else 0\n  end mortality_flag\n, data_source\n, '2024-02-18 04:24:25.074170+00:00' as tuva_last_run\nfrom distinct_encounters a\nleft join institutional_claim_details c\n  on a.encounter_id = c.encounter_id\nleft join professional_claim_details d\n  on a.encounter_id = d.encounter_id\nleft join patient e\n  on a.patient_id = e.patient_id\nleft join provider f\n  on a.encounter_id = f.encounter_id\nleft join \"synthea\".\"terminology\".\"discharge_disposition\" g\n  on c.discharge_disposition_code = g.discharge_disposition_code\nleft join \"synthea\".\"terminology\".\"admit_source\" h\n  on c.admit_source_code = h.admit_source_code\nleft join \"synthea\".\"terminology\".\"admit_type\" i\n  on c.admit_type_code = i.admit_type_code\nleft join \"synthea\".\"terminology\".\"ms_drg\" j\n  on c.ms_drg_code = j.ms_drg_code\nleft join \"synthea\".\"terminology\".\"apr_drg\" k\n  on c.apr_drg_code = k.apr_drg_code\nleft join \"synthea\".\"terminology\".\"icd_10_cm\" icd10cm\n  on c.diagnosis_code_1 = icd10cm.icd_10_cm\n  and c.diagnosis_code_type = 'icd-10-cm'\nleft join \"synthea\".\"terminology\".\"icd_9_cm\" icd9cm\n  on c.diagnosis_code_1 = icd9cm.icd_9_cm\n  and c.diagnosis_code_type = 'icd-9-cm'", "relation_name": "\"synthea\".\"claims_preprocessing\".\"acute_inpatient_summary\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_encounter", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"_stg_claims_encounter\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__encounter", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"encounter\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ed_classification__int_map_primary_dx", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"ed_classification\".\"_int_by_provider_parent_organization\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__encounter_patient_id.a0d82e2159", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__encounter", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"readmissions\".\"_int_encounter\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ed_classification__int_filter_encounter_with_classification", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"ed_classification\".\"_int_filter_encounter_with_classification\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_denominator", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf0034_denominator\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_denominator", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf2372_denominator\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__encounter_overlap", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"readmissions\".\"_int_encounter_overlap\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__encounter_with_ccs", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"readmissions\".\"_int_encounter_with_ccs\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__index_discharge_requirement", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"readmissions\".\"_int_index_discharge_requirement\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__index_time_requirement", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"readmissions\".\"_int_index_time_requirement\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ed_classification__summary", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"ed_classification\".\"summary\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034__frailty", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf0034__frailty\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_exclude_institutional_snp", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf0034_exclude_institutional_snp\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_numerator", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf0034_numerator\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372__frailty", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf2372__frailty\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_exclude_hospice", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf2372_exclude_hospice\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_exclude_institutional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf2372_exclude_institutional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_exclude_mastectomy", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf2372_exclude_mastectomy\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_exclude_palliative", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf2372_exclude_palliative\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_numerator", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf2372_numerator\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__readmission_crude", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"readmissions\".\"_int_readmission_crude\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__encounter_data_quality", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"readmissions\".\"_int_encounter_data_quality\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__encounter_specialty_cohort", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"readmissions\".\"_int_encounter_specialty_cohort\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__exclusion", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"readmissions\".\"_int_exclusion\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__planned_encounter", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"readmissions\".\"_int_planned_encounter\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_exclude_advanced_illness", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf0034_exclude_advanced_illness\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_exclude_dementia", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf0034_exclude_dementia\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_exclude_advanced_illness", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf2372_exclude_advanced_illness\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_exclude_dementia", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf2372_exclude_dementia\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__index_admission", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"readmissions\".\"_int_index_admission\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_exclusions", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf0034_exclusions\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_exclusions", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf2372_exclusions\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__encounter_augmented", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"readmissions\".\"encounter_augmented\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_long", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf0034_long\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_long", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf2372_long\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__readmission_summary", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"readmissions\".\"readmission_summary\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__summary_long", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"summary_long\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__summary_counts", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"summary_counts\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__summary_wide", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"summary_wide\""}], "elapsed_time": 44.959205865859985, "args": {"profiles_dir": "/workspaces/synthea_dw/tuva", "select": [], "partial_parse": true, "project_dir": "/workspaces/synthea_dw/tuva", "vars": {}, "log_format_file": "debug", "cache_selected_only": false, "log_level_file": "debug", "favor_state": false, "enable_legacy_logger": false, "use_colors": true, "version_check": true, "indirect_selection": "eager", "log_format": "default", "use_colors_file": true, "resource_types": [], "warn_error_options": {"include": [], "exclude": []}, "partial_parse_file_diff": true, "exclude": [], "macro_debugging": false, "send_anonymous_usage_stats": true, "invocation_command": "dbt build", "log_level": "info", "show_resource_report": false, "introspect": true, "print": true, "quiet": false, "static_parser": true, "printer_width": 80, "show": false, "defer": false, "log_file_max_bytes": 10485760, "log_path": "/workspaces/synthea_dw/tuva/logs", "which": "build", "write_json": true, "strict_mode": false, "populate_cache": true, "include_saved_query": false}}