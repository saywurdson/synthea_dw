{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.7", "generated_at": "2024-02-19T04:05:07.326109Z", "invocation_id": "b98d1474-ae34-4fea-9e24-363bdf497a23", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:08.697733Z", "completed_at": "2024-02-19T03:52:08.706618Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:08.763043Z", "completed_at": "2024-02-19T03:52:08.916263Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2321784496307373, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.condition", "compiled": true, "compiled_code": "-- models/condition.sql\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(co, '$.id'), '\"', '') AS condition_id,\n    REPLACE(REPLACE(JSON_EXTRACT(co, '$.subject.reference'), '\"Patient/', ''), '\"', '') AS patient_id,\n    REPLACE(REPLACE(JSON_EXTRACT(co, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') AS encounter_id,\n    REPLACE(JSON_EXTRACT(cl, '$.id'), '\"', '') AS claim_id,\n    CAST(SUBSTRING(JSON_EXTRACT(co, '$.recordedDate'), 2, 10) AS DATE) AS recorded_date,\n    CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE) AS onset_date,\n    CAST(SUBSTRING(JSON_EXTRACT(co, '$.abatementDateTime'), 2, 10) AS DATE) AS resolved_date,\n    REPLACE(JSON_EXTRACT(co, '$.clinicalStatus.coding[0].code'), '\"', '') AS status,\n    REPLACE(JSON_EXTRACT(co, '$.category[0].coding[0].display'), '\"', '') AS condition_type,\n    'snomed' AS source_code_type,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '\"', '') AS source_code,\n    REPLACE(JSON_EXTRACT(co, '$.code.coding[0].display'), '\"', '') AS source_description,\n    'icd-10-cm' AS normalized_code_type,\n    map.map_target AS normalized_code,\n    map.map_target_name AS normalized_description,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(cl, '$.diagnosis[0].sequence'), '\"', '') IS NOT NULL THEN CAST(REPLACE(JSON_EXTRACT(cl, '$.diagnosis[0].sequence'), '\"', '') AS INTEGER)\n        ELSE 1\n    END AS condition_rank,\n    CASE\n        WHEN CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) < CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE) THEN 'Y'\n        WHEN CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) > CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE) THEN 'N'\n        ELSE 'U'\n    END AS present_on_admit_code,\n    CASE\n        WHEN CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) < CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE) THEN 'Diagnosis was present at the time of inpatient admission. CMS will pay the CC/MCC DRG for those selected HACs that are coded as Y for the POA Indicator.'\n        WHEN CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) > CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE) THEN 'Diagnosis was not present at the time of inpatient admission. CMS will not pay the CC/MCC DRG for those selected HACs that are coded as N for the POA Indicator.'\n        ELSE 'Documentation is insufficient to determine if the condition was present at the time of inpatient admission. CMS will not pay the CC/MCC DRG for those selected HACs that are coded as U for the POA Indicator.'\n    END AS present_on_admit_description,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Condition\" co\nLEFT JOIN \"synthea\".\"json\".\"Claim\" cl\n    ON REPLACE(REPLACE(JSON_EXTRACT(co, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(cl, '$.item[0].encounter[0].reference'), '\"Encounter/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"json\".\"Encounter\" e\n    ON REPLACE(REPLACE(JSON_EXTRACT(co, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') = REPLACE(JSON_EXTRACT(e, '$.id'), '\"', '')\nJOIN \"synthea\".\"terminology\".\"snomed_icd_10_map\" map\n    ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '\"', '') = map.referenced_component_id", "relation_name": "\"synthea\".\"tuva_input\".\"condition\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:08.704029Z", "completed_at": "2024-02-19T03:52:08.762308Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:08.778389Z", "completed_at": "2024-02-19T03:52:08.978776Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.28788089752197266, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.eligibility", "compiled": true, "compiled_code": "-- models/eligibility.sql\n\nSELECT DISTINCT\n    REPLACE(REPLACE(JSON_EXTRACT(e, '$.patient.reference'), '\"Patient/', ''), '\"', '') AS patient_id,\n    NULL AS member_id,\n    REPLACE(JSON_EXTRACT(p, '$.extension[3].valueCode'), '\"', '') AS gender,\n    REPLACE(JSON_EXTRACT(p, '$.extension[0].extension[1].valueString'), '\"', '') AS race,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.birthDate'), 2, 10) AS DATE) AS birth_date,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.deceasedDateTime'), 2, 10) AS DATE) AS death_date,\n    CASE\n        WHEN JSON_EXTRACT(p, '$.deceasedDateTime') IS NOT NULL THEN 1\n        ELSE 0\n    END AS death_flag,\n    CAST(SUBSTRING(JSON_EXTRACT(e, '$.billablePeriod.start'), 2, 10) AS DATE) AS enrollment_start_date,\n    CAST(SUBSTRING(JSON_EXTRACT(e, '$.billablePeriod.end'), 2, 10) AS DATE) AS enrollment_end_date,\n    REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '\"', '') AS payer,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '\"', '') = 'Medicare' THEN 'medicare'\n        WHEN REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '\"', '') = 'Medicaid' THEN 'medicaid'\n        WHEN REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '\"', '') = 'NO_INSURANCE' THEN NULL\n        ELSE 'commercial'\n    END AS payer_type,\n    NULL AS plan,\n    NULL AS original_reason_entitlement_code,\n    NULL AS dual_status_code,\n    NULL AS medicare_status_code,\n    REPLACE(REPLACE(REPLACE(SPLIT_PART(JSON_EXTRACT(p, '$.name[0].given'), ',', -1), '\"', ''), '[', ''), ']', '') AS first_name,\n    REPLACE(JSON_EXTRACT(p, '$.name[0].family'), '\"', '') AS last_name,\n    REPLACE(JSON_EXTRACT(p, '$.address[0].line[0]'), '\"', '') AS address,\n    REPLACE(JSON_EXTRACT(p, '$.address[0].city'), '\"', '') AS city,\n    REPLACE(JSON_EXTRACT(p, '$.address[0].state'), '\"', '') AS state,\n    REPLACE(JSON_EXTRACT(p, '$.address[0].postalCode'), '\"', '') AS zip_code,\n    REPLACE(JSON_EXTRACT(p, '$.telecom[0].value'), '\"', '') AS phone,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"ExplanationOfBenefit\" e\nLEFT JOIN \"synthea\".\"json\".\"Patient\" p\n    ON REPLACE(REPLACE(JSON_EXTRACT(e, '$.patient.reference'), '\"Patient/', ''), '\"', '') = REPLACE(JSON_EXTRACT(p, '$.id'), '\"', '')", "relation_name": "\"synthea\".\"tuva_input\".\"eligibility\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:08.657908Z", "completed_at": "2024-02-19T03:52:08.667080Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:08.690557Z", "completed_at": "2024-02-19T03:52:11.895958Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.471139430999756, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.ccsr__procedure_category_map", "compiled": true, "compiled_code": "\n\nselect \n    icd_10_pcs as code,\n    icd_10_pcs_description as code_description,\n    prccsr as ccsr_category,\n    left(prccsr, 3) as ccsr_parent_category,\n    prccsr_description as ccsr_category_description,\n    clinical_domain,\n   '2024-02-19 03:52:06.490224+00:00' as tuva_last_run\nfrom \"synthea\".\"ccsr\".\"_value_set_prccsr_v2023_1_cleaned_map\"", "relation_name": "\"synthea\".\"ccsr\".\"procedure_category_map\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:08.980672Z", "completed_at": "2024-02-19T03:52:08.987519Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:08.989794Z", "completed_at": "2024-02-19T03:52:11.897538Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 3.135938882827759, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.encounter", "compiled": true, "compiled_code": "-- models/encounter.sql\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(e, '$.id'), '\"', '') AS encounter_id,\n    REPLACE(REPLACE(JSON_EXTRACT(e, '$.subject.reference'), '\"Patient/', ''), '\"', '') AS patient_id,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '\"', '') = 'AMB' THEN 'outpatient'\n        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '\"', '') = 'EMER' THEN 'emergency department'\n        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '\"', '') = 'IMP' THEN 'acute inpatient'\n        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '\"', '') = 'FLD' THEN 'other'\n        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '\"', '') = 'HH' THEN 'home health'\n        ELSE 'other'\n    END AS encounter_type,\n    CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) AS encounter_start_date,\n    CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE) AS encounter_end_date,\n    CASE\n        WHEN \n            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) IS NOT NULL AND \n            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE) IS NOT NULL AND\n            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) = CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE)\n        THEN 1\n        WHEN \n            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) IS NOT NULL AND \n            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE) IS NOT NULL \n        THEN\n            DATEDIFF(\n                'day',\n                CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE),\n                CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE)\n            ) + 1\n        ELSE 1\n    END AS length_of_stay,\n    9 AS admit_source_code,\n    'Information Not Available' AS admit_source_description,\n    9 AS admit_type_code,\n    'Unknown' AS admit_type_description,\n    00 AS discharge_disposition_code,\n    'Unknown Value (but present in data)' AS discharge_disposition_description,\n    REPLACE(REPLACE(JSON_EXTRACT(e, '$.participant[0].individual.reference'), '\"Practitioner/', ''), '\"', '') AS attending_provider_id,\n    NULL AS facility_npi,\n    'snomed' AS primary_diagnosis_code_type,\n    REPLACE(JSON_EXTRACT(e, '$.reasonCode[0].coding[0].code'), '\"', '') AS primary_diagnosis_code,\n    REPLACE(JSON_EXTRACT(e, '$.reasonCode[0].coding[0].display'), '\"', '') AS primary_diagnosis_description,\n    icd.\"MS-DRG\" AS ms_drg_code,\n    icd.\"MS-DRG_description\" AS ms_drg_description,\n    apr.apr_drg_code AS apr_drg_code,\n    apr.apr_drg_description AS apr_drg_description,\n    REPLACE(JSON_EXTRACT(ex, '$.payment.amount.value'), '\"', '') AS paid_amount,\n    REPLACE(JSON_EXTRACT(ex, '$.total[0].amount.value'), '\"', '') AS allowed_amount,\n    REPLACE(JSON_EXTRACT(ex, '$.total[0].amount.value'), '\"', '') AS charge_amount,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Encounter\" e\nLEFT JOIN \"synthea\".\"json\".\"ExplanationOfBenefit\" ex\n    ON REPLACE(JSON_EXTRACT(e, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(ex, '$.item[0].encounter[0].reference'), '\"Encounter/', ''), '\"', '')\nJOIN \"synthea\".\"terminology\".\"snomed_icd_10_map\" sno\n    ON REPLACE(JSON_EXTRACT(e, '$.reasonCode[0].coding[0].code'), '\"', '') = sno.referenced_component_id\nJOIN \"synthea\".\"reference\".\"icd10cm_to_msdrg_v41\" icd\n    ON sno.map_target = REPLACE(icd.ICD10, '.', '')\nJOIN \"synthea\".\"terminology\".\"apr_drg\" apr\n    ON icd.MDC = apr.mdc_code", "relation_name": "\"synthea\".\"tuva_input\".\"encounter\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:08.995400Z", "completed_at": "2024-02-19T03:52:09.004886Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:09.007870Z", "completed_at": "2024-02-19T03:52:12.116172Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 3.128882646560669, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.lab_result", "compiled": true, "compiled_code": "-- models/lab_result.sql\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(o, '$.id'), '\"', '') AS lab_result_id,\n    REPLACE(REPLACE(JSON_EXTRACT(o, '$.subject.reference'), '\"Patient/', ''), '\"', '') AS patient_id,\n    REPLACE(REPLACE(JSON_EXTRACT(o, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') AS encounter_id,\n    NULL AS accession_number,\n    'loinc' AS source_code_type,\n    REPLACE(JSON_EXTRACT(o, '$.code.coding[0].code'), '\"', '') AS source_code,\n    REPLACE(JSON_EXTRACT(o, '$.code.coding[0].display'), '\"', '') AS source_description,\n    NULL AS source_component,\n    'loinc' AS normalized_code_type,\n    l.loinc AS normalized_code,\n    l.short_name AS normalized_description,\n    l.component AS normalized_component,\n    REPLACE(JSON_EXTRACT(o, '$.status'), '\"', '') AS status,\n    REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '') AS result, \n    CAST(SUBSTRING(JSON_EXTRACT(o, '$.effectiveDateTime'), 2, 10) AS DATE) AS result_date,\n    CAST(SUBSTRING(JSON_EXTRACT(o, '$.issued'), 2, 10) AS DATE) AS collection_date,\n    REPLACE(JSON_EXTRACT(o, '$.valueQuantity.unit'), '\"', '') AS source_units,\n    REPLACE(JSON_EXTRACT(o, '$.valueQuantity.unit'), '\"', '') AS normalized_units,\n    NULL AS source_reference_range_low,\n    NULL AS source_reference_range_high,\n    NULL AS normalized_reference_range_low,\n    NULL AS normalized_reference_range_high,\n    NULL AS source_abnormal_flag,\n    NULL AS normalized_abnormal_flag,\n    NULL AS specimen,\n    REPLACE(REPLACE(JSON_EXTRACT(e, '$.participant[0].individual.reference'), '\"Practitioner/', ''), '\"', '') AS ordering_practitioner_id,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Observation\" o\nLEFT JOIN \"synthea\".\"terminology\".\"loinc\" l ON REPLACE(JSON_EXTRACT(o, '$.code.coding[0].code'), '\"', '') = l.loinc\nLEFT JOIN \"synthea\".\"json\".\"Encounter\" e ON REPLACE(REPLACE(JSON_EXTRACT(o, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') = REPLACE(JSON_EXTRACT(e, '$.id'), '\"', '')\nWHERE REPLACE(JSON_EXTRACT(o, '$.category[0].coding[0].code'), '\"', '') = ('laboratory')\nAND REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '') IS NOT NULL", "relation_name": "\"synthea\".\"tuva_input\".\"lab_result\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:08.648664Z", "completed_at": "2024-02-19T03:52:08.664800Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:08.668621Z", "completed_at": "2024-02-19T03:52:12.117518Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.584580898284912, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.ccsr__dx_vertical_pivot", "compiled": true, "compiled_code": "\n\nwith codes as (\n    \n    select\n        icd_10_cm_code as code, \n        icd_10_cm_code_description as code_description,\n        -- loop to generate columns for CCSR categories 1-6\n        ccsr_category_1,\n        ccsr_category_1_description,\n        ccsr_category_2,\n        ccsr_category_2_description,\n        ccsr_category_3,\n        ccsr_category_3_description,\n        ccsr_category_4,\n        ccsr_category_4_description,\n        ccsr_category_5,\n        ccsr_category_5_description,\n        ccsr_category_6,\n        ccsr_category_6_description,\n        default_ccsr_category_ip,\n        default_ccsr_category_op\n    from \"synthea\".\"ccsr\".\"_value_set_dxccsr_v2023_1_cleaned_map\"\n\n), long_union as (\n    -- generate select & union statements to pivot category columns to rows\n    \n    select \n        code,\n        code_description,\n        left(ccsr_category_1, 3) as ccsr_parent_category,\n        ccsr_category_1 as ccsr_category,\n        ccsr_category_1_description as ccsr_category_description,\n        1 as ccsr_category_rank,\n        (ccsr_category_1 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_1 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        left(ccsr_category_2, 3) as ccsr_parent_category,\n        ccsr_category_2 as ccsr_category,\n        ccsr_category_2_description as ccsr_category_description,\n        2 as ccsr_category_rank,\n        (ccsr_category_2 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_2 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        left(ccsr_category_3, 3) as ccsr_parent_category,\n        ccsr_category_3 as ccsr_category,\n        ccsr_category_3_description as ccsr_category_description,\n        3 as ccsr_category_rank,\n        (ccsr_category_3 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_3 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        left(ccsr_category_4, 3) as ccsr_parent_category,\n        ccsr_category_4 as ccsr_category,\n        ccsr_category_4_description as ccsr_category_description,\n        4 as ccsr_category_rank,\n        (ccsr_category_4 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_4 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        left(ccsr_category_5, 3) as ccsr_parent_category,\n        ccsr_category_5 as ccsr_category,\n        ccsr_category_5_description as ccsr_category_description,\n        5 as ccsr_category_rank,\n        (ccsr_category_5 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_5 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        left(ccsr_category_6, 3) as ccsr_parent_category,\n        ccsr_category_6 as ccsr_category,\n        ccsr_category_6_description as ccsr_category_description,\n        6 as ccsr_category_rank,\n        (ccsr_category_6 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_6 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    \n\n)\n\nselect distinct\n    *,\n    '2024-02-19 03:52:06.490224+00:00' as tuva_last_run\nfrom long_union\n-- as not all diagnosis codes have multiple categories, we can discard nulls\nwhere ccsr_category is not null", "relation_name": "\"synthea\".\"ccsr\".\"dx_vertical_pivot\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:12.231973Z", "completed_at": "2024-02-19T03:52:12.249387Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:12.262002Z", "completed_at": "2024-02-19T03:52:12.362999Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.13706350326538086, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.location", "compiled": true, "compiled_code": "-- models/location.sql\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(l, '$.id'), '\"', '') AS location_id,\n    NULL AS npi,\n    REPLACE(JSON_EXTRACT(l, '$.name'), '\"', '') AS name,\n    NULL AS facility_type,\n    REPLACE(JSON_EXTRACT(l, '$.managingOrganization.display'), '\"', '') AS parent_organization,\n    REPLACE(REPLACE(REPLACE(JSON_EXTRACT(l, '$.address.line'), '\"', ''), '[', ''), ']', '') AS address,\n    REPLACE(JSON_EXTRACT(l, '$.address.city'), '\"', '') AS city,\n    REPLACE(JSON_EXTRACT(l, '$.address.state'), '\"', '') AS state,\n    REPLACE(JSON_EXTRACT(l, '$.address.postalCode'), '\"', '') AS zip_code,\n    CAST(REPLACE(JSON_EXTRACT(l, '$.position.latitude'), '\"', '') AS FLOAT) AS latitude,\n    CAST(REPLACE(JSON_EXTRACT(l, '$.position.longitude'), '\"', '') AS FLOAT) AS longitude,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Location\" l", "relation_name": "\"synthea\".\"tuva_input\".\"location\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:12.254320Z", "completed_at": "2024-02-19T03:52:12.267035Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:12.271856Z", "completed_at": "2024-02-19T03:52:12.371109Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12558650970458984, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.medication", "compiled": true, "compiled_code": "-- models/medication.sql\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(m, '$.id'), '\"', '') AS medication_id,\n    REPLACE(REPLACE(JSON_EXTRACT(m, '$.subject.reference'), '\"Patient/', ''), '\"', '') AS patient_id,\n    REPLACE(REPLACE(JSON_EXTRACT(m, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') AS encounter_id,\n    CAST(SUBSTRING(JSON_EXTRACT(m, '$.authoredOn'), 2, 10) AS DATE) AS dispensing_date,\n    CAST(SUBSTRING(JSON_EXTRACT(m, '$.authoredOn'), 2, 10) AS DATE) AS prescribing_date,\n    'rxnorm' AS source_code_type,\n    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '\"', '') AS source_code,\n    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].display'), '\"', '') AS source_description,\n    (\n        SELECT c2.concept_code\n        FROM \"synthea\".\"vocabulary\".\"concept_relationship\" cr\n        JOIN \"synthea\".\"vocabulary\".\"concept\" c1 ON c1.concept_id = cr.concept_id_1\n        JOIN \"synthea\".\"vocabulary\".\"concept\" c2 ON c2.concept_id = cr.concept_id_2\n        WHERE c1.concept_code = REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '\"', '')\n        AND cr.relationship_id = 'Mapped from'\n        AND c2.vocabulary_id = 'NDC'\n        AND c2.domain_id = 'Drug'\n        AND c2.invalid_reason IS NULL\n        AND c1.concept_class_id in ('Branded Drug', 'Clinical Drug', 'Quant Clinical Drug', 'Quant Branded Drug')\n        AND LENGTH(c2.concept_code) = 11\n        ORDER BY c2.concept_id\n        LIMIT 1\n    ) AS ndc_code,\n    (\n        SELECT c2.concept_name\n        FROM \"synthea\".\"vocabulary\".\"concept_relationship\" cr\n        JOIN \"synthea\".\"vocabulary\".\"concept\" c1 ON c1.concept_id = cr.concept_id_1\n        JOIN \"synthea\".\"vocabulary\".\"concept\" c2 ON c2.concept_id = cr.concept_id_2\n        WHERE c1.concept_code = REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '\"', '')\n        AND cr.relationship_id = 'Mapped from'\n        AND c2.vocabulary_id = 'NDC'\n        AND c2.domain_id = 'Drug'\n        AND c2.invalid_reason IS NULL\n        AND c1.concept_class_id in ('Branded Drug', 'Clinical Drug', 'Quant Clinical Drug', 'Quant Branded Drug')\n        AND LENGTH(c2.concept_code) = 11\n        ORDER BY c2.concept_id\n        LIMIT 1\n    ) AS ndc_description,\n    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '\"', '') AS rxnorm_code,\n    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].display'), '\"', '') AS rxnorm_description,\n    r.\"atc class id\" AS atc_code,\n    (\n        SELECT c3.concept_name\n        FROM \"synthea\".\"vocabulary\".\"concept\" c3\n        WHERE c3.concept_code = atc_code\n            AND c3.vocabulary_id = 'ATC'\n            AND c3.domain_id = 'Drug'\n            AND c3.invalid_reason IS NULL\n            AND c3.standard_concept = 'C'\n        LIMIT 1\n    ) AS atc_description,\n    NULL AS route,\n    CASE\n        WHEN ds.amount_value IS NOT NULL THEN ds.amount_value\n        WHEN ds.numerator_value IS NOT NULL THEN\n            CASE\n                WHEN ds.denominator_value IS NOT NULL AND ds.denominator_value != 0 THEN ds.numerator_value / ds.denominator_value\n                ELSE ds.numerator_value\n            END\n        ELSE NULL\n    END AS strength,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '\"', '') IS NOT NULL \n        THEN CAST(REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '\"', '') AS INTEGER) * 30\n        ELSE 1\n    END AS quantity,\n    (\n        SELECT c4.concept_name\n        FROM \"synthea\".\"vocabulary\".\"concept\" c1\n        JOIN \"synthea\".\"vocabulary\".\"drug_strength\" ds ON c1.concept_id = ds.drug_concept_id\n        JOIN \"synthea\".\"vocabulary\".\"concept\" c4 ON c4.concept_id = COALESCE(ds.amount_unit_concept_id, ds.numerator_unit_concept_id)\n        WHERE c1.concept_code = REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '\"', '')\n            AND c1.vocabulary_id = 'RxNorm'\n            AND c1.domain_id = 'Drug'\n            AND c1.invalid_reason IS NULL\n            AND c1.standard_concept = 'S'\n            AND c4.concept_id IS NOT NULL\n        LIMIT 1\n    ) AS quantity_unit,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '\"', '') IS NOT NULL \n        THEN 30\n        ELSE 1\n    END AS days_supply,\n    REPLACE(REPLACE(JSON_EXTRACT(m, '$.requester.reference'), '\"Practitioner/', ''), '\"', '') AS practitioner_id,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"MedicationRequest\" m\nLEFT JOIN \"synthea\".\"vocabulary\".\"concept\" c\n    ON REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '\"', '') = c.concept_code\n    AND c.vocabulary_id = 'RxNorm'\n    AND c.domain_id = 'Drug'\n    AND c.invalid_reason IS NULL\n    AND c.standard_concept = 'S'\nJOIN \"synthea\".\"reference\".\"rxcuis_ndcs_atc\" r\n    ON REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '\"', '') = r.rxcui\nJOIN \"synthea\".\"vocabulary\".\"drug_strength\" ds\n    ON c.concept_id = ds.drug_concept_id\nWHERE \n    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '\"', '') IS NOT NULL", "relation_name": "\"synthea\".\"tuva_input\".\"medication\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:12.234420Z", "completed_at": "2024-02-19T03:52:12.249028Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:12.258653Z", "completed_at": "2024-02-19T03:52:12.428370Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2061326503753662, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.medical_claim", "compiled": true, "compiled_code": "-- models/medical_claim.sql\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(c, '$.id'), '\"', '') AS claim_id,\n    REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '\"', '') AS claim_line_number,\n    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') AS claim_type,\n    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '\"Patient/', ''), '\"', '') AS patient_id,\n    NULL AS member_id,\n    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '\"', '') AS payer,\n    NULL AS plan,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional'\n        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)\n        ELSE NULL\n    END AS admission_date,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional'\n        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)\n        ELSE NULL\n    END AS discharge_date,\n    '3' AS admit_source_code,\n    9 AS admit_type_code,\n    CASE\n        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20\n        ELSE 1\n    END AS discharge_disposition_code,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional'\n        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '\"', '')\n        ELSE NULL\n    END AS place_of_service_code,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional' THEN '111'\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional' THEN '791'\n        ELSE NULL\n    END AS bill_type_code,\n    msdrg.\"MS-DRG\" AS ms_drg_code,\n    aprdrg.apr_drg_code AS apr_drg_code,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional' THEN 0202\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional' THEN 0500\n        ELSE NULL\n    END AS revenue_center_code,\n    NULL AS service_unit_quantity,\n    NULL AS hcpcs_code,\n    NULL AS hcpcs_modifier_1,\n    NULL AS hcpcs_modifier_2,\n    NULL AS hcpcs_modifier_3,\n    NULL AS hcpcs_modifier_4,\n    NULL AS hcpcs_modifier_5,\n    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '\"', '') AS rendering_npi,\n    NULL AS billing_npi,\n    NULL AS facility_npi,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,\n    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT) AS paid_amount,\n    NULL AS allowed_amount,\n    NULL AS charge_amount,\n    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '\"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT)) AS coinsurance_amount,\n    NULL AS copayment_amount,\n    NULL AS deductible_amount,\n    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '\"', '') AS FLOAT) AS total_cost_amount,\n    'icd-10-cm' AS diagnosis_code_type,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_1,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_2,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_3,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_4,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_5,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_6,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_7,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_8,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_9,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_10,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_11,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_12,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_13,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_14,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_15,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_16,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_17,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_18,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_19,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_20,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_21,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_22,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_23,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_24,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_25,\n    'Y' AS diagnosis_poa_1,\n    'U' AS diagnosis_poa_2,\n    'U' AS diagnosis_poa_3,\n    'U' AS diagnosis_poa_4,\n    'U' AS diagnosis_poa_5,\n    'U' AS diagnosis_poa_6,\n    'U' AS diagnosis_poa_7,\n    'U' AS diagnosis_poa_8,\n    'U' AS diagnosis_poa_9,\n    'U' AS diagnosis_poa_10,\n    'U' AS diagnosis_poa_11,\n    'U' AS diagnosis_poa_12,\n    'U' AS diagnosis_poa_13,\n    'U' AS diagnosis_poa_14,\n    'U' AS diagnosis_poa_15,\n    'U' AS diagnosis_poa_16,\n    'U' AS diagnosis_poa_17,\n    'U' AS diagnosis_poa_18,\n    'U' AS diagnosis_poa_19,\n    'U' AS diagnosis_poa_20,\n    'U' AS diagnosis_poa_21,\n    'U' AS diagnosis_poa_22,\n    'U' AS diagnosis_poa_23,\n    'U' AS diagnosis_poa_24,\n    'U' AS diagnosis_poa_25,\n    'snomed' AS procedure_code_type,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '\"', '') AS procedure_code_1,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '\"', '') AS procedure_code_2,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '\"', '') AS procedure_code_3,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '\"', '') AS procedure_code_4,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '\"', '') AS procedure_code_5,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '\"', '') AS procedure_code_6,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '\"', '') AS procedure_code_7,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '\"', '') AS procedure_code_8,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '\"', '') AS procedure_code_9,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '\"', '') AS procedure_code_10,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '\"', '') AS procedure_code_11,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '\"', '') AS procedure_code_12,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '\"', '') AS procedure_code_13,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '\"', '') AS procedure_code_14,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '\"', '') AS procedure_code_15,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '\"', '') AS procedure_code_16,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '\"', '') AS procedure_code_17,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '\"', '') AS procedure_code_18,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '\"', '') AS procedure_code_19,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '\"', '') AS procedure_code_20,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '\"', '') AS procedure_code_21,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '\"', '') AS procedure_code_22,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '\"', '') AS procedure_code_23,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '\"', '') AS procedure_code_24,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '\"', '') AS procedure_code_25,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Claim\" c\nLEFT JOIN \"synthea\".\"json\".\"ExplanationOfBenefit\" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '\"Claim/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"json\".\"Condition\" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[0].diagnosisReference.reference'), '\"Condition/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"json\".\"Procedure\" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[0].procedureReference.reference'), '\"Procedure/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"terminology\".\"snomed_icd_10_map\" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '\"', '') = map.referenced_component_id\nLEFT JOIN \"synthea\".\"reference\".\"icd10cm_to_msdrg_v41\" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target\nLEFT JOIN \"synthea\".\"terminology\".\"apr_drg\" aprdrg ON aprdrg.mdc_code = msdrg.MDC\nLEFT JOIN \"synthea\".\"json\".\"Practitioner\" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '\"Practitioner/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"json\".\"Patient\" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '\"Patient/', ''), '\"', '')\nWHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') != 'pharmacy'", "relation_name": "\"synthea\".\"tuva_input\".\"medical_claim\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:12.374470Z", "completed_at": "2024-02-19T03:52:12.379049Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:12.384678Z", "completed_at": "2024-02-19T03:52:12.463224Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.09589624404907227, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.observation", "compiled": true, "compiled_code": "-- models/observation.sql\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(o, '$.id'), '\"', '') AS observation_id,\n    REPLACE(REPLACE(JSON_EXTRACT(o, '$.subject.reference'), '\"Patient/', ''), '\"', '') AS patient_id,\n    REPLACE(REPLACE(JSON_EXTRACT(o, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') AS encounter_id,\n    NULL AS panel_id,\n    CAST(SUBSTRING(JSON_EXTRACT(o, '$.effectiveDateTime'), 2, 10) AS DATE) AS observation_date,\n    REPLACE(JSON_EXTRACT(o, '$.category[0].display'), '\"', '') AS observation_type,\n    'loinc' AS source_code_type,\n    REPLACE(JSON_EXTRACT(o, '$.code.coding[0].code'), '\"', '') AS source_code,\n    REPLACE(JSON_EXTRACT(o, '$.code.coding[0].display'), '\"', '') AS source_description,\n    'loinc' AS normalized_code_type,\n    REPLACE(JSON_EXTRACT(o, '$.code.coding[0].code'), '\"', '') AS normalized_code,\n    REPLACE(JSON_EXTRACT(o, '$.code.coding[0].display'), '\"', '') AS normalized_description,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '')\n        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '') IS NULL AND REPLACE(JSON_EXTRACT(o, '$.component'), '\"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.component[0].code.coding[0].code'), '\"', '')\n        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '') IS NULL AND REPLACE(JSON_EXTRACT(o, '$.component'), '\"', '') IS NULL THEN REPLACE(JSON_EXTRACT(o, '$.valueCodeableConcept.coding[0].display'), '\"', '')\n    END AS result,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.unit'), '\"', '')\n        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '') IS NULL AND REPLACE(JSON_EXTRACT(o, '$.component'), '\"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.component[0].valueQuantity.unit'), '\"', '')\n    END AS source_units,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.unit'), '\"', '')\n        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '') IS NULL AND REPLACE(JSON_EXTRACT(o, '$.component'), '\"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.component[0].valueQuantity.unit'), '\"', '')\n    END AS normalized_units,\n    NULL AS source_reference_range_low,\n    NULL AS source_reference_range_high,\n    NULL AS normalized_reference_range_low,\n    NULL AS normalized_reference_range_high,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Observation\" o", "relation_name": "\"synthea\".\"tuva_input\".\"observation\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:12.388999Z", "completed_at": "2024-02-19T03:52:12.397621Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:12.399989Z", "completed_at": "2024-02-19T03:52:12.466607Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.142974853515625, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.patient", "compiled": true, "compiled_code": "-- models/patient.sql\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(p, '$.id'), '\"', '') AS patient_id,\n    REPLACE(JSON_EXTRACT(p, '$.name[0].given[0]'), '\"', '') AS first_name,\n    REPLACE(JSON_EXTRACT(p, '$.name[0].family'), '\"', '') AS last_name,\n    REPLACE(JSON_EXTRACT(p, '$.gender'), '\"', '') AS sex,\n    REPLACE(JSON_EXTRACT(p, '$.extension[0].extension[0].valueCoding.display'), '\"', '') AS race,\n    CAST(REPLACE(JSON_EXTRACT(p, '$.birthDate'), '\"', '') AS DATE) AS birth_date,\n    CAST(REPLACE(JSON_EXTRACT(p, '$.deceasedDateTime'), '\"', '') AS DATE) AS death_date,\n    CASE\n        WHEN JSON_EXTRACT(p, '$.deceasedDateTime') IS NOT NULL THEN 1\n        ELSE 0\n    END AS death_flag,\n    REPLACE(REPLACE(REPLACE(JSON_EXTRACT(p, '$.address[0].line'), '\"', ''), '[', ''), ']', '') AS address,\n    REPLACE(JSON_EXTRACT(p, '$.address[0].city'), '\"', '') AS city,\n    REPLACE(JSON_EXTRACT(p, '$.address[0].state'), '\"', '') AS state,\n    REPLACE(JSON_EXTRACT(p, '$.address[0].postalCode'), '\"', '') AS zip_code,\n    NULL AS county,\n    REPLACE(JSON_EXTRACT(p, '$.address[0].extension[0].extension[0].valueDecimal'), '\"', '') AS latitude,\n    REPLACE(JSON_EXTRACT(p, '$.address[0].extension[0].extension[1].valueDecimal'), '\"', '') AS longitude,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Patient\" p", "relation_name": "\"synthea\".\"tuva_input\".\"patient\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:12.453763Z", "completed_at": "2024-02-19T03:52:12.463721Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:12.468087Z", "completed_at": "2024-02-19T03:52:12.589973Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1501173973083496, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.pharmacy_claim", "compiled": true, "compiled_code": "-- models/pharmacy_claim.sql\n\nSELECT *\nFROM (\n    SELECT DISTINCT\n        REPLACE(JSON_EXTRACT(c, '$.id'), '\"', '') AS claim_id,\n        REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '\"', '') AS claim_line_number,\n        REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '\"Patient/', ''), '\"', '') AS patient_id,\n        NULL AS member_id,\n        REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '\"', '') AS payer,\n        NULL AS plan,\n        REPLACE(JSON_EXTRACT(p, '$.identifier[0].value'), '\"', '') AS prescribing_provider_npi,\n        NULL AS dispensing_provider_npi,\n        CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS dispensing_date,\n        (\n            SELECT c2.concept_code\n            FROM \"synthea\".\"vocabulary\".\"concept_relationship\" cr\n            JOIN \"synthea\".\"vocabulary\".\"concept\" c1 ON c1.concept_id = cr.concept_id_1\n            JOIN \"synthea\".\"vocabulary\".\"concept\" c2 ON c2.concept_id = cr.concept_id_2\n            WHERE c1.concept_code = REPLACE(JSON_EXTRACT(c, '$.item[0].productOrService.coding[0].code'), '\"', '')\n            AND cr.relationship_id = 'Mapped from'\n            AND c2.vocabulary_id = 'NDC'\n            AND c2.domain_id = 'Drug'\n            AND c2.invalid_reason IS NULL\n            AND c1.concept_class_id in ('Branded Drug', 'Clinical Drug', 'Quant Clinical Drug')\n            AND LENGTH(c2.concept_code) = 11\n            ORDER BY c2.concept_code\n            LIMIT 1\n        ) AS ndc_code,\n        CASE\n            WHEN REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '\"', '') IS NOT NULL \n            THEN CAST(REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '\"', '') AS INTEGER) * 30\n            ELSE 1\n        END AS quantity,\n        CASE\n            WHEN REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '\"', '') IS NOT NULL \n            THEN 30\n            ELSE 1\n        END AS days_supply,\n        0 AS refills,\n        CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,\n        CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT) AS paid_amount,\n        CASE\n            WHEN REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].category.coding[0].display'), '\"', '') = 'Line Allowed Charge Amount'\n                THEN CAST(REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].amount.value'), '\"', '') AS FLOAT)\n            ELSE 0\n        END AS allowed_amount,\n        CASE\n            WHEN REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].category.coding[0].display'), '\"', '') = 'Line Beneficiary Coinsurance Amount'\n                THEN CAST(REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].amount.value'), '\"', '') AS FLOAT)\n            ELSE 0\n        END AS coinsurance_amount,\n        CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT) AS copayment_amount,\n        CASE\n            WHEN REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].category.coding[0].display'), '\"', '') = 'Line Beneficiary Part B Deductible Amount'\n                THEN CAST(REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].amount.value'), '\"', '') AS FLOAT)\n            ELSE 0\n        END AS deductible_amount,\n        'SyntheaFhir' AS data_source\n    FROM \"synthea\".\"json\".\"Claim\" c\n    LEFT JOIN \"synthea\".\"json\".\"MedicationRequest\" m\n        ON REPLACE(REPLACE(JSON_EXTRACT(c, '$.prescription.reference'), '\"MedicationRequest/', ''), '\"', '') = REPLACE(JSON_EXTRACT(m, '$.id'), '\"', '')\n    LEFT JOIN \"synthea\".\"json\".\"ExplanationOfBenefit\" e\n        ON REPLACE(JSON_EXTRACT(c, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '\"Claim/', ''), '\"', '')\n    LEFT JOIN \"synthea\".\"json\".\"Encounter\" enc\n        ON REPLACE(REPLACE(JSON_EXTRACT(c, '$.item[0].encounter[0].reference'), '\"Encounter/', ''), '\"', '') = REPLACE(JSON_EXTRACT(enc, '$.id'), '\"', '')\n    LEFT JOIN \"synthea\".\"json\".\"Practitioner\" p\n        ON REPLACE(REPLACE(JSON_EXTRACT(enc, '$.participant[0].individual.reference'), '\"Practitioner/', ''), '\"', '') = REPLACE(JSON_EXTRACT(p, '$.id'), '\"', '')\n    LEFT JOIN \"synthea\".\"vocabulary\".\"drug_strength\" ds ON REPLACE(JSON_EXTRACT(c, '$.item[0].productOrService.coding[0].code'), '\"', '') = ds.drug_concept_id\n    WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'pharmacy'\n) AS pharmacy_claim\nWHERE pharmacy_claim.ndc_code IS NOT NULL", "relation_name": "\"synthea\".\"tuva_input\".\"pharmacy_claim\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:12.534751Z", "completed_at": "2024-02-19T03:52:12.540269Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:12.544575Z", "completed_at": "2024-02-19T03:52:12.627409Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.10036301612854004, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.practitioner", "compiled": true, "compiled_code": "-- models/practitioner.sql\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(p, '$.id'), '\"', '') AS practitioner_id,\n    REPLACE(JSON_EXTRACT(p, '$.identifier[0].value'), '\"', '') AS npi,\n    REPLACE(JSON_EXTRACT(p, '$.name[0].given[0]'), '\"', '') AS first_name,\n    REPLACE(JSON_EXTRACT(p, '$.name[0].family'), '\"', '') AS last_name,\n    REPLACE(JSON_EXTRACT(pr, '$.location[0].display'), '\"', '') AS practice_affiliation,\n    REPLACE(JSON_EXTRACT(pr, '$.specialty[0].text'), '\"', '') AS specialty,\n    NULL AS sub_specialty,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Practitioner\" p\nJOIN \"synthea\".\"json\".\"PractitionerRole\" pr\n    ON REPLACE(JSON_EXTRACT(p, '$.identifier[0].value'), '\"', '') = REPLACE(JSON_EXTRACT(pr, '$.practitioner.identifier.value'), '\"', '')", "relation_name": "\"synthea\".\"tuva_input\".\"practitioner\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:12.540714Z", "completed_at": "2024-02-19T03:52:12.551331Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:12.555120Z", "completed_at": "2024-02-19T03:52:12.634498Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10741662979125977, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.procedure", "compiled": true, "compiled_code": "-- models/procedure.sql\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(p, '$.id'), '\"', '') AS procedure_id,\n    REPLACE(REPLACE(JSON_EXTRACT(p, '$.subject.reference'), '\"Patient/', ''), '\"', '') AS patient_id,\n    REPLACE(REPLACE(JSON_EXTRACT(p, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') AS encounter_id,\n    REPLACE(JSON_EXTRACT(cl, '$.id'), '\"', '') AS claim_id,\n    CAST(REPLACE(JSON_EXTRACT(p, '$.performedPeriod.start'), '\"', '') AS DATE) AS procedure_date,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '\"', '') AS procedure_code,\n    'snomed' AS source_code_type,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '\"', '') AS source_code,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].display'), '\"', '') AS source_description,\n    'snomed' AS normalized_code_type,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '\"', '') AS normalized_code,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].display'), '\"', '') AS normalized_description,\n    NULL AS modifier_1,\n    NULL AS modifier_2,\n    NULL AS modifier_3,\n    NULL AS modifier_4,\n    NULL AS modifier_5,\n    REPLACE(REPLACE(JSON_EXTRACT(e, '$.participant[0].individual.reference'), '\"Practitioner/', ''), '\"', '') AS practitioner_id,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Procedure\" p\nLEFT JOIN \"synthea\".\"json\".\"Encounter\" e\n    ON REPLACE(REPLACE(JSON_EXTRACT(p, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') = REPLACE(JSON_EXTRACT(e, '$.id'), '\"', '')\nLEFT JOIN \"synthea\".\"json\".\"Claim\" cl\n    ON REPLACE(REPLACE(JSON_EXTRACT(p, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(cl, '$.item[0].encounter[0].reference'), '\"Encounter/', ''), '\"', '')", "relation_name": "\"synthea\".\"tuva_input\".\"procedure\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:12.609743Z", "completed_at": "2024-02-19T03:52:12.629824Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:12.635038Z", "completed_at": "2024-02-19T03:52:12.721188Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.11833643913269043, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034__performance_period", "compiled": true, "compiled_code": "\n/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        cast(\n        \n\n    \n\n    date_trunc('year', now()) + ((interval '1 year') * (1))\n\n + ((interval '1 day') * (-1))\n\n\n        as date)\n        \n         as performance_period_end\n)\n\n/*\n    set performance period begin to a year and a day prior\n    for a complete calendar year\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    \n\n    performance_period_end + ((interval '1 year') * (-1))\n\n + ((interval '1 day') * (1))\n\n as performance_period_begin\n    from period_end\n\n)\n\n/*\n    set performance lookback periods for each type of test\n\n    during the measurement period:\n    - Fecal occult blood test (FOBT) during the measurement period\n\n    during the measurement period or the two years prior:\n    - Fecal immunochemical DNA test (FIT-DNA)\n\n    during the measurement period or the four years prior:\n    - Flexible sigmoidoscopy\n    - Computed tomography (CT) colonography\n\n    during the measurement period or the nine years prior:\n    - Colonoscopy\n\n*/\n, period_lookback as (\n\n    select\n          performance_period_end\n        , performance_period_begin\n        , \n\n    performance_period_end + ((interval '1 year') * (-2))\n\n as performance_period_begin_1yp\n        , \n\n    performance_period_end + ((interval '1 year') * (-3))\n\n as performance_period_begin_2yp\n        , \n\n    performance_period_end + ((interval '1 year') * (-5))\n\n as performance_period_begin_4yp\n        , \n\n    performance_period_end + ((interval '1 year') * (-10))\n\n as performance_period_begin_9yp\n    from period_begin\n\n)\n\nselect\n      cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\n    , cast(performance_period_begin_1yp as date) as performance_period_begin_1yp\n    , cast(performance_period_begin_2yp as date) as performance_period_begin_2yp\n    , cast(performance_period_begin_4yp as date) as performance_period_begin_4yp\n    , cast(performance_period_begin_9yp as date) as performance_period_begin_9yp\nfrom period_lookback", "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf0034__performance_period\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:12.648629Z", "completed_at": "2024-02-19T03:52:12.661783Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:12.678024Z", "completed_at": "2024-02-19T03:52:12.745545Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.10644888877868652, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372__performance_period", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        cast(\n        \n\n    \n\n    date_trunc('year', now()) + ((interval '1 year') * (1))\n\n + ((interval '1 day') * (-1))\n\n\n        as date)\n        \n         as performance_period_end\n)\n\n/*\n    set performance period begin to a year and a day prior\n    for a complete calendar year\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    \n\n    performance_period_end + ((interval '1 year') * (-1))\n\n + ((interval '1 day') * (1))\n\n as performance_period_begin\n    from period_end\n\n)\n\n/*\n    set performance lookback period to 27 months prior to the end of the\n    performance period\n*/\n, period_lookback as (\n\n    select\n          performance_period_end\n        , performance_period_begin\n        , \n\n    performance_period_end + ((interval '1 month') * (-27))\n\n as performance_period_lookback\n    from period_begin\n\n\n)\n\nselect\n      cast((select id\nfrom \"synthea\".\"quality_measures\".\"_value_set_measures\"\nwhere id = 'NQF2372') as TEXT) as measure_id\n    , cast((select name\nfrom \"synthea\".\"quality_measures\".\"_value_set_measures\"\nwhere id = 'NQF2372') as TEXT) as measure_name\n    , cast((select version\nfrom \"synthea\".\"quality_measures\".\"_value_set_measures\"\nwhere id = 'NQF2372') as TEXT) as measure_version\n    , cast(performance_period_end as date) as performance_period_end\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_lookback as date) as performance_period_lookback\nfrom period_lookback", "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf2372__performance_period\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:12.663621Z", "completed_at": "2024-02-19T03:52:12.685568Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:12.688228Z", "completed_at": "2024-02-19T03:52:12.756876Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1005251407623291, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_condition", "compiled": true, "compiled_code": "\n\nselect\n    cast(condition_id as TEXT ) as condition_id\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_id as TEXT ) as encounter_id\n    , cast(claim_id as TEXT ) as claim_id\n    , try_cast( recorded_date as date ) as recorded_date\n    , try_cast( onset_date as date ) as onset_date\n    , try_cast( resolved_date as date ) as resolved_date\n    , cast(status as TEXT ) as status\n    , cast(condition_type as TEXT ) as condition_type\n    , cast(source_code_type as TEXT ) as source_code_type\n    , cast(source_code as TEXT ) as source_code\n    , cast(source_description as TEXT ) as source_description\n    , cast(normalized_code_type as TEXT ) as normalized_code_type\n    , cast(normalized_code as TEXT ) as normalized_code\n    , cast(normalized_description as TEXT ) as normalized_description\n    , cast(condition_rank as integer ) as condition_rank\n    , cast(present_on_admit_code as TEXT ) as present_on_admit_code\n    , cast(present_on_admit_description as TEXT ) as present_on_admit_description\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-19 03:52:06.490224+00:00' as timestamp ) as tuva_last_run\nfrom \"synthea\".\"tuva_input\".\"condition\"", "relation_name": "\"synthea\".\"core\".\"_stg_clinical_condition\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:12.777765Z", "completed_at": "2024-02-19T03:52:12.794418Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:12.798405Z", "completed_at": "2024-02-19T03:52:12.871140Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.11401700973510742, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_lab_result", "compiled": true, "compiled_code": "\n\nselect\n    cast(lab_result_id as TEXT ) as lab_result_id\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_id as TEXT ) as encounter_id\n    , cast(accession_number as TEXT ) as accession_number\n    , cast(source_code_type as TEXT ) as source_code_type\n    , cast(source_code as TEXT ) as source_code\n    , cast(source_description as TEXT ) as source_description\n    , cast(source_component as TEXT ) as source_component\n    , cast(normalized_code_type as TEXT ) as normalized_code_type\n    , cast(normalized_code as TEXT ) as normalized_code\n    , cast(normalized_description as TEXT ) as normalized_description\n    , cast(normalized_component as TEXT ) as normalized_component\n    , cast(status as TEXT ) as status\n    , cast(result as TEXT ) as result\n    , try_cast( result_date as date ) as result_date\n    , try_cast( collection_date as date ) as collection_date\n    , cast(source_units as TEXT ) as source_units\n    , cast(normalized_units as TEXT ) as normalized_units\n    , cast(source_reference_range_low as TEXT ) as source_reference_range_low\n    , cast(source_reference_range_high as TEXT ) as source_reference_range_high\n    , cast(normalized_reference_range_low as TEXT ) as normalized_reference_range_low\n    , cast(normalized_reference_range_high as TEXT ) as normalized_reference_range_high\n    , cast(source_abnormal_flag as integer ) as source_abnormal_flag\n    , cast(normalized_abnormal_flag as integer ) as normalized_abnormal_flag\n    , cast(specimen as TEXT ) as specimen\n    , cast(ordering_practitioner_id as TEXT ) as ordering_practitioner_id\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-19 03:52:06.490224+00:00' as timestamp ) as tuva_last_run\nfrom \"synthea\".\"tuva_input\".\"lab_result\"", "relation_name": "\"synthea\".\"core\".\"_stg_clinical_lab_result\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:12.763152Z", "completed_at": "2024-02-19T03:52:12.782941Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:12.790844Z", "completed_at": "2024-02-19T03:52:12.872696Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.11852622032165527, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_encounter", "compiled": true, "compiled_code": "\n\nselect \n    cast(encounter_id as TEXT ) as encounter_id\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_type as TEXT ) as encounter_type\n    , try_cast( encounter_start_date as date ) as encounter_start_date\n    , try_cast( encounter_end_date as date ) as encounter_end_date\n    , cast(length_of_stay as integer ) as length_of_stay\n    , cast(admit_source_code as TEXT ) as admit_source_code\n    , cast(admit_source_description as TEXT ) as admit_source_description\n    , cast(admit_type_code as TEXT ) as admit_type_code\n    , cast(admit_type_description as TEXT ) as admit_type_description\n    , cast(discharge_disposition_code as TEXT ) as discharge_disposition_code\n    , cast(discharge_disposition_description as TEXT ) as discharge_disposition_description\n    , cast(attending_provider_id as TEXT ) as attending_provider_id\n    , cast(facility_npi as TEXT ) as facility_npi\n    , cast(primary_diagnosis_code_type as TEXT ) as primary_diagnosis_code_type\n    , cast(primary_diagnosis_code as TEXT ) as primary_diagnosis_code\n    , cast(primary_diagnosis_description as TEXT ) as primary_diagnosis_description\n    , cast(ms_drg_code as TEXT ) as ms_drg_code\n    , cast(ms_drg_description as TEXT ) as ms_drg_description \n    , cast(apr_drg_code as TEXT ) as apr_drg_code\n    , cast(apr_drg_description as TEXT ) as apr_drg_description\n    , cast(paid_amount as numeric(28,6) ) as paid_amount\n    , cast(allowed_amount as numeric(28,6) ) as allowed_amount\n    , cast(charge_amount as numeric(28,6) ) as charge_amount\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-19 03:52:06.490224+00:00' as timestamp ) as tuva_last_run\nfrom \"synthea\".\"tuva_input\".\"encounter\"", "relation_name": "\"synthea\".\"core\".\"_stg_clinical_encounter\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:12.802023Z", "completed_at": "2024-02-19T03:52:12.814151Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:12.816926Z", "completed_at": "2024-02-19T03:52:12.875147Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08359336853027344, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_location", "compiled": true, "compiled_code": "\n\nselect\n    cast(location_id as TEXT ) as location_id\n    , cast(npi as TEXT ) as npi\n    , cast(name as TEXT ) as name\n    , cast(facility_type as TEXT ) as facility_type\n    , cast(parent_organization as TEXT ) as parent_organization\n    , cast(address as TEXT ) as address\n    , cast(city as TEXT ) as city\n    , cast(state as TEXT ) as state\n    , cast(zip_code as TEXT ) as zip_code\n    , cast(latitude as float ) as latitude\n    , cast(longitude as float ) as longitude\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-19 03:52:06.490224+00:00' as timestamp ) as tuva_last_run\nfrom \"synthea\".\"tuva_input\".\"location\"", "relation_name": "\"synthea\".\"core\".\"_stg_clinical_location\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:12.890532Z", "completed_at": "2024-02-19T03:52:12.910573Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:12.915167Z", "completed_at": "2024-02-19T03:52:12.992358Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.11048126220703125, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_medication", "compiled": true, "compiled_code": "\n\nselect\n    cast(medication_id as TEXT ) as medication_id\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_id as TEXT ) as encounter_id\n    , try_cast( dispensing_date as date ) as dispensing_date\n    , try_cast( prescribing_date as date ) as prescribing_date\n    , cast(source_code_type as TEXT ) as source_code_type\n    , cast(source_code as TEXT ) as source_code\n    , cast(source_description as TEXT ) as source_description\n    , cast(ndc_code as TEXT ) as ndc_code\n    , cast(ndc_description as TEXT ) as ndc_description\n    , cast(rxnorm_code as TEXT ) as rxnorm_code\n    , cast(rxnorm_description as TEXT ) as rxnorm_description \n    , cast(atc_code as TEXT ) as atc_code\n    , cast(atc_description as TEXT ) as atc_description\n    , cast(route as TEXT ) as route\n    , cast(strength as TEXT ) as strength\n    , cast(quantity as integer ) as quantity\n    , cast(quantity_unit as TEXT ) as quantity_unit\n    , cast(days_supply as integer ) as days_supply\n    , cast(practitioner_id as TEXT ) as practitioner_id\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-19 03:52:06.490224+00:00' as timestamp ) as tuva_last_run\nfrom \"synthea\".\"tuva_input\".\"medication\"", "relation_name": "\"synthea\".\"core\".\"_stg_clinical_medication\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:12.901129Z", "completed_at": "2024-02-19T03:52:12.912942Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:12.919408Z", "completed_at": "2024-02-19T03:52:12.996676Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11099362373352051, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_observation", "compiled": true, "compiled_code": "\n\n\nselect\n    cast(observation_id as TEXT ) as observation_id\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_id as TEXT ) as encounter_id\n    , cast(panel_id as TEXT ) as panel_id\n    , try_cast( observation_date as date ) as observation_date\n    , cast(observation_type as TEXT ) as observation_type\n    , cast(source_code_type as TEXT ) as source_code_type\n    , cast(source_code as TEXT ) as source_code\n    , cast(source_description as TEXT ) as source_description\n    , cast(normalized_code_type as TEXT ) as normalized_code_type\n    , cast(normalized_code as TEXT ) as normalized_code\n    , cast(normalized_description as TEXT ) as normalized_description\n    , cast(result as TEXT ) as result\n    , cast(source_units as TEXT ) as source_units\n    , cast(normalized_units as TEXT ) as normalized_units\n    , cast(source_reference_range_low as TEXT ) as source_reference_range_low\n    , cast(source_reference_range_high as TEXT ) as source_reference_range_high\n    , cast(normalized_reference_range_low as TEXT ) as normalized_reference_range_low\n    , cast(normalized_reference_range_high as TEXT ) as normalized_reference_range_high\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-19 03:52:06.490224+00:00' as timestamp ) as tuva_last_run\nfrom \"synthea\".\"tuva_input\".\"observation\"", "relation_name": "\"synthea\".\"core\".\"_stg_clinical_observation\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:12.924671Z", "completed_at": "2024-02-19T03:52:12.934704Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:12.938309Z", "completed_at": "2024-02-19T03:52:12.998607Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.08358383178710938, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_patient", "compiled": true, "compiled_code": "\n\nselect\n    cast(patient_id as TEXT ) as patient_id\n    , cast(first_name as TEXT ) as first_name\n    , cast(last_name as TEXT ) as last_name\n    , cast(sex as TEXT ) as sex\n    , cast(race as TEXT ) as race\n    , try_cast( birth_date as date ) as birth_date\n    , try_cast( death_date as date ) as death_date\n    , cast(death_flag as integer ) as death_flag\n    , cast(address as TEXT ) as address\n    , cast(city as TEXT ) as city\n    , cast(state as TEXT ) as state\n    , cast(zip_code as TEXT ) as zip_code\n    , cast(county as TEXT ) as county\n    , cast(latitude as float ) as latitude\n    , cast(longitude as float ) as longitude\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-19 03:52:06.490224+00:00' as timestamp ) as tuva_last_run\nfrom \"synthea\".\"tuva_input\".\"patient\"", "relation_name": "\"synthea\".\"core\".\"_stg_clinical_patient\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:13.018082Z", "completed_at": "2024-02-19T03:52:13.036427Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:13.039677Z", "completed_at": "2024-02-19T03:52:13.105412Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09712767601013184, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_practitioner", "compiled": true, "compiled_code": "\n\nselect\n    cast(practitioner_id as TEXT ) as practitioner_id\n    , cast(npi as TEXT ) as npi\n    , cast(first_name as TEXT ) as first_name\n    , cast(last_name as TEXT ) as last_name\n    , cast(practice_affiliation as TEXT ) as practice_affiliation\n    , cast(specialty as TEXT ) as specialty\n    , cast(sub_specialty as TEXT ) as sub_specialty\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-19 03:52:06.490224+00:00' as timestamp ) as tuva_last_run\nfrom \"synthea\".\"tuva_input\".\"practitioner\"", "relation_name": "\"synthea\".\"core\".\"_stg_clinical_practitioner\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:13.026632Z", "completed_at": "2024-02-19T03:52:13.038818Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:13.051609Z", "completed_at": "2024-02-19T03:52:13.114408Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.10229921340942383, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_procedure", "compiled": true, "compiled_code": "\n\nselect\n    cast(procedure_id as TEXT ) as procedure_id \n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_id as TEXT ) as encounter_id\n    , cast(claim_id as TEXT ) as claim_id\n    , try_cast( procedure_date as date ) as procedure_date\n    , cast(source_code_type as TEXT ) as source_code_type\n    , cast(source_code as TEXT ) as source_code\n    , cast(source_description as TEXT ) as source_description\n    , cast(normalized_code_type as TEXT ) as normalized_code_type\n    , cast(normalized_code as TEXT ) as normalized_code\n    , cast(normalized_description as TEXT ) as normalized_description\n    , cast(modifier_1 as TEXT ) as modifier_1\n    , cast(modifier_2 as TEXT ) as modifier_2\n    , cast(modifier_3 as TEXT ) as modifier_3\n    , cast(modifier_4 as TEXT ) as modifier_4\n    , cast(modifier_5 as TEXT ) as modifier_5\n    , cast(practitioner_id as TEXT ) as practitioner_id\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-19 03:52:06.490224+00:00' as timestamp ) as tuva_last_run\nfrom \"synthea\".\"tuva_input\".\"procedure\"", "relation_name": "\"synthea\".\"core\".\"_stg_clinical_procedure\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:13.043512Z", "completed_at": "2024-02-19T03:52:13.057854Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:13.060592Z", "completed_at": "2024-02-19T03:52:13.767548Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.7318804264068604, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_eligibility as (\n\n\n\nselect\n      patient_id\n    , patient_id||data_source||payer||plan||enrollment_start_date||enrollment_end_date as patient_id_key\n    , member_id\n    , gender\n    , race\n    , birth_date\n    , death_date\n    , death_flag\n    , enrollment_start_date\n    , enrollment_end_date\n    , payer\n    , payer_type\n    , plan\n    , original_reason_entitlement_code\n    , dual_status_code\n    , medicare_status_code\n    , first_name\n    , last_name\n    , address\n    , city\n    , state\n    , zip_code\n    , phone\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"eligibility\"\n) select distinct\n  elig.patient_id\n  , elig.patient_id||elig.data_source||elig.payer||elig.plan||elig.enrollment_start_date||elig.enrollment_end_date as patient_id_key\n  , cal_dob.full_date as normalized_birth_date\n  , cal_death.full_date as normalized_death_date\n  , cal_enroll_start.full_date as normalized_enrollment_start_date\n  , cal_enroll_end.full_date as normalized_enrollment_end_date\n  , '2024-02-19 03:52:06.490224+00:00' as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_eligibility elig\nleft join \"synthea\".\"terminology\".\"calendar\" cal_dob\n    on elig.birth_date = cal_dob.full_date\nleft join \"synthea\".\"terminology\".\"calendar\" cal_death\n    on elig.death_date = cal_death.full_date\nleft join \"synthea\".\"terminology\".\"calendar\" cal_enroll_start\n    on elig.enrollment_start_date = cal_enroll_start.full_date\nleft join \"synthea\".\"terminology\".\"calendar\" cal_enroll_end\n    on elig.enrollment_end_date = cal_enroll_end.full_date", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_eligibility_dates_normalize\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:13.273973Z", "completed_at": "2024-02-19T03:52:13.293893Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:13.297304Z", "completed_at": "2024-02-19T03:52:14.066838Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.8021302223205566, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__lab_result", "compiled": true, "compiled_code": "\n\nselect * from \"synthea\".\"core\".\"_stg_clinical_lab_result\"", "relation_name": "\"synthea\".\"core\".\"lab_result\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:13.777256Z", "completed_at": "2024-02-19T03:52:13.792779Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:13.795992Z", "completed_at": "2024-02-19T03:52:14.068777Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2971189022064209, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_admit_type_voting", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n), normalize as(\n    select \n        med.claim_id\n        , med.data_source\n        , admit.admit_type_code\n    from __dbt__cte__normalized_input__stg_medical_claim med\n    inner join \"synthea\".\"terminology\".\"admit_type\" admit\n        on med.admit_type_code = admit.admit_type_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , admit_type_code\n        , count(*) as admit_type_occurrence_count\n    from normalize\n    where admit_type_code is not null\n    group by \n        claim_id\n        , data_source\n        , admit_type_code\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'admit_type_code' as column_name\n        , admit_type_code as normalized_code\n        , admit_type_occurrence_count as occurrence_count\n        , coalesce(lead(admit_type_occurrence_count) \n            over (partition by claim_id, data_source order by admit_type_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by admit_type_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-02-19 03:52:06.490224+00:00' as tuva_last_run\nfrom occurence_comparison", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_admit_type_normalize_voting\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:13.277929Z", "completed_at": "2024-02-19T03:52:13.294668Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:13.301480Z", "completed_at": "2024-02-19T03:54:54.485595Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 161.2234013080597, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_admit_source_voting", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n), normalize as(\n    select \n        med.claim_id\n        , med.data_source\n        , admit.admit_source_code\n    from __dbt__cte__normalized_input__stg_medical_claim med\n    inner join \"synthea\".\"terminology\".\"admit_source\" admit\n        on med.admit_source_code = admit.admit_source_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , admit_source_code\n        , count(*) as admit_source_occurrence_count\n    from normalize\n    where admit_source_code is not null\n    group by \n        claim_id\n        , data_source\n        , admit_source_code\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'admit_source_code' as column_name\n        , admit_source_code as normalized_code\n        , admit_source_occurrence_count as occurrence_count\n        , coalesce(lead(admit_source_occurrence_count) \n            over (partition by claim_id, data_source order by admit_source_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by admit_source_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-02-19 03:52:06.490224+00:00' as tuva_last_run\nfrom occurence_comparison", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_admit_source_voting\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:14.096983Z", "completed_at": "2024-02-19T03:52:14.109870Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:14.116527Z", "completed_at": "2024-02-19T03:54:54.488080Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 160.41342639923096, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_bill_type_voting", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n), normalize as(\n    select \n        med.claim_id\n        , med.data_source\n        , bill.bill_type_code\n    from __dbt__cte__normalized_input__stg_medical_claim med\n    inner join \"synthea\".\"terminology\".\"bill_type\" bill\n        on med.bill_type_code = bill.bill_type_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , bill_type_code\n        , count(*) as bill_type_occurrence_count\n    from normalize\n    where bill_type_code is not null\n    group by \n        claim_id\n        , data_source\n        , bill_type_code\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'bill_type_code' as column_name\n        , bill_type_code as normalized_code\n        , bill_type_occurrence_count as occurrence_count\n        , coalesce(lead(bill_type_occurrence_count) \n            over (partition by claim_id, data_source order by bill_type_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by bill_type_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-02-19 03:52:06.490224+00:00' as tuva_last_run\nfrom occurence_comparison", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_bill_type_voting\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:12.251454Z", "completed_at": "2024-02-19T03:52:12.266375Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:12.269085Z", "completed_at": "2024-02-19T03:54:54.491405Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 162.252601146698, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.medical_claim_expanded", "compiled": true, "compiled_code": "\n\n\nselect *\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"", "relation_name": "\"synthea\".\"claims_expanded\".\"medical_claim_expanded\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-19T03:52:14.081978Z", "completed_at": "2024-02-19T03:52:14.108273Z"}, {"name": "execute", "started_at": "2024-02-19T03:52:14.110318Z", "completed_at": "2024-02-19T03:54:54.495566Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 161.54673314094543, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_apr_drg_voting", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n), normalize as(\n    select \n        med.claim_id\n        , med.data_source\n        , apr.apr_drg_code\n    from __dbt__cte__normalized_input__stg_medical_claim med\n    inner join \"synthea\".\"terminology\".\"apr_drg\" apr\n        on med.apr_drg_code = apr.apr_drg_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , apr_drg_code\n        , count(*) as apr_drg_occurrence_count\n    from normalize\n    where apr_drg_code is not null\n    group by \n        claim_id\n        , data_source\n        , apr_drg_code\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'apr_drg_code' as column_name\n        , apr_drg_code as normalized_code\n        , apr_drg_occurrence_count as occurrence_count\n        , coalesce(lead(apr_drg_occurrence_count) \n            over (partition by claim_id, data_source order by apr_drg_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by apr_drg_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-02-19 03:52:06.490224+00:00' as tuva_last_run\nfrom occurence_comparison", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_apr_drg_voting\""}], "elapsed_time": 779.9914462566376, "args": {"quiet": false, "favor_state": false, "log_path": "/workspaces/synthea_dw/tuva/logs", "populate_cache": true, "invocation_command": "dbt build", "send_anonymous_usage_stats": true, "show": false, "vars": {}, "indirect_selection": "eager", "write_json": true, "log_level_file": "debug", "static_parser": true, "defer": false, "which": "build", "use_colors_file": true, "log_file_max_bytes": 10485760, "strict_mode": false, "project_dir": "/workspaces/synthea_dw/tuva", "select": [], "use_colors": true, "print": true, "exclude": [], "log_format": "default", "cache_selected_only": false, "log_level": "info", "partial_parse": true, "include_saved_query": false, "log_format_file": "debug", "printer_width": 80, "warn_error_options": {"include": [], "exclude": []}, "version_check": true, "enable_legacy_logger": false, "profiles_dir": "/workspaces/synthea_dw/tuva", "show_resource_report": false, "introspect": true, "partial_parse_file_diff": true, "resource_types": [], "macro_debugging": false}}