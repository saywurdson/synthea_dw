{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.7", "generated_at": "2024-02-21T15:26:09.661423Z", "invocation_id": "ef693bb1-bdf6-4206-8e85-df24e2303a9d", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:30:56.594063Z", "completed_at": "2024-02-21T14:30:56.644761Z"}, {"name": "execute", "started_at": "2024-02-21T14:30:56.659483Z", "completed_at": "2024-02-21T14:30:56.770600Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.18812084197998047, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.eligibility", "compiled": true, "compiled_code": "-- models/eligibility.sql\n\nSELECT DISTINCT\n    MAX(REPLACE(REPLACE(JSON_EXTRACT(e, '$.patient.reference'), '\"Patient/', ''), '\"', '')) AS patient_id,\n    NULL AS member_id,\n    MAX(REPLACE(JSON_EXTRACT(p, '$.extension[3].valueCode'), '\"', '')) AS gender,\n    MAX(REPLACE(JSON_EXTRACT(p, '$.extension[0].extension[1].valueString'), '\"', '')) AS race,\n    MAX(CAST(SUBSTRING(JSON_EXTRACT(p, '$.birthDate'), 2, 10) AS DATE)) AS birth_date,\n    MAX(CAST(SUBSTRING(JSON_EXTRACT(p, '$.deceasedDateTime'), 2, 10) AS DATE)) AS death_date,\n    MAX(CASE\n        WHEN JSON_EXTRACT(p, '$.deceasedDateTime') IS NOT NULL THEN 1\n        ELSE 0\n    END) AS death_flag,\n    MAX(CAST(SUBSTRING(JSON_EXTRACT(e, '$.billablePeriod.start'), 2, 10) AS DATE)) AS enrollment_start_date,\n    MAX(CAST(SUBSTRING(JSON_EXTRACT(e, '$.billablePeriod.end'), 2, 10) AS DATE)) AS enrollment_end_date,\n    MAX(REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '\"', '')) AS payer,\n    MAX(CASE\n        WHEN REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '\"', '') = 'Medicare' THEN 'medicare'\n        WHEN REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '\"', '') = 'Medicaid' THEN 'medicaid'\n        WHEN REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '\"', '') = 'NO_INSURANCE' THEN NULL\n        ELSE 'commercial'\n    END) AS payer_type,\n    NULL AS plan,\n    NULL AS original_reason_entitlement_code,\n    NULL AS dual_status_code,\n    NULL AS medicare_status_code,\n    MAX(REPLACE(REPLACE(REPLACE(SPLIT_PART(JSON_EXTRACT(p, '$.name[0].given'), ',', -1), '\"', ''), '[', ''), ']', '')) AS first_name,\n    MAX(REPLACE(JSON_EXTRACT(p, '$.name[0].family'), '\"', '')) AS last_name,\n    MAX(REPLACE(JSON_EXTRACT(p, '$.address[0].line[0]'), '\"', '')) AS address,\n    MAX(REPLACE(JSON_EXTRACT(p, '$.address[0].city'), '\"', '')) AS city,\n    MAX(REPLACE(JSON_EXTRACT(p, '$.address[0].state'), '\"', '')) AS state,\n    MAX(REPLACE(JSON_EXTRACT(p, '$.address[0].postalCode'), '\"', '')) AS zip_code,\n    MAX(REPLACE(JSON_EXTRACT(p, '$.telecom[0].value'), '\"', '')) AS phone,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"ExplanationOfBenefit\" e\nLEFT JOIN \"synthea\".\"json\".\"Patient\" p\n    ON REPLACE(REPLACE(JSON_EXTRACT(e, '$.patient.reference'), '\"Patient/', ''), '\"', '') = REPLACE(JSON_EXTRACT(p, '$.id'), '\"', '')\nGROUP BY REPLACE(REPLACE(JSON_EXTRACT(e, '$.patient.reference'), '\"Patient/', ''), '\"', '')", "relation_name": "\"synthea\".\"tuva_input\".\"eligibility\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:30:56.590333Z", "completed_at": "2024-02-21T14:30:56.597586Z"}, {"name": "execute", "started_at": "2024-02-21T14:30:56.647118Z", "completed_at": "2024-02-21T14:30:56.774873Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.19192790985107422, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.condition", "compiled": true, "compiled_code": "SELECT\n    MAX(REPLACE(JSON_EXTRACT(co, '$.id'), '\"', '')) AS condition_id,\n    MAX(REPLACE(REPLACE(JSON_EXTRACT(co, '$.subject.reference'), '\"Patient/', ''), '\"', '')) AS patient_id,\n    MAX(REPLACE(REPLACE(JSON_EXTRACT(co, '$.encounter.reference'), '\"Encounter/', ''), '\"', '')) AS encounter_id,\n    MAX(REPLACE(JSON_EXTRACT(cl, '$.id'), '\"', '')) AS claim_id,\n    MAX(CAST(SUBSTRING(JSON_EXTRACT(co, '$.recordedDate'), 2, 10) AS DATE)) AS recorded_date,\n    MAX(CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE)) AS onset_date,\n    MAX(CAST(SUBSTRING(JSON_EXTRACT(co, '$.abatementDateTime'), 2, 10) AS DATE)) AS resolved_date,\n    MAX(REPLACE(JSON_EXTRACT(co, '$.clinicalStatus.coding[0].code'), '\"', '')) AS status,\n    MAX(REPLACE(JSON_EXTRACT(co, '$.category[0].coding[0].display'), '\"', '')) AS condition_type,\n    'snomed' AS source_code_type,\n    MAX(REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '\"', '')) AS source_code,\n    MAX(REPLACE(JSON_EXTRACT(co, '$.code.coding[0].display'), '\"', '')) AS source_description,\n    'icd-10-cm' AS normalized_code_type,\n    MAX(map.map_target) AS normalized_code,\n    MAX(map.map_target_name) AS normalized_description,\n    MAX(CASE\n        WHEN REPLACE(JSON_EXTRACT(cl, '$.diagnosis[0].sequence'), '\"', '') IS NOT NULL THEN CAST(REPLACE(JSON_EXTRACT(cl, '$.diagnosis[0].sequence'), '\"', '') AS INTEGER)\n        ELSE 1\n    END) AS condition_rank,\n    MAX(CASE\n        WHEN CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) < CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE) THEN 'Y'\n        WHEN CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) > CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE) THEN 'N'\n        ELSE 'U'\n    END) AS present_on_admit_code,\n    MAX(CASE\n        WHEN CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) < CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE) THEN 'Diagnosis was present at the time of inpatient admission. CMS will pay the CC/MCC DRG for those selected HACs that are coded as Y for the POA Indicator.'\n        WHEN CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) > CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE) THEN 'Diagnosis was not present at the time of inpatient admission. CMS will not pay the CC/MCC DRG for those selected HACs that are coded as N for the POA Indicator.'\n        ELSE 'Documentation is insufficient to determine if the condition was present at the time of inpatient admission. CMS will not pay the CC/MCC DRG for those selected HACs that are coded as U for the POA Indicator.'\n    END) AS present_on_admit_description,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Condition\" co\nLEFT JOIN \"synthea\".\"json\".\"Claim\" cl\n    ON REPLACE(REPLACE(JSON_EXTRACT(co, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(cl, '$.item[0].encounter[0].reference'), '\"Encounter/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"json\".\"Encounter\" e\n    ON REPLACE(REPLACE(JSON_EXTRACT(co, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') = REPLACE(JSON_EXTRACT(e, '$.id'), '\"', '')\nJOIN \"synthea\".\"terminology\".\"snomed_icd_10_map\" map\n    ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '\"', '') = map.referenced_component_id\nGROUP BY REPLACE(JSON_EXTRACT(co, '$.id'), '\"', '')", "relation_name": "\"synthea\".\"tuva_input\".\"condition\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:30:56.552453Z", "completed_at": "2024-02-21T14:30:56.560557Z"}, {"name": "execute", "started_at": "2024-02-21T14:30:56.583432Z", "completed_at": "2024-02-21T14:30:59.638361Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.1470205783843994, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.ccsr__procedure_category_map", "compiled": true, "compiled_code": "\n\nselect \n    icd_10_pcs as code,\n    icd_10_pcs_description as code_description,\n    prccsr as ccsr_category,\n    left(prccsr, 3) as ccsr_parent_category,\n    prccsr_description as ccsr_category_description,\n    clinical_domain,\n   '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom \"synthea\".\"ccsr\".\"_value_set_prccsr_v2023_1_cleaned_map\"", "relation_name": "\"synthea\".\"ccsr\".\"procedure_category_map\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:30:56.509765Z", "completed_at": "2024-02-21T14:30:56.559447Z"}, {"name": "execute", "started_at": "2024-02-21T14:30:56.563358Z", "completed_at": "2024-02-21T14:30:59.640731Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.1508007049560547, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.ccsr__dx_vertical_pivot", "compiled": true, "compiled_code": "\n\nwith codes as (\n    \n    select\n        icd_10_cm_code as code, \n        icd_10_cm_code_description as code_description,\n        -- loop to generate columns for CCSR categories 1-6\n        ccsr_category_1,\n        ccsr_category_1_description,\n        ccsr_category_2,\n        ccsr_category_2_description,\n        ccsr_category_3,\n        ccsr_category_3_description,\n        ccsr_category_4,\n        ccsr_category_4_description,\n        ccsr_category_5,\n        ccsr_category_5_description,\n        ccsr_category_6,\n        ccsr_category_6_description,\n        default_ccsr_category_ip,\n        default_ccsr_category_op\n    from \"synthea\".\"ccsr\".\"_value_set_dxccsr_v2023_1_cleaned_map\"\n\n), long_union as (\n    -- generate select & union statements to pivot category columns to rows\n    \n    select \n        code,\n        code_description,\n        left(ccsr_category_1, 3) as ccsr_parent_category,\n        ccsr_category_1 as ccsr_category,\n        ccsr_category_1_description as ccsr_category_description,\n        1 as ccsr_category_rank,\n        (ccsr_category_1 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_1 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        left(ccsr_category_2, 3) as ccsr_parent_category,\n        ccsr_category_2 as ccsr_category,\n        ccsr_category_2_description as ccsr_category_description,\n        2 as ccsr_category_rank,\n        (ccsr_category_2 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_2 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        left(ccsr_category_3, 3) as ccsr_parent_category,\n        ccsr_category_3 as ccsr_category,\n        ccsr_category_3_description as ccsr_category_description,\n        3 as ccsr_category_rank,\n        (ccsr_category_3 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_3 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        left(ccsr_category_4, 3) as ccsr_parent_category,\n        ccsr_category_4 as ccsr_category,\n        ccsr_category_4_description as ccsr_category_description,\n        4 as ccsr_category_rank,\n        (ccsr_category_4 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_4 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        left(ccsr_category_5, 3) as ccsr_parent_category,\n        ccsr_category_5 as ccsr_category,\n        ccsr_category_5_description as ccsr_category_description,\n        5 as ccsr_category_rank,\n        (ccsr_category_5 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_5 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        left(ccsr_category_6, 3) as ccsr_parent_category,\n        ccsr_category_6 as ccsr_category,\n        ccsr_category_6_description as ccsr_category_description,\n        6 as ccsr_category_rank,\n        (ccsr_category_6 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_6 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    \n\n)\n\nselect distinct\n    *,\n    '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom long_union\n-- as not all diagnosis codes have multiple categories, we can discard nulls\nwhere ccsr_category is not null", "relation_name": "\"synthea\".\"ccsr\".\"dx_vertical_pivot\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:30:56.799575Z", "completed_at": "2024-02-21T14:30:56.809065Z"}, {"name": "execute", "started_at": "2024-02-21T14:30:56.810538Z", "completed_at": "2024-02-21T14:30:59.641759Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.8544259071350098, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.lab_result", "compiled": true, "compiled_code": "-- models/lab_result.sql\n\nSELECT DISTINCT\n    MAX(REPLACE(JSON_EXTRACT(o, '$.id'), '\"', '')) AS lab_result_id,\n    MAX(REPLACE(REPLACE(JSON_EXTRACT(o, '$.subject.reference'), '\"Patient/', ''), '\"', '')) AS patient_id,\n    MAX(REPLACE(REPLACE(JSON_EXTRACT(o, '$.encounter.reference'), '\"Encounter/', ''), '\"', '')) AS encounter_id,\n    NULL AS accession_number,\n    'loinc' AS source_code_type,\n    MAX(REPLACE(JSON_EXTRACT(o, '$.code.coding[0].code'), '\"', '')) AS source_code,\n    MAX(REPLACE(JSON_EXTRACT(o, '$.code.coding[0].display'), '\"', '')) AS source_description,\n    NULL AS source_component,\n    'loinc' AS normalized_code_type,\n    MAX(l.loinc) AS normalized_code,\n    MAX(l.short_name) AS normalized_description,\n    MAX(l.component) AS normalized_component,\n    MAX(REPLACE(JSON_EXTRACT(o, '$.status'), '\"', '')) AS status,\n    MAX(REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '')) AS result, \n    MAX(CAST(SUBSTRING(JSON_EXTRACT(o, '$.effectiveDateTime'), 2, 10) AS DATE)) AS result_date,\n    MAX(CAST(SUBSTRING(JSON_EXTRACT(o, '$.issued'), 2, 10) AS DATE)) AS collection_date,\n    MAX(REPLACE(JSON_EXTRACT(o, '$.valueQuantity.unit'), '\"', '')) AS source_units,\n    MAX(REPLACE(JSON_EXTRACT(o, '$.valueQuantity.unit'), '\"', '')) AS normalized_units,\n    NULL AS source_reference_range_low,\n    NULL AS source_reference_range_high,\n    NULL AS normalized_reference_range_low,\n    NULL AS normalized_reference_range_high,\n    NULL AS source_abnormal_flag,\n    NULL AS normalized_abnormal_flag,\n    NULL AS specimen,\n    MAX(REPLACE(REPLACE(JSON_EXTRACT(e, '$.participant[0].individual.reference'), '\"Practitioner/', ''), '\"', '')) AS ordering_practitioner_id,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Observation\" o\nLEFT JOIN \"synthea\".\"terminology\".\"loinc\" l ON REPLACE(JSON_EXTRACT(o, '$.code.coding[0].code'), '\"', '') = l.loinc\nLEFT JOIN \"synthea\".\"json\".\"Encounter\" e ON REPLACE(REPLACE(JSON_EXTRACT(o, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') = REPLACE(JSON_EXTRACT(e, '$.id'), '\"', '')\nWHERE REPLACE(JSON_EXTRACT(o, '$.category[0].coding[0].code'), '\"', '') = ('laboratory')\nAND REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '') IS NOT NULL\nGROUP BY REPLACE(JSON_EXTRACT(o, '$.id'), '\"', '')", "relation_name": "\"synthea\".\"tuva_input\".\"lab_result\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:30:56.794556Z", "completed_at": "2024-02-21T14:30:56.802943Z"}, {"name": "execute", "started_at": "2024-02-21T14:30:56.804518Z", "completed_at": "2024-02-21T14:30:59.642791Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.952974796295166, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.encounter", "compiled": true, "compiled_code": "-- models/encounter.sql\n\nSELECT DISTINCT\n    MAX(REPLACE(JSON_EXTRACT(e, '$.id'), '\"', '')) AS encounter_id,\n    MAX(REPLACE(REPLACE(JSON_EXTRACT(e, '$.subject.reference'), '\"Patient/', ''), '\"', '')) AS patient_id,\n    MAX(CASE\n        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '\"', '') = 'AMB' THEN 'outpatient'\n        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '\"', '') = 'EMER' THEN 'emergency department'\n        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '\"', '') = 'IMP' THEN 'acute inpatient'\n        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '\"', '') = 'FLD' THEN 'other'\n        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '\"', '') = 'HH' THEN 'home health'\n        ELSE 'other'\n    END) AS encounter_type,\n    MAX(CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE)) AS encounter_start_date,\n    MAX(CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE)) AS encounter_end_date,\n    MAX(CASE\n        WHEN \n            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) IS NOT NULL AND \n            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE) IS NOT NULL AND\n            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) = CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE)\n        THEN 1\n        WHEN \n            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) IS NOT NULL AND \n            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE) IS NOT NULL \n        THEN\n            DATEDIFF(\n                'day',\n                CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE),\n                CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE)\n            ) + 1\n        ELSE 1\n    END) AS length_of_stay,\n    9 AS admit_source_code,\n    'Information Not Available' AS admit_source_description,\n    9 AS admit_type_code,\n    'Unknown' AS admit_type_description,\n    00 AS discharge_disposition_code,\n    'Unknown Value (but present in data)' AS discharge_disposition_description,\n    MAX(REPLACE(REPLACE(JSON_EXTRACT(e, '$.participant[0].individual.reference'), '\"Practitioner/', ''), '\"', '')) AS attending_provider_id,\n    NULL AS facility_npi,\n    'snomed' AS primary_diagnosis_code_type,\n    MAX(REPLACE(JSON_EXTRACT(e, '$.reasonCode[0].coding[0].code'), '\"', '')) AS primary_diagnosis_code,\n    MAX(REPLACE(JSON_EXTRACT(e, '$.reasonCode[0].coding[0].display'), '\"', '')) AS primary_diagnosis_description,\n    MAX(icd.\"MS-DRG\") AS ms_drg_code,\n    MAX(icd.\"MS-DRG_description\") AS ms_drg_description,\n    MAX(apr.apr_drg_code) AS apr_drg_code,\n    MAX(apr.apr_drg_description) AS apr_drg_description,\n    MAX(REPLACE(JSON_EXTRACT(ex, '$.payment.amount.value'), '\"', '')) AS paid_amount,\n    MAX(REPLACE(JSON_EXTRACT(ex, '$.total[0].amount.value'), '\"', '')) AS allowed_amount,\n    MAX(REPLACE(JSON_EXTRACT(ex, '$.total[0].amount.value'), '\"', '')) AS charge_amount,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Encounter\" e\nLEFT JOIN \"synthea\".\"json\".\"ExplanationOfBenefit\" ex\n    ON REPLACE(JSON_EXTRACT(e, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(ex, '$.item[0].encounter[0].reference'), '\"Encounter/', ''), '\"', '')\nJOIN \"synthea\".\"terminology\".\"snomed_icd_10_map\" sno\n    ON REPLACE(JSON_EXTRACT(e, '$.reasonCode[0].coding[0].code'), '\"', '') = sno.referenced_component_id\nJOIN \"synthea\".\"reference\".\"icd10cm_to_msdrg_v41\" icd\n    ON sno.map_target = REPLACE(icd.ICD10, '.', '')\nJOIN \"synthea\".\"terminology\".\"apr_drg\" apr\n    ON icd.MDC = apr.mdc_code\nGROUP BY REPLACE(JSON_EXTRACT(e, '$.id'), '\"', '')", "relation_name": "\"synthea\".\"tuva_input\".\"encounter\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:30:59.752920Z", "completed_at": "2024-02-21T14:30:59.786844Z"}, {"name": "execute", "started_at": "2024-02-21T14:30:59.846225Z", "completed_at": "2024-02-21T14:30:59.953683Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2088475227355957, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.location", "compiled": true, "compiled_code": "-- models/location.sql\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(l, '$.id'), '\"', '') AS location_id,\n    NULL AS npi,\n    REPLACE(JSON_EXTRACT(l, '$.name'), '\"', '') AS name,\n    NULL AS facility_type,\n    REPLACE(JSON_EXTRACT(l, '$.managingOrganization.display'), '\"', '') AS parent_organization,\n    REPLACE(REPLACE(REPLACE(JSON_EXTRACT(l, '$.address.line'), '\"', ''), '[', ''), ']', '') AS address,\n    REPLACE(JSON_EXTRACT(l, '$.address.city'), '\"', '') AS city,\n    REPLACE(JSON_EXTRACT(l, '$.address.state'), '\"', '') AS state,\n    REPLACE(JSON_EXTRACT(l, '$.address.postalCode'), '\"', '') AS zip_code,\n    CAST(REPLACE(JSON_EXTRACT(l, '$.position.latitude'), '\"', '') AS FLOAT) AS latitude,\n    CAST(REPLACE(JSON_EXTRACT(l, '$.position.longitude'), '\"', '') AS FLOAT) AS longitude,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Location\" l", "relation_name": "\"synthea\".\"tuva_input\".\"location\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:30:59.787228Z", "completed_at": "2024-02-21T14:30:59.849570Z"}, {"name": "execute", "started_at": "2024-02-21T14:30:59.854944Z", "completed_at": "2024-02-21T14:30:59.961199Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.21110248565673828, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.medication", "compiled": true, "compiled_code": "-- models/medication.sql\n\nWITH MinStrength AS (\n    SELECT\n        REPLACE(JSON_EXTRACT(m, '$.id'), '\"', '') AS medication_id,\n        MIN(\n            CASE\n                WHEN ds.amount_value IS NOT NULL THEN ds.amount_value\n                WHEN ds.numerator_value IS NOT NULL THEN\n                    CASE\n                        WHEN ds.denominator_value IS NOT NULL AND ds.denominator_value != 0 THEN ds.numerator_value / ds.denominator_value\n                        ELSE ds.numerator_value\n                    END\n                ELSE NULL\n            END\n        ) AS min_strength\n    FROM \"synthea\".\"json\".\"MedicationRequest\" m\n    JOIN \"synthea\".\"vocabulary\".\"concept\" c\n        ON REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '\"', '') = c.concept_code\n        AND c.vocabulary_id = 'RxNorm'\n        AND c.domain_id = 'Drug'\n        AND c.invalid_reason IS NULL\n        AND c.standard_concept = 'S'\n    JOIN \"synthea\".\"vocabulary\".\"drug_strength\" ds\n        ON c.concept_id = ds.drug_concept_id\n    GROUP BY medication_id\n)\n\nSELECT DISTINCT\n    ms.medication_id,\n    REPLACE(REPLACE(JSON_EXTRACT(mr, '$.subject.reference'), '\"Patient/', ''), '\"', '') AS patient_id,\n    REPLACE(REPLACE(JSON_EXTRACT(mr, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') AS encounter_id,\n    CAST(SUBSTRING(JSON_EXTRACT(mr, '$.authoredOn'), 2, 10) AS DATE) AS dispensing_date,\n    CAST(SUBSTRING(JSON_EXTRACT(mr, '$.authoredOn'), 2, 10) AS DATE) AS prescribing_date,\n    'rxnorm' AS source_code_type,\n    REPLACE(JSON_EXTRACT(mr, '$.medicationCodeableConcept.coding[0].code'), '\"', '') AS source_code,\n    REPLACE(JSON_EXTRACT(mr, '$.medicationCodeableConcept.coding[0].display'), '\"', '') AS source_description,\n    ndc.ndc_code,\n    ndc.ndc_description,\n    REPLACE(JSON_EXTRACT(mr, '$.medicationCodeableConcept.coding[0].code'), '\"', '') AS rxnorm_code,\n    REPLACE(JSON_EXTRACT(mr, '$.medicationCodeableConcept.coding[0].display'), '\"', '') AS rxnorm_description,\n    r.\"atc class id\" AS atc_code,\n    atc.atc_description,\n    NULL AS route,\n    ms.min_strength AS strength,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(mr, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '\"', '') IS NOT NULL \n        THEN CAST(REPLACE(JSON_EXTRACT(mr, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '\"', '') AS INTEGER) * 30\n        ELSE 1\n    END AS quantity,\n    qu.quantity_unit,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(mr, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '\"', '') IS NOT NULL \n        THEN 30\n        ELSE 1\n    END AS days_supply,\n    REPLACE(REPLACE(JSON_EXTRACT(mr, '$.requester.reference'), '\"Practitioner/', ''), '\"', '') AS practitioner_id,\n    'SyntheaFhir' AS data_source\nFROM MinStrength ms\nJOIN \"synthea\".\"json\".\"MedicationRequest\" mr ON ms.medication_id = REPLACE(JSON_EXTRACT(mr, '$.id'), '\"', '')\nLEFT JOIN (\n    SELECT \n        c1.concept_code AS rxnorm_code,\n        c2.concept_code AS ndc_code,\n        c2.concept_name AS ndc_description\n    FROM \"synthea\".\"vocabulary\".\"concept_relationship\" cr\n    JOIN \"synthea\".\"vocabulary\".\"concept\" c1 ON c1.concept_id = cr.concept_id_1\n    JOIN \"synthea\".\"vocabulary\".\"concept\" c2 ON c2.concept_id = cr.concept_id_2\n    WHERE cr.relationship_id = 'Mapped from'\n    AND c2.vocabulary_id = 'NDC'\n    AND c2.domain_id = 'Drug'\n    AND c2.invalid_reason IS NULL\n    AND c1.concept_class_id in ('Branded Drug', 'Clinical Drug', 'Quant Clinical Drug', 'Quant Branded Drug')\n    AND LENGTH(c2.concept_code) = 11\n) ndc ON REPLACE(JSON_EXTRACT(mr, '$.medicationCodeableConcept.coding[0].code'), '\"', '') = ndc.rxnorm_code\nLEFT JOIN \"synthea\".\"reference\".\"rxcuis_ndcs_atc\" r ON REPLACE(JSON_EXTRACT(mr, '$.medicationCodeableConcept.coding[0].code'), '\"', '') = r.rxcui\nLEFT JOIN (\n    SELECT \n        c3.concept_code AS atc_code,\n        c3.concept_name AS atc_description\n    FROM \"synthea\".\"vocabulary\".\"concept\" c3\n    WHERE c3.vocabulary_id = 'ATC'\n    AND c3.domain_id = 'Drug'\n    AND c3.invalid_reason IS NULL\n    AND c3.standard_concept = 'C'\n) atc ON r.\"atc class id\" = atc.atc_code\nLEFT JOIN (\n    SELECT \n        ds.drug_concept_id,\n        c4.concept_name AS quantity_unit\n    FROM \"synthea\".\"vocabulary\".\"drug_strength\" ds\n    JOIN \"synthea\".\"vocabulary\".\"concept\" c4 ON c4.concept_id = COALESCE(ds.amount_unit_concept_id, ds.numerator_unit_concept_id)\n) qu ON REPLACE(JSON_EXTRACT(mr, '$.medicationCodeableConcept.coding[0].code'), '\"', '') = qu.drug_concept_id", "relation_name": "\"synthea\".\"tuva_input\".\"medication\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:30:59.975343Z", "completed_at": "2024-02-21T14:30:59.978790Z"}, {"name": "execute", "started_at": "2024-02-21T14:30:59.980601Z", "completed_at": "2024-02-21T14:31:00.017905Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.049730539321899414, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.patient", "compiled": true, "compiled_code": "-- models/patient.sql\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(p, '$.id'), '\"', '') AS patient_id,\n    REPLACE(JSON_EXTRACT(p, '$.name[0].given[0]'), '\"', '') AS first_name,\n    REPLACE(JSON_EXTRACT(p, '$.name[0].family'), '\"', '') AS last_name,\n    REPLACE(JSON_EXTRACT(p, '$.gender'), '\"', '') AS sex,\n    REPLACE(JSON_EXTRACT(p, '$.extension[0].extension[0].valueCoding.display'), '\"', '') AS race,\n    CAST(REPLACE(JSON_EXTRACT(p, '$.birthDate'), '\"', '') AS DATE) AS birth_date,\n    CAST(REPLACE(JSON_EXTRACT(p, '$.deceasedDateTime'), '\"', '') AS DATE) AS death_date,\n    CASE\n        WHEN JSON_EXTRACT(p, '$.deceasedDateTime') IS NOT NULL THEN 1\n        ELSE 0\n    END AS death_flag,\n    REPLACE(REPLACE(REPLACE(JSON_EXTRACT(p, '$.address[0].line'), '\"', ''), '[', ''), ']', '') AS address,\n    REPLACE(JSON_EXTRACT(p, '$.address[0].city'), '\"', '') AS city,\n    REPLACE(JSON_EXTRACT(p, '$.address[0].state'), '\"', '') AS state,\n    REPLACE(JSON_EXTRACT(p, '$.address[0].postalCode'), '\"', '') AS zip_code,\n    NULL AS county,\n    REPLACE(JSON_EXTRACT(p, '$.address[0].extension[0].extension[0].valueDecimal'), '\"', '') AS latitude,\n    REPLACE(JSON_EXTRACT(p, '$.address[0].extension[0].extension[1].valueDecimal'), '\"', '') AS longitude,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Patient\" p", "relation_name": "\"synthea\".\"tuva_input\".\"patient\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:30:59.964900Z", "completed_at": "2024-02-21T14:30:59.969240Z"}, {"name": "execute", "started_at": "2024-02-21T14:30:59.971259Z", "completed_at": "2024-02-21T14:31:00.019643Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05977058410644531, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.observation", "compiled": true, "compiled_code": "-- models/observation.sql\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(o, '$.id'), '\"', '') AS observation_id,\n    REPLACE(REPLACE(JSON_EXTRACT(o, '$.subject.reference'), '\"Patient/', ''), '\"', '') AS patient_id,\n    REPLACE(REPLACE(JSON_EXTRACT(o, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') AS encounter_id,\n    NULL AS panel_id,\n    CAST(SUBSTRING(JSON_EXTRACT(o, '$.effectiveDateTime'), 2, 10) AS DATE) AS observation_date,\n    REPLACE(JSON_EXTRACT(o, '$.category[0].display'), '\"', '') AS observation_type,\n    'loinc' AS source_code_type,\n    REPLACE(JSON_EXTRACT(o, '$.code.coding[0].code'), '\"', '') AS source_code,\n    REPLACE(JSON_EXTRACT(o, '$.code.coding[0].display'), '\"', '') AS source_description,\n    'loinc' AS normalized_code_type,\n    REPLACE(JSON_EXTRACT(o, '$.code.coding[0].code'), '\"', '') AS normalized_code,\n    REPLACE(JSON_EXTRACT(o, '$.code.coding[0].display'), '\"', '') AS normalized_description,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '')\n        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '') IS NULL AND REPLACE(JSON_EXTRACT(o, '$.component'), '\"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.component[0].code.coding[0].code'), '\"', '')\n        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '') IS NULL AND REPLACE(JSON_EXTRACT(o, '$.component'), '\"', '') IS NULL THEN REPLACE(JSON_EXTRACT(o, '$.valueCodeableConcept.coding[0].display'), '\"', '')\n    END AS result,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.unit'), '\"', '')\n        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '') IS NULL AND REPLACE(JSON_EXTRACT(o, '$.component'), '\"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.component[0].valueQuantity.unit'), '\"', '')\n    END AS source_units,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.unit'), '\"', '')\n        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '') IS NULL AND REPLACE(JSON_EXTRACT(o, '$.component'), '\"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.component[0].valueQuantity.unit'), '\"', '')\n    END AS normalized_units,\n    NULL AS source_reference_range_low,\n    NULL AS source_reference_range_high,\n    NULL AS normalized_reference_range_low,\n    NULL AS normalized_reference_range_high,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Observation\" o", "relation_name": "\"synthea\".\"tuva_input\".\"observation\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:31:00.034085Z", "completed_at": "2024-02-21T14:31:00.038927Z"}, {"name": "execute", "started_at": "2024-02-21T14:31:00.043706Z", "completed_at": "2024-02-21T14:31:00.080604Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.053787946701049805, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.practitioner", "compiled": true, "compiled_code": "-- models/practitioner.sql\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(p, '$.id'), '\"', '') AS practitioner_id,\n    REPLACE(JSON_EXTRACT(p, '$.identifier[0].value'), '\"', '') AS npi,\n    REPLACE(JSON_EXTRACT(p, '$.name[0].given[0]'), '\"', '') AS first_name,\n    REPLACE(JSON_EXTRACT(p, '$.name[0].family'), '\"', '') AS last_name,\n    REPLACE(JSON_EXTRACT(pr, '$.location[0].display'), '\"', '') AS practice_affiliation,\n    REPLACE(JSON_EXTRACT(pr, '$.specialty[0].text'), '\"', '') AS specialty,\n    NULL AS sub_specialty,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Practitioner\" p\nJOIN \"synthea\".\"json\".\"PractitionerRole\" pr\n    ON REPLACE(JSON_EXTRACT(p, '$.identifier[0].value'), '\"', '') = REPLACE(JSON_EXTRACT(pr, '$.practitioner.identifier.value'), '\"', '')", "relation_name": "\"synthea\".\"tuva_input\".\"practitioner\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:31:00.029867Z", "completed_at": "2024-02-21T14:31:00.038313Z"}, {"name": "execute", "started_at": "2024-02-21T14:31:00.040342Z", "completed_at": "2024-02-21T14:31:00.089264Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.06613755226135254, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.pharmacy_claim", "compiled": true, "compiled_code": "-- models/pharmacy_claim.sql\n\nSELECT *\nFROM (\n    SELECT DISTINCT\n        REPLACE(JSON_EXTRACT(c, '$.id'), '\"', '') AS claim_id,\n        REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '\"', '') AS claim_line_number,\n        REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '\"Patient/', ''), '\"', '') AS patient_id,\n        NULL AS member_id,\n        REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '\"', '') AS payer,\n        NULL AS plan,\n        REPLACE(JSON_EXTRACT(p, '$.identifier[0].value'), '\"', '') AS prescribing_provider_npi,\n        NULL AS dispensing_provider_npi,\n        CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS dispensing_date,\n        (\n            SELECT c2.concept_code\n            FROM \"synthea\".\"vocabulary\".\"concept_relationship\" cr\n            JOIN \"synthea\".\"vocabulary\".\"concept\" c1 ON c1.concept_id = cr.concept_id_1\n            JOIN \"synthea\".\"vocabulary\".\"concept\" c2 ON c2.concept_id = cr.concept_id_2\n            WHERE c1.concept_code = REPLACE(JSON_EXTRACT(c, '$.item[0].productOrService.coding[0].code'), '\"', '')\n            AND cr.relationship_id = 'Mapped from'\n            AND c2.vocabulary_id = 'NDC'\n            AND c2.domain_id = 'Drug'\n            AND c2.invalid_reason IS NULL\n            AND c1.concept_class_id in ('Branded Drug', 'Clinical Drug', 'Quant Clinical Drug')\n            AND LENGTH(c2.concept_code) = 11\n            ORDER BY c2.concept_code\n            LIMIT 1\n        ) AS ndc_code,\n        CASE\n            WHEN REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '\"', '') IS NOT NULL \n            THEN CAST(REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '\"', '') AS INTEGER) * 30\n            ELSE 1\n        END AS quantity,\n        CASE\n            WHEN REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '\"', '') IS NOT NULL \n            THEN 30\n            ELSE 1\n        END AS days_supply,\n        0 AS refills,\n        CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,\n        CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT) AS paid_amount,\n        CASE\n            WHEN REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].category.coding[0].display'), '\"', '') = 'Line Allowed Charge Amount'\n                THEN CAST(REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].amount.value'), '\"', '') AS FLOAT)\n            ELSE 0\n        END AS allowed_amount,\n        CASE\n            WHEN REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].category.coding[0].display'), '\"', '') = 'Line Beneficiary Coinsurance Amount'\n                THEN CAST(REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].amount.value'), '\"', '') AS FLOAT)\n            ELSE 0\n        END AS coinsurance_amount,\n        CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT) AS copayment_amount,\n        CASE\n            WHEN REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].category.coding[0].display'), '\"', '') = 'Line Beneficiary Part B Deductible Amount'\n                THEN CAST(REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].amount.value'), '\"', '') AS FLOAT)\n            ELSE 0\n        END AS deductible_amount,\n        'SyntheaFhir' AS data_source\n    FROM \"synthea\".\"json\".\"Claim\" c\n    LEFT JOIN \"synthea\".\"json\".\"MedicationRequest\" m\n        ON REPLACE(REPLACE(JSON_EXTRACT(c, '$.prescription.reference'), '\"MedicationRequest/', ''), '\"', '') = REPLACE(JSON_EXTRACT(m, '$.id'), '\"', '')\n    LEFT JOIN \"synthea\".\"json\".\"ExplanationOfBenefit\" e\n        ON REPLACE(JSON_EXTRACT(c, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '\"Claim/', ''), '\"', '')\n    LEFT JOIN \"synthea\".\"json\".\"Encounter\" enc\n        ON REPLACE(REPLACE(JSON_EXTRACT(c, '$.item[0].encounter[0].reference'), '\"Encounter/', ''), '\"', '') = REPLACE(JSON_EXTRACT(enc, '$.id'), '\"', '')\n    LEFT JOIN \"synthea\".\"json\".\"Practitioner\" p\n        ON REPLACE(REPLACE(JSON_EXTRACT(enc, '$.participant[0].individual.reference'), '\"Practitioner/', ''), '\"', '') = REPLACE(JSON_EXTRACT(p, '$.id'), '\"', '')\n    LEFT JOIN \"synthea\".\"vocabulary\".\"drug_strength\" ds ON REPLACE(JSON_EXTRACT(c, '$.item[0].productOrService.coding[0].code'), '\"', '') = ds.drug_concept_id\n    WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'pharmacy'\n) AS pharmacy_claim\nWHERE pharmacy_claim.ndc_code IS NOT NULL", "relation_name": "\"synthea\".\"tuva_input\".\"pharmacy_claim\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:31:00.090564Z", "completed_at": "2024-02-21T14:31:00.095702Z"}, {"name": "execute", "started_at": "2024-02-21T14:31:00.097588Z", "completed_at": "2024-02-21T14:31:00.150548Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.06663656234741211, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.procedure", "compiled": true, "compiled_code": "-- models/procedure.sql\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(p, '$.id'), '\"', '') AS procedure_id,\n    REPLACE(REPLACE(JSON_EXTRACT(p, '$.subject.reference'), '\"Patient/', ''), '\"', '') AS patient_id,\n    REPLACE(REPLACE(JSON_EXTRACT(p, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') AS encounter_id,\n    REPLACE(JSON_EXTRACT(cl, '$.id'), '\"', '') AS claim_id,\n    CAST(REPLACE(JSON_EXTRACT(p, '$.performedPeriod.start'), '\"', '') AS DATE) AS procedure_date,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '\"', '') AS procedure_code,\n    'snomed' AS source_code_type,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '\"', '') AS source_code,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].display'), '\"', '') AS source_description,\n    'snomed' AS normalized_code_type,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '\"', '') AS normalized_code,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].display'), '\"', '') AS normalized_description,\n    NULL AS modifier_1,\n    NULL AS modifier_2,\n    NULL AS modifier_3,\n    NULL AS modifier_4,\n    NULL AS modifier_5,\n    REPLACE(REPLACE(JSON_EXTRACT(e, '$.participant[0].individual.reference'), '\"Practitioner/', ''), '\"', '') AS practitioner_id,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Procedure\" p\nLEFT JOIN \"synthea\".\"json\".\"Encounter\" e\n    ON REPLACE(REPLACE(JSON_EXTRACT(p, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') = REPLACE(JSON_EXTRACT(e, '$.id'), '\"', '')\nLEFT JOIN \"synthea\".\"json\".\"Claim\" cl\n    ON REPLACE(REPLACE(JSON_EXTRACT(p, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(cl, '$.item[0].encounter[0].reference'), '\"Encounter/', ''), '\"', '')", "relation_name": "\"synthea\".\"tuva_input\".\"procedure\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:31:00.102831Z", "completed_at": "2024-02-21T14:31:00.116620Z"}, {"name": "execute", "started_at": "2024-02-21T14:31:00.118117Z", "completed_at": "2024-02-21T14:31:00.158850Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.06021308898925781, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034__performance_period", "compiled": true, "compiled_code": "\n/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        cast(\n        \n\n    \n\n    date_trunc('year', now()) + ((interval '1 year') * (1))\n\n + ((interval '1 day') * (-1))\n\n\n        as date)\n        \n         as performance_period_end\n)\n\n/*\n    set performance period begin to a year and a day prior\n    for a complete calendar year\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    \n\n    performance_period_end + ((interval '1 year') * (-1))\n\n + ((interval '1 day') * (1))\n\n as performance_period_begin\n    from period_end\n\n)\n\n/*\n    set performance lookback periods for each type of test\n\n    during the measurement period:\n    - Fecal occult blood test (FOBT) during the measurement period\n\n    during the measurement period or the two years prior:\n    - Fecal immunochemical DNA test (FIT-DNA)\n\n    during the measurement period or the four years prior:\n    - Flexible sigmoidoscopy\n    - Computed tomography (CT) colonography\n\n    during the measurement period or the nine years prior:\n    - Colonoscopy\n\n*/\n, period_lookback as (\n\n    select\n          performance_period_end\n        , performance_period_begin\n        , \n\n    performance_period_end + ((interval '1 year') * (-2))\n\n as performance_period_begin_1yp\n        , \n\n    performance_period_end + ((interval '1 year') * (-3))\n\n as performance_period_begin_2yp\n        , \n\n    performance_period_end + ((interval '1 year') * (-5))\n\n as performance_period_begin_4yp\n        , \n\n    performance_period_end + ((interval '1 year') * (-10))\n\n as performance_period_begin_9yp\n    from period_begin\n\n)\n\nselect\n      cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_end as date) as performance_period_end\n    , cast(performance_period_begin_1yp as date) as performance_period_begin_1yp\n    , cast(performance_period_begin_2yp as date) as performance_period_begin_2yp\n    , cast(performance_period_begin_4yp as date) as performance_period_begin_4yp\n    , cast(performance_period_begin_9yp as date) as performance_period_begin_9yp\nfrom period_lookback", "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf0034__performance_period\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:30:59.757292Z", "completed_at": "2024-02-21T14:30:59.850747Z"}, {"name": "execute", "started_at": "2024-02-21T14:30:59.858378Z", "completed_at": "2024-02-21T14:31:00.258077Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.5132849216461182, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.medical_claim", "compiled": true, "compiled_code": "-- models/medical_claim.sql\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(c, '$.id'), '\"', '') AS claim_id,\n    REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '\"', '') AS claim_line_number,\n    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') AS claim_type,\n    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '\"Patient/', ''), '\"', '') AS patient_id,\n    NULL AS member_id,\n    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '\"', '') AS payer,\n    NULL AS plan,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional'\n        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)\n        ELSE NULL\n    END AS admission_date,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional'\n        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)\n        ELSE NULL\n    END AS discharge_date,\n    '3' AS admit_source_code,\n    9 AS admit_type_code,\n    CASE\n        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20\n        ELSE 1\n    END AS discharge_disposition_code,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional'\n        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '\"', '')\n        ELSE NULL\n    END AS place_of_service_code,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional' THEN '111'\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional' THEN '791'\n        ELSE NULL\n    END AS bill_type_code,\n    msdrg.\"MS-DRG\" AS ms_drg_code,\n    MAX(aprdrg.apr_drg_code) AS apr_drg_code,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional' THEN 0202\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional' THEN 0500\n        ELSE NULL\n    END AS revenue_center_code,\n    NULL AS service_unit_quantity,\n    NULL AS hcpcs_code,\n    NULL AS hcpcs_modifier_1,\n    NULL AS hcpcs_modifier_2,\n    NULL AS hcpcs_modifier_3,\n    NULL AS hcpcs_modifier_4,\n    NULL AS hcpcs_modifier_5,\n    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '\"', '') AS rendering_npi,\n    NULL AS billing_npi,\n    NULL AS facility_npi,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,\n    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT) AS paid_amount,\n    NULL AS allowed_amount,\n    NULL AS charge_amount,\n    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '\"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT)) AS coinsurance_amount,\n    NULL AS copayment_amount,\n    NULL AS deductible_amount,\n    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '\"', '') AS FLOAT) AS total_cost_amount,\n    'icd-10-cm' AS diagnosis_code_type,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_1,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_2,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_3,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_4,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_5,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_6,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_7,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_8,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_9,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_10,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_11,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_12,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_13,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_14,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_15,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_16,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_17,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_18,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_19,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_20,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_21,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_22,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_23,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_24,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_25,\n    'Y' AS diagnosis_poa_1,\n    'U' AS diagnosis_poa_2,\n    'U' AS diagnosis_poa_3,\n    'U' AS diagnosis_poa_4,\n    'U' AS diagnosis_poa_5,\n    'U' AS diagnosis_poa_6,\n    'U' AS diagnosis_poa_7,\n    'U' AS diagnosis_poa_8,\n    'U' AS diagnosis_poa_9,\n    'U' AS diagnosis_poa_10,\n    'U' AS diagnosis_poa_11,\n    'U' AS diagnosis_poa_12,\n    'U' AS diagnosis_poa_13,\n    'U' AS diagnosis_poa_14,\n    'U' AS diagnosis_poa_15,\n    'U' AS diagnosis_poa_16,\n    'U' AS diagnosis_poa_17,\n    'U' AS diagnosis_poa_18,\n    'U' AS diagnosis_poa_19,\n    'U' AS diagnosis_poa_20,\n    'U' AS diagnosis_poa_21,\n    'U' AS diagnosis_poa_22,\n    'U' AS diagnosis_poa_23,\n    'U' AS diagnosis_poa_24,\n    'U' AS diagnosis_poa_25,\n    'snomed' AS procedure_code_type,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '\"', '') AS procedure_code_1,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '\"', '') AS procedure_code_2,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '\"', '') AS procedure_code_3,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '\"', '') AS procedure_code_4,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '\"', '') AS procedure_code_5,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '\"', '') AS procedure_code_6,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '\"', '') AS procedure_code_7,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '\"', '') AS procedure_code_8,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '\"', '') AS procedure_code_9,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '\"', '') AS procedure_code_10,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '\"', '') AS procedure_code_11,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '\"', '') AS procedure_code_12,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '\"', '') AS procedure_code_13,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '\"', '') AS procedure_code_14,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '\"', '') AS procedure_code_15,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '\"', '') AS procedure_code_16,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '\"', '') AS procedure_code_17,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '\"', '') AS procedure_code_18,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '\"', '') AS procedure_code_19,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '\"', '') AS procedure_code_20,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '\"', '') AS procedure_code_21,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '\"', '') AS procedure_code_22,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '\"', '') AS procedure_code_23,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '\"', '') AS procedure_code_24,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '\"', '') AS procedure_code_25,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Claim\" c\nLEFT JOIN \"synthea\".\"json\".\"ExplanationOfBenefit\" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '\"Claim/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"json\".\"Condition\" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[0].diagnosisReference.reference'), '\"Condition/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"json\".\"Procedure\" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[0].procedureReference.reference'), '\"Procedure/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"terminology\".\"snomed_icd_10_map\" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '\"', '') = map.referenced_component_id\nLEFT JOIN \"synthea\".\"reference\".\"icd10cm_to_msdrg_v41\" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target\nLEFT JOIN \"synthea\".\"terminology\".\"apr_drg\" aprdrg ON aprdrg.mdc_code = msdrg.MDC\nLEFT JOIN \"synthea\".\"json\".\"Practitioner\" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '\"Practitioner/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"json\".\"Patient\" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '\"Patient/', ''), '\"', '')\nWHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') != 'pharmacy'\nAND REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '\"', '') IS NOT NULL\nGROUP BY\n    REPLACE(JSON_EXTRACT(c, '$.id'), '\"', ''),\n    REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '\"', ''),\n    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', ''),\n    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '\"Patient/', ''), '\"', ''),\n    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '\"', ''),\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional'\n        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)\n        ELSE NULL\n    END,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional'\n        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)\n        ELSE NULL\n    END,\n    CASE\n        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20\n        ELSE 1\n    END,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional'\n        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '\"', '')\n        ELSE NULL\n    END,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional' THEN '111'\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional' THEN '791'\n        ELSE NULL\n    END,\n    msdrg.\"MS-DRG\",\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional' THEN 0202\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional' THEN 0500\n        ELSE NULL\n    END,\n    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '\"', ''),\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),\n    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT),\n    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '\"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT)),\n    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '\"', '') AS FLOAT),\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '\"', ''),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)\n\nUNION\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(c, '$.id'), '\"', '') AS claim_id,\n    REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '\"', '') AS claim_line_number,\n    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') AS claim_type,\n    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '\"Patient/', ''), '\"', '') AS patient_id,\n    NULL AS member_id,\n    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '\"', '') AS payer,\n    NULL AS plan,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional'\n        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)\n        ELSE NULL\n    END AS admission_date,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional'\n        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)\n        ELSE NULL\n    END AS discharge_date,\n    '3' AS admit_source_code,\n    9 AS admit_type_code,\n    CASE\n        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20\n        ELSE 1\n    END AS discharge_disposition_code,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional'\n        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '\"', '')\n        ELSE NULL\n    END AS place_of_service_code,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional' THEN '111'\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional' THEN '791'\n        ELSE NULL\n    END AS bill_type_code,\n    msdrg.\"MS-DRG\" AS ms_drg_code,\n    MAX(aprdrg.apr_drg_code) AS apr_drg_code,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional' THEN 0202\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional' THEN 0500\n        ELSE NULL\n    END AS revenue_center_code,\n    NULL AS service_unit_quantity,\n    NULL AS hcpcs_code,\n    NULL AS hcpcs_modifier_1,\n    NULL AS hcpcs_modifier_2,\n    NULL AS hcpcs_modifier_3,\n    NULL AS hcpcs_modifier_4,\n    NULL AS hcpcs_modifier_5,\n    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '\"', '') AS rendering_npi,\n    NULL AS billing_npi,\n    NULL AS facility_npi,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,\n    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT) AS paid_amount,\n    NULL AS allowed_amount,\n    NULL AS charge_amount,\n    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '\"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT)) AS coinsurance_amount,\n    NULL AS copayment_amount,\n    NULL AS deductible_amount,\n    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '\"', '') AS FLOAT) AS total_cost_amount,\n    'icd-10-cm' AS diagnosis_code_type,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_1,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_2,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_3,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_4,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_5,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_6,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_7,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_8,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_9,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_10,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_11,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_12,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_13,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_14,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_15,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_16,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_17,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_18,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_19,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_20,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_21,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_22,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_23,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_24,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_25,\n    'Y' AS diagnosis_poa_1,\n    'U' AS diagnosis_poa_2,\n    'U' AS diagnosis_poa_3,\n    'U' AS diagnosis_poa_4,\n    'U' AS diagnosis_poa_5,\n    'U' AS diagnosis_poa_6,\n    'U' AS diagnosis_poa_7,\n    'U' AS diagnosis_poa_8,\n    'U' AS diagnosis_poa_9,\n    'U' AS diagnosis_poa_10,\n    'U' AS diagnosis_poa_11,\n    'U' AS diagnosis_poa_12,\n    'U' AS diagnosis_poa_13,\n    'U' AS diagnosis_poa_14,\n    'U' AS diagnosis_poa_15,\n    'U' AS diagnosis_poa_16,\n    'U' AS diagnosis_poa_17,\n    'U' AS diagnosis_poa_18,\n    'U' AS diagnosis_poa_19,\n    'U' AS diagnosis_poa_20,\n    'U' AS diagnosis_poa_21,\n    'U' AS diagnosis_poa_22,\n    'U' AS diagnosis_poa_23,\n    'U' AS diagnosis_poa_24,\n    'U' AS diagnosis_poa_25,\n    'snomed' AS procedure_code_type,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '\"', '') AS procedure_code_1,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '\"', '') AS procedure_code_2,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '\"', '') AS procedure_code_3,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '\"', '') AS procedure_code_4,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '\"', '') AS procedure_code_5,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '\"', '') AS procedure_code_6,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '\"', '') AS procedure_code_7,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '\"', '') AS procedure_code_8,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '\"', '') AS procedure_code_9,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '\"', '') AS procedure_code_10,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '\"', '') AS procedure_code_11,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '\"', '') AS procedure_code_12,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '\"', '') AS procedure_code_13,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '\"', '') AS procedure_code_14,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '\"', '') AS procedure_code_15,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '\"', '') AS procedure_code_16,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '\"', '') AS procedure_code_17,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '\"', '') AS procedure_code_18,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '\"', '') AS procedure_code_19,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '\"', '') AS procedure_code_20,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '\"', '') AS procedure_code_21,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '\"', '') AS procedure_code_22,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '\"', '') AS procedure_code_23,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '\"', '') AS procedure_code_24,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '\"', '') AS procedure_code_25,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Claim\" c\nLEFT JOIN \"synthea\".\"json\".\"ExplanationOfBenefit\" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '\"Claim/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"json\".\"Condition\" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[1].diagnosisReference.reference'), '\"Condition/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"json\".\"Procedure\" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[1].procedureReference.reference'), '\"Procedure/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"terminology\".\"snomed_icd_10_map\" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '\"', '') = map.referenced_component_id\nLEFT JOIN \"synthea\".\"reference\".\"icd10cm_to_msdrg_v41\" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target\nLEFT JOIN \"synthea\".\"terminology\".\"apr_drg\" aprdrg ON aprdrg.mdc_code = msdrg.MDC\nLEFT JOIN \"synthea\".\"json\".\"Practitioner\" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '\"Practitioner/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"json\".\"Patient\" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '\"Patient/', ''), '\"', '')\nWHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') != 'pharmacy'\nAND REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '\"', '') IS NOT NULL\nGROUP BY\n    REPLACE(JSON_EXTRACT(c, '$.id'), '\"', ''),\n    REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '\"', ''),\n    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', ''),\n    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '\"Patient/', ''), '\"', ''),\n    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '\"', ''),\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional'\n        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)\n        ELSE NULL\n    END,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional'\n        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)\n        ELSE NULL\n    END,\n    CASE\n        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20\n        ELSE 1\n    END,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional'\n        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '\"', '')\n        ELSE NULL\n    END,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional' THEN '111'\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional' THEN '791'\n        ELSE NULL\n    END,\n    msdrg.\"MS-DRG\",\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional' THEN 0202\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional' THEN 0500\n        ELSE NULL\n    END,\n    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '\"', ''),\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),\n    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT),\n    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '\"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT)),\n    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '\"', '') AS FLOAT),\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '\"', ''),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)\n\nUNION\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(c, '$.id'), '\"', '') AS claim_id,\n    REPLACE(JSON_EXTRACT(c, '$.item[2].sequence'), '\"', '') AS claim_line_number,\n    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') AS claim_type,\n    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '\"Patient/', ''), '\"', '') AS patient_id,\n    NULL AS member_id,\n    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '\"', '') AS payer,\n    NULL AS plan,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional'\n        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)\n        ELSE NULL\n    END AS admission_date,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional'\n        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)\n        ELSE NULL\n    END AS discharge_date,\n    '3' AS admit_source_code,\n    9 AS admit_type_code,\n    CASE\n        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20\n        ELSE 1\n    END AS discharge_disposition_code,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional'\n        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '\"', '')\n        ELSE NULL\n    END AS place_of_service_code,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional' THEN '111'\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional' THEN '791'\n        ELSE NULL\n    END AS bill_type_code,\n    msdrg.\"MS-DRG\" AS ms_drg_code,\n    MAX(aprdrg.apr_drg_code) AS apr_drg_code,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional' THEN 0202\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional' THEN 0500\n        ELSE NULL\n    END AS revenue_center_code,\n    NULL AS service_unit_quantity,\n    NULL AS hcpcs_code,\n    NULL AS hcpcs_modifier_1,\n    NULL AS hcpcs_modifier_2,\n    NULL AS hcpcs_modifier_3,\n    NULL AS hcpcs_modifier_4,\n    NULL AS hcpcs_modifier_5,\n    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '\"', '') AS rendering_npi,\n    NULL AS billing_npi,\n    NULL AS facility_npi,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,\n    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT) AS paid_amount,\n    NULL AS allowed_amount,\n    NULL AS charge_amount,\n    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '\"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT)) AS coinsurance_amount,\n    NULL AS copayment_amount,\n    NULL AS deductible_amount,\n    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '\"', '') AS FLOAT) AS total_cost_amount,\n    'icd-10-cm' AS diagnosis_code_type,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_1,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_2,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_3,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_4,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_5,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_6,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_7,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_8,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_9,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_10,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_11,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_12,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_13,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_14,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_15,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_16,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_17,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_18,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_19,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_20,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_21,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_22,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_23,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_24,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_25,\n    'Y' AS diagnosis_poa_1,\n    'U' AS diagnosis_poa_2,\n    'U' AS diagnosis_poa_3,\n    'U' AS diagnosis_poa_4,\n    'U' AS diagnosis_poa_5,\n    'U' AS diagnosis_poa_6,\n    'U' AS diagnosis_poa_7,\n    'U' AS diagnosis_poa_8,\n    'U' AS diagnosis_poa_9,\n    'U' AS diagnosis_poa_10,\n    'U' AS diagnosis_poa_11,\n    'U' AS diagnosis_poa_12,\n    'U' AS diagnosis_poa_13,\n    'U' AS diagnosis_poa_14,\n    'U' AS diagnosis_poa_15,\n    'U' AS diagnosis_poa_16,\n    'U' AS diagnosis_poa_17,\n    'U' AS diagnosis_poa_18,\n    'U' AS diagnosis_poa_19,\n    'U' AS diagnosis_poa_20,\n    'U' AS diagnosis_poa_21,\n    'U' AS diagnosis_poa_22,\n    'U' AS diagnosis_poa_23,\n    'U' AS diagnosis_poa_24,\n    'U' AS diagnosis_poa_25,\n    'snomed' AS procedure_code_type,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '\"', '') AS procedure_code_1,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '\"', '') AS procedure_code_2,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '\"', '') AS procedure_code_3,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '\"', '') AS procedure_code_4,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '\"', '') AS procedure_code_5,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '\"', '') AS procedure_code_6,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '\"', '') AS procedure_code_7,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '\"', '') AS procedure_code_8,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '\"', '') AS procedure_code_9,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '\"', '') AS procedure_code_10,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '\"', '') AS procedure_code_11,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '\"', '') AS procedure_code_12,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '\"', '') AS procedure_code_13,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '\"', '') AS procedure_code_14,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '\"', '') AS procedure_code_15,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '\"', '') AS procedure_code_16,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '\"', '') AS procedure_code_17,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '\"', '') AS procedure_code_18,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '\"', '') AS procedure_code_19,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '\"', '') AS procedure_code_20,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '\"', '') AS procedure_code_21,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '\"', '') AS procedure_code_22,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '\"', '') AS procedure_code_23,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '\"', '') AS procedure_code_24,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '\"', '') AS procedure_code_25,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Claim\" c\nLEFT JOIN \"synthea\".\"json\".\"ExplanationOfBenefit\" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '\"Claim/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"json\".\"Condition\" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[2].diagnosisReference.reference'), '\"Condition/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"json\".\"Procedure\" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[2].procedureReference.reference'), '\"Procedure/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"terminology\".\"snomed_icd_10_map\" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '\"', '') = map.referenced_component_id\nLEFT JOIN \"synthea\".\"reference\".\"icd10cm_to_msdrg_v41\" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target\nLEFT JOIN \"synthea\".\"terminology\".\"apr_drg\" aprdrg ON aprdrg.mdc_code = msdrg.MDC\nLEFT JOIN \"synthea\".\"json\".\"Practitioner\" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '\"Practitioner/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"json\".\"Patient\" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '\"Patient/', ''), '\"', '')\nWHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') != 'pharmacy'\nAND REPLACE(JSON_EXTRACT(c, '$.item[2].sequence'), '\"', '') IS NOT NULL\nGROUP BY\n    REPLACE(JSON_EXTRACT(c, '$.id'), '\"', ''),\n    REPLACE(JSON_EXTRACT(c, '$.item[2].sequence'), '\"', ''),\n    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', ''),\n    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '\"Patient/', ''), '\"', ''),\n    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '\"', ''),\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional'\n        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)\n        ELSE NULL\n    END,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional'\n        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)\n        ELSE NULL\n    END,\n    CASE\n        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20\n        ELSE 1\n    END,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional'\n        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '\"', '')\n        ELSE NULL\n    END,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional' THEN '111'\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional' THEN '791'\n        ELSE NULL\n    END,\n    msdrg.\"MS-DRG\",\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional' THEN 0202\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional' THEN 0500\n        ELSE NULL\n    END,\n    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '\"', ''),\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),\n    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT),\n    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '\"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT)),\n    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '\"', '') AS FLOAT),\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '\"', ''),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)\n\nUNION\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(c, '$.id'), '\"', '') AS claim_id,\n    REPLACE(JSON_EXTRACT(c, '$.item[3].sequence'), '\"', '') AS claim_line_number,\n    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') AS claim_type,\n    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '\"Patient/', ''), '\"', '') AS patient_id,\n    NULL AS member_id,\n    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '\"', '') AS payer,\n    NULL AS plan,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional'\n        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)\n        ELSE NULL\n    END AS admission_date,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional'\n        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)\n        ELSE NULL\n    END AS discharge_date,\n    '3' AS admit_source_code,\n    9 AS admit_type_code,\n    CASE\n        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20\n        ELSE 1\n    END AS discharge_disposition_code,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional'\n        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '\"', '')\n        ELSE NULL\n    END AS place_of_service_code,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional' THEN '111'\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional' THEN '791'\n        ELSE NULL\n    END AS bill_type_code,\n    msdrg.\"MS-DRG\" AS ms_drg_code,\n    MAX(aprdrg.apr_drg_code) AS apr_drg_code,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional' THEN 0202\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional' THEN 0500\n        ELSE NULL\n    END AS revenue_center_code,\n    NULL AS service_unit_quantity,\n    NULL AS hcpcs_code,\n    NULL AS hcpcs_modifier_1,\n    NULL AS hcpcs_modifier_2,\n    NULL AS hcpcs_modifier_3,\n    NULL AS hcpcs_modifier_4,\n    NULL AS hcpcs_modifier_5,\n    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '\"', '') AS rendering_npi,\n    NULL AS billing_npi,\n    NULL AS facility_npi,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,\n    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT) AS paid_amount,\n    NULL AS allowed_amount,\n    NULL AS charge_amount,\n    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '\"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT)) AS coinsurance_amount,\n    NULL AS copayment_amount,\n    NULL AS deductible_amount,\n    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '\"', '') AS FLOAT) AS total_cost_amount,\n    'icd-10-cm' AS diagnosis_code_type,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_1,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_2,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_3,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_4,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_5,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_6,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_7,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_8,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_9,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_10,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_11,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_12,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_13,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_14,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_15,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_16,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_17,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_18,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_19,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_20,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_21,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_22,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_23,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_24,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_25,\n    'Y' AS diagnosis_poa_1,\n    'U' AS diagnosis_poa_2,\n    'U' AS diagnosis_poa_3,\n    'U' AS diagnosis_poa_4,\n    'U' AS diagnosis_poa_5,\n    'U' AS diagnosis_poa_6,\n    'U' AS diagnosis_poa_7,\n    'U' AS diagnosis_poa_8,\n    'U' AS diagnosis_poa_9,\n    'U' AS diagnosis_poa_10,\n    'U' AS diagnosis_poa_11,\n    'U' AS diagnosis_poa_12,\n    'U' AS diagnosis_poa_13,\n    'U' AS diagnosis_poa_14,\n    'U' AS diagnosis_poa_15,\n    'U' AS diagnosis_poa_16,\n    'U' AS diagnosis_poa_17,\n    'U' AS diagnosis_poa_18,\n    'U' AS diagnosis_poa_19,\n    'U' AS diagnosis_poa_20,\n    'U' AS diagnosis_poa_21,\n    'U' AS diagnosis_poa_22,\n    'U' AS diagnosis_poa_23,\n    'U' AS diagnosis_poa_24,\n    'U' AS diagnosis_poa_25,\n    'snomed' AS procedure_code_type,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '\"', '') AS procedure_code_1,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '\"', '') AS procedure_code_2,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '\"', '') AS procedure_code_3,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '\"', '') AS procedure_code_4,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '\"', '') AS procedure_code_5,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '\"', '') AS procedure_code_6,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '\"', '') AS procedure_code_7,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '\"', '') AS procedure_code_8,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '\"', '') AS procedure_code_9,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '\"', '') AS procedure_code_10,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '\"', '') AS procedure_code_11,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '\"', '') AS procedure_code_12,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '\"', '') AS procedure_code_13,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '\"', '') AS procedure_code_14,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '\"', '') AS procedure_code_15,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '\"', '') AS procedure_code_16,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '\"', '') AS procedure_code_17,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '\"', '') AS procedure_code_18,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '\"', '') AS procedure_code_19,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '\"', '') AS procedure_code_20,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '\"', '') AS procedure_code_21,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '\"', '') AS procedure_code_22,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '\"', '') AS procedure_code_23,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '\"', '') AS procedure_code_24,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '\"', '') AS procedure_code_25,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Claim\" c\nLEFT JOIN \"synthea\".\"json\".\"ExplanationOfBenefit\" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '\"Claim/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"json\".\"Condition\" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[3].diagnosisReference.reference'), '\"Condition/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"json\".\"Procedure\" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[3].procedureReference.reference'), '\"Procedure/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"terminology\".\"snomed_icd_10_map\" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '\"', '') = map.referenced_component_id\nLEFT JOIN \"synthea\".\"reference\".\"icd10cm_to_msdrg_v41\" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target\nLEFT JOIN \"synthea\".\"terminology\".\"apr_drg\" aprdrg ON aprdrg.mdc_code = msdrg.MDC\nLEFT JOIN \"synthea\".\"json\".\"Practitioner\" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '\"Practitioner/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"json\".\"Patient\" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '\"Patient/', ''), '\"', '')\nWHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') != 'pharmacy'\nAND REPLACE(JSON_EXTRACT(c, '$.item[3].sequence'), '\"', '') IS NOT NULL\nGROUP BY\n    REPLACE(JSON_EXTRACT(c, '$.id'), '\"', ''),\n    REPLACE(JSON_EXTRACT(c, '$.item[3].sequence'), '\"', ''),\n    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', ''),\n    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '\"Patient/', ''), '\"', ''),\n    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '\"', ''),\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional'\n        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)\n        ELSE NULL\n    END,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional'\n        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)\n        ELSE NULL\n    END,\n    CASE\n        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20\n        ELSE 1\n    END,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional'\n        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '\"', '')\n        ELSE NULL\n    END,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional' THEN '111'\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional' THEN '791'\n        ELSE NULL\n    END,\n    msdrg.\"MS-DRG\",\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional' THEN 0202\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional' THEN 0500\n        ELSE NULL\n    END,\n    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '\"', ''),\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),\n    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT),\n    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '\"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT)),\n    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '\"', '') AS FLOAT),\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '\"', ''),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)\n\nUNION\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(c, '$.id'), '\"', '') AS claim_id,\n    REPLACE(JSON_EXTRACT(c, '$.item[4].sequence'), '\"', '') AS claim_line_number,\n    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') AS claim_type,\n    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '\"Patient/', ''), '\"', '') AS patient_id,\n    NULL AS member_id,\n    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '\"', '') AS payer,\n    NULL AS plan,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional'\n        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)\n        ELSE NULL\n    END AS admission_date,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional'\n        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)\n        ELSE NULL\n    END AS discharge_date,\n    '3' AS admit_source_code,\n    9 AS admit_type_code,\n    CASE\n        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20\n        ELSE 1\n    END AS discharge_disposition_code,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional'\n        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '\"', '')\n        ELSE NULL\n    END AS place_of_service_code,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional' THEN '111'\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional' THEN '791'\n        ELSE NULL\n    END AS bill_type_code,\n    msdrg.\"MS-DRG\" AS ms_drg_code,\n    MAX(aprdrg.apr_drg_code) AS apr_drg_code,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional' THEN 0202\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional' THEN 0500\n        ELSE NULL\n    END AS revenue_center_code,\n    NULL AS service_unit_quantity,\n    NULL AS hcpcs_code,\n    NULL AS hcpcs_modifier_1,\n    NULL AS hcpcs_modifier_2,\n    NULL AS hcpcs_modifier_3,\n    NULL AS hcpcs_modifier_4,\n    NULL AS hcpcs_modifier_5,\n    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '\"', '') AS rendering_npi,\n    NULL AS billing_npi,\n    NULL AS facility_npi,\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,\n    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT) AS paid_amount,\n    NULL AS allowed_amount,\n    NULL AS charge_amount,\n    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '\"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT)) AS coinsurance_amount,\n    NULL AS copayment_amount,\n    NULL AS deductible_amount,\n    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '\"', '') AS FLOAT) AS total_cost_amount,\n    'icd-10-cm' AS diagnosis_code_type,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_1,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_2,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_3,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_4,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_5,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_6,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_7,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_8,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_9,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_10,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_11,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_12,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_13,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_14,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_15,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_16,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_17,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_18,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_19,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_20,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_21,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_22,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_23,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_24,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '\"', '')\n        )\n    END AS diagnosis_code_25,\n    'Y' AS diagnosis_poa_1,\n    'U' AS diagnosis_poa_2,\n    'U' AS diagnosis_poa_3,\n    'U' AS diagnosis_poa_4,\n    'U' AS diagnosis_poa_5,\n    'U' AS diagnosis_poa_6,\n    'U' AS diagnosis_poa_7,\n    'U' AS diagnosis_poa_8,\n    'U' AS diagnosis_poa_9,\n    'U' AS diagnosis_poa_10,\n    'U' AS diagnosis_poa_11,\n    'U' AS diagnosis_poa_12,\n    'U' AS diagnosis_poa_13,\n    'U' AS diagnosis_poa_14,\n    'U' AS diagnosis_poa_15,\n    'U' AS diagnosis_poa_16,\n    'U' AS diagnosis_poa_17,\n    'U' AS diagnosis_poa_18,\n    'U' AS diagnosis_poa_19,\n    'U' AS diagnosis_poa_20,\n    'U' AS diagnosis_poa_21,\n    'U' AS diagnosis_poa_22,\n    'U' AS diagnosis_poa_23,\n    'U' AS diagnosis_poa_24,\n    'U' AS diagnosis_poa_25,\n    'snomed' AS procedure_code_type,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '\"', '') AS procedure_code_1,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '\"', '') AS procedure_code_2,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '\"', '') AS procedure_code_3,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '\"', '') AS procedure_code_4,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '\"', '') AS procedure_code_5,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '\"', '') AS procedure_code_6,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '\"', '') AS procedure_code_7,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '\"', '') AS procedure_code_8,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '\"', '') AS procedure_code_9,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '\"', '') AS procedure_code_10,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '\"', '') AS procedure_code_11,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '\"', '') AS procedure_code_12,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '\"', '') AS procedure_code_13,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '\"', '') AS procedure_code_14,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '\"', '') AS procedure_code_15,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '\"', '') AS procedure_code_16,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '\"', '') AS procedure_code_17,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '\"', '') AS procedure_code_18,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '\"', '') AS procedure_code_19,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '\"', '') AS procedure_code_20,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '\"', '') AS procedure_code_21,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '\"', '') AS procedure_code_22,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '\"', '') AS procedure_code_23,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '\"', '') AS procedure_code_24,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '\"', '') AS procedure_code_25,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Claim\" c\nLEFT JOIN \"synthea\".\"json\".\"ExplanationOfBenefit\" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '\"Claim/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"json\".\"Condition\" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[4].diagnosisReference.reference'), '\"Condition/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"json\".\"Procedure\" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[4].procedureReference.reference'), '\"Procedure/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"terminology\".\"snomed_icd_10_map\" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '\"', '') = map.referenced_component_id\nLEFT JOIN \"synthea\".\"reference\".\"icd10cm_to_msdrg_v41\" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target\nLEFT JOIN \"synthea\".\"terminology\".\"apr_drg\" aprdrg ON aprdrg.mdc_code = msdrg.MDC\nLEFT JOIN \"synthea\".\"json\".\"Practitioner\" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '\"Practitioner/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"json\".\"Patient\" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '\"Patient/', ''), '\"', '')\nWHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') != 'pharmacy'\nAND REPLACE(JSON_EXTRACT(c, '$.item[4].sequence'), '\"', '') IS NOT NULL\nGROUP BY\n    REPLACE(JSON_EXTRACT(c, '$.id'), '\"', ''),\n    REPLACE(JSON_EXTRACT(c, '$.item[4].sequence'), '\"', ''),\n    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', ''),\n    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '\"Patient/', ''), '\"', ''),\n    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '\"', ''),\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional'\n        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)\n        ELSE NULL\n    END,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional'\n        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)\n        ELSE NULL\n    END,\n    CASE\n        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20\n        ELSE 1\n    END,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional'\n        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '\"', '')\n        ELSE NULL\n    END,\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional' THEN '111'\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional' THEN '791'\n        ELSE NULL\n    END,\n    msdrg.\"MS-DRG\",\n    CASE\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'institutional' THEN 0202\n        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '\"', '') = 'professional' THEN 0500\n        ELSE NULL\n    END,\n    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '\"', ''),\n    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),\n    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT),\n    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '\"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '\"', '') AS FLOAT)),\n    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '\"', '') AS FLOAT),\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    CASE\n        WHEN (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '\"', '')\n        ) = 'nan' THEN NULL\n        ELSE (\n            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')\n            FROM \"synthea\".\"terminology\".\"snomed_icd_10_map\" AS map\n            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '\"', '')\n        )\n    END,\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '\"', ''),\n    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '\"', ''),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),\n    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)", "relation_name": "\"synthea\".\"tuva_input\".\"medical_claim\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:31:00.162702Z", "completed_at": "2024-02-21T14:31:00.173465Z"}, {"name": "execute", "started_at": "2024-02-21T14:31:00.177768Z", "completed_at": "2024-02-21T14:31:00.267844Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.11221051216125488, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372__performance_period", "compiled": true, "compiled_code": "/*\n    set performance period end to the end of the current calendar year\n    or use the quality_measures_period_end variable if provided\n*/\nwith period_end as (\n\n    select\n        cast(\n        \n\n    \n\n    date_trunc('year', now()) + ((interval '1 year') * (1))\n\n + ((interval '1 day') * (-1))\n\n\n        as date)\n        \n         as performance_period_end\n)\n\n/*\n    set performance period begin to a year and a day prior\n    for a complete calendar year\n*/\n, period_begin as (\n\n    select\n          performance_period_end\n        , \n\n    \n\n    performance_period_end + ((interval '1 year') * (-1))\n\n + ((interval '1 day') * (1))\n\n as performance_period_begin\n    from period_end\n\n)\n\n/*\n    set performance lookback period to 27 months prior to the end of the\n    performance period\n*/\n, period_lookback as (\n\n    select\n          performance_period_end\n        , performance_period_begin\n        , \n\n    performance_period_end + ((interval '1 month') * (-27))\n\n as performance_period_lookback\n    from period_begin\n\n\n)\n\nselect\n      cast((select id\nfrom \"synthea\".\"quality_measures\".\"_value_set_measures\"\nwhere id = 'NQF2372') as TEXT) as measure_id\n    , cast((select name\nfrom \"synthea\".\"quality_measures\".\"_value_set_measures\"\nwhere id = 'NQF2372') as TEXT) as measure_name\n    , cast((select version\nfrom \"synthea\".\"quality_measures\".\"_value_set_measures\"\nwhere id = 'NQF2372') as TEXT) as measure_version\n    , cast(performance_period_end as date) as performance_period_end\n    , cast(performance_period_begin as date) as performance_period_begin\n    , cast(performance_period_lookback as date) as performance_period_lookback\nfrom period_lookback", "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf2372__performance_period\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:31:00.197726Z", "completed_at": "2024-02-21T14:31:00.211488Z"}, {"name": "execute", "started_at": "2024-02-21T14:31:00.217549Z", "completed_at": "2024-02-21T14:31:00.316105Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.12656641006469727, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_condition", "compiled": true, "compiled_code": "\n\nselect\n    cast(condition_id as TEXT ) as condition_id\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_id as TEXT ) as encounter_id\n    , cast(claim_id as TEXT ) as claim_id\n    , try_cast( recorded_date as date ) as recorded_date\n    , try_cast( onset_date as date ) as onset_date\n    , try_cast( resolved_date as date ) as resolved_date\n    , cast(status as TEXT ) as status\n    , cast(condition_type as TEXT ) as condition_type\n    , cast(source_code_type as TEXT ) as source_code_type\n    , cast(source_code as TEXT ) as source_code\n    , cast(source_description as TEXT ) as source_description\n    , cast(normalized_code_type as TEXT ) as normalized_code_type\n    , cast(normalized_code as TEXT ) as normalized_code\n    , cast(normalized_description as TEXT ) as normalized_description\n    , cast(condition_rank as integer ) as condition_rank\n    , cast(present_on_admit_code as TEXT ) as present_on_admit_code\n    , cast(present_on_admit_description as TEXT ) as present_on_admit_description\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-21 14:30:54.308435+00:00' as timestamp ) as tuva_last_run\nfrom \"synthea\".\"tuva_input\".\"condition\"", "relation_name": "\"synthea\".\"core\".\"_stg_clinical_condition\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:31:00.293905Z", "completed_at": "2024-02-21T14:31:00.310056Z"}, {"name": "execute", "started_at": "2024-02-21T14:31:00.311383Z", "completed_at": "2024-02-21T14:31:00.372776Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.08864951133728027, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_encounter", "compiled": true, "compiled_code": "\n\nselect \n    cast(encounter_id as TEXT ) as encounter_id\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_type as TEXT ) as encounter_type\n    , try_cast( encounter_start_date as date ) as encounter_start_date\n    , try_cast( encounter_end_date as date ) as encounter_end_date\n    , cast(length_of_stay as integer ) as length_of_stay\n    , cast(admit_source_code as TEXT ) as admit_source_code\n    , cast(admit_source_description as TEXT ) as admit_source_description\n    , cast(admit_type_code as TEXT ) as admit_type_code\n    , cast(admit_type_description as TEXT ) as admit_type_description\n    , cast(discharge_disposition_code as TEXT ) as discharge_disposition_code\n    , cast(discharge_disposition_description as TEXT ) as discharge_disposition_description\n    , cast(attending_provider_id as TEXT ) as attending_provider_id\n    , cast(facility_npi as TEXT ) as facility_npi\n    , cast(primary_diagnosis_code_type as TEXT ) as primary_diagnosis_code_type\n    , cast(primary_diagnosis_code as TEXT ) as primary_diagnosis_code\n    , cast(primary_diagnosis_description as TEXT ) as primary_diagnosis_description\n    , cast(ms_drg_code as TEXT ) as ms_drg_code\n    , cast(ms_drg_description as TEXT ) as ms_drg_description \n    , cast(apr_drg_code as TEXT ) as apr_drg_code\n    , cast(apr_drg_description as TEXT ) as apr_drg_description\n    , cast(paid_amount as numeric(28,6) ) as paid_amount\n    , cast(allowed_amount as numeric(28,6) ) as allowed_amount\n    , cast(charge_amount as numeric(28,6) ) as charge_amount\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-21 14:30:54.308435+00:00' as timestamp ) as tuva_last_run\nfrom \"synthea\".\"tuva_input\".\"encounter\"", "relation_name": "\"synthea\".\"core\".\"_stg_clinical_encounter\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:31:00.278383Z", "completed_at": "2024-02-21T14:31:00.290154Z"}, {"name": "execute", "started_at": "2024-02-21T14:31:00.305273Z", "completed_at": "2024-02-21T14:31:00.376214Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.10477709770202637, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_lab_result", "compiled": true, "compiled_code": "\n\nselect\n    cast(lab_result_id as TEXT ) as lab_result_id\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_id as TEXT ) as encounter_id\n    , cast(accession_number as TEXT ) as accession_number\n    , cast(source_code_type as TEXT ) as source_code_type\n    , cast(source_code as TEXT ) as source_code\n    , cast(source_description as TEXT ) as source_description\n    , cast(source_component as TEXT ) as source_component\n    , cast(normalized_code_type as TEXT ) as normalized_code_type\n    , cast(normalized_code as TEXT ) as normalized_code\n    , cast(normalized_description as TEXT ) as normalized_description\n    , cast(normalized_component as TEXT ) as normalized_component\n    , cast(status as TEXT ) as status\n    , cast(result as TEXT ) as result\n    , try_cast( result_date as date ) as result_date\n    , try_cast( collection_date as date ) as collection_date\n    , cast(source_units as TEXT ) as source_units\n    , cast(normalized_units as TEXT ) as normalized_units\n    , cast(source_reference_range_low as TEXT ) as source_reference_range_low\n    , cast(source_reference_range_high as TEXT ) as source_reference_range_high\n    , cast(normalized_reference_range_low as TEXT ) as normalized_reference_range_low\n    , cast(normalized_reference_range_high as TEXT ) as normalized_reference_range_high\n    , cast(source_abnormal_flag as integer ) as source_abnormal_flag\n    , cast(normalized_abnormal_flag as integer ) as normalized_abnormal_flag\n    , cast(specimen as TEXT ) as specimen\n    , cast(ordering_practitioner_id as TEXT ) as ordering_practitioner_id\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-21 14:30:54.308435+00:00' as timestamp ) as tuva_last_run\nfrom \"synthea\".\"tuva_input\".\"lab_result\"", "relation_name": "\"synthea\".\"core\".\"_stg_clinical_lab_result\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:31:00.326480Z", "completed_at": "2024-02-21T14:31:00.340502Z"}, {"name": "execute", "started_at": "2024-02-21T14:31:00.342984Z", "completed_at": "2024-02-21T14:31:00.408907Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.08643054962158203, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_location", "compiled": true, "compiled_code": "\n\nselect\n    cast(location_id as TEXT ) as location_id\n    , cast(npi as TEXT ) as npi\n    , cast(name as TEXT ) as name\n    , cast(facility_type as TEXT ) as facility_type\n    , cast(parent_organization as TEXT ) as parent_organization\n    , cast(address as TEXT ) as address\n    , cast(city as TEXT ) as city\n    , cast(state as TEXT ) as state\n    , cast(zip_code as TEXT ) as zip_code\n    , cast(latitude as float ) as latitude\n    , cast(longitude as float ) as longitude\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-21 14:30:54.308435+00:00' as timestamp ) as tuva_last_run\nfrom \"synthea\".\"tuva_input\".\"location\"", "relation_name": "\"synthea\".\"core\".\"_stg_clinical_location\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:31:00.392245Z", "completed_at": "2024-02-21T14:31:00.409841Z"}, {"name": "execute", "started_at": "2024-02-21T14:31:00.415454Z", "completed_at": "2024-02-21T14:31:00.478320Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.09672808647155762, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_medication", "compiled": true, "compiled_code": "\n\nselect\n    cast(medication_id as TEXT ) as medication_id\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_id as TEXT ) as encounter_id\n    , try_cast( dispensing_date as date ) as dispensing_date\n    , try_cast( prescribing_date as date ) as prescribing_date\n    , cast(source_code_type as TEXT ) as source_code_type\n    , cast(source_code as TEXT ) as source_code\n    , cast(source_description as TEXT ) as source_description\n    , cast(ndc_code as TEXT ) as ndc_code\n    , cast(ndc_description as TEXT ) as ndc_description\n    , cast(rxnorm_code as TEXT ) as rxnorm_code\n    , cast(rxnorm_description as TEXT ) as rxnorm_description \n    , cast(atc_code as TEXT ) as atc_code\n    , cast(atc_description as TEXT ) as atc_description\n    , cast(route as TEXT ) as route\n    , cast(strength as TEXT ) as strength\n    , cast(quantity as integer ) as quantity\n    , cast(quantity_unit as TEXT ) as quantity_unit\n    , cast(days_supply as integer ) as days_supply\n    , cast(practitioner_id as TEXT ) as practitioner_id\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-21 14:30:54.308435+00:00' as timestamp ) as tuva_last_run\nfrom \"synthea\".\"tuva_input\".\"medication\"", "relation_name": "\"synthea\".\"core\".\"_stg_clinical_medication\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:31:00.400313Z", "completed_at": "2024-02-21T14:31:00.409474Z"}, {"name": "execute", "started_at": "2024-02-21T14:31:00.412146Z", "completed_at": "2024-02-21T14:31:00.480542Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.09823107719421387, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_patient", "compiled": true, "compiled_code": "\n\nselect\n    cast(patient_id as TEXT ) as patient_id\n    , cast(first_name as TEXT ) as first_name\n    , cast(last_name as TEXT ) as last_name\n    , cast(sex as TEXT ) as sex\n    , cast(race as TEXT ) as race\n    , try_cast( birth_date as date ) as birth_date\n    , try_cast( death_date as date ) as death_date\n    , cast(death_flag as integer ) as death_flag\n    , cast(address as TEXT ) as address\n    , cast(city as TEXT ) as city\n    , cast(state as TEXT ) as state\n    , cast(zip_code as TEXT ) as zip_code\n    , cast(county as TEXT ) as county\n    , cast(latitude as float ) as latitude\n    , cast(longitude as float ) as longitude\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-21 14:30:54.308435+00:00' as timestamp ) as tuva_last_run\nfrom \"synthea\".\"tuva_input\".\"patient\"", "relation_name": "\"synthea\".\"core\".\"_stg_clinical_patient\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:31:00.427928Z", "completed_at": "2024-02-21T14:31:00.437523Z"}, {"name": "execute", "started_at": "2024-02-21T14:31:00.438742Z", "completed_at": "2024-02-21T14:31:00.513467Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.09096813201904297, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_observation", "compiled": true, "compiled_code": "\n\n\nselect\n    cast(observation_id as TEXT ) as observation_id\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_id as TEXT ) as encounter_id\n    , cast(panel_id as TEXT ) as panel_id\n    , try_cast( observation_date as date ) as observation_date\n    , cast(observation_type as TEXT ) as observation_type\n    , cast(source_code_type as TEXT ) as source_code_type\n    , cast(source_code as TEXT ) as source_code\n    , cast(source_description as TEXT ) as source_description\n    , cast(normalized_code_type as TEXT ) as normalized_code_type\n    , cast(normalized_code as TEXT ) as normalized_code\n    , cast(normalized_description as TEXT ) as normalized_description\n    , cast(result as TEXT ) as result\n    , cast(source_units as TEXT ) as source_units\n    , cast(normalized_units as TEXT ) as normalized_units\n    , cast(source_reference_range_low as TEXT ) as source_reference_range_low\n    , cast(source_reference_range_high as TEXT ) as source_reference_range_high\n    , cast(normalized_reference_range_low as TEXT ) as normalized_reference_range_low\n    , cast(normalized_reference_range_high as TEXT ) as normalized_reference_range_high\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-21 14:30:54.308435+00:00' as timestamp ) as tuva_last_run\nfrom \"synthea\".\"tuva_input\".\"observation\"", "relation_name": "\"synthea\".\"core\".\"_stg_clinical_observation\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:31:00.494934Z", "completed_at": "2024-02-21T14:31:00.506594Z"}, {"name": "execute", "started_at": "2024-02-21T14:31:00.509336Z", "completed_at": "2024-02-21T14:31:00.626610Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.14049172401428223, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_practitioner", "compiled": true, "compiled_code": "\n\nselect\n    cast(practitioner_id as TEXT ) as practitioner_id\n    , cast(npi as TEXT ) as npi\n    , cast(first_name as TEXT ) as first_name\n    , cast(last_name as TEXT ) as last_name\n    , cast(practice_affiliation as TEXT ) as practice_affiliation\n    , cast(specialty as TEXT ) as specialty\n    , cast(sub_specialty as TEXT ) as sub_specialty\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-21 14:30:54.308435+00:00' as timestamp ) as tuva_last_run\nfrom \"synthea\".\"tuva_input\".\"practitioner\"", "relation_name": "\"synthea\".\"core\".\"_stg_clinical_practitioner\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:31:00.533253Z", "completed_at": "2024-02-21T14:31:00.559417Z"}, {"name": "execute", "started_at": "2024-02-21T14:31:00.562834Z", "completed_at": "2024-02-21T14:31:00.648588Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13390135765075684, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__stg_clinical_procedure", "compiled": true, "compiled_code": "\n\nselect\n    cast(procedure_id as TEXT ) as procedure_id \n    , cast(patient_id as TEXT ) as patient_id\n    , cast(encounter_id as TEXT ) as encounter_id\n    , cast(claim_id as TEXT ) as claim_id\n    , try_cast( procedure_date as date ) as procedure_date\n    , cast(source_code_type as TEXT ) as source_code_type\n    , cast(source_code as TEXT ) as source_code\n    , cast(source_description as TEXT ) as source_description\n    , cast(normalized_code_type as TEXT ) as normalized_code_type\n    , cast(normalized_code as TEXT ) as normalized_code\n    , cast(normalized_description as TEXT ) as normalized_description\n    , cast(modifier_1 as TEXT ) as modifier_1\n    , cast(modifier_2 as TEXT ) as modifier_2\n    , cast(modifier_3 as TEXT ) as modifier_3\n    , cast(modifier_4 as TEXT ) as modifier_4\n    , cast(modifier_5 as TEXT ) as modifier_5\n    , cast(practitioner_id as TEXT ) as practitioner_id\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-21 14:30:54.308435+00:00' as timestamp ) as tuva_last_run\nfrom \"synthea\".\"tuva_input\".\"procedure\"", "relation_name": "\"synthea\".\"core\".\"_stg_clinical_procedure\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:31:00.572545Z", "completed_at": "2024-02-21T14:31:00.590612Z"}, {"name": "execute", "started_at": "2024-02-21T14:31:00.598659Z", "completed_at": "2024-02-21T14:31:00.940997Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3841991424560547, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_eligibility as (\n\n\n\nselect\n      patient_id\n    , patient_id||data_source||payer||plan||enrollment_start_date||enrollment_end_date as patient_id_key\n    , member_id\n    , gender\n    , race\n    , birth_date\n    , death_date\n    , death_flag\n    , enrollment_start_date\n    , enrollment_end_date\n    , payer\n    , payer_type\n    , plan\n    , original_reason_entitlement_code\n    , dual_status_code\n    , medicare_status_code\n    , first_name\n    , last_name\n    , address\n    , city\n    , state\n    , zip_code\n    , phone\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"eligibility\"\n) select distinct\n  elig.patient_id\n  , elig.patient_id||elig.data_source||elig.payer||elig.plan||elig.enrollment_start_date||elig.enrollment_end_date as patient_id_key\n  , cal_dob.full_date as normalized_birth_date\n  , cal_death.full_date as normalized_death_date\n  , cal_enroll_start.full_date as normalized_enrollment_start_date\n  , cal_enroll_end.full_date as normalized_enrollment_end_date\n  , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_eligibility elig\nleft join \"synthea\".\"terminology\".\"calendar\" cal_dob\n    on elig.birth_date = cal_dob.full_date\nleft join \"synthea\".\"terminology\".\"calendar\" cal_death\n    on elig.death_date = cal_death.full_date\nleft join \"synthea\".\"terminology\".\"calendar\" cal_enroll_start\n    on elig.enrollment_start_date = cal_enroll_start.full_date\nleft join \"synthea\".\"terminology\".\"calendar\" cal_enroll_end\n    on elig.enrollment_end_date = cal_enroll_end.full_date", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_eligibility_dates_normalize\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:31:01.023674Z", "completed_at": "2024-02-21T14:31:01.032783Z"}, {"name": "execute", "started_at": "2024-02-21T14:31:01.036225Z", "completed_at": "2024-02-21T14:31:01.822348Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.8209292888641357, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__lab_result", "compiled": true, "compiled_code": "\n\nselect * from \"synthea\".\"core\".\"_stg_clinical_lab_result\"", "relation_name": "\"synthea\".\"core\".\"lab_result\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:31:01.870576Z", "completed_at": "2024-02-21T14:31:01.891268Z"}, {"name": "execute", "started_at": "2024-02-21T14:31:01.895026Z", "completed_at": "2024-02-21T14:31:02.839099Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.9877550601959229, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__observation", "compiled": true, "compiled_code": "\n\n\nselect * from \"synthea\".\"core\".\"_stg_clinical_observation\"", "relation_name": "\"synthea\".\"core\".\"observation\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:31:02.853745Z", "completed_at": "2024-02-21T14:31:02.901083Z"}, {"name": "execute", "started_at": "2024-02-21T14:31:02.905595Z", "completed_at": "2024-02-21T14:31:04.647939Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.8149113655090332, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__eligibility", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_eligibility as (\n\n\n\nselect\n      patient_id\n    , patient_id||data_source||payer||plan||enrollment_start_date||enrollment_end_date as patient_id_key\n    , member_id\n    , gender\n    , race\n    , birth_date\n    , death_date\n    , death_flag\n    , enrollment_start_date\n    , enrollment_end_date\n    , payer\n    , payer_type\n    , plan\n    , original_reason_entitlement_code\n    , dual_status_code\n    , medicare_status_code\n    , first_name\n    , last_name\n    , address\n    , city\n    , state\n    , zip_code\n    , phone\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"eligibility\"\n) select\n    cast(elig.patient_id as TEXT ) as patient_id\n    , cast(elig.member_id as TEXT ) as member_id\n    , cast(elig.gender as TEXT ) as gender\n    , cast(elig.race as TEXT ) as race\n    , cast(date_norm.normalized_birth_date as date ) as birth_date\n    , cast(date_norm.normalized_death_date as date ) as death_date\n    , cast(elig.death_flag as int ) as death_flag\n    , cast(date_norm.normalized_enrollment_start_date as date ) as enrollment_start_date\n    , cast(date_norm.normalized_enrollment_end_date as date ) as enrollment_end_date\n    , cast(elig.payer as TEXT ) as payer\n    , cast(elig.payer_type as TEXT ) as payer_type\n    , cast(elig.plan as TEXT ) as plan\n    , cast(elig.original_reason_entitlement_code as TEXT ) as original_reason_entitlement_code\n    , cast(elig.dual_status_code as TEXT ) as dual_status_code\n    , cast(elig.medicare_status_code as TEXT ) as medicare_status_code\n    , cast(elig.first_name as TEXT ) as first_name\n    , cast(elig.last_name as TEXT ) as last_name\n    , cast(elig.address as TEXT ) as address\n    , cast(elig.city as TEXT ) as city\n    , cast(elig.state as TEXT ) as state\n    , cast(elig.zip_code as TEXT ) as zip_code\n    , cast(elig.phone as TEXT ) as phone\n    , cast(elig.data_source as TEXT ) as data_source\n    , cast('2024-02-21 14:30:54.308435+00:00'  as TEXT ) as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_eligibility elig\nleft join \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_eligibility_dates_normalize\" date_norm\n    on elig.patient_id_key = date_norm.patient_id_key", "relation_name": "\"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:31:01.054430Z", "completed_at": "2024-02-21T14:31:01.077519Z"}, {"name": "execute", "started_at": "2024-02-21T14:31:01.083662Z", "completed_at": "2024-02-21T14:31:06.716287Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 5.67106556892395, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__pharmacy_claim", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_pharmacy_claim as (\n\n\n\nselect\n      claim_id\n    , claim_line_number\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , prescribing_provider_npi\n    , dispensing_provider_npi\n    , dispensing_date\n    , ndc_code\n    , quantity\n    , days_supply\n    , refills\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"pharmacy_claim\"\n) select\n      cast(claim_id as TEXT ) as claim_id\n    , cast(claim_line_number as int ) as claim_line_number\n    , cast(patient_id as TEXT ) as patient_id\n    , cast(member_id as TEXT ) as member_id\n    , cast(payer as TEXT ) as payer\n    , cast(plan as TEXT ) as plan\n    , cast(prescribing_provider_npi as TEXT ) as prescribing_provider_npi\n    , cast(dispensing_provider_npi as TEXT ) as dispensing_provider_npi\n    , cast(dispensing_date as date ) as dispensing_date\n    , cast(ndc_code as TEXT ) as ndc_code\n    , cast(quantity as int ) as quantity\n    , cast(days_supply as int ) as days_supply\n    , cast(refills as int ) as refills\n    , cast(paid_date as date ) as paid_date\n    , cast(paid_amount as numeric(28,6) ) as paid_amount\n    , cast(allowed_amount as numeric(28,6) ) as allowed_amount\n    , cast(coinsurance_amount as numeric(28,6) ) as coinsurance_amount\n    , cast(copayment_amount as numeric(28,6) ) as copayment_amount\n    , cast(deductible_amount as numeric(28,6) ) as deductible_amount\n    , cast(data_source as TEXT ) as data_source\n    , cast('2024-02-21 14:30:54.308435+00:00' as TEXT ) as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_pharmacy_claim", "relation_name": "\"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:31:06.732176Z", "completed_at": "2024-02-21T14:31:06.771410Z"}, {"name": "execute", "started_at": "2024-02-21T14:31:06.780469Z", "completed_at": "2024-02-21T14:31:07.726484Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.014695167541504, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_admit_type_voting", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n), normalize as(\n    select \n        med.claim_id\n        , med.data_source\n        , admit.admit_type_code\n    from __dbt__cte__normalized_input__stg_medical_claim med\n    inner join \"synthea\".\"terminology\".\"admit_type\" admit\n        on med.admit_type_code = admit.admit_type_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , admit_type_code\n        , count(*) as admit_type_occurrence_count\n    from normalize\n    where admit_type_code is not null\n    group by \n        claim_id\n        , data_source\n        , admit_type_code\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'admit_type_code' as column_name\n        , admit_type_code as normalized_code\n        , admit_type_occurrence_count as occurrence_count\n        , coalesce(lead(admit_type_occurrence_count) \n            over (partition by claim_id, data_source order by admit_type_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by admit_type_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom occurence_comparison", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_admit_type_normalize_voting\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:31:01.028970Z", "completed_at": "2024-02-21T14:31:01.034670Z"}, {"name": "execute", "started_at": "2024-02-21T14:31:01.043288Z", "completed_at": "2024-02-21T14:31:14.306374Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 13.290801525115967, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.core__medication", "compiled": true, "compiled_code": "\n\n\nselect * from \"synthea\".\"core\".\"_stg_clinical_medication\"", "relation_name": "\"synthea\".\"core\".\"medication\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:31:04.698579Z", "completed_at": "2024-02-21T14:31:04.821835Z"}, {"name": "execute", "started_at": "2024-02-21T14:31:04.849060Z", "completed_at": "2024-02-21T14:33:20.736562Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 136.04702281951904, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_admit_source_voting", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n), normalize as(\n    select \n        med.claim_id\n        , med.data_source\n        , admit.admit_source_code\n    from __dbt__cte__normalized_input__stg_medical_claim med\n    inner join \"synthea\".\"terminology\".\"admit_source\" admit\n        on med.admit_source_code = admit.admit_source_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , admit_source_code\n        , count(*) as admit_source_occurrence_count\n    from normalize\n    where admit_source_code is not null\n    group by \n        claim_id\n        , data_source\n        , admit_source_code\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'admit_source_code' as column_name\n        , admit_source_code as normalized_code\n        , admit_source_occurrence_count as occurrence_count\n        , coalesce(lead(admit_source_occurrence_count) \n            over (partition by claim_id, data_source order by admit_source_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by admit_source_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom occurence_comparison", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_admit_source_voting\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:31:14.318907Z", "completed_at": "2024-02-21T14:31:14.334920Z"}, {"name": "execute", "started_at": "2024-02-21T14:31:14.336199Z", "completed_at": "2024-02-21T14:33:20.738467Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 126.42937660217285, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_bill_type_voting", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n), normalize as(\n    select \n        med.claim_id\n        , med.data_source\n        , bill.bill_type_code\n    from __dbt__cte__normalized_input__stg_medical_claim med\n    inner join \"synthea\".\"terminology\".\"bill_type\" bill\n        on med.bill_type_code = bill.bill_type_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , bill_type_code\n        , count(*) as bill_type_occurrence_count\n    from normalize\n    where bill_type_code is not null\n    group by \n        claim_id\n        , data_source\n        , bill_type_code\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'bill_type_code' as column_name\n        , bill_type_code as normalized_code\n        , bill_type_occurrence_count as occurrence_count\n        , coalesce(lead(bill_type_occurrence_count) \n            over (partition by claim_id, data_source order by bill_type_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by bill_type_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom occurence_comparison", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_bill_type_voting\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:31:07.766095Z", "completed_at": "2024-02-21T14:31:07.812031Z"}, {"name": "execute", "started_at": "2024-02-21T14:31:07.820560Z", "completed_at": "2024-02-21T14:33:20.739631Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 132.98394131660461, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_apr_drg_voting", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n), normalize as(\n    select \n        med.claim_id\n        , med.data_source\n        , apr.apr_drg_code\n    from __dbt__cte__normalized_input__stg_medical_claim med\n    inner join \"synthea\".\"terminology\".\"apr_drg\" apr\n        on med.apr_drg_code = apr.apr_drg_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , apr_drg_code\n        , count(*) as apr_drg_occurrence_count\n    from normalize\n    where apr_drg_code is not null\n    group by \n        claim_id\n        , data_source\n        , apr_drg_code\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'apr_drg_code' as column_name\n        , apr_drg_code as normalized_code\n        , apr_drg_occurrence_count as occurrence_count\n        , coalesce(lead(apr_drg_occurrence_count) \n            over (partition by claim_id, data_source order by apr_drg_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by apr_drg_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom occurence_comparison", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_apr_drg_voting\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:30:59.773311Z", "completed_at": "2024-02-21T14:30:59.845599Z"}, {"name": "execute", "started_at": "2024-02-21T14:30:59.851559Z", "completed_at": "2024-02-21T14:33:20.741724Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 546.4579522609711, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.medical_claim_expanded", "compiled": true, "compiled_code": "\n\n\nselect *\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"", "relation_name": "\"synthea\".\"claims_expanded\".\"medical_claim_expanded\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:40:06.270767Z", "completed_at": "2024-02-21T14:40:06.289035Z"}, {"name": "execute", "started_at": "2024-02-21T14:40:06.299961Z", "completed_at": "2024-02-21T14:41:36.728487Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 90.51222658157349, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n) select distinct\n  med.claim_id\n  , med.claim_line_number\n  , med.claim_type\n  , med.data_source\n  , cal_claim_start.full_date as normalized_claim_start_date\n  , cal_claim_end.full_date as normalized_claim_end_date\n  , cal_claim_line_start.full_date as normalized_claim_line_start_date\n  , cal_claim_line_end.full_date as normalized_claim_line_end_date\n  , cal_admission.full_date as normalized_admission_date\n  , cal_discharge.full_date as normalized_discharge_date\n  , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_medical_claim med\nleft join \"synthea\".\"terminology\".\"calendar\" cal_claim_start\n    on med.claim_start_date = cal_claim_start.full_date\nleft join \"synthea\".\"terminology\".\"calendar\" cal_claim_end\n    on med.claim_end_Date = cal_claim_end.full_date\nleft join \"synthea\".\"terminology\".\"calendar\" cal_claim_line_start\n    on med.claim_line_start_date = cal_claim_line_start.full_date\nleft join \"synthea\".\"terminology\".\"calendar\" cal_claim_line_end\n    on med.claim_line_end_date = cal_claim_line_end.full_date\nleft join \"synthea\".\"terminology\".\"calendar\" cal_admission\n    on med.admission_date = cal_admission.full_date\nleft join \"synthea\".\"terminology\".\"calendar\" cal_discharge\n    on med.discharge_date = cal_discharge.full_date", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_medical_claim_date_normalize\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:40:06.260338Z", "completed_at": "2024-02-21T14:40:06.287740Z"}, {"name": "execute", "started_at": "2024-02-21T14:40:06.291488Z", "completed_at": "2024-02-21T14:41:36.730360Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 90.51591110229492, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_discharge_disposition_voting", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n), normalize as(\n    select \n        med.claim_id\n        , med.data_source\n        , disch.discharge_disposition_code\n    from __dbt__cte__normalized_input__stg_medical_claim med\n    inner join \"synthea\".\"terminology\".\"discharge_disposition\" disch\n        on med.discharge_disposition_code = disch.discharge_disposition_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , discharge_disposition_code\n        , count(*) as discharge_disposition_occurrence_count\n    from normalize\n    where discharge_disposition_code is not null\n    group by \n        claim_id\n        , data_source\n        , discharge_disposition_code\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'discharge_disposition_code' as column_name\n        , discharge_disposition_code as normalized_code\n        , discharge_disposition_occurrence_count as occurrence_count\n        , coalesce(lead(discharge_disposition_occurrence_count) \n            over (partition by claim_id, data_source order by discharge_disposition_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by discharge_disposition_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom occurence_comparison", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_discharge_disposition_voting\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:40:06.278125Z", "completed_at": "2024-02-21T14:40:06.289926Z"}, {"name": "execute", "started_at": "2024-02-21T14:40:06.303699Z", "completed_at": "2024-02-21T14:41:36.735653Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 90.51909112930298, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_medical_npi_normalize", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n) select distinct\n  med.claim_id\n  , med.claim_line_number\n  , med.claim_type\n  , med.data_source\n  , rend_prov.npi as normalized_rendering_npi\n  , bill_prov.npi as normalized_billing_npi\n  , fac_prov.npi as normalized_facility_npi\n  , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_medical_claim med\nleft join \"synthea\".\"terminology\".\"provider\" rend_prov\n    on med.rendering_npi = rend_prov.npi\n    and rend_prov.entity_type_description = 'Individual'\nleft join \"synthea\".\"terminology\".\"provider\" bill_prov\n    on med.billing_npi = bill_prov.npi\nleft join \"synthea\".\"terminology\".\"provider\" fac_prov\n    on med.facility_npi = fac_prov.npi\n    and fac_prov.entity_type_description = 'Organization'\n    and med.claim_type = 'institutional'", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_medical_npi_normalize\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:41:36.751655Z", "completed_at": "2024-02-21T14:41:36.807561Z"}, {"name": "execute", "started_at": "2024-02-21T14:41:36.810181Z", "completed_at": "2024-02-21T14:42:10.002188Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 33.25673747062683, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_ms_drg_voting", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n), normalize as(\n    select \n        med.claim_id\n        , med.data_source\n        , ms.ms_drg_code\n    from __dbt__cte__normalized_input__stg_medical_claim med\n    inner join \"synthea\".\"terminology\".\"ms_drg\" ms\n        on med.ms_drg_code = ms.ms_drg_code\n    where claim_type = 'institutional'\n)\n, distinct_counts as(\n    select \n        claim_id\n        , data_source\n        , ms_drg_code\n        , count(*) as ms_drg_occurrence_count\n    from normalize\n    where ms_drg_code is not null\n    group by \n        claim_id\n        , data_source\n        , ms_drg_code\n)\n\n, occurence_comparison as(\n    select\n        claim_id\n        , data_source\n        , 'ms_drg_code' as column_name\n        , ms_drg_code as normalized_code\n        , ms_drg_occurrence_count as occurrence_count\n        , coalesce(lead(ms_drg_occurrence_count) \n            over (partition by claim_id, data_source order by ms_drg_occurrence_count desc),0) as next_occurrence_count\n        , row_number() over (partition by claim_id, data_source order by ms_drg_occurrence_count desc) as occurrence_row_count\n    from distinct_counts dist\n)\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom occurence_comparison", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_ms_drg_voting\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T14:41:36.767586Z", "completed_at": "2024-02-21T14:41:36.808265Z"}, {"name": "execute", "started_at": "2024-02-21T14:41:36.815708Z", "completed_at": "2024-02-21T14:42:10.008066Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 33.26162838935852, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_place_of_service_normalize", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n) select\n    claim_id\n    , claim_line_number\n    , data_source\n    , pos.place_of_service_code as normalized_code\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_medical_claim med\nleft join \"synthea\".\"terminology\".\"place_of_service\" pos\n    on lpad(med.place_of_service_code, 2, '0') = pos.place_of_service_code\nwhere claim_type = 'professional'", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_place_of_service_normalize\""}, {"status": "error", "timing": [{"name": "compile", "started_at": "2024-02-21T14:40:06.224224Z", "completed_at": "2024-02-21T14:40:06.288642Z"}, {"name": "execute", "started_at": "2024-02-21T14:40:06.296488Z", "completed_at": "2024-02-21T15:17:07.319237Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2734.8579149246216, "adapter_response": {}, "message": "Runtime Error in model normalized_input__int_diagnosis_code_normalize (models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_diagnosis_code_normalize.sql)\n  Out of Memory Error: failed to pin block of size 262KB (53.8GB/53.8GB used)", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_diagnosis_code_normalize", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n), pivot_diagnosis as(\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_1'  as diagnosis_column\n        ,  diagnosis_code_1  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_2'  as diagnosis_column\n        ,  diagnosis_code_2  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_3'  as diagnosis_column\n        ,  diagnosis_code_3  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_4'  as diagnosis_column\n        ,  diagnosis_code_4  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_5'  as diagnosis_column\n        ,  diagnosis_code_5  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_6'  as diagnosis_column\n        ,  diagnosis_code_6  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_7'  as diagnosis_column\n        ,  diagnosis_code_7  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_8'  as diagnosis_column\n        ,  diagnosis_code_8  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_9'  as diagnosis_column\n        ,  diagnosis_code_9  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_10'  as diagnosis_column\n        ,  diagnosis_code_10  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_11'  as diagnosis_column\n        ,  diagnosis_code_11  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_12'  as diagnosis_column\n        ,  diagnosis_code_12  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_13'  as diagnosis_column\n        ,  diagnosis_code_13  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_14'  as diagnosis_column\n        ,  diagnosis_code_14  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_15'  as diagnosis_column\n        ,  diagnosis_code_15  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_16'  as diagnosis_column\n        ,  diagnosis_code_16  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_17'  as diagnosis_column\n        ,  diagnosis_code_17  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_18'  as diagnosis_column\n        ,  diagnosis_code_18  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_19'  as diagnosis_column\n        ,  diagnosis_code_19  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_20'  as diagnosis_column\n        ,  diagnosis_code_20  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_21'  as diagnosis_column\n        ,  diagnosis_code_21  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_22'  as diagnosis_column\n        ,  diagnosis_code_22  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_23'  as diagnosis_column\n        ,  diagnosis_code_24  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_24'  as diagnosis_column\n        ,  diagnosis_code_24  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , diagnosis_code_type\n        , 'diagnosis_code_25'  as diagnosis_column\n        ,  diagnosis_code_25  as diagnosis_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n)\n\nselect\n    claim_id\n    , data_source\n    , diagnosis_code_type\n    , diagnosis_column\n    , coalesce(icd_9.icd_9_cm,icd_10.icd_10_cm) as normalized_diagnosis_code\n    , count(*) as diagnosis_code_occurrence_count\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom pivot_diagnosis piv\nleft join \"synthea\".\"terminology\".\"icd_10_cm\" icd_10\n    on replace(piv.diagnosis_code,'.','') = icd_10.icd_10_cm\n    and piv.diagnosis_code_type = 'icd-10-cm'\nleft join \"synthea\".\"terminology\".\"icd_9_cm\" icd_9\n    on replace(piv.diagnosis_code,'.','') = icd_9.icd_9_cm\n    and piv.diagnosis_code_type = 'icd-9-cm'\nwhere claim_type <> 'undetermined'\ngroup by \n    claim_id\n    , data_source\n    , diagnosis_code_type\n    , diagnosis_column\n    , coalesce(icd_9.icd_9_cm,icd_10.icd_10_cm)", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_diagnosis_code_normalize\""}, {"status": "error", "timing": [{"name": "compile", "started_at": "2024-02-21T14:41:36.776512Z", "completed_at": "2024-02-21T14:41:36.809836Z"}, {"name": "execute", "started_at": "2024-02-21T14:41:36.820849Z", "completed_at": "2024-02-21T15:17:07.253062Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2644.331486225128, "adapter_response": {}, "message": "Runtime Error in model normalized_input__int_present_on_admit_normalize (models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_present_on_admit_normalize.sql)\n  Out of Memory Error: failed to allocate data of size 1.0MB (53.8GB/53.8GB used)", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_present_on_admit_normalize", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n), pivot_poa as(\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_1'  as diagnosis_column\n        ,  diagnosis_poa_1  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_2'  as diagnosis_column\n        ,  diagnosis_poa_2  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_3'  as diagnosis_column\n        ,  diagnosis_poa_3  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_4'  as diagnosis_column\n        ,  diagnosis_poa_4  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_5'  as diagnosis_column\n        ,  diagnosis_poa_5  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_6'  as diagnosis_column\n        ,  diagnosis_poa_6  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_7'  as diagnosis_column\n        ,  diagnosis_poa_7  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_8'  as diagnosis_column\n        ,  diagnosis_poa_8  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_9'  as diagnosis_column\n        ,  diagnosis_poa_9  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_10'  as diagnosis_column\n        ,  diagnosis_poa_10  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_11'  as diagnosis_column\n        ,  diagnosis_poa_11  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_12'  as diagnosis_column\n        ,  diagnosis_poa_12  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_13'  as diagnosis_column\n        ,  diagnosis_poa_13  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_14'  as diagnosis_column\n        ,  diagnosis_poa_14  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_15'  as diagnosis_column\n        ,  diagnosis_poa_15  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_16'  as diagnosis_column\n        ,  diagnosis_poa_16  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_17'  as diagnosis_column\n        ,  diagnosis_poa_17  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_18'  as diagnosis_column\n        ,  diagnosis_poa_18  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_19'  as diagnosis_column\n        ,  diagnosis_poa_19  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_20'  as diagnosis_column\n        ,  diagnosis_poa_20  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_21'  as diagnosis_column\n        ,  diagnosis_poa_21  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_22'  as diagnosis_column\n        ,  diagnosis_poa_22  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_23'  as diagnosis_column\n        ,  diagnosis_poa_24  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_24'  as diagnosis_column\n        ,  diagnosis_poa_24  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'diagnosis_poa_25'  as diagnosis_column\n        ,  diagnosis_poa_25  as present_on_admit_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n)\n\nselect\n    claim_id\n    , data_source\n    , diagnosis_column\n    , poa.present_on_admit_code as normalized_present_on_admit_code\n    , count(*) as present_on_admit_occurrence_count\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom pivot_poa piv\nleft join \"synthea\".\"terminology\".\"present_on_admission\" poa\n    on replace(piv.present_on_admit_code,'.','') = poa.present_on_admit_code\nwhere claim_type = 'institutional'\ngroup by \n    claim_id\n    , data_source\n    , diagnosis_column\n    , poa.present_on_admit_code", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_present_on_admit_normalize\""}, {"status": "error", "timing": [{"name": "compile", "started_at": "2024-02-21T14:42:10.056963Z", "completed_at": "2024-02-21T14:42:10.095808Z"}, {"name": "execute", "started_at": "2024-02-21T14:42:10.097084Z", "completed_at": "2024-02-21T15:17:07.324389Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2611.055552959442, "adapter_response": {}, "message": "Runtime Error in model normalized_input__int_procedure_date_normalize (models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_procedure_date_normalize.sql)\n  Out of Memory Error: failed to pin block of size 262KB (53.8GB/53.8GB used)", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_procedure_date_normalize", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n), pivot_procedure as(\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_1'  as procedure_column\n        ,  procedure_date_1  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_2'  as procedure_column\n        ,  procedure_date_2  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_3'  as procedure_column\n        ,  procedure_date_3  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_4'  as procedure_column\n        ,  procedure_date_4  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_5'  as procedure_column\n        ,  procedure_date_5  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_6'  as procedure_column\n        ,  procedure_date_6  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_7'  as procedure_column\n        ,  procedure_date_7  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_8'  as procedure_column\n        ,  procedure_date_8  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_9'  as procedure_column\n        ,  procedure_date_9  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_10'  as procedure_column\n        ,  procedure_date_10  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_11'  as procedure_column\n        ,  procedure_date_11  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_12'  as procedure_column\n        ,  procedure_date_12  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_13'  as procedure_column\n        ,  procedure_date_13  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_14'  as procedure_column\n        ,  procedure_date_14  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_15'  as procedure_column\n        ,  procedure_date_15  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_16'  as procedure_column\n        ,  procedure_date_16  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_17'  as procedure_column\n        ,  procedure_date_17  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_18'  as procedure_column\n        ,  procedure_date_18  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_19'  as procedure_column\n        ,  procedure_date_19  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_20'  as procedure_column\n        ,  procedure_date_20  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_21'  as procedure_column\n        ,  procedure_date_21  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_22'  as procedure_column\n        ,  procedure_date_22  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_23'  as procedure_column\n        ,  procedure_date_24  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_24'  as procedure_column\n        ,  procedure_date_24  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , 'procedure_date_25'  as procedure_column\n        ,  procedure_date_25  as procedure_date\n    from __dbt__cte__normalized_input__stg_medical_claim\n)\n\nselect\n    claim_id\n    , data_source\n    , procedure_column\n    , cal.full_date as procedure_date\n    , count(*) as procedure_date_occurrence_count\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom pivot_procedure piv\nleft join \"synthea\".\"terminology\".\"calendar\" cal\n    on piv.procedure_date = cal.full_date\nwhere claim_type = 'institutional'\ngroup by \n    claim_id\n    , data_source\n    , procedure_column\n    , cal.full_date", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_procedure_date_normalize\""}, {"status": "error", "timing": [{"name": "compile", "started_at": "2024-02-21T14:42:10.015840Z", "completed_at": "2024-02-21T14:42:10.083407Z"}, {"name": "execute", "started_at": "2024-02-21T14:42:10.089934Z", "completed_at": "2024-02-21T15:17:07.347401Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2611.090240955353, "adapter_response": {}, "message": "Runtime Error in model normalized_input__int_procedure_code_normalize (models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_procedure_code_normalize.sql)\n  Out of Memory Error: failed to allocate data of size 16KB (53.8GB/53.8GB used)", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_procedure_code_normalize", "compiled": true, "compiled_code": "\n\n\nwith  __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n), pivot_procedure as(\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_1'  as procedure_column\n        ,  procedure_code_1  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_2'  as procedure_column\n        ,  procedure_code_2  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_3'  as procedure_column\n        ,  procedure_code_3  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_4'  as procedure_column\n        ,  procedure_code_4  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_5'  as procedure_column\n        ,  procedure_code_5  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_6'  as procedure_column\n        ,  procedure_code_6  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_7'  as procedure_column\n        ,  procedure_code_7  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_8'  as procedure_column\n        ,  procedure_code_8  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_9'  as procedure_column\n        ,  procedure_code_9  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_10'  as procedure_column\n        ,  procedure_code_10  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_11'  as procedure_column\n        ,  procedure_code_11  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_12'  as procedure_column\n        ,  procedure_code_12  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_13'  as procedure_column\n        ,  procedure_code_13  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_14'  as procedure_column\n        ,  procedure_code_14  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_15'  as procedure_column\n        ,  procedure_code_15  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_16'  as procedure_column\n        ,  procedure_code_16  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_17'  as procedure_column\n        ,  procedure_code_17  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_18'  as procedure_column\n        ,  procedure_code_18  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_19'  as procedure_column\n        ,  procedure_code_19  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_20'  as procedure_column\n        ,  procedure_code_20  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_21'  as procedure_column\n        ,  procedure_code_21  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_22'  as procedure_column\n        ,  procedure_code_22  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_23'  as procedure_column\n        ,  procedure_code_24  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_24'  as procedure_column\n        ,  procedure_code_24  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n\n    union all\n\n    select\n        claim_id\n        , claim_type\n        , data_source\n        , procedure_code_type\n        , 'procedure_code_25'  as procedure_column\n        ,  procedure_code_25  as procedure_code\n    from __dbt__cte__normalized_input__stg_medical_claim\n)\n\nselect\n    claim_id\n    , data_source\n    , procedure_code_type\n    , procedure_column\n    , coalesce(icd_9.icd_9_pcs,icd_10.icd_10_pcs) as normalized_procedure_code\n    , count(*) as procedure_code_occurrence_count\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom pivot_procedure piv\nleft join \"synthea\".\"terminology\".\"icd_10_pcs\" icd_10\n    on replace(piv.procedure_code,'.','') = icd_10.icd_10_pcs\n    and piv.procedure_code_type = 'icd-10-pcs'\nleft join \"synthea\".\"terminology\".\"icd_9_pcs\" icd_9\n    on replace(piv.procedure_code,'.','') = icd_9.icd_9_pcs\n    and piv.procedure_code_type = 'icd-9-pcs'\nwhere claim_type = 'institutional'\ngroup by \n    claim_id\n    , data_source\n    , procedure_code_type\n    , procedure_column\n    , coalesce(icd_9.icd_9_pcs,icd_10.icd_10_pcs)", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_procedure_code_normalize\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T15:25:41.639293Z", "completed_at": "2024-02-21T15:25:41.682257Z"}, {"name": "execute", "started_at": "2024-02-21T15:25:41.683947Z", "completed_at": "2024-02-21T15:25:41.774347Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.14387917518615723, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates", "compiled": true, "compiled_code": "\n\nwith eligibility as (\n\n    select\n          patient_id\n        , member_id\n        , payer\n        , plan\n        , enrollment_start_date\n        , enrollment_end_date\n        , data_source\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\nselect distinct\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'patient_id' as grain\n    , patient_id\n    , data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom eligibility\n     left join test_catalog\n       on test_catalog.test_name = 'duplicate eligibility'\n       and test_catalog.source_table = 'normalized_input__eligibility'\ngroup by\n      eligibility.patient_id\n    , eligibility.member_id\n    , eligibility.payer\n    , eligibility.plan\n    , eligibility.enrollment_start_date\n    , eligibility.enrollment_end_date\n    , eligibility.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\nhaving count(*) > 1", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_eligibility_duplicates\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T15:25:41.485182Z", "completed_at": "2024-02-21T15:25:41.689420Z"}, {"name": "execute", "started_at": "2024-02-21T15:25:41.690803Z", "completed_at": "2024-02-21T15:25:41.776749Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3048539161682129, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators", "compiled": true, "compiled_code": "\n/*\n    Denominator logic for invalid value tests is dependent on whether that\n    specific field is populated or not. We created a macro to automatically\n    generate the CTE. All invalid value tests must have a\n    test_category = 'invalid_values' in the catalog seed.\n*/\nwith all_denominator as (\n\n    select\n        cast('all' as TEXT ) as test_denominator_name\n        , count(distinct patient_id) as denominator\n        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n\n)\n\n, invalid_value_denominators as (\n\n    select\n          cat.test_name\n        , count(distinct rel.patient_id) as denominator\n        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\" as rel\n         left join \"synthea\".\"data_quality\".\"_value_set_test_catalog\" as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__eligibility'\n           and cat.test_field = 'dual_status_code'\n    where rel.dual_status_code is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.patient_id) as denominator\n        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\" as rel\n         left join \"synthea\".\"data_quality\".\"_value_set_test_catalog\" as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__eligibility'\n           and cat.test_field = 'gender'\n    where rel.gender is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.patient_id) as denominator\n        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\" as rel\n         left join \"synthea\".\"data_quality\".\"_value_set_test_catalog\" as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__eligibility'\n           and cat.test_field = 'medicare_status_code'\n    where rel.medicare_status_code is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.patient_id) as denominator\n        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\" as rel\n         left join \"synthea\".\"data_quality\".\"_value_set_test_catalog\" as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__eligibility'\n           and cat.test_field = 'original_reason_entitlement_code'\n    where rel.original_reason_entitlement_code is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.patient_id) as denominator\n        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\" as rel\n         left join \"synthea\".\"data_quality\".\"_value_set_test_catalog\" as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__eligibility'\n           and cat.test_field = 'payer_type'\n    where rel.payer_type is not null\n    group by cat.test_name\n    union all\n    select\n          cat.test_name\n        , count(distinct rel.patient_id) as denominator\n        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\" as rel\n         left join \"synthea\".\"data_quality\".\"_value_set_test_catalog\" as cat\n           on cat.test_category = 'invalid_values'\n           and cat.source_table = 'normalized_input__eligibility'\n           and cat.test_field = 'race'\n    where rel.race is not null\n    group by cat.test_name\n    \n\n)\n\nselect * from all_denominator\nunion all\nselect * from invalid_value_denominators", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_eligibility_denominators\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T15:25:41.805988Z", "completed_at": "2024-02-21T15:25:41.824543Z"}, {"name": "execute", "started_at": "2024-02-21T15:25:41.825976Z", "completed_at": "2024-02-21T15:25:41.884818Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.09706306457519531, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values", "compiled": true, "compiled_code": "\n\nwith eligibility_missing as (\n\n \n        select\n              patient_id\n            , data_source\n            , 'patient_id' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where patient_id is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'member_id' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where member_id is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'gender' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where gender is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'race' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where race is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'birth_date' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where birth_date is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'death_date' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where death_date is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'death_flag' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where death_flag is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'enrollment_start_date' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where enrollment_start_date is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'enrollment_end_date' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where enrollment_end_date is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'payer' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where payer is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'payer_type' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where payer_type is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'dual_status_code' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where dual_status_code is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'medicare_status_code' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where medicare_status_code is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'first_name' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where first_name is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'last_name' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where last_name is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'address' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where address is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'city' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where city is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'state' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where state is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'zip_code' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where zip_code is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'phone' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where phone is null\n        union all\n        select\n              patient_id\n            , data_source\n            , 'data_source' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n        where data_source is null\n        \n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\nselect\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'patient_id' as grain\n    , eligibility_missing.patient_id\n    , eligibility_missing.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom eligibility_missing\n     left join test_catalog\n       on test_catalog.test_name = eligibility_missing.column_checked||' missing'\n       and test_catalog.source_table = 'normalized_input__eligibility'\ngroup by\n      eligibility_missing.patient_id\n    , eligibility_missing.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_eligibility_missing_values\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T15:25:41.790449Z", "completed_at": "2024-02-21T15:25:41.818252Z"}, {"name": "execute", "started_at": "2024-02-21T15:25:41.820065Z", "completed_at": "2024-02-21T15:25:41.888829Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.10399389266967773, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values", "compiled": true, "compiled_code": "\n\nwith eligiblity as (\n\n    select *\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\n, valid_gender as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.gender\n        , count(eligiblity.gender) as filled_row_count\n        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\n    from eligiblity\n         left join \"synthea\".\"terminology\".\"gender\" gender\n           on eligiblity.gender = gender.gender\n         left join test_catalog\n           on test_catalog.test_name = 'gender invalid'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    where gender.gender is null\n    and eligiblity.gender is not null\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.gender\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_race as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.race\n        , count(eligiblity.race) as filled_row_count\n        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\n    from eligiblity\n         left join \"synthea\".\"terminology\".\"race\" race\n           on eligiblity.race = race.description\n         left join test_catalog\n           on test_catalog.test_name = 'race invalid'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    where race.description is null\n    and eligiblity.race is not null\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.race\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_payer_type as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.payer_type\n        , count(eligiblity.payer_type) as filled_row_count\n        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\n    from eligiblity\n         left join \"synthea\".\"terminology\".\"payer_type\" payer\n           on eligiblity.payer_type = payer.payer_type\n         left join test_catalog\n           on test_catalog.test_name = 'payer_type invalid'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    where payer.payer_type is null\n    and eligiblity.payer_type is not null\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.payer_type\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_orec as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.original_reason_entitlement_code\n        , count(eligiblity.original_reason_entitlement_code) as filled_row_count\n        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\n    from eligiblity\n         left join \"synthea\".\"terminology\".\"medicare_orec\" orec\n           on eligiblity.original_reason_entitlement_code = orec.original_reason_entitlement_code\n         left join test_catalog\n           on test_catalog.test_name = 'original_reason_entitlement_code invalid'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    where orec.original_reason_entitlement_code is null\n    and eligiblity.original_reason_entitlement_code is not null\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.original_reason_entitlement_code\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_dual_status_code as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.dual_status_code\n        , count(eligiblity.dual_status_code) as filled_row_count\n        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\n    from eligiblity\n         left join \"synthea\".\"terminology\".\"medicare_dual_eligibility\" dual\n           on eligiblity.dual_status_code = dual.dual_status_code\n         left join test_catalog\n           on test_catalog.test_name = 'dual_status_code invalid'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    where dual.dual_status_code is null\n    and eligiblity.dual_status_code is not null\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.dual_status_code\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\n, valid_medicare_status_code as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.medicare_status_code\n        , count(eligiblity.medicare_status_code) as filled_row_count\n        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\n    from eligiblity\n         left join \"synthea\".\"terminology\".\"medicare_status\" status\n           on eligiblity.medicare_status_code = status.medicare_status_code\n         left join test_catalog\n           on test_catalog.test_name = 'medicare_status_code invalid'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    where status.medicare_status_code is null\n    and eligiblity.medicare_status_code is not null\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , eligiblity.medicare_status_code\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\nselect * from valid_gender\nunion all\nselect * from valid_race\nunion all\nselect * from valid_payer_type\nunion all\nselect * from valid_orec\nunion all\nselect * from valid_dual_status_code\nunion all\nselect * from valid_medicare_status_code", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_eligibility_invalid_values\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T15:25:41.896093Z", "completed_at": "2024-02-21T15:25:41.910913Z"}, {"name": "execute", "started_at": "2024-02-21T15:25:41.912083Z", "completed_at": "2024-02-21T15:25:41.991193Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.09993910789489746, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility", "compiled": true, "compiled_code": "\n\nwith eligiblity as (\n\n    select *\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_eligibility\"\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\n, multiple_genders_test as (\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\n    from eligiblity\n         left join test_catalog\n           on test_catalog.test_name = 'multiple genders'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n    having count(distinct eligiblity.gender) > 1\n\n)\n\n, multiple_races_test as(\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\n    from eligiblity\n         left join test_catalog\n           on test_catalog.test_name = 'multiple races'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n    having count(distinct eligiblity.race) > 1\n\n)\n\n, multiple_birth_dates_test as(\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\n    from eligiblity\n         left join test_catalog\n           on test_catalog.test_name = 'multiple birth dates'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n    having count(distinct eligiblity.birth_date) > 1\n\n)\n\n, multiple_death_dates_test as(\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\n    from eligiblity\n         left join test_catalog\n           on test_catalog.test_name = 'multiple death dates'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n    having count(distinct eligiblity.death_date) > 1\n\n)\n\n, birth_date_after_death_date as(\n\n    select\n          test_catalog.test_name\n        , test_catalog.pipeline_test\n        , test_catalog.source_table\n        , 'all' as claim_type\n        , test_catalog.test_category\n        , 'patient_id' as grain\n        , eligiblity.patient_id\n        , eligiblity.data_source\n        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\n    from eligiblity\n         left join test_catalog\n           on test_catalog.test_name = 'birth date after death date'\n           and test_catalog.source_table = 'normalized_input__eligibility'\n    where eligiblity.birth_date > eligiblity.death_date\n    group by\n          eligiblity.patient_id\n        , eligiblity.data_source\n        , test_catalog.source_table\n        , test_catalog.test_category\n        , test_catalog.test_name\n        , test_catalog.pipeline_test\n\n)\n\nselect * from multiple_genders_test\nunion all\nselect * from multiple_races_test\nunion all\nselect * from multiple_birth_dates_test\nunion all\nselect * from multiple_death_dates_test\nunion all\nselect * from birth_date_after_death_date", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_eligibility_plausibility\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T15:25:41.922969Z", "completed_at": "2024-02-21T15:25:41.933653Z"}, {"name": "execute", "started_at": "2024-02-21T15:25:41.934983Z", "completed_at": "2024-02-21T15:25:41.995755Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.07874608039855957, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates", "compiled": true, "compiled_code": "\n\nwith test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\nselect distinct\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , claim_id\n    , data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n     left join test_catalog\n       on test_catalog.test_name = 'duplicate pharmacy claims'\n       and test_catalog.source_table = 'normalized_input__pharmacy_claim'\ngroup by\n      claim_id\n    , claim_line_number\n    , data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\nhaving count(*) > 1", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_pharmacy_claim_duplicates\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T15:25:42.005005Z", "completed_at": "2024-02-21T15:25:42.012820Z"}, {"name": "execute", "started_at": "2024-02-21T15:25:42.022397Z", "completed_at": "2024-02-21T15:25:42.074559Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.07433509826660156, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers", "compiled": true, "compiled_code": "\n\nwith pharmacy_claim as (\n\n    select\n          claim_id\n        , claim_line_number\n        , data_source\n    from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\n, add_row_num as (\n\n    select\n          claim_id\n        , data_source\n        , claim_line_number\n        , row_number() over (\n            partition by claim_id, data_source\n            order by claim_line_number\n          ) as expected_line_number\n    from pharmacy_claim\n\n)\n\n, line_num_check as (\n\n    select\n          add_row_num.claim_id\n        , add_row_num.data_source\n        , add_row_num.claim_line_number\n        , add_row_num.expected_line_number\n    from add_row_num\n         left join pharmacy_claim\n           on add_row_num.claim_id = pharmacy_claim.claim_id\n           and add_row_num.data_source = pharmacy_claim.data_source\n           and add_row_num.expected_line_number = pharmacy_claim.claim_line_number\n    where pharmacy_claim.claim_line_number is null\n\n)\n\nselect\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , line_num_check.claim_id\n    , line_num_check.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom line_num_check\n     left join test_catalog\n       on test_catalog.test_name = 'claim_line_number non-sequential'\n       and test_catalog.source_table = 'normalized_input__pharmacy_claim'\ngroup by\n      line_num_check.claim_id\n    , line_num_check.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_pharmacy_claim_line_numbers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T15:25:42.013262Z", "completed_at": "2024-02-21T15:25:42.028366Z"}, {"name": "execute", "started_at": "2024-02-21T15:25:42.029949Z", "completed_at": "2024-02-21T15:25:42.094238Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.08859729766845703, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values", "compiled": true, "compiled_code": "\n\nwith pharmacy_claim_missing as (\n\n \n        select\n              claim_id\n            , data_source\n            , 'claim_id' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where claim_id is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'claim_line_number' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where claim_line_number is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'patient_id' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where patient_id is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'member_id' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where member_id is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'payer' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where payer is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'plan' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where plan is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'prescribing_provider_npi' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where prescribing_provider_npi is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'dispensing_provider_npi' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where dispensing_provider_npi is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'dispensing_date' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where dispensing_date is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'ndc_code' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where ndc_code is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'quantity' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where quantity is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'days_supply' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where days_supply is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'refills' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where refills is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'paid_date' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where paid_date is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'paid_amount' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where paid_amount is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'allowed_amount' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where allowed_amount is null\n        union all\n        select\n              claim_id\n            , data_source\n            , 'data_source' as column_checked\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        where data_source is null\n        \n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\nselect\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , pharmacy_claim_missing.claim_id\n    , pharmacy_claim_missing.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom pharmacy_claim_missing\n     left join test_catalog\n       on test_catalog.test_name = pharmacy_claim_missing.column_checked||' missing'\n       and test_catalog.source_table = 'normalized_input__pharmacy_claim'\ngroup by\n      pharmacy_claim_missing.claim_id\n    , pharmacy_claim_missing.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_pharmacy_claim_missing_values\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T15:25:42.109586Z", "completed_at": "2024-02-21T15:25:42.118054Z"}, {"name": "execute", "started_at": "2024-02-21T15:25:42.120481Z", "completed_at": "2024-02-21T15:25:42.172554Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.06721329689025879, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_admit_type_final", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_admit_type_normalize_voting\"\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_admit_type_final\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T15:25:42.083707Z", "completed_at": "2024-02-21T15:25:42.092007Z"}, {"name": "execute", "started_at": "2024-02-21T15:25:42.094841Z", "completed_at": "2024-02-21T15:25:42.271713Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.19308757781982422, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details", "compiled": true, "compiled_code": "\n\nwith pharmacy_header_duplicates as (\n\n \n        select\n              claim_id\n            , data_source\n            , 'claim_id' as column_checked\n            , count(distinct claim_id) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        group by claim_id, data_source\n        having count(distinct claim_id) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'patient_id' as column_checked\n            , count(distinct patient_id) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        group by claim_id, data_source\n        having count(distinct patient_id) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'member_id' as column_checked\n            , count(distinct member_id) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        group by claim_id, data_source\n        having count(distinct member_id) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'payer' as column_checked\n            , count(distinct payer) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        group by claim_id, data_source\n        having count(distinct payer) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'plan' as column_checked\n            , count(distinct plan) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        group by claim_id, data_source\n        having count(distinct plan) > 1\n        union all\n        select\n              claim_id\n            , data_source\n            , 'data_source' as column_checked\n            , count(distinct data_source) as duplicate_count\n        from \"synthea\".\"claims_preprocessing\".\"normalized_input_pharmacy_claim\"\n        group by claim_id, data_source\n        having count(distinct data_source) > 1\n        \n\n)\n\n, test_catalog as (\n\n    select\n          source_table\n        , test_category\n        , test_name\n        , pipeline_test\n        , claim_type\n    from \"synthea\".\"data_quality\".\"_value_set_test_catalog\"\n\n)\n\nselect\n      test_catalog.source_table\n    , 'all' as claim_type\n    , 'claim_id' as grain\n    , pharmacy_header_duplicates.claim_id\n    , pharmacy_header_duplicates.data_source\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom pharmacy_header_duplicates\n     left join test_catalog\n       on test_catalog.test_name = pharmacy_header_duplicates.column_checked||' non-unique'\n       and test_catalog.source_table = 'normalized_input__pharmacy_claim'\ngroup by \n      pharmacy_header_duplicates.claim_id\n    , pharmacy_header_duplicates.data_source\n    , test_catalog.source_table\n    , test_catalog.test_category\n    , test_catalog.test_name\n    , test_catalog.pipeline_test", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_pharmacy_header_fail_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T15:25:42.438804Z", "completed_at": "2024-02-21T15:25:42.446663Z"}, {"name": "execute", "started_at": "2024-02-21T15:25:42.451291Z", "completed_at": "2024-02-21T15:25:42.506149Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0784144401550293, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_admit_source_final", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_admit_source_voting\"\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_admit_source_final\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T15:25:42.460065Z", "completed_at": "2024-02-21T15:25:42.466643Z"}, {"name": "execute", "started_at": "2024-02-21T15:25:42.468339Z", "completed_at": "2024-02-21T15:25:42.518834Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.06831741333007812, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_bill_type_final", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_bill_type_voting\"\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_bill_type_final\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T15:25:42.519430Z", "completed_at": "2024-02-21T15:25:42.527125Z"}, {"name": "execute", "started_at": "2024-02-21T15:25:42.528643Z", "completed_at": "2024-02-21T15:25:42.645208Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.13087153434753418, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_apr_drg_final", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_apr_drg_voting\"\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_apr_drg_final\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T15:25:42.560409Z", "completed_at": "2024-02-21T15:25:42.576056Z"}, {"name": "execute", "started_at": "2024-02-21T15:25:42.593723Z", "completed_at": "2024-02-21T15:25:42.739898Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.19015192985534668, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_medical_date_aggregation", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , min(normalized_claim_start_date) as minimum_claim_start_date\n    , max(normalized_claim_end_date) as maximum_claim_end_date\n    , min(normalized_admission_date) as minimum_admission_date\n    , max(normalized_discharge_date) as maximum_discharge_date\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_medical_claim_date_normalize\"\nwhere claim_type = 'institutional'\ngroup by\n    claim_id\n    , data_source\n\nunion all\n\nselect\n    claim_id\n    , data_source\n    , min(normalized_claim_start_date) as minimum_claim_start_date\n    , max(normalized_claim_end_date) as maximum_claim_end_date\n    , null as minimum_admission_date\n    , null as maximum_discharge_date\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_medical_claim_date_normalize\"\nwhere claim_type = 'professional'\ngroup by\n    claim_id\n    , data_source", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_medical_date_aggregation\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T15:25:42.663188Z", "completed_at": "2024-02-21T15:25:42.678646Z"}, {"name": "execute", "started_at": "2024-02-21T15:25:42.686478Z", "completed_at": "2024-02-21T15:25:42.799319Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.1426677703857422, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_discharge_disposition_final", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_discharge_disposition_voting\"\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_discharge_disposition_final\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_diagnosis_code_voting", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_diagnosis_code_voting\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_present_on_admit_voting", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_present_on_admit_voting\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_procedure_code_voting", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_procedure_code_voting\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_procedure_date_voting", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_procedure_date_voting\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T15:25:42.781007Z", "completed_at": "2024-02-21T15:25:42.790685Z"}, {"name": "execute", "started_at": "2024-02-21T15:25:42.792668Z", "completed_at": "2024-02-21T15:25:42.932019Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.1832103729248047, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_ms_drg_final", "compiled": true, "compiled_code": "\n\n\nselect\n    claim_id\n    , data_source\n    , column_name\n    , normalized_code\n    , occurrence_count\n    , next_occurrence_count\n    , occurrence_row_count\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom \"synthea\".\"claims_preprocessing\".\"_int_normalized_input_ms_drg_voting\"\nwhere (occurrence_row_count = 1\n        and occurrence_count > next_occurrence_count)", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_ms_drg_final\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T15:25:43.068299Z", "completed_at": "2024-02-21T15:25:43.084438Z"}, {"name": "execute", "started_at": "2024-02-21T15:25:43.110539Z", "completed_at": "2024-02-21T15:25:43.601272Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.5846631526947021, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility", "compiled": true, "compiled_code": "\n\n\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , patient_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_eligibility_duplicates\"\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , patient_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_eligibility_missing_values\"\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , patient_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_eligibility_invalid_values\"\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , patient_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_eligibility_plausibility\"", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_test_detail_stage_eligibility\""}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-02-21T15:25:42.909502Z", "completed_at": "2024-02-21T15:25:43.083516Z"}, {"name": "execute", "started_at": "2024-02-21T15:25:43.087602Z", "completed_at": "2024-02-21T15:25:43.589629Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.7068357467651367, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__quality_measures__stg_core__observation as (\n\n\nselect\n      patient_id\n    , observation_date\n    , source_code_type\n    , source_code\n    , normalized_code_type\n    , normalized_code\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom \"synthea\".\"core\".\"observation\"\n\n\n) select patient_id\nfrom __dbt__cte__quality_measures__stg_core__observation\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-02-21T15:25:43.689826Z", "completed_at": "2024-02-21T15:25:43.715802Z"}, {"name": "execute", "started_at": "2024-02-21T15:25:43.718772Z", "completed_at": "2024-02-21T15:25:43.785504Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.12848997116088867, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__quality_measures__stg_core__medication as (\n\n\nselect\n      patient_id\n    , dispensing_date\n    , source_code_type\n    , source_code\n    , ndc_code\n    , rxnorm_code\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom \"synthea\".\"core\".\"medication\"\n\n\n) select patient_id\nfrom __dbt__cte__quality_measures__stg_core__medication\nwhere patient_id is null\n\n\n", "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_diagnosis_code_final", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_diagnosis_code_final\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_present_on_admit_final", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_present_on_admit_final\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_procedure_code_final", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_procedure_code_final\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_procedure_date_final", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_procedure_date_final\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T15:25:43.658627Z", "completed_at": "2024-02-21T15:25:43.703152Z"}, {"name": "execute", "started_at": "2024-02-21T15:25:43.707246Z", "completed_at": "2024-02-21T15:25:43.858047Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.2232499122619629, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim", "compiled": true, "compiled_code": "\n\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_pharmacy_claim_duplicates\"\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_pharmacy_claim_missing_values\"\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_pharmacy_header_fail_details\"\nunion all\nselect distinct\n    source_table\n    , claim_type\n    , grain\n    , claim_id as foreign_key\n    , data_source\n    , test_category\n    , test_name\n    , pipeline_test\nfrom \"synthea\".\"data_quality\".\"_int_claims_preprocessing_pharmacy_claim_line_numbers\"", "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_test_detail_stage_pharmacy_claim\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T15:25:41.371367Z", "completed_at": "2024-02-21T15:25:41.426306Z"}, {"name": "execute", "started_at": "2024-02-21T15:25:41.437003Z", "completed_at": "2024-02-21T15:26:07.836372Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 26.61498498916626, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_undetermined_claim_type", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n) select\n    claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_medical_claim\nwhere claim_type in ('undetermined')", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_undetermined_claim_type\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T15:25:41.297948Z", "completed_at": "2024-02-21T15:25:41.427387Z"}, {"name": "execute", "started_at": "2024-02-21T15:25:41.469477Z", "completed_at": "2024-02-21T15:26:07.839435Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 27.343549251556396, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.normalized_input__int_revenue_center_normalize", "compiled": true, "compiled_code": "\n\n\nwith __dbt__cte__normalized_input__stg_medical_claim as (\n\n\nselect\n      claim_id\n    , claim_line_number\n    , claim_type\n    , patient_id\n    , member_id\n    , payer\n    , plan\n    , claim_start_date\n    , claim_end_date\n    , claim_line_start_date\n    , claim_line_end_date\n    , admission_date\n    , discharge_date\n    , admit_source_code\n    , admit_type_code\n    , discharge_disposition_code\n    , place_of_service_code\n    , bill_type_code\n    , ms_drg_code\n    , apr_drg_code\n    , revenue_center_code\n    , service_unit_quantity\n    , hcpcs_code\n    , hcpcs_modifier_1\n    , hcpcs_modifier_2\n    , hcpcs_modifier_3\n    , hcpcs_modifier_4\n    , hcpcs_modifier_5\n    , rendering_npi\n    , billing_npi\n    , facility_npi\n    , paid_date\n    , paid_amount\n    , allowed_amount\n    , charge_amount\n    , coinsurance_amount\n    , copayment_amount\n    , deductible_amount\n    , total_cost_amount\n    , diagnosis_code_type\n    , diagnosis_code_1\n    , diagnosis_code_2\n    , diagnosis_code_3\n    , diagnosis_code_4\n    , diagnosis_code_5\n    , diagnosis_code_6\n    , diagnosis_code_7\n    , diagnosis_code_8\n    , diagnosis_code_9\n    , diagnosis_code_10\n    , diagnosis_code_11\n    , diagnosis_code_12\n    , diagnosis_code_13\n    , diagnosis_code_14\n    , diagnosis_code_15\n    , diagnosis_code_16\n    , diagnosis_code_17\n    , diagnosis_code_18\n    , diagnosis_code_19\n    , diagnosis_code_20\n    , diagnosis_code_21\n    , diagnosis_code_22\n    , diagnosis_code_23\n    , diagnosis_code_24\n    , diagnosis_code_25\n    , diagnosis_poa_1\n    , diagnosis_poa_2\n    , diagnosis_poa_3\n    , diagnosis_poa_4\n    , diagnosis_poa_5\n    , diagnosis_poa_6\n    , diagnosis_poa_7\n    , diagnosis_poa_8\n    , diagnosis_poa_9\n    , diagnosis_poa_10\n    , diagnosis_poa_11\n    , diagnosis_poa_12\n    , diagnosis_poa_13\n    , diagnosis_poa_14\n    , diagnosis_poa_15\n    , diagnosis_poa_16\n    , diagnosis_poa_17\n    , diagnosis_poa_18\n    , diagnosis_poa_19\n    , diagnosis_poa_20\n    , diagnosis_poa_21\n    , diagnosis_poa_22\n    , diagnosis_poa_23\n    , diagnosis_poa_24\n    , diagnosis_poa_25\n    , procedure_code_type\n    , procedure_code_1\n    , procedure_code_2\n    , procedure_code_3\n    , procedure_code_4\n    , procedure_code_5\n    , procedure_code_6\n    , procedure_code_7\n    , procedure_code_8\n    , procedure_code_9\n    , procedure_code_10\n    , procedure_code_11\n    , procedure_code_12\n    , procedure_code_13\n    , procedure_code_14\n    , procedure_code_15\n    , procedure_code_16\n    , procedure_code_17\n    , procedure_code_18\n    , procedure_code_19\n    , procedure_code_20\n    , procedure_code_21\n    , procedure_code_22\n    , procedure_code_23\n    , procedure_code_24\n    , procedure_code_25\n    , procedure_date_1\n    , procedure_date_2\n    , procedure_date_3\n    , procedure_date_4\n    , procedure_date_5\n    , procedure_date_6\n    , procedure_date_7\n    , procedure_date_8\n    , procedure_date_9\n    , procedure_date_10\n    , procedure_date_11\n    , procedure_date_12\n    , procedure_date_13\n    , procedure_date_14\n    , procedure_date_15\n    , procedure_date_16\n    , procedure_date_17\n    , procedure_date_18\n    , procedure_date_19\n    , procedure_date_20\n    , procedure_date_21\n    , procedure_date_22\n    , procedure_date_23\n    , procedure_date_24\n    , procedure_date_25\n    , data_source\nfrom \"synthea\".\"tuva_input\".\"medical_claim\"\n) select\n    claim_id\n    , claim_line_number\n    , data_source\n    , rev.revenue_center_code as normalized_code\n    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run\nfrom __dbt__cte__normalized_input__stg_medical_claim med\nleft join \"synthea\".\"terminology\".\"revenue_center\" rev\n    on lpad(med.revenue_center_code, 4, '0') = rev.revenue_center_code\nwhere claim_type = 'institutional'", "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_normalized_input_revenue_center_normalize\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.normalized_input__medical_claim", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"normalized_input_medical_claim\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_normalized_input__medical_claim__claim_id_claim_line_number_.7102b4fe4f", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_claim_type_mapping_failures", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_claim_type_mapping_failures\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_claim_type_unmapped", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_claim_type_unmapped\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_institutional_header_fail_details", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_institutional_header_fail_details\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_dates\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates_inst", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_dates_inst\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_denominators", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_denominators\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_duplicates", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_duplicates\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_inst_missing_values", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_inst_missing_values\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_npi", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_invalid_npi\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_values", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_invalid_values\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_line_numbers", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_line_numbers\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_plausibility", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_plausibility\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_prof_missing_values", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_medical_claim_prof_missing_values\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_professional_header_fail_details", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_professional_header_fail_details\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_medical_claim", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_test_detail_stage_medical_claim\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__acute_inpatient_institutional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__acute_inpatient_professional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_professional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__ambulance_professional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_ambulance_professional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__dialysis_institutional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_dialysis_institutional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__dialysis_professional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_dialysis_professional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__dme_professional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_dme_professional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__dq_input_layer_tests", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_dq_input_layer_tests\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__duplicate_bill_types", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_duplicate_bill_types\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__emergency_department_professional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_emergency_department_professional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__home_health_institutional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_home_health_institutional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__hospice_institutional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_hospice_institutional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__hospice_professional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_hospice_professional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__inpatient_psychiatric_professional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_inpatient_psychiatric_professional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__inpatient_rehab_professional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_inpatient_rehab_professional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__lab_institutional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_lab_institutional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__lab_professional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_lab_professional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__office_visit_professional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_office_visit_professional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_hospital_or_clinic_professional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_outpatient_hospital_or_clinic_professional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_psychiatric_institutional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_outpatient_psychiatric_institutional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_psychiatric_professional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_outpatient_psychiatric_professional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_rehab_professional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_outpatient_rehab_professional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__skilled_nursing_institutional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_skilled_nursing_institutional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__urgent_care_professional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_urgent_care_professional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"data_quality\".\"claims_preprocessing_test_detail\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__emergency_department_institutional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_emergency_department_institutional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__ambulatory_surgery_professional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_ambulatory_surgery_professional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__home_health_professional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_home_health_professional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__skilled_nursing_professional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_skilled_nursing_professional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__dq_input_layer_results", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_dq_input_layer_results\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_source_table.cf991d30ab", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_test_category.ced96217c6", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_test_name.dba1927ba6", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__urgent_care_institutional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_urgent_care_institutional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__combined_professional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_combined_professional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_summary", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"data_quality\".\"claims_preprocessing_summary\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_eligibility", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_test_result_stage_eligibility\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_medical_claim", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_test_result_stage_medical_claim\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_pharmacy_claim", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"data_quality\".\"_int_claims_preprocessing_test_result_stage_pharmacy_claim\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_use_case", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"data_quality\".\"claims_preprocessing_use_case\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__outpatient_hospital_or_clinic_institutional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_outpatient_hospital_or_clinic_institutional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__dq_multiple_service_categories_professional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_dq_multiple_service_categories_professional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.claims_preprocessing_pipeline_checks_data_quality__claims_preprocessing_summary_.b6e0d43468", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_summary_source_table.69a94b9930", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_summary_test_category.096fbc6a15", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_result", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"data_quality\".\"claims_preprocessing_test_result\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_source_table.aa47c26a47", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_test_name.d9661e41fa", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_use_case.50708d3a7d", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__combined_institutional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_combined_institutional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_eligibility", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"_stg_claims_eligibility\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_patient", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"_stg_claims_patient\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_pharmacy_claim", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"_stg_claims_pharmacy_claim\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_source_table.6995ae2e57", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_test_category.70042a7a27", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_test_name.745065a5e9", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__dq_multiple_service_categories_institutional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_dq_multiple_service_categories_institutional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.service_category__service_category_grouper", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"service_category_grouper\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__eligibility", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"eligibility\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__patient", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"patient\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__pharmacy_claim", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"pharmacy_claim\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__institutional_claims", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_claims\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.emergency_department__int_institutional_claims", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_emergency_department_institutional_claims\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__member_months", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"financial_pmpm\".\"member_months\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__data_quality_summary", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_data_quality_summary\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__institutional_encounter_id", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_institutional_encounter_id\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.emergency_department__int_institutional_encounter_id", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_emergency_department_institutional_encounter_id\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_members", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"cms_hcc\".\"_int_members\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.accepted_values_quality_measures__stg_core__patient_sex__female__male__unknown.e6adc9ce2b", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__patient_birth_date.4b3a2e74e6", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__patient_patient_id.5510e1a0fd", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__patient_sex.e2f34cab69", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__encounter_start_and_end_dates", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_encounter_start_and_end_dates\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.emergency_department__int_encounter_start_and_end_dates", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_emergency_department_encounter_start_and_end_dates\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_cms_hcc__int_members_patient_id.75e528329b", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_cms_hcc__int_members_patient_id.4d202f2bbb", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__professional_encounter_id", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_professional_encounter_id\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.emergency_department__int_professional_encounter_id", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_emergency_department_professional_encounter_id\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_demographic_factors", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"cms_hcc\".\"_int_demographic_factors\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__encounter_id", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_encounter_id\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.emergency_department__int_encounter_id", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_emergency_department_encounter_id\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_cms_hcc__int_demographic_factors__patient_id_model_version_.21c6216400", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__claims_with_encounter_data", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_claims_with_encounter_data\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__first_claim_values", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_first_claim_values\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__last_claim_values", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_acute_inpatient_last_claim_values\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_condition", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"_stg_claims_condition\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_medical_claim", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"_stg_claims_medical_claim\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_procedure", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"_stg_claims_procedure\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.emergency_department__int_first_claim_values", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_emergency_department_first_claim_values\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.emergency_department__int_last_claim_values", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_emergency_department_last_claim_values\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_enrollment_interaction_factors", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"cms_hcc\".\"_int_enrollment_interaction_factors\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__encounter_data_for_medical_claims", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"_int_encounter_data_for_medical_claims\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.acute_inpatient__summary", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"acute_inpatient_summary\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__condition", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"condition\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__medical_claim", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"medical_claim\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_location", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"_stg_claims_location\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_practitioner", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"_stg_claims_practitioner\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__procedure", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"procedure\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.emergency_department__summary", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"claims_preprocessing\".\"emergency_department_summary\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_core__condition_condition_id.ef1067e2f0", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_core__medical_claim__claim_id_claim_line_number_.b9ab42f1f0", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__location", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"location\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__practitioner", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"practitioner\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_core__procedure_procedure_id.feb1b6b4d5", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__stg_claims_encounter", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"_stg_claims_encounter\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.insights__count_claim_by_claim_type", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"insights\".\"count_claim_by_claim_type\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.insights__count_claim_by_date_column", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"insights\".\"count_claim_by_date_column\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.insights__count_claim_by_service_category", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"insights\".\"count_claim_by_service_category\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.insights__orphan_claim_by_claim_type", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"insights\".\"orphan_claim_by_claim_type\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.insights__sum_amount_by_claim_type", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"insights\".\"sum_amount_by_claim_type\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.insights__sum_amount_by_service_category", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"insights\".\"sum_amount_by_service_category\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.insights__trend_count_claim_by_claim_type", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"insights\".\"trend_count_claim_by_claim_type\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.insights__trend_count_claim_by_service_category", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"insights\".\"trend_count_claim_by_service_category\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.insights__trend_sum_amount_by_claim_type", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"insights\".\"trend_sum_amount_by_claim_type\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.insights__trend_sum_amount_by_service_category", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"insights\".\"trend_sum_amount_by_service_category\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.core__encounter", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"core\".\"encounter\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ccsr__long_condition_category", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"ccsr\".\"long_condition_category\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"chronic_conditions\".\"_int_cms_chronic_condition_hiv_aids\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__int_prep_conditions", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"hcc_suspecting\".\"_int_prep_conditions\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__condition_patient_id.1f1222e348", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_long", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"chronic_conditions\".\"tuva_chronic_conditions_long\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_eligible_conditions", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"cms_hcc\".\"_int_eligible_conditions\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__patient_spend_with_service_categories", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"financial_pmpm\".\"_int_patient_spend_with_service_categories\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ccsr__long_procedure_category", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"ccsr\".\"long_procedure_category\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"chronic_conditions\".\"_int_cms_chronic_condition_all\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__procedure_patient_id.0b52ff75d9", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__procedure_ccs", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"readmissions\".\"_int_procedure_ccs\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ccsr__singular_condition_category", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"ccsr\".\"singular_condition_category\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.accepted_values_chronic_conditions__cms_chronic_conditions_hiv_aids_condition__Human_Immunodeficiency_Virus_and_or_Acquired_Immunodeficiency_Syndrome_HIV_AIDS_.c54d45a2c6", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_claim_id.9baa48027d", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_condition.da32954f00", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_patient_id.b6c58add4b", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__int_all_conditions", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"hcc_suspecting\".\"_int_all_conditions\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_chronic_conditions__tuva_chronic_conditions_long__patient_id___condition_.c9509bb46f", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_cms_hcc__int_eligible_conditions_condition_code.e811a078bc", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__service_category_1_allowed_pivot", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"financial_pmpm\".\"_int_service_category_1_allowed_pivot\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__service_category_1_paid_pivot", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"financial_pmpm\".\"_int_service_category_1_paid_pivot\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__service_category_2_allowed_pivot", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"financial_pmpm\".\"_int_service_category_2_allowed_pivot\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__service_category_2_paid_pivot", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"financial_pmpm\".\"_int_service_category_2_paid_pivot\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_claim_id.84015aec48", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_condition.bb780b4840", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_patient_id.95fc066008", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_exclude_colectomy_cancer", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf0034_exclude_colectomy_cancer\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_exclude_hospice_palliative", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf0034_exclude_hospice_palliative\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ed_classification__int_map_primary_dx", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"ed_classification\".\"_int_by_provider_parent_organization\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_quality_measures__stg_core__encounter_patient_id.a0d82e2159", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__encounter", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"readmissions\".\"_int_encounter\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_ccsr__singular_condition_category_claim_id.41e0e51ac8", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_ccsr__singular_condition_category_claim_id.21b76e504b", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__int_patient_hcc_history", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"hcc_suspecting\".\"_int_patient_hcc_history\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_wide", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"chronic_conditions\".\"tuva_chronic_conditions_wide\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_hcc_mapping", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"cms_hcc\".\"_int_hcc_mapping\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__pmpm_prep", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"financial_pmpm\".\"pmpm_prep\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"chronic_conditions\".\"_int_cms_chronic_condition_oud\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ed_classification__int_filter_encounter_with_classification", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"ed_classification\".\"_int_filter_encounter_with_classification\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_denominator", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf0034_denominator\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_denominator", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf2372_denominator\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__encounter_overlap", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"readmissions\".\"_int_encounter_overlap\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__encounter_with_ccs", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"readmissions\".\"_int_encounter_with_ccs\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__index_discharge_requirement", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"readmissions\".\"_int_index_discharge_requirement\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__index_time_requirement", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"readmissions\".\"_int_index_time_requirement\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__list", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"hcc_suspecting\".\"list\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__tuva_chronic_conditions_wide_patient_id.705b1ca561", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_chronic_conditions__tuva_chronic_conditions_wide_patient_id.02386b9158", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_hcc_hierarchy", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"cms_hcc\".\"_int_hcc_hierarchy\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_financial_pmpm__pmpm_prep__patient_id___year_month___plan_.b941ddaf9e", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.accepted_values_chronic_conditions__cms_chronic_conditions_oud_condition__Opioid_Use_Disorder_OUD_.f44489eec5", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_claim_id.7ee5fe28fe", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_condition.6800b245ea", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_patient_id.382354e0d0", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.ed_classification__summary", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"ed_classification\".\"summary\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034__frailty", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf0034__frailty\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_exclude_institutional_snp", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf0034_exclude_institutional_snp\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_numerator", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf0034_numerator\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372__frailty", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf2372__frailty\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_exclude_hospice", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf2372_exclude_hospice\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_exclude_institutional", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf2372_exclude_institutional\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_exclude_mastectomy", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf2372_exclude_mastectomy\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_exclude_palliative", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf2372_exclude_palliative\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_numerator", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf2372_numerator\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__readmission_crude", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"readmissions\".\"_int_readmission_crude\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__encounter_data_quality", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"readmissions\".\"_int_encounter_data_quality\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__encounter_specialty_cohort", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"readmissions\".\"_int_encounter_specialty_cohort\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__exclusion", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"readmissions\".\"_int_exclusion\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__planned_encounter", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"readmissions\".\"_int_planned_encounter\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.hcc_suspecting__summary", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"hcc_suspecting\".\"summary\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_disabled_interaction_factors", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"cms_hcc\".\"_int_disabled_interaction_factors\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_disease_factors", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"cms_hcc\".\"_int_disease_factors\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_disease_interaction_factors", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"cms_hcc\".\"_int_disease_interaction_factors\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__int_hcc_count_factors", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"cms_hcc\".\"_int_hcc_count_factors\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.financial_pmpm__pmpm", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"financial_pmpm\".\"pmpm\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"chronic_conditions\".\"cms_chronic_conditions_long\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_exclude_advanced_illness", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf0034_exclude_advanced_illness\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_exclude_dementia", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf0034_exclude_dementia\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_exclude_advanced_illness", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf2372_exclude_advanced_illness\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_exclude_dementia", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf2372_exclude_dementia\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__index_admission", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"readmissions\".\"_int_index_admission\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__patient_risk_factors", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"cms_hcc\".\"patient_risk_factors\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_claim_id.74242d2abc", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_condition.e794460ae3", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_patient_id.551c145c85", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_chronic_conditions__cms_chronic_conditions_long__patient_id_claim_id_start_date_condition_.fba1518320", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_exclusions", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf0034_exclusions\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_exclusions", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf2372_exclusions\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__encounter_augmented", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"readmissions\".\"encounter_augmented\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.cms_hcc__patient_risk_scores", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"cms_hcc\".\"patient_risk_scores\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.chronic_conditions__cms_chronic_conditions_wide", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"chronic_conditions\".\"cms_chronic_conditions_wide\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf0034_long", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf0034_long\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__int_nqf2372_long", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"_int_nqf2372_long\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.readmissions__readmission_summary", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"readmissions\".\"readmission_summary\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_cms_hcc__patient_risk_scores_patient_id.05b154e126", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_wide_patient_id.5c2c8ae105", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-4 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.the_tuva_project.unique_chronic_conditions__cms_chronic_conditions_wide_patient_id.60c2d9a586", "compiled": false, "compiled_code": null, "relation_name": null}, {"status": "skipped", "timing": [], "thread_id": "Thread-3 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__summary_long", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"summary_long\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-2 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__summary_counts", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"summary_counts\""}, {"status": "skipped", "timing": [], "thread_id": "Thread-1 (worker)", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.the_tuva_project.quality_measures__summary_wide", "compiled": false, "compiled_code": null, "relation_name": "\"synthea\".\"quality_measures\".\"summary_wide\""}], "elapsed_time": 3314.4407773017883, "args": {"show_resource_report": false, "invocation_command": "dbt build", "introspect": true, "log_level_file": "debug", "use_colors_file": true, "indirect_selection": "eager", "resource_types": [], "which": "build", "log_level": "info", "quiet": false, "version_check": true, "vars": {}, "log_file_max_bytes": 10485760, "exclude": [], "partial_parse": true, "populate_cache": true, "print": true, "favor_state": false, "warn_error_options": {"include": [], "exclude": []}, "defer": false, "project_dir": "/workspaces/synthea_dw/tuva", "include_saved_query": false, "printer_width": 80, "log_format_file": "debug", "strict_mode": false, "use_colors": true, "write_json": true, "static_parser": true, "enable_legacy_logger": false, "partial_parse_file_diff": true, "profiles_dir": "/workspaces/synthea_dw/tuva", "cache_selected_only": false, "select": [], "show": false, "send_anonymous_usage_stats": true, "macro_debugging": false, "log_format": "default", "log_path": "/workspaces/synthea_dw/tuva/logs"}}