{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.8", "generated_at": "2024-02-21T22:33:31.303659Z", "invocation_id": "ed2600aa-df84-4e9c-ba5f-e1639b38d2e6", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T22:31:34.797120Z", "completed_at": "2024-02-21T22:31:34.803135Z"}, {"name": "execute", "started_at": "2024-02-21T22:31:34.804977Z", "completed_at": "2024-02-21T22:31:35.485867Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.7003483772277832, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.ccsr__procedure_category_map", "compiled": true, "compiled_code": "\n\nselect \n    icd_10_pcs as code,\n    icd_10_pcs_description as code_description,\n    prccsr as ccsr_category,\n    left(prccsr, 3) as ccsr_parent_category,\n    prccsr_description as ccsr_category_description,\n    clinical_domain,\n   '2024-02-21 22:31:32.242896+00:00' as tuva_last_run\nfrom \"synthea\".\"ccsr\".\"_value_set_prccsr_v2023_1_cleaned_map\"", "relation_name": "\"synthea\".\"ccsr\".\"procedure_category_map\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T22:31:34.789077Z", "completed_at": "2024-02-21T22:31:34.803636Z"}, {"name": "execute", "started_at": "2024-02-21T22:31:34.825215Z", "completed_at": "2024-02-21T22:31:37.280128Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.496676445007324, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.ccsr__dx_vertical_pivot", "compiled": true, "compiled_code": "\n\nwith codes as (\n    \n    select\n        icd_10_cm_code as code, \n        icd_10_cm_code_description as code_description,\n        -- loop to generate columns for CCSR categories 1-6\n        ccsr_category_1,\n        ccsr_category_1_description,\n        ccsr_category_2,\n        ccsr_category_2_description,\n        ccsr_category_3,\n        ccsr_category_3_description,\n        ccsr_category_4,\n        ccsr_category_4_description,\n        ccsr_category_5,\n        ccsr_category_5_description,\n        ccsr_category_6,\n        ccsr_category_6_description,\n        default_ccsr_category_ip,\n        default_ccsr_category_op\n    from \"synthea\".\"ccsr\".\"_value_set_dxccsr_v2023_1_cleaned_map\"\n\n), long_union as (\n    -- generate select & union statements to pivot category columns to rows\n    \n    select \n        code,\n        code_description,\n        left(ccsr_category_1, 3) as ccsr_parent_category,\n        ccsr_category_1 as ccsr_category,\n        ccsr_category_1_description as ccsr_category_description,\n        1 as ccsr_category_rank,\n        (ccsr_category_1 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_1 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        left(ccsr_category_2, 3) as ccsr_parent_category,\n        ccsr_category_2 as ccsr_category,\n        ccsr_category_2_description as ccsr_category_description,\n        2 as ccsr_category_rank,\n        (ccsr_category_2 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_2 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        left(ccsr_category_3, 3) as ccsr_parent_category,\n        ccsr_category_3 as ccsr_category,\n        ccsr_category_3_description as ccsr_category_description,\n        3 as ccsr_category_rank,\n        (ccsr_category_3 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_3 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        left(ccsr_category_4, 3) as ccsr_parent_category,\n        ccsr_category_4 as ccsr_category,\n        ccsr_category_4_description as ccsr_category_description,\n        4 as ccsr_category_rank,\n        (ccsr_category_4 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_4 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        left(ccsr_category_5, 3) as ccsr_parent_category,\n        ccsr_category_5 as ccsr_category,\n        ccsr_category_5_description as ccsr_category_description,\n        5 as ccsr_category_rank,\n        (ccsr_category_5 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_5 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    union all\n    select \n        code,\n        code_description,\n        left(ccsr_category_6, 3) as ccsr_parent_category,\n        ccsr_category_6 as ccsr_category,\n        ccsr_category_6_description as ccsr_category_description,\n        6 as ccsr_category_rank,\n        (ccsr_category_6 = default_ccsr_category_ip) as is_ip_default_category,\n        (ccsr_category_6 = default_ccsr_category_op) as is_op_default_category\n    from codes \n    \n\n)\n\nselect distinct\n    *,\n    '2024-02-21 22:31:32.242896+00:00' as tuva_last_run\nfrom long_union\n-- as not all diagnosis codes have multiple categories, we can discard nulls\nwhere ccsr_category is not null", "relation_name": "\"synthea\".\"ccsr\".\"dx_vertical_pivot\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T22:31:35.507225Z", "completed_at": "2024-02-21T22:31:35.512554Z"}, {"name": "execute", "started_at": "2024-02-21T22:31:35.513694Z", "completed_at": "2024-02-21T22:31:37.281920Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.8608222007751465, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.condition", "compiled": true, "compiled_code": "SELECT\n    MAX(REPLACE(JSON_EXTRACT(co, '$.id'), '\"', '')) AS condition_id,\n    MAX(REPLACE(REPLACE(JSON_EXTRACT(co, '$.subject.reference'), '\"Patient/', ''), '\"', '')) AS patient_id,\n    MAX(REPLACE(REPLACE(JSON_EXTRACT(co, '$.encounter.reference'), '\"Encounter/', ''), '\"', '')) AS encounter_id,\n    MAX(REPLACE(JSON_EXTRACT(cl, '$.id'), '\"', '')) AS claim_id,\n    MAX(CAST(SUBSTRING(JSON_EXTRACT(co, '$.recordedDate'), 2, 10) AS DATE)) AS recorded_date,\n    MAX(CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE)) AS onset_date,\n    MAX(CAST(SUBSTRING(JSON_EXTRACT(co, '$.abatementDateTime'), 2, 10) AS DATE)) AS resolved_date,\n    MAX(REPLACE(JSON_EXTRACT(co, '$.clinicalStatus.coding[0].code'), '\"', '')) AS status,\n    MAX(REPLACE(JSON_EXTRACT(co, '$.category[0].coding[0].display'), '\"', '')) AS condition_type,\n    'snomed' AS source_code_type,\n    MAX(REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '\"', '')) AS source_code,\n    MAX(REPLACE(JSON_EXTRACT(co, '$.code.coding[0].display'), '\"', '')) AS source_description,\n    'icd-10-cm' AS normalized_code_type,\n    MAX(map.map_target) AS normalized_code,\n    MAX(map.map_target_name) AS normalized_description,\n    MAX(CASE\n        WHEN REPLACE(JSON_EXTRACT(cl, '$.diagnosis[0].sequence'), '\"', '') IS NOT NULL THEN CAST(REPLACE(JSON_EXTRACT(cl, '$.diagnosis[0].sequence'), '\"', '') AS INTEGER)\n        ELSE 1\n    END) AS condition_rank,\n    MAX(CASE\n        WHEN CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) < CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE) THEN 'Y'\n        WHEN CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) > CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE) THEN 'N'\n        ELSE 'U'\n    END) AS present_on_admit_code,\n    MAX(CASE\n        WHEN CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) < CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE) THEN 'Diagnosis was present at the time of inpatient admission. CMS will pay the CC/MCC DRG for those selected HACs that are coded as Y for the POA Indicator.'\n        WHEN CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) > CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE) THEN 'Diagnosis was not present at the time of inpatient admission. CMS will not pay the CC/MCC DRG for those selected HACs that are coded as N for the POA Indicator.'\n        ELSE 'Documentation is insufficient to determine if the condition was present at the time of inpatient admission. CMS will not pay the CC/MCC DRG for those selected HACs that are coded as U for the POA Indicator.'\n    END) AS present_on_admit_description,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Condition\" co\nLEFT JOIN \"synthea\".\"json\".\"Claim\" cl\n    ON REPLACE(REPLACE(JSON_EXTRACT(co, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(cl, '$.item[0].encounter[0].reference'), '\"Encounter/', ''), '\"', '')\nLEFT JOIN \"synthea\".\"json\".\"Encounter\" e\n    ON REPLACE(REPLACE(JSON_EXTRACT(co, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') = REPLACE(JSON_EXTRACT(e, '$.id'), '\"', '')\nJOIN \"synthea\".\"terminology\".\"snomed_icd_10_map\" map\n    ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '\"', '') = map.referenced_component_id\nGROUP BY REPLACE(JSON_EXTRACT(co, '$.id'), '\"', '')", "relation_name": "\"synthea\".\"tuva_input\".\"condition\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T22:31:37.375178Z", "completed_at": "2024-02-21T22:31:37.383449Z"}, {"name": "execute", "started_at": "2024-02-21T22:31:37.384909Z", "completed_at": "2024-02-21T22:31:38.160633Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.7895126342773438, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.eligibility", "compiled": true, "compiled_code": "-- models/eligibility.sql\n\nSELECT DISTINCT\n    MAX(REPLACE(REPLACE(JSON_EXTRACT(e, '$.patient.reference'), '\"Patient/', ''), '\"', '')) AS patient_id,\n    NULL AS member_id,\n    MAX(REPLACE(JSON_EXTRACT(p, '$.extension[3].valueCode'), '\"', '')) AS gender,\n    MAX(REPLACE(JSON_EXTRACT(p, '$.extension[0].extension[1].valueString'), '\"', '')) AS race,\n    MAX(CAST(SUBSTRING(JSON_EXTRACT(p, '$.birthDate'), 2, 10) AS DATE)) AS birth_date,\n    MAX(CAST(SUBSTRING(JSON_EXTRACT(p, '$.deceasedDateTime'), 2, 10) AS DATE)) AS death_date,\n    MAX(CASE\n        WHEN JSON_EXTRACT(p, '$.deceasedDateTime') IS NOT NULL THEN 1\n        ELSE 0\n    END) AS death_flag,\n    MAX(CAST(SUBSTRING(JSON_EXTRACT(e, '$.billablePeriod.start'), 2, 10) AS DATE)) AS enrollment_start_date,\n    MAX(CAST(SUBSTRING(JSON_EXTRACT(e, '$.billablePeriod.end'), 2, 10) AS DATE)) AS enrollment_end_date,\n    MAX(REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '\"', '')) AS payer,\n    MAX(CASE\n        WHEN REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '\"', '') = 'Medicare' THEN 'medicare'\n        WHEN REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '\"', '') = 'Medicaid' THEN 'medicaid'\n        WHEN REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '\"', '') = 'NO_INSURANCE' THEN NULL\n        ELSE 'commercial'\n    END) AS payer_type,\n    NULL AS plan,\n    NULL AS original_reason_entitlement_code,\n    NULL AS dual_status_code,\n    NULL AS medicare_status_code,\n    MAX(REPLACE(REPLACE(REPLACE(SPLIT_PART(JSON_EXTRACT(p, '$.name[0].given'), ',', -1), '\"', ''), '[', ''), ']', '')) AS first_name,\n    MAX(REPLACE(JSON_EXTRACT(p, '$.name[0].family'), '\"', '')) AS last_name,\n    MAX(REPLACE(JSON_EXTRACT(p, '$.address[0].line[0]'), '\"', '')) AS address,\n    MAX(REPLACE(JSON_EXTRACT(p, '$.address[0].city'), '\"', '')) AS city,\n    MAX(REPLACE(JSON_EXTRACT(p, '$.address[0].state'), '\"', '')) AS state,\n    MAX(REPLACE(JSON_EXTRACT(p, '$.address[0].postalCode'), '\"', '')) AS zip_code,\n    MAX(REPLACE(JSON_EXTRACT(p, '$.telecom[0].value'), '\"', '')) AS phone,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"ExplanationOfBenefit\" e\nLEFT JOIN \"synthea\".\"json\".\"Patient\" p\n    ON REPLACE(REPLACE(JSON_EXTRACT(e, '$.patient.reference'), '\"Patient/', ''), '\"', '') = REPLACE(JSON_EXTRACT(p, '$.id'), '\"', '')\nGROUP BY REPLACE(REPLACE(JSON_EXTRACT(e, '$.patient.reference'), '\"Patient/', ''), '\"', '')", "relation_name": "\"synthea\".\"tuva_input\".\"eligibility\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T22:31:38.165797Z", "completed_at": "2024-02-21T22:31:38.169476Z"}, {"name": "execute", "started_at": "2024-02-21T22:31:38.170416Z", "completed_at": "2024-02-21T22:31:38.513663Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.35004734992980957, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.lab_result", "compiled": true, "compiled_code": "-- models/lab_result.sql\n\nSELECT DISTINCT\n    MAX(REPLACE(JSON_EXTRACT(o, '$.id'), '\"', '')) AS lab_result_id,\n    MAX(REPLACE(REPLACE(JSON_EXTRACT(o, '$.subject.reference'), '\"Patient/', ''), '\"', '')) AS patient_id,\n    MAX(REPLACE(REPLACE(JSON_EXTRACT(o, '$.encounter.reference'), '\"Encounter/', ''), '\"', '')) AS encounter_id,\n    NULL AS accession_number,\n    'loinc' AS source_code_type,\n    MAX(REPLACE(JSON_EXTRACT(o, '$.code.coding[0].code'), '\"', '')) AS source_code,\n    MAX(REPLACE(JSON_EXTRACT(o, '$.code.coding[0].display'), '\"', '')) AS source_description,\n    NULL AS source_component,\n    'loinc' AS normalized_code_type,\n    MAX(l.loinc) AS normalized_code,\n    MAX(l.short_name) AS normalized_description,\n    MAX(l.component) AS normalized_component,\n    MAX(REPLACE(JSON_EXTRACT(o, '$.status'), '\"', '')) AS status,\n    MAX(REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '')) AS result, \n    MAX(CAST(SUBSTRING(JSON_EXTRACT(o, '$.effectiveDateTime'), 2, 10) AS DATE)) AS result_date,\n    MAX(CAST(SUBSTRING(JSON_EXTRACT(o, '$.issued'), 2, 10) AS DATE)) AS collection_date,\n    MAX(REPLACE(JSON_EXTRACT(o, '$.valueQuantity.unit'), '\"', '')) AS source_units,\n    MAX(REPLACE(JSON_EXTRACT(o, '$.valueQuantity.unit'), '\"', '')) AS normalized_units,\n    NULL AS source_reference_range_low,\n    NULL AS source_reference_range_high,\n    NULL AS normalized_reference_range_low,\n    NULL AS normalized_reference_range_high,\n    NULL AS source_abnormal_flag,\n    NULL AS normalized_abnormal_flag,\n    NULL AS specimen,\n    MAX(REPLACE(REPLACE(JSON_EXTRACT(e, '$.participant[0].individual.reference'), '\"Practitioner/', ''), '\"', '')) AS ordering_practitioner_id,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Observation\" o\nLEFT JOIN \"synthea\".\"terminology\".\"loinc\" l ON REPLACE(JSON_EXTRACT(o, '$.code.coding[0].code'), '\"', '') = l.loinc\nLEFT JOIN \"synthea\".\"json\".\"Encounter\" e ON REPLACE(REPLACE(JSON_EXTRACT(o, '$.encounter.reference'), '\"Encounter/', ''), '\"', '') = REPLACE(JSON_EXTRACT(e, '$.id'), '\"', '')\nWHERE REPLACE(JSON_EXTRACT(o, '$.category[0].coding[0].code'), '\"', '') = ('laboratory')\nAND REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '\"', '') IS NOT NULL\nGROUP BY REPLACE(JSON_EXTRACT(o, '$.id'), '\"', '')", "relation_name": "\"synthea\".\"tuva_input\".\"lab_result\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T22:31:38.518456Z", "completed_at": "2024-02-21T22:31:38.521745Z"}, {"name": "execute", "started_at": "2024-02-21T22:31:38.522754Z", "completed_at": "2024-02-21T22:31:38.550359Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.033921003341674805, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.location", "compiled": true, "compiled_code": "-- models/location.sql\n\nSELECT DISTINCT\n    REPLACE(JSON_EXTRACT(l, '$.id'), '\"', '') AS location_id,\n    NULL AS npi,\n    REPLACE(JSON_EXTRACT(l, '$.name'), '\"', '') AS name,\n    NULL AS facility_type,\n    REPLACE(JSON_EXTRACT(l, '$.managingOrganization.display'), '\"', '') AS parent_organization,\n    REPLACE(REPLACE(REPLACE(JSON_EXTRACT(l, '$.address.line'), '\"', ''), '[', ''), ']', '') AS address,\n    REPLACE(JSON_EXTRACT(l, '$.address.city'), '\"', '') AS city,\n    REPLACE(JSON_EXTRACT(l, '$.address.state'), '\"', '') AS state,\n    REPLACE(JSON_EXTRACT(l, '$.address.postalCode'), '\"', '') AS zip_code,\n    CAST(REPLACE(JSON_EXTRACT(l, '$.position.latitude'), '\"', '') AS FLOAT) AS latitude,\n    CAST(REPLACE(JSON_EXTRACT(l, '$.position.longitude'), '\"', '') AS FLOAT) AS longitude,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Location\" l", "relation_name": "\"synthea\".\"tuva_input\".\"location\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-21T22:31:37.379334Z", "completed_at": "2024-02-21T22:31:37.384499Z"}, {"name": "execute", "started_at": "2024-02-21T22:31:37.389276Z", "completed_at": "2024-02-21T22:31:45.712002Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 8.33989143371582, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.the_tuva_project.encounter", "compiled": true, "compiled_code": "-- models/encounter.sql\n\nSELECT DISTINCT\n    MAX(REPLACE(JSON_EXTRACT(e, '$.id'), '\"', '')) AS encounter_id,\n    MAX(REPLACE(REPLACE(JSON_EXTRACT(e, '$.subject.reference'), '\"Patient/', ''), '\"', '')) AS patient_id,\n    MAX(CASE\n        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '\"', '') = 'AMB' THEN 'outpatient'\n        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '\"', '') = 'EMER' THEN 'emergency department'\n        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '\"', '') = 'IMP' THEN 'acute inpatient'\n        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '\"', '') = 'FLD' THEN 'other'\n        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '\"', '') = 'HH' THEN 'home health'\n        ELSE 'other'\n    END) AS encounter_type,\n    MAX(CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE)) AS encounter_start_date,\n    MAX(CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE)) AS encounter_end_date,\n    MAX(CASE\n        WHEN \n            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) IS NOT NULL AND \n            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE) IS NOT NULL AND\n            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) = CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE)\n        THEN 1\n        WHEN \n            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) IS NOT NULL AND \n            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE) IS NOT NULL \n        THEN\n            DATEDIFF(\n                'day',\n                CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE),\n                CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE)\n            ) + 1\n        ELSE 1\n    END) AS length_of_stay,\n    9 AS admit_source_code,\n    'Information Not Available' AS admit_source_description,\n    9 AS admit_type_code,\n    'Unknown' AS admit_type_description,\n    00 AS discharge_disposition_code,\n    'Unknown Value (but present in data)' AS discharge_disposition_description,\n    MAX(REPLACE(REPLACE(JSON_EXTRACT(e, '$.participant[0].individual.reference'), '\"Practitioner/', ''), '\"', '')) AS attending_provider_id,\n    NULL AS facility_npi,\n    'snomed' AS primary_diagnosis_code_type,\n    MAX(REPLACE(JSON_EXTRACT(e, '$.reasonCode[0].coding[0].code'), '\"', '')) AS primary_diagnosis_code,\n    MAX(REPLACE(JSON_EXTRACT(e, '$.reasonCode[0].coding[0].display'), '\"', '')) AS primary_diagnosis_description,\n    MAX(icd.\"MS-DRG\") AS ms_drg_code,\n    MAX(icd.\"MS-DRG_description\") AS ms_drg_description,\n    MAX(apr.apr_drg_code) AS apr_drg_code,\n    MAX(apr.apr_drg_description) AS apr_drg_description,\n    MAX(REPLACE(JSON_EXTRACT(ex, '$.payment.amount.value'), '\"', '')) AS paid_amount,\n    MAX(REPLACE(JSON_EXTRACT(ex, '$.total[0].amount.value'), '\"', '')) AS allowed_amount,\n    MAX(REPLACE(JSON_EXTRACT(ex, '$.total[0].amount.value'), '\"', '')) AS charge_amount,\n    'SyntheaFhir' AS data_source\nFROM \"synthea\".\"json\".\"Encounter\" e\nLEFT JOIN \"synthea\".\"json\".\"ExplanationOfBenefit\" ex\n    ON REPLACE(JSON_EXTRACT(e, '$.id'), '\"', '') = REPLACE(REPLACE(JSON_EXTRACT(ex, '$.item[0].encounter[0].reference'), '\"Encounter/', ''), '\"', '')\nJOIN \"synthea\".\"terminology\".\"snomed_icd_10_map\" sno\n    ON REPLACE(JSON_EXTRACT(e, '$.reasonCode[0].coding[0].code'), '\"', '') = sno.referenced_component_id\nJOIN \"synthea\".\"reference\".\"icd10cm_to_msdrg_v41\" icd\n    ON sno.map_target = REPLACE(icd.ICD10, '.', '')\nJOIN \"synthea\".\"terminology\".\"apr_drg\" apr\n    ON icd.MDC = apr.mdc_code\nGROUP BY REPLACE(JSON_EXTRACT(e, '$.id'), '\"', '')", "relation_name": "\"synthea\".\"tuva_input\".\"encounter\""}], "elapsed_time": 117.7970769405365, "args": {"use_colors_file": true, "enable_legacy_logger": false, "vars": {}, "which": "build", "log_level": "info", "exclude": [], "show_resource_report": false, "log_format": "default", "log_path": "/workspaces/synthea_dw/tuva/logs", "warn_error_options": {"include": [], "exclude": []}, "log_file_max_bytes": 10485760, "print": true, "partial_parse": true, "quiet": false, "static_parser": true, "send_anonymous_usage_stats": true, "write_json": true, "introspect": true, "project_dir": "/workspaces/synthea_dw/tuva", "favor_state": false, "log_format_file": "debug", "strict_mode": false, "log_level_file": "debug", "partial_parse_file_diff": true, "populate_cache": true, "select": [], "use_colors": true, "printer_width": 80, "show": false, "indirect_selection": "eager", "invocation_command": "dbt build", "defer": false, "macro_debugging": false, "resource_types": [], "version_check": true, "profiles_dir": "/workspaces/synthea_dw/tuva", "cache_selected_only": false, "include_saved_query": false}}