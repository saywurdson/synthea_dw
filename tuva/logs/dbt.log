[0m01:21:06.654556 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim"} */

  
  create view "synthea"."tuva_input"."medical_claim__dbt_tmp" as (
    -- models/medical_claim.sql
/*
SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[0].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[0].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[1].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[1].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)


UNION
*/
SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[3].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[2].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[2].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[2].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)
/*
UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    aprdrg.apr_drg_code AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[3].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[3].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'

UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[4].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    aprdrg.apr_drg_code AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[4].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[4].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
*/
  );

[0m01:21:06.685555 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.medical_claim (execute): 01:21:06.575247 => 01:21:06.685319
[0m01:21:06.686159 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: ROLLBACK
[0m01:21:06.688340 [debug] [Thread-1 (]: Failed to rollback 'model.the_tuva_project.medical_claim'
[0m01:21:06.688793 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: Close
[0m01:21:06.694815 [debug] [Thread-1 (]: Runtime Error in model medical_claim (models/tuva_input/medical_claim.sql)
  Binder Error: column "resourceType" must appear in the GROUP BY clause or must be part of an aggregate function.
  Either add it to the GROUP BY list, or use "ANY_VALUE(resourceType)" if the exact value of "resourceType" is not important.
[0m01:21:06.695758 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '07c08d18-643e-4d8d-a178-6bbcc41e755c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa5bbcb50>]}
[0m01:21:06.696384 [error] [Thread-1 (]: 1 of 1 ERROR creating sql view model tuva_input.medical_claim .................. [[31mERROR[0m in 0.20s]
[0m01:21:06.696991 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.medical_claim
[0m01:21:06.698877 [debug] [MainThread]: Using duckdb connection "master"
[0m01:21:06.699373 [debug] [MainThread]: On master: BEGIN
[0m01:21:06.699713 [debug] [MainThread]: Opening a new connection, currently in state closed
[0m01:21:06.738302 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:21:06.738807 [debug] [MainThread]: On master: COMMIT
[0m01:21:06.739157 [debug] [MainThread]: Using duckdb connection "master"
[0m01:21:06.739500 [debug] [MainThread]: On master: COMMIT
[0m01:21:06.739880 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:21:06.740200 [debug] [MainThread]: On master: Close
[0m01:21:06.744702 [debug] [MainThread]: Connection 'master' was properly closed.
[0m01:21:06.745179 [debug] [MainThread]: Connection 'list_synthea_claims_expanded' was properly closed.
[0m01:21:06.745540 [debug] [MainThread]: Connection 'list_synthea_ccsr' was properly closed.
[0m01:21:06.745835 [debug] [MainThread]: Connection 'list_synthea_hcc_suspecting' was properly closed.
[0m01:21:06.746138 [debug] [MainThread]: Connection 'list_synthea_insights' was properly closed.
[0m01:21:06.746476 [debug] [MainThread]: Connection 'model.the_tuva_project.medical_claim' was properly closed.
[0m01:21:06.747686 [info ] [MainThread]: 
[0m01:21:06.748065 [info ] [MainThread]: Finished running 1 view model in 0 hours 0 minutes and 0.82 seconds (0.82s).
[0m01:21:06.748640 [debug] [MainThread]: Command end result
[0m01:21:06.784721 [info ] [MainThread]: 
[0m01:21:06.785292 [info ] [MainThread]: [31mCompleted with 1 error and 0 warnings:[0m
[0m01:21:06.785715 [info ] [MainThread]: 
[0m01:21:06.786131 [error] [MainThread]:   Runtime Error in model medical_claim (models/tuva_input/medical_claim.sql)
  Binder Error: column "resourceType" must appear in the GROUP BY clause or must be part of an aggregate function.
  Either add it to the GROUP BY list, or use "ANY_VALUE(resourceType)" if the exact value of "resourceType" is not important.
[0m01:21:06.786517 [info ] [MainThread]: 
[0m01:21:06.786926 [info ] [MainThread]: Done. PASS=0 WARN=0 ERROR=1 SKIP=0 TOTAL=1
[0m01:21:06.787680 [debug] [MainThread]: Resource report: {"command_name": "run", "command_wall_clock_time": 1.9079316, "process_user_time": 2.697336, "process_kernel_time": 0.281434, "process_mem_max_rss": "285096", "command_success": false, "process_in_blocks": "0", "process_out_blocks": "0"}
[0m01:21:06.788208 [debug] [MainThread]: Command `dbt run` failed at 01:21:06.788100 after 1.91 seconds
[0m01:21:06.788631 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffae08a6d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffae089d10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffb3c62d50>]}
[0m01:21:06.789037 [debug] [MainThread]: Flushing usage events
[0m01:24:40.781582 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff819d3dd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff820dd710>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff819d1350>]}


============================== 01:24:40.782844 | 5e9fd606-9c4a-410f-84de-3a8dec61bc1b ==============================
[0m01:24:40.782844 [info ] [MainThread]: Running with dbt=1.7.7
[0m01:24:40.783359 [debug] [MainThread]: running dbt with arguments {'write_json': 'True', 'target_path': 'None', 'fail_fast': 'False', 'indirect_selection': 'eager', 'quiet': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'log_path': '/workspaces/synthea_dw/tuva/logs', 'warn_error': 'None', 'invocation_command': 'dbt run -m medical_claim.sql', 'no_print': 'None', 'debug': 'False', 'use_colors': 'True', 'partial_parse': 'True', 'version_check': 'True', 'profiles_dir': '/workspaces/synthea_dw/tuva', 'use_experimental_parser': 'False', 'log_cache_events': 'False', 'log_format': 'default', 'static_parser': 'True', 'cache_selected_only': 'False', 'send_anonymous_usage_stats': 'True', 'printer_width': '80'}
[0m01:24:40.955907 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '5e9fd606-9c4a-410f-84de-3a8dec61bc1b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7a54ad50>]}
[0m01:24:41.030871 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '5e9fd606-9c4a-410f-84de-3a8dec61bc1b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7a5381d0>]}
[0m01:24:41.031616 [info ] [MainThread]: Registered adapter: duckdb=1.7.1
[0m01:24:41.038991 [debug] [MainThread]: checksum: 54188551c516f4dd1c42b8d9c289f2bf49f18ae42632e2ba36a64ad29fd60da4, vars: {}, profile: , target: , version: 1.7.7
[0m01:24:41.324405 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 1 files changed.
[0m01:24:41.325776 [debug] [MainThread]: Partial parsing: updated file: the_tuva_project://models/tuva_input/medical_claim.sql
[0m01:24:41.579024 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '5e9fd606-9c4a-410f-84de-3a8dec61bc1b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff79e7d050>]}
[0m01:24:41.708291 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '5e9fd606-9c4a-410f-84de-3a8dec61bc1b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7a4f6690>]}
[0m01:24:41.708876 [info ] [MainThread]: Found 296 models, 53 tests, 121 sources, 0 exposures, 0 metrics, 531 macros, 0 groups, 0 semantic models
[0m01:24:41.709312 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '5e9fd606-9c4a-410f-84de-3a8dec61bc1b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8230c410>]}
[0m01:24:41.715538 [info ] [MainThread]: 
[0m01:24:41.716335 [debug] [MainThread]: Acquiring new duckdb connection 'master'
[0m01:24:41.717422 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea'
[0m01:24:41.725177 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m01:24:41.725705 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m01:24:41.726178 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m01:24:41.784318 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:41.785802 [debug] [ThreadPool]: On list_synthea: Close
[0m01:24:41.790721 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea, now create_synthea_tuva_input)
[0m01:24:41.791487 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "tuva_input"
"
[0m01:24:41.796462 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m01:24:41.796923 [debug] [ThreadPool]: On create_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_tuva_input"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m01:24:41.797321 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:24:41.841839 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:41.843033 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m01:24:41.843411 [debug] [ThreadPool]: On create_synthea_tuva_input: BEGIN
[0m01:24:41.843818 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:41.844204 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m01:24:41.844613 [debug] [ThreadPool]: On create_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_tuva_input"} */

    
    
        create schema if not exists "synthea"."tuva_input"
    
[0m01:24:41.845036 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:41.845673 [debug] [ThreadPool]: On create_synthea_tuva_input: COMMIT
[0m01:24:41.846029 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m01:24:41.846360 [debug] [ThreadPool]: On create_synthea_tuva_input: COMMIT
[0m01:24:41.846730 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:41.847086 [debug] [ThreadPool]: On create_synthea_tuva_input: Close
[0m01:24:41.857783 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_tuva_input, now list_synthea_data_quality)
[0m01:24:41.858414 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_readmissions'
[0m01:24:41.859036 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_claims_expanded'
[0m01:24:41.859565 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_financial_pmpm'
[0m01:24:41.863712 [debug] [ThreadPool]: Using duckdb connection "list_synthea_data_quality"
[0m01:24:41.865453 [debug] [ThreadPool]: Using duckdb connection "list_synthea_readmissions"
[0m01:24:41.866913 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_expanded"
[0m01:24:41.868288 [debug] [ThreadPool]: Using duckdb connection "list_synthea_financial_pmpm"
[0m01:24:41.868673 [debug] [ThreadPool]: On list_synthea_data_quality: BEGIN
[0m01:24:41.869046 [debug] [ThreadPool]: On list_synthea_readmissions: BEGIN
[0m01:24:41.869398 [debug] [ThreadPool]: On list_synthea_claims_expanded: BEGIN
[0m01:24:41.869741 [debug] [ThreadPool]: On list_synthea_financial_pmpm: BEGIN
[0m01:24:41.870131 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:24:41.870501 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m01:24:41.870860 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m01:24:41.871200 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m01:24:41.916264 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:41.916792 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:41.917236 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:41.917643 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:41.917892 [debug] [ThreadPool]: Using duckdb connection "list_synthea_data_quality"
[0m01:24:41.918240 [debug] [ThreadPool]: Using duckdb connection "list_synthea_readmissions"
[0m01:24:41.918588 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_expanded"
[0m01:24:41.918933 [debug] [ThreadPool]: Using duckdb connection "list_synthea_financial_pmpm"
[0m01:24:41.919296 [debug] [ThreadPool]: On list_synthea_data_quality: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_data_quality"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'data_quality'
    and table_catalog = 'synthea'
  
[0m01:24:41.919684 [debug] [ThreadPool]: On list_synthea_readmissions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_readmissions"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'readmissions'
    and table_catalog = 'synthea'
  
[0m01:24:41.920117 [debug] [ThreadPool]: On list_synthea_claims_expanded: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_claims_expanded"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'claims_expanded'
    and table_catalog = 'synthea'
  
[0m01:24:41.920511 [debug] [ThreadPool]: On list_synthea_financial_pmpm: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_financial_pmpm"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'financial_pmpm'
    and table_catalog = 'synthea'
  
[0m01:24:41.930986 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:41.931404 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:41.931727 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:41.932084 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:41.943141 [debug] [ThreadPool]: On list_synthea_data_quality: ROLLBACK
[0m01:24:41.944055 [debug] [ThreadPool]: On list_synthea_claims_expanded: ROLLBACK
[0m01:24:41.944756 [debug] [ThreadPool]: On list_synthea_financial_pmpm: ROLLBACK
[0m01:24:41.945567 [debug] [ThreadPool]: On list_synthea_readmissions: ROLLBACK
[0m01:24:41.946198 [debug] [ThreadPool]: Failed to rollback 'list_synthea_data_quality'
[0m01:24:41.946529 [debug] [ThreadPool]: Failed to rollback 'list_synthea_claims_expanded'
[0m01:24:41.946984 [debug] [ThreadPool]: Failed to rollback 'list_synthea_financial_pmpm'
[0m01:24:41.947470 [debug] [ThreadPool]: Failed to rollback 'list_synthea_readmissions'
[0m01:24:41.947901 [debug] [ThreadPool]: On list_synthea_data_quality: Close
[0m01:24:41.948280 [debug] [ThreadPool]: On list_synthea_claims_expanded: Close
[0m01:24:41.948641 [debug] [ThreadPool]: On list_synthea_financial_pmpm: Close
[0m01:24:41.948982 [debug] [ThreadPool]: On list_synthea_readmissions: Close
[0m01:24:41.949865 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_data_quality, now list_synthea_tuva_input)
[0m01:24:41.954203 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_claims_expanded, now list_synthea_claims_preprocessing)
[0m01:24:41.955101 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_financial_pmpm, now list_synthea_cms_hcc)
[0m01:24:41.961076 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_readmissions, now list_synthea_hcc_suspecting)
[0m01:24:41.965348 [debug] [ThreadPool]: Using duckdb connection "list_synthea_tuva_input"
[0m01:24:41.966763 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_preprocessing"
[0m01:24:41.968195 [debug] [ThreadPool]: Using duckdb connection "list_synthea_cms_hcc"
[0m01:24:41.969644 [debug] [ThreadPool]: Using duckdb connection "list_synthea_hcc_suspecting"
[0m01:24:41.970083 [debug] [ThreadPool]: On list_synthea_tuva_input: BEGIN
[0m01:24:41.970472 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: BEGIN
[0m01:24:41.970847 [debug] [ThreadPool]: On list_synthea_cms_hcc: BEGIN
[0m01:24:41.971197 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: BEGIN
[0m01:24:41.971564 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:24:41.971936 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:24:41.972309 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:24:41.972662 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:24:42.017045 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:42.017471 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:42.017937 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:42.018389 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:42.018773 [debug] [ThreadPool]: Using duckdb connection "list_synthea_tuva_input"
[0m01:24:42.019271 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_preprocessing"
[0m01:24:42.019751 [debug] [ThreadPool]: Using duckdb connection "list_synthea_cms_hcc"
[0m01:24:42.020188 [debug] [ThreadPool]: Using duckdb connection "list_synthea_hcc_suspecting"
[0m01:24:42.020560 [debug] [ThreadPool]: On list_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_tuva_input"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'tuva_input'
    and table_catalog = 'synthea'
  
[0m01:24:42.020957 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_claims_preprocessing"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'claims_preprocessing'
    and table_catalog = 'synthea'
  
[0m01:24:42.021364 [debug] [ThreadPool]: On list_synthea_cms_hcc: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_cms_hcc"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'cms_hcc'
    and table_catalog = 'synthea'
  
[0m01:24:42.021744 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_hcc_suspecting"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'hcc_suspecting'
    and table_catalog = 'synthea'
  
[0m01:24:42.031684 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:42.032095 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:42.032372 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:42.032706 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:42.043669 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: ROLLBACK
[0m01:24:42.044548 [debug] [ThreadPool]: On list_synthea_tuva_input: ROLLBACK
[0m01:24:42.045256 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: ROLLBACK
[0m01:24:42.046013 [debug] [ThreadPool]: On list_synthea_cms_hcc: ROLLBACK
[0m01:24:42.046390 [debug] [ThreadPool]: Failed to rollback 'list_synthea_claims_preprocessing'
[0m01:24:42.046857 [debug] [ThreadPool]: Failed to rollback 'list_synthea_tuva_input'
[0m01:24:42.047308 [debug] [ThreadPool]: Failed to rollback 'list_synthea_hcc_suspecting'
[0m01:24:42.047766 [debug] [ThreadPool]: Failed to rollback 'list_synthea_cms_hcc'
[0m01:24:42.048134 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: Close
[0m01:24:42.048475 [debug] [ThreadPool]: On list_synthea_tuva_input: Close
[0m01:24:42.048819 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: Close
[0m01:24:42.049222 [debug] [ThreadPool]: On list_synthea_cms_hcc: Close
[0m01:24:42.050090 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_claims_preprocessing, now list_synthea_ccsr)
[0m01:24:42.059608 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_tuva_input, now list_synthea_chronic_conditions)
[0m01:24:42.061552 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_hcc_suspecting, now list_synthea_core)
[0m01:24:42.067199 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_cms_hcc, now list_synthea_quality_measures)
[0m01:24:42.071199 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ccsr"
[0m01:24:42.073678 [debug] [ThreadPool]: Using duckdb connection "list_synthea_chronic_conditions"
[0m01:24:42.075130 [debug] [ThreadPool]: Using duckdb connection "list_synthea_core"
[0m01:24:42.076530 [debug] [ThreadPool]: Using duckdb connection "list_synthea_quality_measures"
[0m01:24:42.076960 [debug] [ThreadPool]: On list_synthea_ccsr: BEGIN
[0m01:24:42.077352 [debug] [ThreadPool]: On list_synthea_chronic_conditions: BEGIN
[0m01:24:42.077728 [debug] [ThreadPool]: On list_synthea_core: BEGIN
[0m01:24:42.078108 [debug] [ThreadPool]: On list_synthea_quality_measures: BEGIN
[0m01:24:42.078466 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:24:42.078841 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:24:42.079187 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:24:42.079524 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:24:42.130219 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:42.130619 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:42.131069 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:42.131513 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:42.131887 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ccsr"
[0m01:24:42.132243 [debug] [ThreadPool]: Using duckdb connection "list_synthea_chronic_conditions"
[0m01:24:42.132593 [debug] [ThreadPool]: Using duckdb connection "list_synthea_core"
[0m01:24:42.132949 [debug] [ThreadPool]: Using duckdb connection "list_synthea_quality_measures"
[0m01:24:42.133357 [debug] [ThreadPool]: On list_synthea_ccsr: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_ccsr"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'ccsr'
    and table_catalog = 'synthea'
  
[0m01:24:42.133720 [debug] [ThreadPool]: On list_synthea_chronic_conditions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_chronic_conditions"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'chronic_conditions'
    and table_catalog = 'synthea'
  
[0m01:24:42.134121 [debug] [ThreadPool]: On list_synthea_core: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_core"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'core'
    and table_catalog = 'synthea'
  
[0m01:24:42.134490 [debug] [ThreadPool]: On list_synthea_quality_measures: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_quality_measures"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'quality_measures'
    and table_catalog = 'synthea'
  
[0m01:24:42.144192 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:42.144492 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:42.144788 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:42.145049 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:42.155959 [debug] [ThreadPool]: On list_synthea_core: ROLLBACK
[0m01:24:42.156817 [debug] [ThreadPool]: On list_synthea_ccsr: ROLLBACK
[0m01:24:42.157620 [debug] [ThreadPool]: On list_synthea_chronic_conditions: ROLLBACK
[0m01:24:42.158003 [debug] [ThreadPool]: Failed to rollback 'list_synthea_core'
[0m01:24:42.158889 [debug] [ThreadPool]: On list_synthea_quality_measures: ROLLBACK
[0m01:24:42.159195 [debug] [ThreadPool]: Failed to rollback 'list_synthea_ccsr'
[0m01:24:42.159628 [debug] [ThreadPool]: Failed to rollback 'list_synthea_chronic_conditions'
[0m01:24:42.160003 [debug] [ThreadPool]: On list_synthea_core: Close
[0m01:24:42.160424 [debug] [ThreadPool]: Failed to rollback 'list_synthea_quality_measures'
[0m01:24:42.160765 [debug] [ThreadPool]: On list_synthea_ccsr: Close
[0m01:24:42.161141 [debug] [ThreadPool]: On list_synthea_chronic_conditions: Close
[0m01:24:42.162025 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_core, now list_synthea_insights)
[0m01:24:42.165265 [debug] [ThreadPool]: On list_synthea_quality_measures: Close
[0m01:24:42.166091 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_ccsr, now list_synthea_ed_classification)
[0m01:24:42.169879 [debug] [ThreadPool]: Using duckdb connection "list_synthea_insights"
[0m01:24:42.179416 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ed_classification"
[0m01:24:42.179907 [debug] [ThreadPool]: On list_synthea_insights: BEGIN
[0m01:24:42.180305 [debug] [ThreadPool]: On list_synthea_ed_classification: BEGIN
[0m01:24:42.180656 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:24:42.181035 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:24:42.233428 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:42.233852 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:42.234267 [debug] [ThreadPool]: Using duckdb connection "list_synthea_insights"
[0m01:24:42.234663 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ed_classification"
[0m01:24:42.235083 [debug] [ThreadPool]: On list_synthea_insights: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_insights"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'insights'
    and table_catalog = 'synthea'
  
[0m01:24:42.235511 [debug] [ThreadPool]: On list_synthea_ed_classification: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_ed_classification"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'ed_classification'
    and table_catalog = 'synthea'
  
[0m01:24:42.245367 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:42.245696 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:24:42.255614 [debug] [ThreadPool]: On list_synthea_ed_classification: ROLLBACK
[0m01:24:42.256632 [debug] [ThreadPool]: On list_synthea_insights: ROLLBACK
[0m01:24:42.257093 [debug] [ThreadPool]: Failed to rollback 'list_synthea_ed_classification'
[0m01:24:42.257568 [debug] [ThreadPool]: Failed to rollback 'list_synthea_insights'
[0m01:24:42.257943 [debug] [ThreadPool]: On list_synthea_ed_classification: Close
[0m01:24:42.258303 [debug] [ThreadPool]: On list_synthea_insights: Close
[0m01:24:42.265988 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '5e9fd606-9c4a-410f-84de-3a8dec61bc1b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff79a11c90>]}
[0m01:24:42.266620 [debug] [MainThread]: Using duckdb connection "master"
[0m01:24:42.266996 [debug] [MainThread]: On master: BEGIN
[0m01:24:42.267394 [debug] [MainThread]: Opening a new connection, currently in state init
[0m01:24:42.314211 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:24:42.314732 [debug] [MainThread]: On master: COMMIT
[0m01:24:42.315101 [debug] [MainThread]: Using duckdb connection "master"
[0m01:24:42.315430 [debug] [MainThread]: On master: COMMIT
[0m01:24:42.315808 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:24:42.316164 [debug] [MainThread]: On master: Close
[0m01:24:42.320713 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
[0m01:24:42.321247 [info ] [MainThread]: 
[0m01:24:42.323248 [debug] [Thread-1 (]: Began running node model.the_tuva_project.medical_claim
[0m01:24:42.323736 [info ] [Thread-1 (]: 1 of 1 START sql view model tuva_input.medical_claim ........................... [RUN]
[0m01:24:42.324434 [debug] [Thread-1 (]: Acquiring new duckdb connection 'model.the_tuva_project.medical_claim'
[0m01:24:42.325010 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.medical_claim
[0m01:24:42.394052 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.medical_claim"
[0m01:24:42.395921 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.medical_claim (compile): 01:24:42.325439 => 01:24:42.395709
[0m01:24:42.396341 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.medical_claim
[0m01:24:42.414333 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.medical_claim"
[0m01:24:42.415800 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m01:24:42.416193 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: BEGIN
[0m01:24:42.416545 [debug] [Thread-1 (]: Opening a new connection, currently in state init
[0m01:24:42.460806 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:24:42.461447 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m01:24:42.466213 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim"} */

  
  create view "synthea"."tuva_input"."medical_claim__dbt_tmp" as (
    -- models/medical_claim.sql
/*
SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[0].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[0].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[1].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[1].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)


UNION
*/
SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[2].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[2].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[2].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[2].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[2].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)
/*
UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    aprdrg.apr_drg_code AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[3].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[3].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'

UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[4].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    aprdrg.apr_drg_code AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[4].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[4].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
*/
  );

[0m01:24:42.497877 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:24:42.502564 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m01:24:42.503000 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim"} */
alter view "synthea"."tuva_input"."medical_claim" rename to "medical_claim__dbt_backup"
[0m01:24:42.503760 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:24:42.505745 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m01:24:42.506144 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim"} */
alter view "synthea"."tuva_input"."medical_claim__dbt_tmp" rename to "medical_claim"
[0m01:24:42.506780 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:24:42.515978 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: COMMIT
[0m01:24:42.516389 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m01:24:42.516754 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: COMMIT
[0m01:24:42.525577 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:24:42.528875 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m01:24:42.529277 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim"} */
drop view if exists "synthea"."tuva_input"."medical_claim__dbt_backup" cascade
[0m01:24:42.530275 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:24:42.531353 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.medical_claim (execute): 01:24:42.396624 => 01:24:42.531212
[0m01:24:42.531724 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: Close
[0m01:24:42.673288 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '5e9fd606-9c4a-410f-84de-3a8dec61bc1b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff79b07d50>]}
[0m01:24:42.674023 [info ] [Thread-1 (]: 1 of 1 OK created sql view model tuva_input.medical_claim ...................... [[32mOK[0m in 0.35s]
[0m01:24:42.674570 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.medical_claim
[0m01:24:42.675990 [debug] [MainThread]: Using duckdb connection "master"
[0m01:24:42.676660 [debug] [MainThread]: On master: BEGIN
[0m01:24:42.677121 [debug] [MainThread]: Opening a new connection, currently in state closed
[0m01:24:42.723659 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:24:42.724229 [debug] [MainThread]: On master: COMMIT
[0m01:24:42.724599 [debug] [MainThread]: Using duckdb connection "master"
[0m01:24:42.725008 [debug] [MainThread]: On master: COMMIT
[0m01:24:42.725400 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:24:42.725739 [debug] [MainThread]: On master: Close
[0m01:24:42.730130 [debug] [MainThread]: Connection 'master' was properly closed.
[0m01:24:42.730582 [debug] [MainThread]: Connection 'list_synthea_chronic_conditions' was properly closed.
[0m01:24:42.730932 [debug] [MainThread]: Connection 'list_synthea_insights' was properly closed.
[0m01:24:42.731259 [debug] [MainThread]: Connection 'list_synthea_ed_classification' was properly closed.
[0m01:24:42.731568 [debug] [MainThread]: Connection 'list_synthea_quality_measures' was properly closed.
[0m01:24:42.731885 [debug] [MainThread]: Connection 'model.the_tuva_project.medical_claim' was properly closed.
[0m01:24:42.733119 [info ] [MainThread]: 
[0m01:24:42.733612 [info ] [MainThread]: Finished running 1 view model in 0 hours 0 minutes and 1.02 seconds (1.02s).
[0m01:24:42.734238 [debug] [MainThread]: Command end result
[0m01:24:42.767907 [info ] [MainThread]: 
[0m01:24:42.768412 [info ] [MainThread]: [32mCompleted successfully[0m
[0m01:24:42.768771 [info ] [MainThread]: 
[0m01:24:42.769183 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=0 SKIP=0 TOTAL=1
[0m01:24:42.769900 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": true, "command_wall_clock_time": 2.021004, "process_user_time": 2.80485, "process_kernel_time": 0.304152, "process_mem_max_rss": "302856", "process_in_blocks": "0", "process_out_blocks": "0"}
[0m01:24:42.770378 [debug] [MainThread]: Command `dbt run` succeeded at 01:24:42.770281 after 2.02 seconds
[0m01:24:42.770747 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8216b910>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff87772d50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff877738d0>]}
[0m01:24:42.771114 [debug] [MainThread]: Flushing usage events
[0m01:32:52.959944 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8e11a510>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8df81010>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8e13b350>]}


============================== 01:32:52.961350 | 2813d50f-2da0-4d98-bdca-6425fe99b152 ==============================
[0m01:32:52.961350 [info ] [MainThread]: Running with dbt=1.7.7
[0m01:32:52.962031 [debug] [MainThread]: running dbt with arguments {'profiles_dir': '/workspaces/synthea_dw/tuva', 'use_colors': 'True', 'indirect_selection': 'eager', 'write_json': 'True', 'warn_error': 'None', 'debug': 'False', 'cache_selected_only': 'False', 'quiet': 'False', 'version_check': 'True', 'log_cache_events': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'fail_fast': 'False', 'no_print': 'None', 'log_format': 'default', 'introspect': 'True', 'partial_parse': 'True', 'target_path': 'None', 'send_anonymous_usage_stats': 'True', 'static_parser': 'True', 'log_path': '/workspaces/synthea_dw/tuva/logs', 'invocation_command': 'dbt run -m medical_claim.sql', 'use_experimental_parser': 'False', 'printer_width': '80'}
[0m01:32:53.133202 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '2813d50f-2da0-4d98-bdca-6425fe99b152', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff868cfe10>]}
[0m01:32:53.208368 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '2813d50f-2da0-4d98-bdca-6425fe99b152', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff86889550>]}
[0m01:32:53.209099 [info ] [MainThread]: Registered adapter: duckdb=1.7.1
[0m01:32:53.216285 [debug] [MainThread]: checksum: 54188551c516f4dd1c42b8d9c289f2bf49f18ae42632e2ba36a64ad29fd60da4, vars: {}, profile: , target: , version: 1.7.7
[0m01:32:53.496155 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 1 files changed.
[0m01:32:53.497556 [debug] [MainThread]: Partial parsing: updated file: the_tuva_project://models/tuva_input/medical_claim.sql
[0m01:32:53.755905 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '2813d50f-2da0-4d98-bdca-6425fe99b152', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8683d050>]}
[0m01:32:53.884068 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '2813d50f-2da0-4d98-bdca-6425fe99b152', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff85f00410>]}
[0m01:32:53.884660 [info ] [MainThread]: Found 296 models, 53 tests, 121 sources, 0 exposures, 0 metrics, 531 macros, 0 groups, 0 semantic models
[0m01:32:53.885143 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '2813d50f-2da0-4d98-bdca-6425fe99b152', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff861c41d0>]}
[0m01:32:53.891404 [info ] [MainThread]: 
[0m01:32:53.892205 [debug] [MainThread]: Acquiring new duckdb connection 'master'
[0m01:32:53.893155 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea'
[0m01:32:53.900450 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m01:32:53.901002 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m01:32:53.901363 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m01:32:53.950164 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:53.951852 [debug] [ThreadPool]: On list_synthea: Close
[0m01:32:53.957183 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea, now create_synthea_tuva_input)
[0m01:32:53.957962 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "tuva_input"
"
[0m01:32:53.962569 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m01:32:53.963249 [debug] [ThreadPool]: On create_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_tuva_input"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m01:32:53.963672 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:32:54.003574 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.004883 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m01:32:54.005265 [debug] [ThreadPool]: On create_synthea_tuva_input: BEGIN
[0m01:32:54.005671 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.006039 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m01:32:54.006399 [debug] [ThreadPool]: On create_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_tuva_input"} */

    
    
        create schema if not exists "synthea"."tuva_input"
    
[0m01:32:54.006848 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.007489 [debug] [ThreadPool]: On create_synthea_tuva_input: COMMIT
[0m01:32:54.007831 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m01:32:54.008150 [debug] [ThreadPool]: On create_synthea_tuva_input: COMMIT
[0m01:32:54.008524 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.008885 [debug] [ThreadPool]: On create_synthea_tuva_input: Close
[0m01:32:54.019557 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_tuva_input, now list_synthea_hcc_suspecting)
[0m01:32:54.020241 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_core'
[0m01:32:54.020802 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_data_quality'
[0m01:32:54.024302 [debug] [ThreadPool]: Using duckdb connection "list_synthea_hcc_suspecting"
[0m01:32:54.025374 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_cms_hcc'
[0m01:32:54.026913 [debug] [ThreadPool]: Using duckdb connection "list_synthea_core"
[0m01:32:54.028277 [debug] [ThreadPool]: Using duckdb connection "list_synthea_data_quality"
[0m01:32:54.028647 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: BEGIN
[0m01:32:54.030033 [debug] [ThreadPool]: Using duckdb connection "list_synthea_cms_hcc"
[0m01:32:54.030416 [debug] [ThreadPool]: On list_synthea_core: BEGIN
[0m01:32:54.030772 [debug] [ThreadPool]: On list_synthea_data_quality: BEGIN
[0m01:32:54.031182 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:32:54.031588 [debug] [ThreadPool]: On list_synthea_cms_hcc: BEGIN
[0m01:32:54.031984 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m01:32:54.032373 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m01:32:54.071074 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.071584 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m01:32:54.072250 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.072556 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.072818 [debug] [ThreadPool]: Using duckdb connection "list_synthea_hcc_suspecting"
[0m01:32:54.073503 [debug] [ThreadPool]: Using duckdb connection "list_synthea_core"
[0m01:32:54.073842 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.074224 [debug] [ThreadPool]: Using duckdb connection "list_synthea_data_quality"
[0m01:32:54.074625 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_hcc_suspecting"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'hcc_suspecting'
    and table_catalog = 'synthea'
  
[0m01:32:54.075023 [debug] [ThreadPool]: On list_synthea_core: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_core"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'core'
    and table_catalog = 'synthea'
  
[0m01:32:54.075392 [debug] [ThreadPool]: Using duckdb connection "list_synthea_cms_hcc"
[0m01:32:54.075743 [debug] [ThreadPool]: On list_synthea_data_quality: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_data_quality"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'data_quality'
    and table_catalog = 'synthea'
  
[0m01:32:54.076728 [debug] [ThreadPool]: On list_synthea_cms_hcc: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_cms_hcc"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'cms_hcc'
    and table_catalog = 'synthea'
  
[0m01:32:54.085487 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.085873 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.086170 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.086438 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.096994 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: ROLLBACK
[0m01:32:54.098052 [debug] [ThreadPool]: On list_synthea_cms_hcc: ROLLBACK
[0m01:32:54.099038 [debug] [ThreadPool]: On list_synthea_data_quality: ROLLBACK
[0m01:32:54.099634 [debug] [ThreadPool]: Failed to rollback 'list_synthea_hcc_suspecting'
[0m01:32:54.100516 [debug] [ThreadPool]: On list_synthea_core: ROLLBACK
[0m01:32:54.101000 [debug] [ThreadPool]: Failed to rollback 'list_synthea_cms_hcc'
[0m01:32:54.101489 [debug] [ThreadPool]: Failed to rollback 'list_synthea_data_quality'
[0m01:32:54.101936 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: Close
[0m01:32:54.102396 [debug] [ThreadPool]: Failed to rollback 'list_synthea_core'
[0m01:32:54.102757 [debug] [ThreadPool]: On list_synthea_cms_hcc: Close
[0m01:32:54.103136 [debug] [ThreadPool]: On list_synthea_data_quality: Close
[0m01:32:54.104025 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_hcc_suspecting, now list_synthea_quality_measures)
[0m01:32:54.105154 [debug] [ThreadPool]: On list_synthea_core: Close
[0m01:32:54.105968 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_cms_hcc, now list_synthea_ed_classification)
[0m01:32:54.108922 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_data_quality, now list_synthea_chronic_conditions)
[0m01:32:54.114004 [debug] [ThreadPool]: Using duckdb connection "list_synthea_quality_measures"
[0m01:32:54.118667 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_core, now list_synthea_financial_pmpm)
[0m01:32:54.123328 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ed_classification"
[0m01:32:54.124773 [debug] [ThreadPool]: Using duckdb connection "list_synthea_chronic_conditions"
[0m01:32:54.125211 [debug] [ThreadPool]: On list_synthea_quality_measures: BEGIN
[0m01:32:54.126616 [debug] [ThreadPool]: Using duckdb connection "list_synthea_financial_pmpm"
[0m01:32:54.127068 [debug] [ThreadPool]: On list_synthea_ed_classification: BEGIN
[0m01:32:54.127473 [debug] [ThreadPool]: On list_synthea_chronic_conditions: BEGIN
[0m01:32:54.127860 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:32:54.128268 [debug] [ThreadPool]: On list_synthea_financial_pmpm: BEGIN
[0m01:32:54.128652 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:32:54.129046 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:32:54.168980 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.169318 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:32:54.169798 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.170288 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.170665 [debug] [ThreadPool]: Using duckdb connection "list_synthea_quality_measures"
[0m01:32:54.171109 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.171465 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ed_classification"
[0m01:32:54.171822 [debug] [ThreadPool]: Using duckdb connection "list_synthea_chronic_conditions"
[0m01:32:54.172191 [debug] [ThreadPool]: On list_synthea_quality_measures: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_quality_measures"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'quality_measures'
    and table_catalog = 'synthea'
  
[0m01:32:54.172545 [debug] [ThreadPool]: Using duckdb connection "list_synthea_financial_pmpm"
[0m01:32:54.172905 [debug] [ThreadPool]: On list_synthea_ed_classification: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_ed_classification"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'ed_classification'
    and table_catalog = 'synthea'
  
[0m01:32:54.173314 [debug] [ThreadPool]: On list_synthea_chronic_conditions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_chronic_conditions"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'chronic_conditions'
    and table_catalog = 'synthea'
  
[0m01:32:54.173931 [debug] [ThreadPool]: On list_synthea_financial_pmpm: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_financial_pmpm"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'financial_pmpm'
    and table_catalog = 'synthea'
  
[0m01:32:54.181711 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.182179 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.182479 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.182736 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.192285 [debug] [ThreadPool]: On list_synthea_chronic_conditions: ROLLBACK
[0m01:32:54.193284 [debug] [ThreadPool]: On list_synthea_financial_pmpm: ROLLBACK
[0m01:32:54.193995 [debug] [ThreadPool]: On list_synthea_ed_classification: ROLLBACK
[0m01:32:54.194951 [debug] [ThreadPool]: On list_synthea_quality_measures: ROLLBACK
[0m01:32:54.195331 [debug] [ThreadPool]: Failed to rollback 'list_synthea_chronic_conditions'
[0m01:32:54.195808 [debug] [ThreadPool]: Failed to rollback 'list_synthea_financial_pmpm'
[0m01:32:54.196272 [debug] [ThreadPool]: Failed to rollback 'list_synthea_ed_classification'
[0m01:32:54.196727 [debug] [ThreadPool]: Failed to rollback 'list_synthea_quality_measures'
[0m01:32:54.197166 [debug] [ThreadPool]: On list_synthea_chronic_conditions: Close
[0m01:32:54.197518 [debug] [ThreadPool]: On list_synthea_financial_pmpm: Close
[0m01:32:54.197877 [debug] [ThreadPool]: On list_synthea_ed_classification: Close
[0m01:32:54.198231 [debug] [ThreadPool]: On list_synthea_quality_measures: Close
[0m01:32:54.199120 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_chronic_conditions, now list_synthea_insights)
[0m01:32:54.201033 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_financial_pmpm, now list_synthea_claims_preprocessing)
[0m01:32:54.202677 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_ed_classification, now list_synthea_ccsr)
[0m01:32:54.208160 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_quality_measures, now list_synthea_tuva_input)
[0m01:32:54.212765 [debug] [ThreadPool]: Using duckdb connection "list_synthea_insights"
[0m01:32:54.215309 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_preprocessing"
[0m01:32:54.217085 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ccsr"
[0m01:32:54.218737 [debug] [ThreadPool]: Using duckdb connection "list_synthea_tuva_input"
[0m01:32:54.219209 [debug] [ThreadPool]: On list_synthea_insights: BEGIN
[0m01:32:54.219617 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: BEGIN
[0m01:32:54.220011 [debug] [ThreadPool]: On list_synthea_ccsr: BEGIN
[0m01:32:54.220395 [debug] [ThreadPool]: On list_synthea_tuva_input: BEGIN
[0m01:32:54.220755 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:32:54.221123 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:32:54.221487 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:32:54.221848 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:32:54.270259 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.270862 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.271337 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.271817 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.272204 [debug] [ThreadPool]: Using duckdb connection "list_synthea_insights"
[0m01:32:54.272560 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_preprocessing"
[0m01:32:54.272911 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ccsr"
[0m01:32:54.273293 [debug] [ThreadPool]: Using duckdb connection "list_synthea_tuva_input"
[0m01:32:54.273689 [debug] [ThreadPool]: On list_synthea_insights: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_insights"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'insights'
    and table_catalog = 'synthea'
  
[0m01:32:54.274113 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_claims_preprocessing"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'claims_preprocessing'
    and table_catalog = 'synthea'
  
[0m01:32:54.274495 [debug] [ThreadPool]: On list_synthea_ccsr: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_ccsr"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'ccsr'
    and table_catalog = 'synthea'
  
[0m01:32:54.274878 [debug] [ThreadPool]: On list_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_tuva_input"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'tuva_input'
    and table_catalog = 'synthea'
  
[0m01:32:54.283489 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.283928 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.284223 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.284480 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.294685 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: ROLLBACK
[0m01:32:54.295651 [debug] [ThreadPool]: On list_synthea_tuva_input: ROLLBACK
[0m01:32:54.296359 [debug] [ThreadPool]: On list_synthea_ccsr: ROLLBACK
[0m01:32:54.297070 [debug] [ThreadPool]: On list_synthea_insights: ROLLBACK
[0m01:32:54.297436 [debug] [ThreadPool]: Failed to rollback 'list_synthea_claims_preprocessing'
[0m01:32:54.297896 [debug] [ThreadPool]: Failed to rollback 'list_synthea_tuva_input'
[0m01:32:54.298345 [debug] [ThreadPool]: Failed to rollback 'list_synthea_ccsr'
[0m01:32:54.298794 [debug] [ThreadPool]: Failed to rollback 'list_synthea_insights'
[0m01:32:54.299202 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: Close
[0m01:32:54.299572 [debug] [ThreadPool]: On list_synthea_tuva_input: Close
[0m01:32:54.299923 [debug] [ThreadPool]: On list_synthea_ccsr: Close
[0m01:32:54.300273 [debug] [ThreadPool]: On list_synthea_insights: Close
[0m01:32:54.301137 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_claims_preprocessing, now list_synthea_claims_expanded)
[0m01:32:54.308492 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_tuva_input, now list_synthea_readmissions)
[0m01:32:54.321047 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_expanded"
[0m01:32:54.322435 [debug] [ThreadPool]: Using duckdb connection "list_synthea_readmissions"
[0m01:32:54.322803 [debug] [ThreadPool]: On list_synthea_claims_expanded: BEGIN
[0m01:32:54.323201 [debug] [ThreadPool]: On list_synthea_readmissions: BEGIN
[0m01:32:54.323594 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:32:54.324023 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:32:54.369244 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.369668 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.370082 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_expanded"
[0m01:32:54.370448 [debug] [ThreadPool]: Using duckdb connection "list_synthea_readmissions"
[0m01:32:54.370831 [debug] [ThreadPool]: On list_synthea_claims_expanded: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_claims_expanded"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'claims_expanded'
    and table_catalog = 'synthea'
  
[0m01:32:54.371213 [debug] [ThreadPool]: On list_synthea_readmissions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_readmissions"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'readmissions'
    and table_catalog = 'synthea'
  
[0m01:32:54.379587 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.379973 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:32:54.389124 [debug] [ThreadPool]: On list_synthea_readmissions: ROLLBACK
[0m01:32:54.390095 [debug] [ThreadPool]: On list_synthea_claims_expanded: ROLLBACK
[0m01:32:54.390550 [debug] [ThreadPool]: Failed to rollback 'list_synthea_readmissions'
[0m01:32:54.391056 [debug] [ThreadPool]: Failed to rollback 'list_synthea_claims_expanded'
[0m01:32:54.391488 [debug] [ThreadPool]: On list_synthea_readmissions: Close
[0m01:32:54.391902 [debug] [ThreadPool]: On list_synthea_claims_expanded: Close
[0m01:32:54.401071 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '2813d50f-2da0-4d98-bdca-6425fe99b152', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff862a0bd0>]}
[0m01:32:54.401720 [debug] [MainThread]: Using duckdb connection "master"
[0m01:32:54.402208 [debug] [MainThread]: On master: BEGIN
[0m01:32:54.402660 [debug] [MainThread]: Opening a new connection, currently in state init
[0m01:32:54.444940 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:32:54.445473 [debug] [MainThread]: On master: COMMIT
[0m01:32:54.445866 [debug] [MainThread]: Using duckdb connection "master"
[0m01:32:54.446235 [debug] [MainThread]: On master: COMMIT
[0m01:32:54.446651 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:32:54.447021 [debug] [MainThread]: On master: Close
[0m01:32:54.451237 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
[0m01:32:54.451715 [info ] [MainThread]: 
[0m01:32:54.453919 [debug] [Thread-1 (]: Began running node model.the_tuva_project.medical_claim
[0m01:32:54.454423 [info ] [Thread-1 (]: 1 of 1 START sql view model tuva_input.medical_claim ........................... [RUN]
[0m01:32:54.455107 [debug] [Thread-1 (]: Acquiring new duckdb connection 'model.the_tuva_project.medical_claim'
[0m01:32:54.455622 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.medical_claim
[0m01:32:54.533482 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.medical_claim"
[0m01:32:54.535367 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.medical_claim (compile): 01:32:54.456071 => 01:32:54.535176
[0m01:32:54.535811 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.medical_claim
[0m01:32:54.554599 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.medical_claim"
[0m01:32:54.556110 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m01:32:54.556540 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: BEGIN
[0m01:32:54.556951 [debug] [Thread-1 (]: Opening a new connection, currently in state init
[0m01:32:54.595861 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:32:54.596421 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m01:32:54.601382 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim"} */

  
  create view "synthea"."tuva_input"."medical_claim__dbt_tmp" as (
    -- models/medical_claim.sql
/*
SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[0].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[0].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[1].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[1].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[2].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[2].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[2].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[2].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[2].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

UNION
*/
SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[3].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    aprdrg.apr_drg_code AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[3].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[3].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[3].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[3].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

/*
UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[4].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    aprdrg.apr_drg_code AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[4].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[4].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
*/
  );

[0m01:32:54.630715 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.medical_claim (execute): 01:32:54.536181 => 01:32:54.630452
[0m01:32:54.631308 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: ROLLBACK
[0m01:32:54.633540 [debug] [Thread-1 (]: Failed to rollback 'model.the_tuva_project.medical_claim'
[0m01:32:54.633973 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: Close
[0m01:32:54.639334 [debug] [Thread-1 (]: Runtime Error in model medical_claim (models/tuva_input/medical_claim.sql)
  Binder Error: column "apr_drg_code" must appear in the GROUP BY clause or must be part of an aggregate function.
  Either add it to the GROUP BY list, or use "ANY_VALUE(apr_drg_code)" if the exact value of "apr_drg_code" is not important.
[0m01:32:54.640324 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '2813d50f-2da0-4d98-bdca-6425fe99b152', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8dffe010>]}
[0m01:32:54.640917 [error] [Thread-1 (]: 1 of 1 ERROR creating sql view model tuva_input.medical_claim .................. [[31mERROR[0m in 0.19s]
[0m01:32:54.641528 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.medical_claim
[0m01:32:54.643817 [debug] [MainThread]: Using duckdb connection "master"
[0m01:32:54.644249 [debug] [MainThread]: On master: BEGIN
[0m01:32:54.644604 [debug] [MainThread]: Opening a new connection, currently in state closed
[0m01:32:54.685314 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:32:54.685839 [debug] [MainThread]: On master: COMMIT
[0m01:32:54.686204 [debug] [MainThread]: Using duckdb connection "master"
[0m01:32:54.686536 [debug] [MainThread]: On master: COMMIT
[0m01:32:54.686917 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:32:54.687240 [debug] [MainThread]: On master: Close
[0m01:32:54.691388 [debug] [MainThread]: Connection 'master' was properly closed.
[0m01:32:54.691875 [debug] [MainThread]: Connection 'list_synthea_readmissions' was properly closed.
[0m01:32:54.692225 [debug] [MainThread]: Connection 'list_synthea_claims_expanded' was properly closed.
[0m01:32:54.692546 [debug] [MainThread]: Connection 'list_synthea_insights' was properly closed.
[0m01:32:54.692900 [debug] [MainThread]: Connection 'list_synthea_ccsr' was properly closed.
[0m01:32:54.693253 [debug] [MainThread]: Connection 'model.the_tuva_project.medical_claim' was properly closed.
[0m01:32:54.694491 [info ] [MainThread]: 
[0m01:32:54.694914 [info ] [MainThread]: Finished running 1 view model in 0 hours 0 minutes and 0.80 seconds (0.80s).
[0m01:32:54.695555 [debug] [MainThread]: Command end result
[0m01:32:54.730782 [info ] [MainThread]: 
[0m01:32:54.731318 [info ] [MainThread]: [31mCompleted with 1 error and 0 warnings:[0m
[0m01:32:54.731710 [info ] [MainThread]: 
[0m01:32:54.732113 [error] [MainThread]:   Runtime Error in model medical_claim (models/tuva_input/medical_claim.sql)
  Binder Error: column "apr_drg_code" must appear in the GROUP BY clause or must be part of an aggregate function.
  Either add it to the GROUP BY list, or use "ANY_VALUE(apr_drg_code)" if the exact value of "apr_drg_code" is not important.
[0m01:32:54.732466 [info ] [MainThread]: 
[0m01:32:54.732843 [info ] [MainThread]: Done. PASS=0 WARN=0 ERROR=1 SKIP=0 TOTAL=1
[0m01:32:54.733591 [debug] [MainThread]: Resource report: {"command_name": "run", "command_wall_clock_time": 1.8078996, "process_user_time": 2.594681, "process_kernel_time": 0.298884, "process_mem_max_rss": "287940", "command_success": false, "process_in_blocks": "0", "process_out_blocks": "0"}
[0m01:32:54.734073 [debug] [MainThread]: Command `dbt run` failed at 01:32:54.733967 after 1.81 seconds
[0m01:32:54.734500 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8df82250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8df80710>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff93cb8c10>]}
[0m01:32:54.735006 [debug] [MainThread]: Flushing usage events
[0m01:33:24.952823 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffabdca950>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffabc3f3d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffabc3ea10>]}


============================== 01:33:24.954187 | f5b8301e-7412-4dca-80da-d948ba4dee90 ==============================
[0m01:33:24.954187 [info ] [MainThread]: Running with dbt=1.7.7
[0m01:33:24.954832 [debug] [MainThread]: running dbt with arguments {'indirect_selection': 'eager', 'static_parser': 'True', 'log_path': '/workspaces/synthea_dw/tuva/logs', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'warn_error': 'None', 'profiles_dir': '/workspaces/synthea_dw/tuva', 'printer_width': '80', 'use_colors': 'True', 'debug': 'False', 'introspect': 'True', 'send_anonymous_usage_stats': 'True', 'invocation_command': 'dbt run -m medical_claim.sql', 'target_path': 'None', 'version_check': 'True', 'use_experimental_parser': 'False', 'fail_fast': 'False', 'no_print': 'None', 'write_json': 'True', 'quiet': 'False', 'cache_selected_only': 'False', 'log_cache_events': 'False', 'partial_parse': 'True', 'log_format': 'default'}
[0m01:33:25.123915 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'f5b8301e-7412-4dca-80da-d948ba4dee90', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffabdc9f10>]}
[0m01:33:25.199240 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'f5b8301e-7412-4dca-80da-d948ba4dee90', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffac293b50>]}
[0m01:33:25.200002 [info ] [MainThread]: Registered adapter: duckdb=1.7.1
[0m01:33:25.207269 [debug] [MainThread]: checksum: 54188551c516f4dd1c42b8d9c289f2bf49f18ae42632e2ba36a64ad29fd60da4, vars: {}, profile: , target: , version: 1.7.7
[0m01:33:25.482595 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 1 files changed.
[0m01:33:25.483962 [debug] [MainThread]: Partial parsing: updated file: the_tuva_project://models/tuva_input/medical_claim.sql
[0m01:33:25.743597 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'f5b8301e-7412-4dca-80da-d948ba4dee90', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa4556b50>]}
[0m01:33:25.873510 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'f5b8301e-7412-4dca-80da-d948ba4dee90', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa3c55fd0>]}
[0m01:33:25.874109 [info ] [MainThread]: Found 296 models, 53 tests, 121 sources, 0 exposures, 0 metrics, 531 macros, 0 groups, 0 semantic models
[0m01:33:25.874669 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'f5b8301e-7412-4dca-80da-d948ba4dee90', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa4001b90>]}
[0m01:33:25.880971 [info ] [MainThread]: 
[0m01:33:25.881824 [debug] [MainThread]: Acquiring new duckdb connection 'master'
[0m01:33:25.882775 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea'
[0m01:33:25.889749 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m01:33:25.890183 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m01:33:25.890543 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m01:33:25.937406 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:25.938801 [debug] [ThreadPool]: On list_synthea: Close
[0m01:33:25.943662 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea, now create_synthea_tuva_input)
[0m01:33:25.944258 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "tuva_input"
"
[0m01:33:25.948797 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m01:33:25.949204 [debug] [ThreadPool]: On create_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_tuva_input"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m01:33:25.949588 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:33:25.986466 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:25.987738 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m01:33:25.988092 [debug] [ThreadPool]: On create_synthea_tuva_input: BEGIN
[0m01:33:25.988499 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:25.988827 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m01:33:25.989128 [debug] [ThreadPool]: On create_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_tuva_input"} */

    
    
        create schema if not exists "synthea"."tuva_input"
    
[0m01:33:25.989545 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:25.990156 [debug] [ThreadPool]: On create_synthea_tuva_input: COMMIT
[0m01:33:25.990472 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m01:33:25.990772 [debug] [ThreadPool]: On create_synthea_tuva_input: COMMIT
[0m01:33:25.991134 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:25.991480 [debug] [ThreadPool]: On create_synthea_tuva_input: Close
[0m01:33:26.001966 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_tuva_input, now list_synthea_financial_pmpm)
[0m01:33:26.002639 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_tuva_input'
[0m01:33:26.003188 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_insights'
[0m01:33:26.006668 [debug] [ThreadPool]: Using duckdb connection "list_synthea_financial_pmpm"
[0m01:33:26.007688 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_chronic_conditions'
[0m01:33:26.009652 [debug] [ThreadPool]: Using duckdb connection "list_synthea_tuva_input"
[0m01:33:26.011504 [debug] [ThreadPool]: Using duckdb connection "list_synthea_insights"
[0m01:33:26.011961 [debug] [ThreadPool]: On list_synthea_financial_pmpm: BEGIN
[0m01:33:26.013377 [debug] [ThreadPool]: Using duckdb connection "list_synthea_chronic_conditions"
[0m01:33:26.013793 [debug] [ThreadPool]: On list_synthea_tuva_input: BEGIN
[0m01:33:26.014218 [debug] [ThreadPool]: On list_synthea_insights: BEGIN
[0m01:33:26.014704 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:33:26.015198 [debug] [ThreadPool]: On list_synthea_chronic_conditions: BEGIN
[0m01:33:26.015768 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m01:33:26.016198 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m01:33:26.056655 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:26.056974 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m01:33:26.057819 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:26.058124 [debug] [ThreadPool]: Using duckdb connection "list_synthea_financial_pmpm"
[0m01:33:26.058426 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:26.059116 [debug] [ThreadPool]: Using duckdb connection "list_synthea_tuva_input"
[0m01:33:26.059424 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:26.059857 [debug] [ThreadPool]: On list_synthea_financial_pmpm: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_financial_pmpm"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'financial_pmpm'
    and table_catalog = 'synthea'
  
[0m01:33:26.060379 [debug] [ThreadPool]: Using duckdb connection "list_synthea_insights"
[0m01:33:26.060935 [debug] [ThreadPool]: On list_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_tuva_input"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'tuva_input'
    and table_catalog = 'synthea'
  
[0m01:33:26.061425 [debug] [ThreadPool]: Using duckdb connection "list_synthea_chronic_conditions"
[0m01:33:26.062170 [debug] [ThreadPool]: On list_synthea_insights: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_insights"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'insights'
    and table_catalog = 'synthea'
  
[0m01:33:26.062944 [debug] [ThreadPool]: On list_synthea_chronic_conditions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_chronic_conditions"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'chronic_conditions'
    and table_catalog = 'synthea'
  
[0m01:33:26.070720 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:26.071296 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:26.071699 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:26.072042 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:26.081778 [debug] [ThreadPool]: On list_synthea_financial_pmpm: ROLLBACK
[0m01:33:26.082831 [debug] [ThreadPool]: On list_synthea_chronic_conditions: ROLLBACK
[0m01:33:26.084035 [debug] [ThreadPool]: On list_synthea_insights: ROLLBACK
[0m01:33:26.085332 [debug] [ThreadPool]: On list_synthea_tuva_input: ROLLBACK
[0m01:33:26.085834 [debug] [ThreadPool]: Failed to rollback 'list_synthea_financial_pmpm'
[0m01:33:26.086172 [debug] [ThreadPool]: Failed to rollback 'list_synthea_chronic_conditions'
[0m01:33:26.086743 [debug] [ThreadPool]: Failed to rollback 'list_synthea_insights'
[0m01:33:26.087300 [debug] [ThreadPool]: Failed to rollback 'list_synthea_tuva_input'
[0m01:33:26.087743 [debug] [ThreadPool]: On list_synthea_financial_pmpm: Close
[0m01:33:26.088187 [debug] [ThreadPool]: On list_synthea_chronic_conditions: Close
[0m01:33:26.088586 [debug] [ThreadPool]: On list_synthea_insights: Close
[0m01:33:26.088946 [debug] [ThreadPool]: On list_synthea_tuva_input: Close
[0m01:33:26.089998 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_financial_pmpm, now list_synthea_quality_measures)
[0m01:33:26.092410 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_chronic_conditions, now list_synthea_claims_expanded)
[0m01:33:26.094439 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_insights, now list_synthea_hcc_suspecting)
[0m01:33:26.101116 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_tuva_input, now list_synthea_readmissions)
[0m01:33:26.104427 [debug] [ThreadPool]: Using duckdb connection "list_synthea_quality_measures"
[0m01:33:26.105878 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_expanded"
[0m01:33:26.107406 [debug] [ThreadPool]: Using duckdb connection "list_synthea_hcc_suspecting"
[0m01:33:26.109090 [debug] [ThreadPool]: Using duckdb connection "list_synthea_readmissions"
[0m01:33:26.109605 [debug] [ThreadPool]: On list_synthea_quality_measures: BEGIN
[0m01:33:26.110107 [debug] [ThreadPool]: On list_synthea_claims_expanded: BEGIN
[0m01:33:26.110637 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: BEGIN
[0m01:33:26.111099 [debug] [ThreadPool]: On list_synthea_readmissions: BEGIN
[0m01:33:26.111516 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:33:26.111899 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:33:26.112271 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:33:26.112671 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:33:26.153045 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:26.153484 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:26.153941 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:26.154421 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:26.154850 [debug] [ThreadPool]: Using duckdb connection "list_synthea_quality_measures"
[0m01:33:26.155227 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_expanded"
[0m01:33:26.155613 [debug] [ThreadPool]: Using duckdb connection "list_synthea_hcc_suspecting"
[0m01:33:26.155967 [debug] [ThreadPool]: Using duckdb connection "list_synthea_readmissions"
[0m01:33:26.156370 [debug] [ThreadPool]: On list_synthea_quality_measures: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_quality_measures"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'quality_measures'
    and table_catalog = 'synthea'
  
[0m01:33:26.156743 [debug] [ThreadPool]: On list_synthea_claims_expanded: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_claims_expanded"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'claims_expanded'
    and table_catalog = 'synthea'
  
[0m01:33:26.157105 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_hcc_suspecting"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'hcc_suspecting'
    and table_catalog = 'synthea'
  
[0m01:33:26.157512 [debug] [ThreadPool]: On list_synthea_readmissions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_readmissions"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'readmissions'
    and table_catalog = 'synthea'
  
[0m01:33:26.166092 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:26.166555 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:26.166874 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:26.167146 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:26.177142 [debug] [ThreadPool]: On list_synthea_quality_measures: ROLLBACK
[0m01:33:26.178326 [debug] [ThreadPool]: On list_synthea_claims_expanded: ROLLBACK
[0m01:33:26.179354 [debug] [ThreadPool]: On list_synthea_readmissions: ROLLBACK
[0m01:33:26.180081 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: ROLLBACK
[0m01:33:26.180496 [debug] [ThreadPool]: Failed to rollback 'list_synthea_quality_measures'
[0m01:33:26.180993 [debug] [ThreadPool]: Failed to rollback 'list_synthea_claims_expanded'
[0m01:33:26.181548 [debug] [ThreadPool]: Failed to rollback 'list_synthea_readmissions'
[0m01:33:26.182073 [debug] [ThreadPool]: Failed to rollback 'list_synthea_hcc_suspecting'
[0m01:33:26.182555 [debug] [ThreadPool]: On list_synthea_quality_measures: Close
[0m01:33:26.182986 [debug] [ThreadPool]: On list_synthea_claims_expanded: Close
[0m01:33:26.183377 [debug] [ThreadPool]: On list_synthea_readmissions: Close
[0m01:33:26.183766 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: Close
[0m01:33:26.184728 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_quality_measures, now list_synthea_data_quality)
[0m01:33:26.188632 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_claims_expanded, now list_synthea_claims_preprocessing)
[0m01:33:26.189724 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_readmissions, now list_synthea_ed_classification)
[0m01:33:26.197080 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_hcc_suspecting, now list_synthea_ccsr)
[0m01:33:26.199735 [debug] [ThreadPool]: Using duckdb connection "list_synthea_data_quality"
[0m01:33:26.201168 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_preprocessing"
[0m01:33:26.203868 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ed_classification"
[0m01:33:26.205576 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ccsr"
[0m01:33:26.206031 [debug] [ThreadPool]: On list_synthea_data_quality: BEGIN
[0m01:33:26.206479 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: BEGIN
[0m01:33:26.206901 [debug] [ThreadPool]: On list_synthea_ed_classification: BEGIN
[0m01:33:26.207347 [debug] [ThreadPool]: On list_synthea_ccsr: BEGIN
[0m01:33:26.207748 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:33:26.208180 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:33:26.208641 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:33:26.209075 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:33:26.250739 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:26.251343 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:26.251792 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:26.252237 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:26.252583 [debug] [ThreadPool]: Using duckdb connection "list_synthea_data_quality"
[0m01:33:26.253119 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_preprocessing"
[0m01:33:26.253668 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ed_classification"
[0m01:33:26.254184 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ccsr"
[0m01:33:26.254797 [debug] [ThreadPool]: On list_synthea_data_quality: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_data_quality"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'data_quality'
    and table_catalog = 'synthea'
  
[0m01:33:26.255344 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_claims_preprocessing"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'claims_preprocessing'
    and table_catalog = 'synthea'
  
[0m01:33:26.255810 [debug] [ThreadPool]: On list_synthea_ed_classification: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_ed_classification"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'ed_classification'
    and table_catalog = 'synthea'
  
[0m01:33:26.256225 [debug] [ThreadPool]: On list_synthea_ccsr: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_ccsr"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'ccsr'
    and table_catalog = 'synthea'
  
[0m01:33:26.265115 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:26.265826 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:26.266368 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:26.266721 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:26.276324 [debug] [ThreadPool]: On list_synthea_ed_classification: ROLLBACK
[0m01:33:26.278428 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: ROLLBACK
[0m01:33:26.278932 [debug] [ThreadPool]: Failed to rollback 'list_synthea_ed_classification'
[0m01:33:26.279855 [debug] [ThreadPool]: On list_synthea_ccsr: ROLLBACK
[0m01:33:26.281012 [debug] [ThreadPool]: On list_synthea_data_quality: ROLLBACK
[0m01:33:26.281379 [debug] [ThreadPool]: Failed to rollback 'list_synthea_claims_preprocessing'
[0m01:33:26.281859 [debug] [ThreadPool]: On list_synthea_ed_classification: Close
[0m01:33:26.282450 [debug] [ThreadPool]: Failed to rollback 'list_synthea_ccsr'
[0m01:33:26.282960 [debug] [ThreadPool]: Failed to rollback 'list_synthea_data_quality'
[0m01:33:26.283372 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: Close
[0m01:33:26.284399 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_ed_classification, now list_synthea_core)
[0m01:33:26.285655 [debug] [ThreadPool]: On list_synthea_ccsr: Close
[0m01:33:26.286104 [debug] [ThreadPool]: On list_synthea_data_quality: Close
[0m01:33:26.287190 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_claims_preprocessing, now list_synthea_cms_hcc)
[0m01:33:26.295215 [debug] [ThreadPool]: Using duckdb connection "list_synthea_core"
[0m01:33:26.310911 [debug] [ThreadPool]: Using duckdb connection "list_synthea_cms_hcc"
[0m01:33:26.311414 [debug] [ThreadPool]: On list_synthea_core: BEGIN
[0m01:33:26.311782 [debug] [ThreadPool]: On list_synthea_cms_hcc: BEGIN
[0m01:33:26.312128 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:33:26.312594 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:33:26.359573 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:26.359946 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:26.360256 [debug] [ThreadPool]: Using duckdb connection "list_synthea_cms_hcc"
[0m01:33:26.360666 [debug] [ThreadPool]: Using duckdb connection "list_synthea_core"
[0m01:33:26.361134 [debug] [ThreadPool]: On list_synthea_cms_hcc: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_cms_hcc"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'cms_hcc'
    and table_catalog = 'synthea'
  
[0m01:33:26.361682 [debug] [ThreadPool]: On list_synthea_core: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_core"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'core'
    and table_catalog = 'synthea'
  
[0m01:33:26.370258 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:26.370667 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:33:26.380265 [debug] [ThreadPool]: On list_synthea_cms_hcc: ROLLBACK
[0m01:33:26.381532 [debug] [ThreadPool]: On list_synthea_core: ROLLBACK
[0m01:33:26.382043 [debug] [ThreadPool]: Failed to rollback 'list_synthea_cms_hcc'
[0m01:33:26.382654 [debug] [ThreadPool]: Failed to rollback 'list_synthea_core'
[0m01:33:26.383120 [debug] [ThreadPool]: On list_synthea_cms_hcc: Close
[0m01:33:26.383543 [debug] [ThreadPool]: On list_synthea_core: Close
[0m01:33:26.394671 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'f5b8301e-7412-4dca-80da-d948ba4dee90', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa40a5350>]}
[0m01:33:26.395343 [debug] [MainThread]: Using duckdb connection "master"
[0m01:33:26.395817 [debug] [MainThread]: On master: BEGIN
[0m01:33:26.396201 [debug] [MainThread]: Opening a new connection, currently in state init
[0m01:33:26.439195 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:33:26.439744 [debug] [MainThread]: On master: COMMIT
[0m01:33:26.440118 [debug] [MainThread]: Using duckdb connection "master"
[0m01:33:26.440487 [debug] [MainThread]: On master: COMMIT
[0m01:33:26.440897 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:33:26.441268 [debug] [MainThread]: On master: Close
[0m01:33:26.445779 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
[0m01:33:26.446339 [info ] [MainThread]: 
[0m01:33:26.448467 [debug] [Thread-1 (]: Began running node model.the_tuva_project.medical_claim
[0m01:33:26.449047 [info ] [Thread-1 (]: 1 of 1 START sql view model tuva_input.medical_claim ........................... [RUN]
[0m01:33:26.449929 [debug] [Thread-1 (]: Acquiring new duckdb connection 'model.the_tuva_project.medical_claim'
[0m01:33:26.450402 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.medical_claim
[0m01:33:26.528605 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.medical_claim"
[0m01:33:26.530574 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.medical_claim (compile): 01:33:26.450711 => 01:33:26.530378
[0m01:33:26.531012 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.medical_claim
[0m01:33:26.550723 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.medical_claim"
[0m01:33:26.552503 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m01:33:26.552918 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: BEGIN
[0m01:33:26.553308 [debug] [Thread-1 (]: Opening a new connection, currently in state init
[0m01:33:26.591916 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:33:26.592447 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m01:33:26.597393 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim"} */

  
  create view "synthea"."tuva_input"."medical_claim__dbt_tmp" as (
    -- models/medical_claim.sql
/*
SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[0].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[0].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[1].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[1].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[2].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[2].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[2].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[2].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[2].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

UNION
*/
SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[3].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[3].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[3].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[3].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[3].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

/*
UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[4].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    aprdrg.apr_drg_code AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[4].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[4].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
*/
  );

[0m01:33:26.626207 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:33:26.630744 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m01:33:26.631253 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim"} */
alter view "synthea"."tuva_input"."medical_claim" rename to "medical_claim__dbt_backup"
[0m01:33:26.631944 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:33:26.633922 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m01:33:26.634313 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim"} */
alter view "synthea"."tuva_input"."medical_claim__dbt_tmp" rename to "medical_claim"
[0m01:33:26.634906 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:33:26.643975 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: COMMIT
[0m01:33:26.644399 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m01:33:26.644769 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: COMMIT
[0m01:33:26.653471 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:33:26.656739 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m01:33:26.657115 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim"} */
drop view if exists "synthea"."tuva_input"."medical_claim__dbt_backup" cascade
[0m01:33:26.658116 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:33:26.659449 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.medical_claim (execute): 01:33:26.531325 => 01:33:26.659278
[0m01:33:26.659926 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: Close
[0m01:33:26.760850 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'f5b8301e-7412-4dca-80da-d948ba4dee90', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa3b06010>]}
[0m01:33:26.761583 [info ] [Thread-1 (]: 1 of 1 OK created sql view model tuva_input.medical_claim ...................... [[32mOK[0m in 0.31s]
[0m01:33:26.762382 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.medical_claim
[0m01:33:26.763993 [debug] [MainThread]: Using duckdb connection "master"
[0m01:33:26.764597 [debug] [MainThread]: On master: BEGIN
[0m01:33:26.765091 [debug] [MainThread]: Opening a new connection, currently in state closed
[0m01:33:26.808056 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:33:26.808660 [debug] [MainThread]: On master: COMMIT
[0m01:33:26.809253 [debug] [MainThread]: Using duckdb connection "master"
[0m01:33:26.809778 [debug] [MainThread]: On master: COMMIT
[0m01:33:26.810325 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:33:26.810722 [debug] [MainThread]: On master: Close
[0m01:33:26.815421 [debug] [MainThread]: Connection 'master' was properly closed.
[0m01:33:26.815976 [debug] [MainThread]: Connection 'list_synthea_data_quality' was properly closed.
[0m01:33:26.816357 [debug] [MainThread]: Connection 'list_synthea_core' was properly closed.
[0m01:33:26.816711 [debug] [MainThread]: Connection 'list_synthea_ccsr' was properly closed.
[0m01:33:26.817029 [debug] [MainThread]: Connection 'list_synthea_cms_hcc' was properly closed.
[0m01:33:26.817353 [debug] [MainThread]: Connection 'model.the_tuva_project.medical_claim' was properly closed.
[0m01:33:26.817757 [info ] [MainThread]: 
[0m01:33:26.818180 [info ] [MainThread]: Finished running 1 view model in 0 hours 0 minutes and 0.94 seconds (0.94s).
[0m01:33:26.819058 [debug] [MainThread]: Command end result
[0m01:33:26.854698 [info ] [MainThread]: 
[0m01:33:26.855213 [info ] [MainThread]: [32mCompleted successfully[0m
[0m01:33:26.855612 [info ] [MainThread]: 
[0m01:33:26.856015 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=0 SKIP=0 TOTAL=1
[0m01:33:26.856805 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": true, "command_wall_clock_time": 1.9369218, "process_user_time": 2.670145, "process_kernel_time": 0.294788, "process_mem_max_rss": "283708", "process_in_blocks": "0", "process_out_blocks": "0"}
[0m01:33:26.857355 [debug] [MainThread]: Command `dbt run` succeeded at 01:33:26.857235 after 1.94 seconds
[0m01:33:26.857744 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffabc57d50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffabc54150>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa3b0f090>]}
[0m01:33:26.858123 [debug] [MainThread]: Flushing usage events
[0m01:35:03.471013 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff95eeeb10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff95eefe90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff95eeea10>]}


============================== 01:35:03.472353 | e06da0ea-fe0c-4915-9159-0798f696608c ==============================
[0m01:35:03.472353 [info ] [MainThread]: Running with dbt=1.7.7
[0m01:35:03.472948 [debug] [MainThread]: running dbt with arguments {'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'use_experimental_parser': 'False', 'invocation_command': 'dbt run -m medical_claim.sql', 'printer_width': '80', 'write_json': 'True', 'target_path': 'None', 'no_print': 'None', 'log_format': 'default', 'cache_selected_only': 'False', 'indirect_selection': 'eager', 'fail_fast': 'False', 'send_anonymous_usage_stats': 'True', 'use_colors': 'True', 'profiles_dir': '/workspaces/synthea_dw/tuva', 'quiet': 'False', 'debug': 'False', 'warn_error': 'None', 'version_check': 'True', 'log_path': '/workspaces/synthea_dw/tuva/logs', 'static_parser': 'True'}
[0m01:35:03.647191 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'e06da0ea-fe0c-4915-9159-0798f696608c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8e88bb50>]}
[0m01:35:03.721048 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'e06da0ea-fe0c-4915-9159-0798f696608c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff95f07f90>]}
[0m01:35:03.721728 [info ] [MainThread]: Registered adapter: duckdb=1.7.1
[0m01:35:03.728885 [debug] [MainThread]: checksum: 54188551c516f4dd1c42b8d9c289f2bf49f18ae42632e2ba36a64ad29fd60da4, vars: {}, profile: , target: , version: 1.7.7
[0m01:35:04.002707 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 1 files changed.
[0m01:35:04.004120 [debug] [MainThread]: Partial parsing: updated file: the_tuva_project://models/tuva_input/medical_claim.sql
[0m01:35:04.259261 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'e06da0ea-fe0c-4915-9159-0798f696608c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8e299350>]}
[0m01:35:04.384327 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'e06da0ea-fe0c-4915-9159-0798f696608c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff9352d410>]}
[0m01:35:04.384917 [info ] [MainThread]: Found 296 models, 53 tests, 121 sources, 0 exposures, 0 metrics, 531 macros, 0 groups, 0 semantic models
[0m01:35:04.385419 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'e06da0ea-fe0c-4915-9159-0798f696608c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff96835110>]}
[0m01:35:04.391605 [info ] [MainThread]: 
[0m01:35:04.392365 [debug] [MainThread]: Acquiring new duckdb connection 'master'
[0m01:35:04.393346 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea'
[0m01:35:04.401116 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m01:35:04.401638 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m01:35:04.402183 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m01:35:04.449946 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.451402 [debug] [ThreadPool]: On list_synthea: Close
[0m01:35:04.456135 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea, now create_synthea_tuva_input)
[0m01:35:04.456832 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "tuva_input"
"
[0m01:35:04.461632 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m01:35:04.462172 [debug] [ThreadPool]: On create_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_tuva_input"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m01:35:04.462557 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:35:04.501730 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.503139 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m01:35:04.503504 [debug] [ThreadPool]: On create_synthea_tuva_input: BEGIN
[0m01:35:04.503904 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.504223 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m01:35:04.504552 [debug] [ThreadPool]: On create_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_tuva_input"} */

    
    
        create schema if not exists "synthea"."tuva_input"
    
[0m01:35:04.504952 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.505622 [debug] [ThreadPool]: On create_synthea_tuva_input: COMMIT
[0m01:35:04.506042 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m01:35:04.506418 [debug] [ThreadPool]: On create_synthea_tuva_input: COMMIT
[0m01:35:04.506809 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.507171 [debug] [ThreadPool]: On create_synthea_tuva_input: Close
[0m01:35:04.517751 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_tuva_input, now list_synthea_financial_pmpm)
[0m01:35:04.518410 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_ccsr'
[0m01:35:04.518951 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_quality_measures'
[0m01:35:04.522535 [debug] [ThreadPool]: Using duckdb connection "list_synthea_financial_pmpm"
[0m01:35:04.523561 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_hcc_suspecting'
[0m01:35:04.525046 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ccsr"
[0m01:35:04.526433 [debug] [ThreadPool]: Using duckdb connection "list_synthea_quality_measures"
[0m01:35:04.526817 [debug] [ThreadPool]: On list_synthea_financial_pmpm: BEGIN
[0m01:35:04.528196 [debug] [ThreadPool]: Using duckdb connection "list_synthea_hcc_suspecting"
[0m01:35:04.528571 [debug] [ThreadPool]: On list_synthea_ccsr: BEGIN
[0m01:35:04.528941 [debug] [ThreadPool]: On list_synthea_quality_measures: BEGIN
[0m01:35:04.529285 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:35:04.529635 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: BEGIN
[0m01:35:04.529978 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m01:35:04.530319 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m01:35:04.569397 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.569715 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m01:35:04.570424 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.570812 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.571091 [debug] [ThreadPool]: Using duckdb connection "list_synthea_financial_pmpm"
[0m01:35:04.571683 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.571935 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ccsr"
[0m01:35:04.572287 [debug] [ThreadPool]: Using duckdb connection "list_synthea_quality_measures"
[0m01:35:04.572654 [debug] [ThreadPool]: On list_synthea_financial_pmpm: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_financial_pmpm"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'financial_pmpm'
    and table_catalog = 'synthea'
  
[0m01:35:04.573033 [debug] [ThreadPool]: Using duckdb connection "list_synthea_hcc_suspecting"
[0m01:35:04.573397 [debug] [ThreadPool]: On list_synthea_ccsr: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_ccsr"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'ccsr'
    and table_catalog = 'synthea'
  
[0m01:35:04.573766 [debug] [ThreadPool]: On list_synthea_quality_measures: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_quality_measures"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'quality_measures'
    and table_catalog = 'synthea'
  
[0m01:35:04.574365 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_hcc_suspecting"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'hcc_suspecting'
    and table_catalog = 'synthea'
  
[0m01:35:04.583048 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.583379 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.583675 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.584105 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.593771 [debug] [ThreadPool]: On list_synthea_financial_pmpm: ROLLBACK
[0m01:35:04.594615 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: ROLLBACK
[0m01:35:04.595550 [debug] [ThreadPool]: On list_synthea_ccsr: ROLLBACK
[0m01:35:04.596405 [debug] [ThreadPool]: On list_synthea_quality_measures: ROLLBACK
[0m01:35:04.596960 [debug] [ThreadPool]: Failed to rollback 'list_synthea_financial_pmpm'
[0m01:35:04.597444 [debug] [ThreadPool]: Failed to rollback 'list_synthea_hcc_suspecting'
[0m01:35:04.597956 [debug] [ThreadPool]: Failed to rollback 'list_synthea_ccsr'
[0m01:35:04.598408 [debug] [ThreadPool]: Failed to rollback 'list_synthea_quality_measures'
[0m01:35:04.598762 [debug] [ThreadPool]: On list_synthea_financial_pmpm: Close
[0m01:35:04.599129 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: Close
[0m01:35:04.599468 [debug] [ThreadPool]: On list_synthea_ccsr: Close
[0m01:35:04.599857 [debug] [ThreadPool]: On list_synthea_quality_measures: Close
[0m01:35:04.600739 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_financial_pmpm, now list_synthea_readmissions)
[0m01:35:04.602445 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_hcc_suspecting, now list_synthea_cms_hcc)
[0m01:35:04.604015 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_ccsr, now list_synthea_chronic_conditions)
[0m01:35:04.609332 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_quality_measures, now list_synthea_ed_classification)
[0m01:35:04.613863 [debug] [ThreadPool]: Using duckdb connection "list_synthea_readmissions"
[0m01:35:04.615327 [debug] [ThreadPool]: Using duckdb connection "list_synthea_cms_hcc"
[0m01:35:04.616734 [debug] [ThreadPool]: Using duckdb connection "list_synthea_chronic_conditions"
[0m01:35:04.618372 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ed_classification"
[0m01:35:04.618797 [debug] [ThreadPool]: On list_synthea_readmissions: BEGIN
[0m01:35:04.619185 [debug] [ThreadPool]: On list_synthea_cms_hcc: BEGIN
[0m01:35:04.619568 [debug] [ThreadPool]: On list_synthea_chronic_conditions: BEGIN
[0m01:35:04.619961 [debug] [ThreadPool]: On list_synthea_ed_classification: BEGIN
[0m01:35:04.620311 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:35:04.620676 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:35:04.621049 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:35:04.621428 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:35:04.659864 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.660283 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.660793 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.661138 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.661497 [debug] [ThreadPool]: Using duckdb connection "list_synthea_readmissions"
[0m01:35:04.661846 [debug] [ThreadPool]: Using duckdb connection "list_synthea_cms_hcc"
[0m01:35:04.662202 [debug] [ThreadPool]: Using duckdb connection "list_synthea_chronic_conditions"
[0m01:35:04.662562 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ed_classification"
[0m01:35:04.662955 [debug] [ThreadPool]: On list_synthea_readmissions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_readmissions"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'readmissions'
    and table_catalog = 'synthea'
  
[0m01:35:04.663327 [debug] [ThreadPool]: On list_synthea_cms_hcc: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_cms_hcc"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'cms_hcc'
    and table_catalog = 'synthea'
  
[0m01:35:04.663696 [debug] [ThreadPool]: On list_synthea_chronic_conditions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_chronic_conditions"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'chronic_conditions'
    and table_catalog = 'synthea'
  
[0m01:35:04.664093 [debug] [ThreadPool]: On list_synthea_ed_classification: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_ed_classification"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'ed_classification'
    and table_catalog = 'synthea'
  
[0m01:35:04.672469 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.672887 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.673146 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.673457 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.682946 [debug] [ThreadPool]: On list_synthea_ed_classification: ROLLBACK
[0m01:35:04.683908 [debug] [ThreadPool]: On list_synthea_cms_hcc: ROLLBACK
[0m01:35:04.684623 [debug] [ThreadPool]: On list_synthea_chronic_conditions: ROLLBACK
[0m01:35:04.685575 [debug] [ThreadPool]: On list_synthea_readmissions: ROLLBACK
[0m01:35:04.685902 [debug] [ThreadPool]: Failed to rollback 'list_synthea_ed_classification'
[0m01:35:04.686218 [debug] [ThreadPool]: Failed to rollback 'list_synthea_cms_hcc'
[0m01:35:04.686649 [debug] [ThreadPool]: Failed to rollback 'list_synthea_chronic_conditions'
[0m01:35:04.687093 [debug] [ThreadPool]: Failed to rollback 'list_synthea_readmissions'
[0m01:35:04.687441 [debug] [ThreadPool]: On list_synthea_ed_classification: Close
[0m01:35:04.687787 [debug] [ThreadPool]: On list_synthea_cms_hcc: Close
[0m01:35:04.688154 [debug] [ThreadPool]: On list_synthea_chronic_conditions: Close
[0m01:35:04.688512 [debug] [ThreadPool]: On list_synthea_readmissions: Close
[0m01:35:04.689379 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_ed_classification, now list_synthea_claims_expanded)
[0m01:35:04.690800 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_cms_hcc, now list_synthea_insights)
[0m01:35:04.693734 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_chronic_conditions, now list_synthea_core)
[0m01:35:04.699538 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_readmissions, now list_synthea_data_quality)
[0m01:35:04.703843 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_expanded"
[0m01:35:04.706438 [debug] [ThreadPool]: Using duckdb connection "list_synthea_insights"
[0m01:35:04.708129 [debug] [ThreadPool]: Using duckdb connection "list_synthea_core"
[0m01:35:04.709547 [debug] [ThreadPool]: Using duckdb connection "list_synthea_data_quality"
[0m01:35:04.709971 [debug] [ThreadPool]: On list_synthea_claims_expanded: BEGIN
[0m01:35:04.710365 [debug] [ThreadPool]: On list_synthea_insights: BEGIN
[0m01:35:04.710733 [debug] [ThreadPool]: On list_synthea_core: BEGIN
[0m01:35:04.711124 [debug] [ThreadPool]: On list_synthea_data_quality: BEGIN
[0m01:35:04.711519 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:35:04.711890 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:35:04.712244 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:35:04.712586 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:35:04.757519 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.757944 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.758390 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.758841 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.759248 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_expanded"
[0m01:35:04.759659 [debug] [ThreadPool]: Using duckdb connection "list_synthea_insights"
[0m01:35:04.760169 [debug] [ThreadPool]: Using duckdb connection "list_synthea_core"
[0m01:35:04.760639 [debug] [ThreadPool]: Using duckdb connection "list_synthea_data_quality"
[0m01:35:04.761079 [debug] [ThreadPool]: On list_synthea_claims_expanded: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_claims_expanded"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'claims_expanded'
    and table_catalog = 'synthea'
  
[0m01:35:04.761489 [debug] [ThreadPool]: On list_synthea_insights: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_insights"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'insights'
    and table_catalog = 'synthea'
  
[0m01:35:04.761866 [debug] [ThreadPool]: On list_synthea_core: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_core"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'core'
    and table_catalog = 'synthea'
  
[0m01:35:04.762266 [debug] [ThreadPool]: On list_synthea_data_quality: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_data_quality"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'data_quality'
    and table_catalog = 'synthea'
  
[0m01:35:04.770852 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.771299 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.771605 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.771958 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.781152 [debug] [ThreadPool]: On list_synthea_core: ROLLBACK
[0m01:35:04.782219 [debug] [ThreadPool]: On list_synthea_data_quality: ROLLBACK
[0m01:35:04.782945 [debug] [ThreadPool]: On list_synthea_insights: ROLLBACK
[0m01:35:04.783641 [debug] [ThreadPool]: On list_synthea_claims_expanded: ROLLBACK
[0m01:35:04.784019 [debug] [ThreadPool]: Failed to rollback 'list_synthea_core'
[0m01:35:04.784469 [debug] [ThreadPool]: Failed to rollback 'list_synthea_data_quality'
[0m01:35:04.784905 [debug] [ThreadPool]: Failed to rollback 'list_synthea_insights'
[0m01:35:04.785339 [debug] [ThreadPool]: Failed to rollback 'list_synthea_claims_expanded'
[0m01:35:04.785697 [debug] [ThreadPool]: On list_synthea_core: Close
[0m01:35:04.786081 [debug] [ThreadPool]: On list_synthea_data_quality: Close
[0m01:35:04.786427 [debug] [ThreadPool]: On list_synthea_insights: Close
[0m01:35:04.786777 [debug] [ThreadPool]: On list_synthea_claims_expanded: Close
[0m01:35:04.787649 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_core, now list_synthea_tuva_input)
[0m01:35:04.791421 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_data_quality, now list_synthea_claims_preprocessing)
[0m01:35:04.803553 [debug] [ThreadPool]: Using duckdb connection "list_synthea_tuva_input"
[0m01:35:04.804922 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_preprocessing"
[0m01:35:04.805310 [debug] [ThreadPool]: On list_synthea_tuva_input: BEGIN
[0m01:35:04.805669 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: BEGIN
[0m01:35:04.806105 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:35:04.806556 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:35:04.851854 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.852269 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.852664 [debug] [ThreadPool]: Using duckdb connection "list_synthea_tuva_input"
[0m01:35:04.853048 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_preprocessing"
[0m01:35:04.853454 [debug] [ThreadPool]: On list_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_tuva_input"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'tuva_input'
    and table_catalog = 'synthea'
  
[0m01:35:04.853837 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_claims_preprocessing"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'claims_preprocessing'
    and table_catalog = 'synthea'
  
[0m01:35:04.862184 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.862505 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:04.872299 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: ROLLBACK
[0m01:35:04.873322 [debug] [ThreadPool]: On list_synthea_tuva_input: ROLLBACK
[0m01:35:04.873688 [debug] [ThreadPool]: Failed to rollback 'list_synthea_claims_preprocessing'
[0m01:35:04.874171 [debug] [ThreadPool]: Failed to rollback 'list_synthea_tuva_input'
[0m01:35:04.874537 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: Close
[0m01:35:04.874905 [debug] [ThreadPool]: On list_synthea_tuva_input: Close
[0m01:35:04.890784 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'e06da0ea-fe0c-4915-9159-0798f696608c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8e156290>]}
[0m01:35:04.891419 [debug] [MainThread]: Using duckdb connection "master"
[0m01:35:04.891933 [debug] [MainThread]: On master: BEGIN
[0m01:35:04.892347 [debug] [MainThread]: Opening a new connection, currently in state init
[0m01:35:04.933768 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:35:04.934319 [debug] [MainThread]: On master: COMMIT
[0m01:35:04.934680 [debug] [MainThread]: Using duckdb connection "master"
[0m01:35:04.935036 [debug] [MainThread]: On master: COMMIT
[0m01:35:04.935407 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:35:04.935741 [debug] [MainThread]: On master: Close
[0m01:35:04.939778 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
[0m01:35:04.940311 [info ] [MainThread]: 
[0m01:35:04.942307 [debug] [Thread-1 (]: Began running node model.the_tuva_project.medical_claim
[0m01:35:04.942909 [info ] [Thread-1 (]: 1 of 1 START sql view model tuva_input.medical_claim ........................... [RUN]
[0m01:35:04.943580 [debug] [Thread-1 (]: Acquiring new duckdb connection 'model.the_tuva_project.medical_claim'
[0m01:35:04.944010 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.medical_claim
[0m01:35:05.027743 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.medical_claim"
[0m01:35:05.029592 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.medical_claim (compile): 01:35:04.944342 => 01:35:05.029399
[0m01:35:05.030014 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.medical_claim
[0m01:35:05.048300 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.medical_claim"
[0m01:35:05.049820 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m01:35:05.050249 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: BEGIN
[0m01:35:05.050628 [debug] [Thread-1 (]: Opening a new connection, currently in state init
[0m01:35:05.088848 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:35:05.089404 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m01:35:05.094691 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim"} */

  
  create view "synthea"."tuva_input"."medical_claim__dbt_tmp" as (
    -- models/medical_claim.sql
/*
SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[0].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[0].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[1].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[1].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[2].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[2].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[2].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[2].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[2].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[3].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[3].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[3].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[3].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[3].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

UNION
*/
SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[4].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    aprdrg.apr_drg_code AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[4].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[4].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[4].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[4].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)
  );

[0m01:35:05.125407 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.medical_claim (execute): 01:35:05.030283 => 01:35:05.125182
[0m01:35:05.125967 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: ROLLBACK
[0m01:35:05.128083 [debug] [Thread-1 (]: Failed to rollback 'model.the_tuva_project.medical_claim'
[0m01:35:05.128471 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: Close
[0m01:35:05.134538 [debug] [Thread-1 (]: Runtime Error in model medical_claim (models/tuva_input/medical_claim.sql)
  Binder Error: column "apr_drg_code" must appear in the GROUP BY clause or must be part of an aggregate function.
  Either add it to the GROUP BY list, or use "ANY_VALUE(apr_drg_code)" if the exact value of "apr_drg_code" is not important.
[0m01:35:05.135544 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'e06da0ea-fe0c-4915-9159-0798f696608c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8e27b5d0>]}
[0m01:35:05.136129 [error] [Thread-1 (]: 1 of 1 ERROR creating sql view model tuva_input.medical_claim .................. [[31mERROR[0m in 0.19s]
[0m01:35:05.136696 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.medical_claim
[0m01:35:05.138346 [debug] [MainThread]: Using duckdb connection "master"
[0m01:35:05.138733 [debug] [MainThread]: On master: BEGIN
[0m01:35:05.139096 [debug] [MainThread]: Opening a new connection, currently in state closed
[0m01:35:05.179385 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:35:05.179922 [debug] [MainThread]: On master: COMMIT
[0m01:35:05.180286 [debug] [MainThread]: Using duckdb connection "master"
[0m01:35:05.180645 [debug] [MainThread]: On master: COMMIT
[0m01:35:05.181058 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:35:05.181422 [debug] [MainThread]: On master: Close
[0m01:35:05.185530 [debug] [MainThread]: Connection 'master' was properly closed.
[0m01:35:05.186010 [debug] [MainThread]: Connection 'list_synthea_claims_preprocessing' was properly closed.
[0m01:35:05.186335 [debug] [MainThread]: Connection 'list_synthea_tuva_input' was properly closed.
[0m01:35:05.186642 [debug] [MainThread]: Connection 'list_synthea_claims_expanded' was properly closed.
[0m01:35:05.186959 [debug] [MainThread]: Connection 'list_synthea_insights' was properly closed.
[0m01:35:05.187274 [debug] [MainThread]: Connection 'model.the_tuva_project.medical_claim' was properly closed.
[0m01:35:05.188513 [info ] [MainThread]: 
[0m01:35:05.188912 [info ] [MainThread]: Finished running 1 view model in 0 hours 0 minutes and 0.80 seconds (0.80s).
[0m01:35:05.189476 [debug] [MainThread]: Command end result
[0m01:35:05.223353 [info ] [MainThread]: 
[0m01:35:05.223849 [info ] [MainThread]: [31mCompleted with 1 error and 0 warnings:[0m
[0m01:35:05.224238 [info ] [MainThread]: 
[0m01:35:05.224617 [error] [MainThread]:   Runtime Error in model medical_claim (models/tuva_input/medical_claim.sql)
  Binder Error: column "apr_drg_code" must appear in the GROUP BY clause or must be part of an aggregate function.
  Either add it to the GROUP BY list, or use "ANY_VALUE(apr_drg_code)" if the exact value of "apr_drg_code" is not important.
[0m01:35:05.224963 [info ] [MainThread]: 
[0m01:35:05.225334 [info ] [MainThread]: Done. PASS=0 WARN=0 ERROR=1 SKIP=0 TOTAL=1
[0m01:35:05.226036 [debug] [MainThread]: Resource report: {"command_name": "run", "command_wall_clock_time": 1.7882476, "process_user_time": 2.573463, "process_kernel_time": 0.287728, "process_mem_max_rss": "290012", "command_success": false, "process_in_blocks": "0", "process_out_blocks": "0"}
[0m01:35:05.226484 [debug] [MainThread]: Command `dbt run` failed at 01:35:05.226393 after 1.79 seconds
[0m01:35:05.226848 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff9bc18c10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8e29ed90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff965431d0>]}
[0m01:35:05.227219 [debug] [MainThread]: Flushing usage events
[0m01:35:19.715546 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff96453590>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff96601f90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff96452850>]}


============================== 01:35:19.716823 | 7df30df9-fb20-4322-b372-952c1d3ac43c ==============================
[0m01:35:19.716823 [info ] [MainThread]: Running with dbt=1.7.7
[0m01:35:19.717401 [debug] [MainThread]: running dbt with arguments {'write_json': 'True', 'debug': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'use_experimental_parser': 'False', 'log_cache_events': 'False', 'target_path': 'None', 'no_print': 'None', 'use_colors': 'True', 'profiles_dir': '/workspaces/synthea_dw/tuva', 'log_path': '/workspaces/synthea_dw/tuva/logs', 'warn_error': 'None', 'introspect': 'True', 'static_parser': 'True', 'partial_parse': 'True', 'send_anonymous_usage_stats': 'True', 'version_check': 'True', 'printer_width': '80', 'quiet': 'False', 'indirect_selection': 'eager', 'invocation_command': 'dbt run -m medical_claim.sql', 'log_format': 'default', 'cache_selected_only': 'False', 'fail_fast': 'False'}
[0m01:35:19.891888 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '7df30df9-fb20-4322-b372-952c1d3ac43c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8ede1550>]}
[0m01:35:19.966396 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '7df30df9-fb20-4322-b372-952c1d3ac43c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff964404d0>]}
[0m01:35:19.967132 [info ] [MainThread]: Registered adapter: duckdb=1.7.1
[0m01:35:19.974163 [debug] [MainThread]: checksum: 54188551c516f4dd1c42b8d9c289f2bf49f18ae42632e2ba36a64ad29fd60da4, vars: {}, profile: , target: , version: 1.7.7
[0m01:35:20.254232 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 1 files changed.
[0m01:35:20.255592 [debug] [MainThread]: Partial parsing: updated file: the_tuva_project://models/tuva_input/medical_claim.sql
[0m01:35:20.512074 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '7df30df9-fb20-4322-b372-952c1d3ac43c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8e84ef10>]}
[0m01:35:20.640221 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '7df30df9-fb20-4322-b372-952c1d3ac43c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8e388d10>]}
[0m01:35:20.640823 [info ] [MainThread]: Found 296 models, 53 tests, 121 sources, 0 exposures, 0 metrics, 531 macros, 0 groups, 0 semantic models
[0m01:35:20.641268 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '7df30df9-fb20-4322-b372-952c1d3ac43c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8e7f4c90>]}
[0m01:35:20.647418 [info ] [MainThread]: 
[0m01:35:20.648190 [debug] [MainThread]: Acquiring new duckdb connection 'master'
[0m01:35:20.649149 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea'
[0m01:35:20.656402 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m01:35:20.657069 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m01:35:20.657616 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m01:35:20.704962 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:20.706350 [debug] [ThreadPool]: On list_synthea: Close
[0m01:35:20.711311 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea, now create_synthea_tuva_input)
[0m01:35:20.712030 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "tuva_input"
"
[0m01:35:20.716376 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m01:35:20.716868 [debug] [ThreadPool]: On create_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_tuva_input"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m01:35:20.717224 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:35:20.755882 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:20.757169 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m01:35:20.757543 [debug] [ThreadPool]: On create_synthea_tuva_input: BEGIN
[0m01:35:20.757946 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:20.758287 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m01:35:20.758639 [debug] [ThreadPool]: On create_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_tuva_input"} */

    
    
        create schema if not exists "synthea"."tuva_input"
    
[0m01:35:20.759034 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:20.759670 [debug] [ThreadPool]: On create_synthea_tuva_input: COMMIT
[0m01:35:20.759997 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m01:35:20.760340 [debug] [ThreadPool]: On create_synthea_tuva_input: COMMIT
[0m01:35:20.760812 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:20.761237 [debug] [ThreadPool]: On create_synthea_tuva_input: Close
[0m01:35:20.772023 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_tuva_input, now list_synthea_chronic_conditions)
[0m01:35:20.772706 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_quality_measures'
[0m01:35:20.773270 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_financial_pmpm'
[0m01:35:20.776816 [debug] [ThreadPool]: Using duckdb connection "list_synthea_chronic_conditions"
[0m01:35:20.777856 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_cms_hcc'
[0m01:35:20.779282 [debug] [ThreadPool]: Using duckdb connection "list_synthea_quality_measures"
[0m01:35:20.780598 [debug] [ThreadPool]: Using duckdb connection "list_synthea_financial_pmpm"
[0m01:35:20.780965 [debug] [ThreadPool]: On list_synthea_chronic_conditions: BEGIN
[0m01:35:20.782275 [debug] [ThreadPool]: Using duckdb connection "list_synthea_cms_hcc"
[0m01:35:20.782659 [debug] [ThreadPool]: On list_synthea_quality_measures: BEGIN
[0m01:35:20.783008 [debug] [ThreadPool]: On list_synthea_financial_pmpm: BEGIN
[0m01:35:20.783351 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:35:20.783703 [debug] [ThreadPool]: On list_synthea_cms_hcc: BEGIN
[0m01:35:20.784046 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m01:35:20.784402 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m01:35:20.823021 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:20.823528 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m01:35:20.824089 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:20.824473 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:20.824726 [debug] [ThreadPool]: Using duckdb connection "list_synthea_chronic_conditions"
[0m01:35:20.825223 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:20.825458 [debug] [ThreadPool]: Using duckdb connection "list_synthea_quality_measures"
[0m01:35:20.825838 [debug] [ThreadPool]: Using duckdb connection "list_synthea_financial_pmpm"
[0m01:35:20.826230 [debug] [ThreadPool]: On list_synthea_chronic_conditions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_chronic_conditions"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'chronic_conditions'
    and table_catalog = 'synthea'
  
[0m01:35:20.826632 [debug] [ThreadPool]: Using duckdb connection "list_synthea_cms_hcc"
[0m01:35:20.827033 [debug] [ThreadPool]: On list_synthea_quality_measures: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_quality_measures"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'quality_measures'
    and table_catalog = 'synthea'
  
[0m01:35:20.827404 [debug] [ThreadPool]: On list_synthea_financial_pmpm: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_financial_pmpm"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'financial_pmpm'
    and table_catalog = 'synthea'
  
[0m01:35:20.828069 [debug] [ThreadPool]: On list_synthea_cms_hcc: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_cms_hcc"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'cms_hcc'
    and table_catalog = 'synthea'
  
[0m01:35:20.836742 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:20.837129 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:20.837402 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:20.837756 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:20.847478 [debug] [ThreadPool]: On list_synthea_chronic_conditions: ROLLBACK
[0m01:35:20.848468 [debug] [ThreadPool]: On list_synthea_financial_pmpm: ROLLBACK
[0m01:35:20.849395 [debug] [ThreadPool]: On list_synthea_cms_hcc: ROLLBACK
[0m01:35:20.850428 [debug] [ThreadPool]: On list_synthea_quality_measures: ROLLBACK
[0m01:35:20.850912 [debug] [ThreadPool]: Failed to rollback 'list_synthea_chronic_conditions'
[0m01:35:20.851225 [debug] [ThreadPool]: Failed to rollback 'list_synthea_financial_pmpm'
[0m01:35:20.851667 [debug] [ThreadPool]: Failed to rollback 'list_synthea_cms_hcc'
[0m01:35:20.852105 [debug] [ThreadPool]: Failed to rollback 'list_synthea_quality_measures'
[0m01:35:20.852460 [debug] [ThreadPool]: On list_synthea_chronic_conditions: Close
[0m01:35:20.852837 [debug] [ThreadPool]: On list_synthea_financial_pmpm: Close
[0m01:35:20.853204 [debug] [ThreadPool]: On list_synthea_cms_hcc: Close
[0m01:35:20.853579 [debug] [ThreadPool]: On list_synthea_quality_measures: Close
[0m01:35:20.854462 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_chronic_conditions, now list_synthea_ccsr)
[0m01:35:20.856261 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_financial_pmpm, now list_synthea_readmissions)
[0m01:35:20.857877 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_cms_hcc, now list_synthea_claims_preprocessing)
[0m01:35:20.865350 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_quality_measures, now list_synthea_core)
[0m01:35:20.869924 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ccsr"
[0m01:35:20.871338 [debug] [ThreadPool]: Using duckdb connection "list_synthea_readmissions"
[0m01:35:20.872779 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_preprocessing"
[0m01:35:20.874324 [debug] [ThreadPool]: Using duckdb connection "list_synthea_core"
[0m01:35:20.874748 [debug] [ThreadPool]: On list_synthea_ccsr: BEGIN
[0m01:35:20.875121 [debug] [ThreadPool]: On list_synthea_readmissions: BEGIN
[0m01:35:20.875488 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: BEGIN
[0m01:35:20.875877 [debug] [ThreadPool]: On list_synthea_core: BEGIN
[0m01:35:20.876252 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:35:20.876613 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:35:20.876985 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:35:20.877334 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:35:20.925829 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:20.926437 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:20.927037 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:20.927556 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:20.927835 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ccsr"
[0m01:35:20.928299 [debug] [ThreadPool]: Using duckdb connection "list_synthea_readmissions"
[0m01:35:20.928847 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_preprocessing"
[0m01:35:20.929297 [debug] [ThreadPool]: Using duckdb connection "list_synthea_core"
[0m01:35:20.929713 [debug] [ThreadPool]: On list_synthea_ccsr: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_ccsr"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'ccsr'
    and table_catalog = 'synthea'
  
[0m01:35:20.930114 [debug] [ThreadPool]: On list_synthea_readmissions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_readmissions"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'readmissions'
    and table_catalog = 'synthea'
  
[0m01:35:20.930537 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_claims_preprocessing"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'claims_preprocessing'
    and table_catalog = 'synthea'
  
[0m01:35:20.930911 [debug] [ThreadPool]: On list_synthea_core: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_core"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'core'
    and table_catalog = 'synthea'
  
[0m01:35:20.939985 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:20.940428 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:20.940789 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:20.941058 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:20.951342 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: ROLLBACK
[0m01:35:20.952414 [debug] [ThreadPool]: On list_synthea_core: ROLLBACK
[0m01:35:20.953241 [debug] [ThreadPool]: On list_synthea_ccsr: ROLLBACK
[0m01:35:20.953655 [debug] [ThreadPool]: Failed to rollback 'list_synthea_claims_preprocessing'
[0m01:35:20.954496 [debug] [ThreadPool]: On list_synthea_readmissions: ROLLBACK
[0m01:35:20.955036 [debug] [ThreadPool]: Failed to rollback 'list_synthea_core'
[0m01:35:20.955528 [debug] [ThreadPool]: Failed to rollback 'list_synthea_ccsr'
[0m01:35:20.955928 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: Close
[0m01:35:20.956386 [debug] [ThreadPool]: Failed to rollback 'list_synthea_readmissions'
[0m01:35:20.956778 [debug] [ThreadPool]: On list_synthea_core: Close
[0m01:35:20.957125 [debug] [ThreadPool]: On list_synthea_ccsr: Close
[0m01:35:20.958005 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_claims_preprocessing, now list_synthea_ed_classification)
[0m01:35:20.964723 [debug] [ThreadPool]: On list_synthea_readmissions: Close
[0m01:35:20.967961 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_core, now list_synthea_claims_expanded)
[0m01:35:20.971691 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_ccsr, now list_synthea_hcc_suspecting)
[0m01:35:20.975321 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ed_classification"
[0m01:35:20.980590 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_readmissions, now list_synthea_tuva_input)
[0m01:35:20.984845 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_expanded"
[0m01:35:20.986304 [debug] [ThreadPool]: Using duckdb connection "list_synthea_hcc_suspecting"
[0m01:35:20.986736 [debug] [ThreadPool]: On list_synthea_ed_classification: BEGIN
[0m01:35:20.988112 [debug] [ThreadPool]: Using duckdb connection "list_synthea_tuva_input"
[0m01:35:20.988613 [debug] [ThreadPool]: On list_synthea_claims_expanded: BEGIN
[0m01:35:20.989104 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: BEGIN
[0m01:35:20.989495 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:35:20.989904 [debug] [ThreadPool]: On list_synthea_tuva_input: BEGIN
[0m01:35:20.990256 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:35:20.990678 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:35:21.036144 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:21.036465 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:35:21.036912 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:21.037362 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:21.037755 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ed_classification"
[0m01:35:21.038185 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:21.038542 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_expanded"
[0m01:35:21.038961 [debug] [ThreadPool]: Using duckdb connection "list_synthea_hcc_suspecting"
[0m01:35:21.039333 [debug] [ThreadPool]: On list_synthea_ed_classification: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_ed_classification"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'ed_classification'
    and table_catalog = 'synthea'
  
[0m01:35:21.039715 [debug] [ThreadPool]: Using duckdb connection "list_synthea_tuva_input"
[0m01:35:21.040056 [debug] [ThreadPool]: On list_synthea_claims_expanded: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_claims_expanded"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'claims_expanded'
    and table_catalog = 'synthea'
  
[0m01:35:21.040475 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_hcc_suspecting"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'hcc_suspecting'
    and table_catalog = 'synthea'
  
[0m01:35:21.041072 [debug] [ThreadPool]: On list_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_tuva_input"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'tuva_input'
    and table_catalog = 'synthea'
  
[0m01:35:21.049077 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:21.049412 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:21.049707 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:21.049969 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:21.059537 [debug] [ThreadPool]: On list_synthea_claims_expanded: ROLLBACK
[0m01:35:21.060410 [debug] [ThreadPool]: On list_synthea_ed_classification: ROLLBACK
[0m01:35:21.061140 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: ROLLBACK
[0m01:35:21.061884 [debug] [ThreadPool]: On list_synthea_tuva_input: ROLLBACK
[0m01:35:21.062244 [debug] [ThreadPool]: Failed to rollback 'list_synthea_claims_expanded'
[0m01:35:21.062713 [debug] [ThreadPool]: Failed to rollback 'list_synthea_ed_classification'
[0m01:35:21.063159 [debug] [ThreadPool]: Failed to rollback 'list_synthea_hcc_suspecting'
[0m01:35:21.063600 [debug] [ThreadPool]: Failed to rollback 'list_synthea_tuva_input'
[0m01:35:21.063954 [debug] [ThreadPool]: On list_synthea_claims_expanded: Close
[0m01:35:21.064308 [debug] [ThreadPool]: On list_synthea_ed_classification: Close
[0m01:35:21.064664 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: Close
[0m01:35:21.065018 [debug] [ThreadPool]: On list_synthea_tuva_input: Close
[0m01:35:21.065882 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_claims_expanded, now list_synthea_insights)
[0m01:35:21.066923 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_ed_classification, now list_synthea_data_quality)
[0m01:35:21.076627 [debug] [ThreadPool]: Using duckdb connection "list_synthea_insights"
[0m01:35:21.078034 [debug] [ThreadPool]: Using duckdb connection "list_synthea_data_quality"
[0m01:35:21.078412 [debug] [ThreadPool]: On list_synthea_insights: BEGIN
[0m01:35:21.078774 [debug] [ThreadPool]: On list_synthea_data_quality: BEGIN
[0m01:35:21.079096 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:35:21.079439 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:35:21.124421 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:21.124915 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:21.125177 [debug] [ThreadPool]: Using duckdb connection "list_synthea_insights"
[0m01:35:21.125544 [debug] [ThreadPool]: Using duckdb connection "list_synthea_data_quality"
[0m01:35:21.125939 [debug] [ThreadPool]: On list_synthea_insights: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_insights"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'insights'
    and table_catalog = 'synthea'
  
[0m01:35:21.126326 [debug] [ThreadPool]: On list_synthea_data_quality: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_data_quality"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'data_quality'
    and table_catalog = 'synthea'
  
[0m01:35:21.134720 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:21.135098 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:35:21.144795 [debug] [ThreadPool]: On list_synthea_data_quality: ROLLBACK
[0m01:35:21.145838 [debug] [ThreadPool]: On list_synthea_insights: ROLLBACK
[0m01:35:21.146251 [debug] [ThreadPool]: Failed to rollback 'list_synthea_data_quality'
[0m01:35:21.146810 [debug] [ThreadPool]: Failed to rollback 'list_synthea_insights'
[0m01:35:21.147195 [debug] [ThreadPool]: On list_synthea_data_quality: Close
[0m01:35:21.147555 [debug] [ThreadPool]: On list_synthea_insights: Close
[0m01:35:21.158478 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '7df30df9-fb20-4322-b372-952c1d3ac43c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff964bf5d0>]}
[0m01:35:21.159087 [debug] [MainThread]: Using duckdb connection "master"
[0m01:35:21.159534 [debug] [MainThread]: On master: BEGIN
[0m01:35:21.159921 [debug] [MainThread]: Opening a new connection, currently in state init
[0m01:35:21.201318 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:35:21.201858 [debug] [MainThread]: On master: COMMIT
[0m01:35:21.202239 [debug] [MainThread]: Using duckdb connection "master"
[0m01:35:21.202619 [debug] [MainThread]: On master: COMMIT
[0m01:35:21.203020 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:35:21.203394 [debug] [MainThread]: On master: Close
[0m01:35:21.208113 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
[0m01:35:21.208601 [info ] [MainThread]: 
[0m01:35:21.210648 [debug] [Thread-1 (]: Began running node model.the_tuva_project.medical_claim
[0m01:35:21.211171 [info ] [Thread-1 (]: 1 of 1 START sql view model tuva_input.medical_claim ........................... [RUN]
[0m01:35:21.211956 [debug] [Thread-1 (]: Acquiring new duckdb connection 'model.the_tuva_project.medical_claim'
[0m01:35:21.212391 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.medical_claim
[0m01:35:21.297252 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.medical_claim"
[0m01:35:21.299176 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.medical_claim (compile): 01:35:21.212780 => 01:35:21.298987
[0m01:35:21.299631 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.medical_claim
[0m01:35:21.318300 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.medical_claim"
[0m01:35:21.319811 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m01:35:21.320215 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: BEGIN
[0m01:35:21.320594 [debug] [Thread-1 (]: Opening a new connection, currently in state init
[0m01:35:21.359669 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:35:21.360211 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m01:35:21.365421 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim"} */

  
  create view "synthea"."tuva_input"."medical_claim__dbt_tmp" as (
    -- models/medical_claim.sql
/*
SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[0].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[0].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[1].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[1].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[2].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[2].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[2].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[2].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[2].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[3].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[3].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[3].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[3].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[3].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

UNION
*/
SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[4].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[4].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[4].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[4].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[4].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)
  );

[0m01:35:21.394932 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:35:21.399523 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m01:35:21.399959 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim"} */
alter view "synthea"."tuva_input"."medical_claim" rename to "medical_claim__dbt_backup"
[0m01:35:21.400655 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:35:21.402691 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m01:35:21.403085 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim"} */
alter view "synthea"."tuva_input"."medical_claim__dbt_tmp" rename to "medical_claim"
[0m01:35:21.403695 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:35:21.412824 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: COMMIT
[0m01:35:21.413254 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m01:35:21.413643 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: COMMIT
[0m01:35:21.422922 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:35:21.426303 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m01:35:21.426773 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim"} */
drop view if exists "synthea"."tuva_input"."medical_claim__dbt_backup" cascade
[0m01:35:21.427843 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:35:21.428903 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.medical_claim (execute): 01:35:21.299925 => 01:35:21.428763
[0m01:35:21.429285 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: Close
[0m01:35:21.528321 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '7df30df9-fb20-4322-b372-952c1d3ac43c', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8e701a90>]}
[0m01:35:21.529077 [info ] [Thread-1 (]: 1 of 1 OK created sql view model tuva_input.medical_claim ...................... [[32mOK[0m in 0.32s]
[0m01:35:21.529650 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.medical_claim
[0m01:35:21.531011 [debug] [MainThread]: Using duckdb connection "master"
[0m01:35:21.531390 [debug] [MainThread]: On master: BEGIN
[0m01:35:21.531770 [debug] [MainThread]: Opening a new connection, currently in state closed
[0m01:35:21.573764 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:35:21.574286 [debug] [MainThread]: On master: COMMIT
[0m01:35:21.574684 [debug] [MainThread]: Using duckdb connection "master"
[0m01:35:21.575065 [debug] [MainThread]: On master: COMMIT
[0m01:35:21.575469 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:35:21.575833 [debug] [MainThread]: On master: Close
[0m01:35:21.580460 [debug] [MainThread]: Connection 'master' was properly closed.
[0m01:35:21.580931 [debug] [MainThread]: Connection 'list_synthea_hcc_suspecting' was properly closed.
[0m01:35:21.581258 [debug] [MainThread]: Connection 'list_synthea_insights' was properly closed.
[0m01:35:21.581585 [debug] [MainThread]: Connection 'list_synthea_tuva_input' was properly closed.
[0m01:35:21.581910 [debug] [MainThread]: Connection 'list_synthea_data_quality' was properly closed.
[0m01:35:21.582236 [debug] [MainThread]: Connection 'model.the_tuva_project.medical_claim' was properly closed.
[0m01:35:21.583417 [info ] [MainThread]: 
[0m01:35:21.583892 [info ] [MainThread]: Finished running 1 view model in 0 hours 0 minutes and 0.94 seconds (0.94s).
[0m01:35:21.584734 [debug] [MainThread]: Command end result
[0m01:35:21.619759 [info ] [MainThread]: 
[0m01:35:21.620300 [info ] [MainThread]: [32mCompleted successfully[0m
[0m01:35:21.620706 [info ] [MainThread]: 
[0m01:35:21.621137 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=0 SKIP=0 TOTAL=1
[0m01:35:21.621881 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": true, "command_wall_clock_time": 1.9355783, "process_user_time": 2.697144, "process_kernel_time": 0.289337, "process_mem_max_rss": "297600", "process_in_blocks": "0", "process_out_blocks": "0"}
[0m01:35:21.622372 [debug] [MainThread]: Command `dbt run` succeeded at 01:35:21.622272 after 1.94 seconds
[0m01:35:21.622808 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff9ba83010>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff9c053990>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff9c1b3910>]}
[0m01:35:21.623181 [debug] [MainThread]: Flushing usage events
[0m01:36:17.210120 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa3eda8d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa3d4bb50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa3d49410>]}


============================== 01:36:17.211513 | 6d77b9a0-e228-4730-92a4-7a38d02549b1 ==============================
[0m01:36:17.211513 [info ] [MainThread]: Running with dbt=1.7.7
[0m01:36:17.212107 [debug] [MainThread]: running dbt with arguments {'write_json': 'True', 'no_print': 'None', 'log_cache_events': 'False', 'quiet': 'False', 'use_experimental_parser': 'False', 'target_path': 'None', 'introspect': 'True', 'invocation_command': 'dbt run -m medical_claim.sql', 'cache_selected_only': 'False', 'profiles_dir': '/workspaces/synthea_dw/tuva', 'fail_fast': 'False', 'debug': 'False', 'send_anonymous_usage_stats': 'True', 'indirect_selection': 'eager', 'printer_width': '80', 'use_colors': 'True', 'log_format': 'default', 'version_check': 'True', 'partial_parse': 'True', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'log_path': '/workspaces/synthea_dw/tuva/logs', 'static_parser': 'True', 'warn_error': 'None'}
[0m01:36:17.384319 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '6d77b9a0-e228-4730-92a4-7a38d02549b1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa3ed9050>]}
[0m01:36:17.459852 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '6d77b9a0-e228-4730-92a4-7a38d02549b1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa134a190>]}
[0m01:36:17.460643 [info ] [MainThread]: Registered adapter: duckdb=1.7.1
[0m01:36:17.468356 [debug] [MainThread]: checksum: 54188551c516f4dd1c42b8d9c289f2bf49f18ae42632e2ba36a64ad29fd60da4, vars: {}, profile: , target: , version: 1.7.7
[0m01:36:17.770358 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 1 files changed.
[0m01:36:17.771764 [debug] [MainThread]: Partial parsing: updated file: the_tuva_project://models/tuva_input/medical_claim.sql
[0m01:36:18.028140 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '6d77b9a0-e228-4730-92a4-7a38d02549b1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff9c15eb50>]}
[0m01:36:18.157399 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '6d77b9a0-e228-4730-92a4-7a38d02549b1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa12c3850>]}
[0m01:36:18.158015 [info ] [MainThread]: Found 296 models, 53 tests, 121 sources, 0 exposures, 0 metrics, 531 macros, 0 groups, 0 semantic models
[0m01:36:18.158493 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '6d77b9a0-e228-4730-92a4-7a38d02549b1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff9c58b2d0>]}
[0m01:36:18.164750 [info ] [MainThread]: 
[0m01:36:18.165682 [debug] [MainThread]: Acquiring new duckdb connection 'master'
[0m01:36:18.166653 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea'
[0m01:36:18.174277 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m01:36:18.174926 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m01:36:18.175663 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m01:36:18.225651 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.227320 [debug] [ThreadPool]: On list_synthea: Close
[0m01:36:18.233167 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea, now create_synthea_tuva_input)
[0m01:36:18.233928 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "tuva_input"
"
[0m01:36:18.238927 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m01:36:18.239346 [debug] [ThreadPool]: On create_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_tuva_input"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m01:36:18.239655 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:36:18.279957 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.281155 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m01:36:18.281523 [debug] [ThreadPool]: On create_synthea_tuva_input: BEGIN
[0m01:36:18.281914 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.282254 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m01:36:18.282628 [debug] [ThreadPool]: On create_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_tuva_input"} */

    
    
        create schema if not exists "synthea"."tuva_input"
    
[0m01:36:18.283050 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.283712 [debug] [ThreadPool]: On create_synthea_tuva_input: COMMIT
[0m01:36:18.284054 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m01:36:18.284378 [debug] [ThreadPool]: On create_synthea_tuva_input: COMMIT
[0m01:36:18.284769 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.285105 [debug] [ThreadPool]: On create_synthea_tuva_input: Close
[0m01:36:18.296036 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_tuva_input, now list_synthea_cms_hcc)
[0m01:36:18.296685 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_chronic_conditions'
[0m01:36:18.297234 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_core'
[0m01:36:18.300607 [debug] [ThreadPool]: Using duckdb connection "list_synthea_cms_hcc"
[0m01:36:18.301671 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_hcc_suspecting'
[0m01:36:18.303323 [debug] [ThreadPool]: Using duckdb connection "list_synthea_chronic_conditions"
[0m01:36:18.304751 [debug] [ThreadPool]: Using duckdb connection "list_synthea_core"
[0m01:36:18.305149 [debug] [ThreadPool]: On list_synthea_cms_hcc: BEGIN
[0m01:36:18.306505 [debug] [ThreadPool]: Using duckdb connection "list_synthea_hcc_suspecting"
[0m01:36:18.306949 [debug] [ThreadPool]: On list_synthea_chronic_conditions: BEGIN
[0m01:36:18.307344 [debug] [ThreadPool]: On list_synthea_core: BEGIN
[0m01:36:18.307703 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:36:18.308056 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: BEGIN
[0m01:36:18.308404 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m01:36:18.308933 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m01:36:18.349321 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.349646 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m01:36:18.350200 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.350609 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.350854 [debug] [ThreadPool]: Using duckdb connection "list_synthea_cms_hcc"
[0m01:36:18.351372 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.351624 [debug] [ThreadPool]: Using duckdb connection "list_synthea_chronic_conditions"
[0m01:36:18.352019 [debug] [ThreadPool]: Using duckdb connection "list_synthea_core"
[0m01:36:18.352377 [debug] [ThreadPool]: On list_synthea_cms_hcc: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_cms_hcc"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'cms_hcc'
    and table_catalog = 'synthea'
  
[0m01:36:18.352822 [debug] [ThreadPool]: Using duckdb connection "list_synthea_hcc_suspecting"
[0m01:36:18.353304 [debug] [ThreadPool]: On list_synthea_chronic_conditions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_chronic_conditions"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'chronic_conditions'
    and table_catalog = 'synthea'
  
[0m01:36:18.353778 [debug] [ThreadPool]: On list_synthea_core: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_core"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'core'
    and table_catalog = 'synthea'
  
[0m01:36:18.354447 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_hcc_suspecting"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'hcc_suspecting'
    and table_catalog = 'synthea'
  
[0m01:36:18.362992 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.363708 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.364065 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.364329 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.373638 [debug] [ThreadPool]: On list_synthea_core: ROLLBACK
[0m01:36:18.374552 [debug] [ThreadPool]: On list_synthea_cms_hcc: ROLLBACK
[0m01:36:18.375268 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: ROLLBACK
[0m01:36:18.376018 [debug] [ThreadPool]: On list_synthea_chronic_conditions: ROLLBACK
[0m01:36:18.376618 [debug] [ThreadPool]: Failed to rollback 'list_synthea_core'
[0m01:36:18.376941 [debug] [ThreadPool]: Failed to rollback 'list_synthea_cms_hcc'
[0m01:36:18.377399 [debug] [ThreadPool]: Failed to rollback 'list_synthea_hcc_suspecting'
[0m01:36:18.377866 [debug] [ThreadPool]: Failed to rollback 'list_synthea_chronic_conditions'
[0m01:36:18.378233 [debug] [ThreadPool]: On list_synthea_core: Close
[0m01:36:18.378619 [debug] [ThreadPool]: On list_synthea_cms_hcc: Close
[0m01:36:18.379013 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: Close
[0m01:36:18.379405 [debug] [ThreadPool]: On list_synthea_chronic_conditions: Close
[0m01:36:18.380299 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_core, now list_synthea_tuva_input)
[0m01:36:18.384069 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_cms_hcc, now list_synthea_readmissions)
[0m01:36:18.386992 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_hcc_suspecting, now list_synthea_insights)
[0m01:36:18.394295 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_chronic_conditions, now list_synthea_quality_measures)
[0m01:36:18.395899 [debug] [ThreadPool]: Using duckdb connection "list_synthea_tuva_input"
[0m01:36:18.397289 [debug] [ThreadPool]: Using duckdb connection "list_synthea_readmissions"
[0m01:36:18.398863 [debug] [ThreadPool]: Using duckdb connection "list_synthea_insights"
[0m01:36:18.400226 [debug] [ThreadPool]: Using duckdb connection "list_synthea_quality_measures"
[0m01:36:18.400740 [debug] [ThreadPool]: On list_synthea_tuva_input: BEGIN
[0m01:36:18.401234 [debug] [ThreadPool]: On list_synthea_readmissions: BEGIN
[0m01:36:18.401669 [debug] [ThreadPool]: On list_synthea_insights: BEGIN
[0m01:36:18.402050 [debug] [ThreadPool]: On list_synthea_quality_measures: BEGIN
[0m01:36:18.402420 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:36:18.402807 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:36:18.403170 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:36:18.403525 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:36:18.450005 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.450420 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.450876 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.451332 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.451714 [debug] [ThreadPool]: Using duckdb connection "list_synthea_tuva_input"
[0m01:36:18.452070 [debug] [ThreadPool]: Using duckdb connection "list_synthea_readmissions"
[0m01:36:18.452416 [debug] [ThreadPool]: Using duckdb connection "list_synthea_insights"
[0m01:36:18.452901 [debug] [ThreadPool]: Using duckdb connection "list_synthea_quality_measures"
[0m01:36:18.453299 [debug] [ThreadPool]: On list_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_tuva_input"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'tuva_input'
    and table_catalog = 'synthea'
  
[0m01:36:18.453712 [debug] [ThreadPool]: On list_synthea_readmissions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_readmissions"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'readmissions'
    and table_catalog = 'synthea'
  
[0m01:36:18.454085 [debug] [ThreadPool]: On list_synthea_insights: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_insights"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'insights'
    and table_catalog = 'synthea'
  
[0m01:36:18.454452 [debug] [ThreadPool]: On list_synthea_quality_measures: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_quality_measures"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'quality_measures'
    and table_catalog = 'synthea'
  
[0m01:36:18.462904 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.463289 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.463607 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.463870 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.473822 [debug] [ThreadPool]: On list_synthea_readmissions: ROLLBACK
[0m01:36:18.474680 [debug] [ThreadPool]: On list_synthea_insights: ROLLBACK
[0m01:36:18.475129 [debug] [ThreadPool]: Failed to rollback 'list_synthea_readmissions'
[0m01:36:18.476014 [debug] [ThreadPool]: On list_synthea_tuva_input: ROLLBACK
[0m01:36:18.476856 [debug] [ThreadPool]: On list_synthea_quality_measures: ROLLBACK
[0m01:36:18.477167 [debug] [ThreadPool]: Failed to rollback 'list_synthea_insights'
[0m01:36:18.477539 [debug] [ThreadPool]: On list_synthea_readmissions: Close
[0m01:36:18.477997 [debug] [ThreadPool]: Failed to rollback 'list_synthea_tuva_input'
[0m01:36:18.478428 [debug] [ThreadPool]: Failed to rollback 'list_synthea_quality_measures'
[0m01:36:18.478783 [debug] [ThreadPool]: On list_synthea_insights: Close
[0m01:36:18.479665 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_readmissions, now list_synthea_ed_classification)
[0m01:36:18.482530 [debug] [ThreadPool]: On list_synthea_tuva_input: Close
[0m01:36:18.482905 [debug] [ThreadPool]: On list_synthea_quality_measures: Close
[0m01:36:18.483736 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_insights, now list_synthea_ccsr)
[0m01:36:18.486510 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ed_classification"
[0m01:36:18.487381 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_tuva_input, now list_synthea_claims_preprocessing)
[0m01:36:18.493666 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_quality_measures, now list_synthea_financial_pmpm)
[0m01:36:18.499361 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ccsr"
[0m01:36:18.499849 [debug] [ThreadPool]: On list_synthea_ed_classification: BEGIN
[0m01:36:18.501307 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_preprocessing"
[0m01:36:18.502723 [debug] [ThreadPool]: Using duckdb connection "list_synthea_financial_pmpm"
[0m01:36:18.503137 [debug] [ThreadPool]: On list_synthea_ccsr: BEGIN
[0m01:36:18.503504 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:36:18.503900 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: BEGIN
[0m01:36:18.504257 [debug] [ThreadPool]: On list_synthea_financial_pmpm: BEGIN
[0m01:36:18.504612 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:36:18.545168 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.545491 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:36:18.545898 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:36:18.546362 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.546750 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ed_classification"
[0m01:36:18.547179 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.547602 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.547953 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ccsr"
[0m01:36:18.548324 [debug] [ThreadPool]: On list_synthea_ed_classification: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_ed_classification"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'ed_classification'
    and table_catalog = 'synthea'
  
[0m01:36:18.548726 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_preprocessing"
[0m01:36:18.549127 [debug] [ThreadPool]: Using duckdb connection "list_synthea_financial_pmpm"
[0m01:36:18.549502 [debug] [ThreadPool]: On list_synthea_ccsr: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_ccsr"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'ccsr'
    and table_catalog = 'synthea'
  
[0m01:36:18.550206 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_claims_preprocessing"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'claims_preprocessing'
    and table_catalog = 'synthea'
  
[0m01:36:18.550652 [debug] [ThreadPool]: On list_synthea_financial_pmpm: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_financial_pmpm"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'financial_pmpm'
    and table_catalog = 'synthea'
  
[0m01:36:18.558290 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.558726 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.559002 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.559422 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.568651 [debug] [ThreadPool]: On list_synthea_ccsr: ROLLBACK
[0m01:36:18.569781 [debug] [ThreadPool]: On list_synthea_financial_pmpm: ROLLBACK
[0m01:36:18.570706 [debug] [ThreadPool]: On list_synthea_ed_classification: ROLLBACK
[0m01:36:18.572358 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: ROLLBACK
[0m01:36:18.572836 [debug] [ThreadPool]: Failed to rollback 'list_synthea_ccsr'
[0m01:36:18.579568 [debug] [ThreadPool]: Failed to rollback 'list_synthea_financial_pmpm'
[0m01:36:18.580135 [debug] [ThreadPool]: Failed to rollback 'list_synthea_ed_classification'
[0m01:36:18.580602 [debug] [ThreadPool]: Failed to rollback 'list_synthea_claims_preprocessing'
[0m01:36:18.581102 [debug] [ThreadPool]: On list_synthea_ccsr: Close
[0m01:36:18.581658 [debug] [ThreadPool]: On list_synthea_financial_pmpm: Close
[0m01:36:18.582080 [debug] [ThreadPool]: On list_synthea_ed_classification: Close
[0m01:36:18.582517 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: Close
[0m01:36:18.583648 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_ccsr, now list_synthea_claims_expanded)
[0m01:36:18.585606 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_financial_pmpm, now list_synthea_data_quality)
[0m01:36:18.600749 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_expanded"
[0m01:36:18.607143 [debug] [ThreadPool]: Using duckdb connection "list_synthea_data_quality"
[0m01:36:18.607682 [debug] [ThreadPool]: On list_synthea_claims_expanded: BEGIN
[0m01:36:18.609003 [debug] [ThreadPool]: On list_synthea_data_quality: BEGIN
[0m01:36:18.609492 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:36:18.609949 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:36:18.662048 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.662461 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.662871 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_expanded"
[0m01:36:18.663274 [debug] [ThreadPool]: Using duckdb connection "list_synthea_data_quality"
[0m01:36:18.663676 [debug] [ThreadPool]: On list_synthea_claims_expanded: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_claims_expanded"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'claims_expanded'
    and table_catalog = 'synthea'
  
[0m01:36:18.664058 [debug] [ThreadPool]: On list_synthea_data_quality: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_data_quality"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'data_quality'
    and table_catalog = 'synthea'
  
[0m01:36:18.672289 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.672625 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:36:18.681900 [debug] [ThreadPool]: On list_synthea_data_quality: ROLLBACK
[0m01:36:18.682857 [debug] [ThreadPool]: On list_synthea_claims_expanded: ROLLBACK
[0m01:36:18.683303 [debug] [ThreadPool]: Failed to rollback 'list_synthea_data_quality'
[0m01:36:18.683772 [debug] [ThreadPool]: Failed to rollback 'list_synthea_claims_expanded'
[0m01:36:18.684164 [debug] [ThreadPool]: On list_synthea_data_quality: Close
[0m01:36:18.684536 [debug] [ThreadPool]: On list_synthea_claims_expanded: Close
[0m01:36:18.694747 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '6d77b9a0-e228-4730-92a4-7a38d02549b1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff9c6a9c10>]}
[0m01:36:18.695373 [debug] [MainThread]: Using duckdb connection "master"
[0m01:36:18.695772 [debug] [MainThread]: On master: BEGIN
[0m01:36:18.696122 [debug] [MainThread]: Opening a new connection, currently in state init
[0m01:36:18.742387 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:36:18.743004 [debug] [MainThread]: On master: COMMIT
[0m01:36:18.743423 [debug] [MainThread]: Using duckdb connection "master"
[0m01:36:18.743883 [debug] [MainThread]: On master: COMMIT
[0m01:36:18.744445 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:36:18.744869 [debug] [MainThread]: On master: Close
[0m01:36:18.750205 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
[0m01:36:18.750839 [info ] [MainThread]: 
[0m01:36:18.753071 [debug] [Thread-1 (]: Began running node model.the_tuva_project.medical_claim
[0m01:36:18.753618 [info ] [Thread-1 (]: 1 of 1 START sql view model tuva_input.medical_claim ........................... [RUN]
[0m01:36:18.754320 [debug] [Thread-1 (]: Acquiring new duckdb connection 'model.the_tuva_project.medical_claim'
[0m01:36:18.754724 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.medical_claim
[0m01:36:18.838965 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.medical_claim"
[0m01:36:18.840780 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.medical_claim (compile): 01:36:18.755045 => 01:36:18.840576
[0m01:36:18.841215 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.medical_claim
[0m01:36:18.859325 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.medical_claim"
[0m01:36:18.860878 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m01:36:18.861273 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: BEGIN
[0m01:36:18.861676 [debug] [Thread-1 (]: Opening a new connection, currently in state init
[0m01:36:18.905168 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:36:18.905710 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m01:36:18.910922 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim"} */

  
  create view "synthea"."tuva_input"."medical_claim__dbt_tmp" as (
    -- models/medical_claim.sql

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[0].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[0].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[1].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[1].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[2].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[2].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[2].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[2].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[2].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[3].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[3].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[3].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[3].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[3].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[4].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[4].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[4].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[4].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[4].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)
  );

[0m01:36:19.035343 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:36:19.040002 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m01:36:19.040455 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim"} */
alter view "synthea"."tuva_input"."medical_claim" rename to "medical_claim__dbt_backup"
[0m01:36:19.041278 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:36:19.043326 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m01:36:19.043718 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim"} */
alter view "synthea"."tuva_input"."medical_claim__dbt_tmp" rename to "medical_claim"
[0m01:36:19.044994 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:36:19.054365 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: COMMIT
[0m01:36:19.054850 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m01:36:19.055224 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: COMMIT
[0m01:36:19.074957 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:36:19.078377 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m01:36:19.078811 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim"} */
drop view if exists "synthea"."tuva_input"."medical_claim__dbt_backup" cascade
[0m01:36:19.079950 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:36:19.080989 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.medical_claim (execute): 01:36:18.841514 => 01:36:19.080850
[0m01:36:19.081367 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: Close
[0m01:36:19.178620 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '6d77b9a0-e228-4730-92a4-7a38d02549b1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff9bc8b190>]}
[0m01:36:19.179454 [info ] [Thread-1 (]: 1 of 1 OK created sql view model tuva_input.medical_claim ...................... [[32mOK[0m in 0.42s]
[0m01:36:19.180108 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.medical_claim
[0m01:36:19.181862 [debug] [MainThread]: Using duckdb connection "master"
[0m01:36:19.182995 [debug] [MainThread]: On master: BEGIN
[0m01:36:19.183404 [debug] [MainThread]: Opening a new connection, currently in state closed
[0m01:36:19.228156 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:36:19.228829 [debug] [MainThread]: On master: COMMIT
[0m01:36:19.229186 [debug] [MainThread]: Using duckdb connection "master"
[0m01:36:19.229512 [debug] [MainThread]: On master: COMMIT
[0m01:36:19.229915 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:36:19.230239 [debug] [MainThread]: On master: Close
[0m01:36:19.235210 [debug] [MainThread]: Connection 'master' was properly closed.
[0m01:36:19.235666 [debug] [MainThread]: Connection 'list_synthea_ed_classification' was properly closed.
[0m01:36:19.236021 [debug] [MainThread]: Connection 'list_synthea_data_quality' was properly closed.
[0m01:36:19.236384 [debug] [MainThread]: Connection 'list_synthea_claims_preprocessing' was properly closed.
[0m01:36:19.236751 [debug] [MainThread]: Connection 'list_synthea_claims_expanded' was properly closed.
[0m01:36:19.237120 [debug] [MainThread]: Connection 'model.the_tuva_project.medical_claim' was properly closed.
[0m01:36:19.237511 [info ] [MainThread]: 
[0m01:36:19.238045 [info ] [MainThread]: Finished running 1 view model in 0 hours 0 minutes and 1.07 seconds (1.07s).
[0m01:36:19.238888 [debug] [MainThread]: Command end result
[0m01:36:19.273362 [info ] [MainThread]: 
[0m01:36:19.273955 [info ] [MainThread]: [32mCompleted successfully[0m
[0m01:36:19.274340 [info ] [MainThread]: 
[0m01:36:19.274811 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=0 SKIP=0 TOTAL=1
[0m01:36:19.275531 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": true, "command_wall_clock_time": 2.098163, "process_user_time": 2.82276, "process_kernel_time": 0.338852, "process_mem_max_rss": "309952", "process_in_blocks": "0", "process_out_blocks": "0"}
[0m01:36:19.276019 [debug] [MainThread]: Command `dbt run` succeeded at 01:36:19.275923 after 2.10 seconds
[0m01:36:19.276402 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa9951610>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa9ab2d50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa9ab3910>]}
[0m01:36:19.276786 [debug] [MainThread]: Flushing usage events
[0m01:39:11.138787 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa78f3b10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa8bbaa90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa72636d0>]}


============================== 01:39:11.140060 | 9bf7e87f-34b8-4223-a394-0507aa4c4153 ==============================
[0m01:39:11.140060 [info ] [MainThread]: Running with dbt=1.7.7
[0m01:39:11.140607 [debug] [MainThread]: running dbt with arguments {'version_check': 'True', 'use_experimental_parser': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'printer_width': '80', 'cache_selected_only': 'False', 'profiles_dir': '/workspaces/synthea_dw/tuva', 'partial_parse': 'True', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'fail_fast': 'False', 'introspect': 'True', 'log_path': '/workspaces/synthea_dw/tuva/logs', 'quiet': 'False', 'warn_error': 'None', 'log_format': 'default', 'target_path': 'None', 'write_json': 'True', 'send_anonymous_usage_stats': 'True', 'use_colors': 'True', 'no_print': 'None', 'debug': 'False', 'static_parser': 'True', 'invocation_command': 'dbt run -m medication.sql'}
[0m01:39:11.312589 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '9bf7e87f-34b8-4223-a394-0507aa4c4153', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa72dfd90>]}
[0m01:39:11.386766 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '9bf7e87f-34b8-4223-a394-0507aa4c4153', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa78fc110>]}
[0m01:39:11.387459 [info ] [MainThread]: Registered adapter: duckdb=1.7.1
[0m01:39:11.394339 [debug] [MainThread]: checksum: 54188551c516f4dd1c42b8d9c289f2bf49f18ae42632e2ba36a64ad29fd60da4, vars: {}, profile: , target: , version: 1.7.7
[0m01:39:11.674476 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.
[0m01:39:11.674986 [debug] [MainThread]: Partial parsing enabled, no changes found, skipping parsing
[0m01:39:11.719155 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '9bf7e87f-34b8-4223-a394-0507aa4c4153', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff9f494890>]}
[0m01:39:11.809311 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '9bf7e87f-34b8-4223-a394-0507aa4c4153', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff9fb29550>]}
[0m01:39:11.809882 [info ] [MainThread]: Found 296 models, 53 tests, 121 sources, 0 exposures, 0 metrics, 531 macros, 0 groups, 0 semantic models
[0m01:39:11.810290 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '9bf7e87f-34b8-4223-a394-0507aa4c4153', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff9f9b7b10>]}
[0m01:39:11.815549 [info ] [MainThread]: 
[0m01:39:11.816268 [debug] [MainThread]: Acquiring new duckdb connection 'master'
[0m01:39:11.817207 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea'
[0m01:39:11.824324 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m01:39:11.824964 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m01:39:11.825479 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m01:39:11.879191 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:11.880528 [debug] [ThreadPool]: On list_synthea: Close
[0m01:39:11.886076 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea, now create_synthea_tuva_input)
[0m01:39:11.886757 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "tuva_input"
"
[0m01:39:11.891838 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m01:39:11.892307 [debug] [ThreadPool]: On create_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_tuva_input"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m01:39:11.892684 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:39:11.933029 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:11.934263 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m01:39:11.934641 [debug] [ThreadPool]: On create_synthea_tuva_input: BEGIN
[0m01:39:11.935081 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:11.935431 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m01:39:11.935789 [debug] [ThreadPool]: On create_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_tuva_input"} */

    
    
        create schema if not exists "synthea"."tuva_input"
    
[0m01:39:11.936247 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:11.936885 [debug] [ThreadPool]: On create_synthea_tuva_input: COMMIT
[0m01:39:11.937217 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m01:39:11.937539 [debug] [ThreadPool]: On create_synthea_tuva_input: COMMIT
[0m01:39:11.937920 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:11.938242 [debug] [ThreadPool]: On create_synthea_tuva_input: Close
[0m01:39:11.949503 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_tuva_input, now list_synthea_hcc_suspecting)
[0m01:39:11.950154 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_claims_preprocessing'
[0m01:39:11.950707 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_cms_hcc'
[0m01:39:11.954131 [debug] [ThreadPool]: Using duckdb connection "list_synthea_hcc_suspecting"
[0m01:39:11.954782 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_quality_measures'
[0m01:39:11.956502 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_preprocessing"
[0m01:39:11.957876 [debug] [ThreadPool]: Using duckdb connection "list_synthea_cms_hcc"
[0m01:39:11.958261 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: BEGIN
[0m01:39:11.959583 [debug] [ThreadPool]: Using duckdb connection "list_synthea_quality_measures"
[0m01:39:11.959962 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: BEGIN
[0m01:39:11.960566 [debug] [ThreadPool]: On list_synthea_cms_hcc: BEGIN
[0m01:39:11.961090 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:39:11.961551 [debug] [ThreadPool]: On list_synthea_quality_measures: BEGIN
[0m01:39:11.961942 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m01:39:11.962294 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m01:39:12.003563 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:12.003913 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m01:39:12.004490 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:12.004916 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:12.005168 [debug] [ThreadPool]: Using duckdb connection "list_synthea_hcc_suspecting"
[0m01:39:12.005689 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:12.005927 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_preprocessing"
[0m01:39:12.006291 [debug] [ThreadPool]: Using duckdb connection "list_synthea_cms_hcc"
[0m01:39:12.006673 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_hcc_suspecting"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'hcc_suspecting'
    and table_catalog = 'synthea'
  
[0m01:39:12.007046 [debug] [ThreadPool]: Using duckdb connection "list_synthea_quality_measures"
[0m01:39:12.007405 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_claims_preprocessing"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'claims_preprocessing'
    and table_catalog = 'synthea'
  
[0m01:39:12.007798 [debug] [ThreadPool]: On list_synthea_cms_hcc: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_cms_hcc"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'cms_hcc'
    and table_catalog = 'synthea'
  
[0m01:39:12.008401 [debug] [ThreadPool]: On list_synthea_quality_measures: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_quality_measures"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'quality_measures'
    and table_catalog = 'synthea'
  
[0m01:39:12.016940 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:12.017323 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:12.017582 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:12.017934 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:12.033012 [debug] [ThreadPool]: On list_synthea_quality_measures: ROLLBACK
[0m01:39:12.034009 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: ROLLBACK
[0m01:39:12.035244 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: ROLLBACK
[0m01:39:12.035970 [debug] [ThreadPool]: Failed to rollback 'list_synthea_quality_measures'
[0m01:39:12.036749 [debug] [ThreadPool]: On list_synthea_cms_hcc: ROLLBACK
[0m01:39:12.037061 [debug] [ThreadPool]: Failed to rollback 'list_synthea_hcc_suspecting'
[0m01:39:12.037501 [debug] [ThreadPool]: Failed to rollback 'list_synthea_claims_preprocessing'
[0m01:39:12.037884 [debug] [ThreadPool]: On list_synthea_quality_measures: Close
[0m01:39:12.038343 [debug] [ThreadPool]: Failed to rollback 'list_synthea_cms_hcc'
[0m01:39:12.038705 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: Close
[0m01:39:12.039081 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: Close
[0m01:39:12.039981 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_quality_measures, now list_synthea_chronic_conditions)
[0m01:39:12.043473 [debug] [ThreadPool]: On list_synthea_cms_hcc: Close
[0m01:39:12.044327 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_hcc_suspecting, now list_synthea_claims_expanded)
[0m01:39:12.045964 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_claims_preprocessing, now list_synthea_ed_classification)
[0m01:39:12.053126 [debug] [ThreadPool]: Using duckdb connection "list_synthea_chronic_conditions"
[0m01:39:12.061672 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_cms_hcc, now list_synthea_ccsr)
[0m01:39:12.065410 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_expanded"
[0m01:39:12.066843 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ed_classification"
[0m01:39:12.067236 [debug] [ThreadPool]: On list_synthea_chronic_conditions: BEGIN
[0m01:39:12.069596 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ccsr"
[0m01:39:12.070088 [debug] [ThreadPool]: On list_synthea_claims_expanded: BEGIN
[0m01:39:12.070482 [debug] [ThreadPool]: On list_synthea_ed_classification: BEGIN
[0m01:39:12.070856 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:39:12.071248 [debug] [ThreadPool]: On list_synthea_ccsr: BEGIN
[0m01:39:12.071611 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:39:12.071971 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:39:12.121373 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:12.121865 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:39:12.122369 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:12.122889 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:12.123325 [debug] [ThreadPool]: Using duckdb connection "list_synthea_chronic_conditions"
[0m01:39:12.123759 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:12.124116 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_expanded"
[0m01:39:12.124464 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ed_classification"
[0m01:39:12.124943 [debug] [ThreadPool]: On list_synthea_chronic_conditions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_chronic_conditions"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'chronic_conditions'
    and table_catalog = 'synthea'
  
[0m01:39:12.125446 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ccsr"
[0m01:39:12.125918 [debug] [ThreadPool]: On list_synthea_claims_expanded: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_claims_expanded"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'claims_expanded'
    and table_catalog = 'synthea'
  
[0m01:39:12.126329 [debug] [ThreadPool]: On list_synthea_ed_classification: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_ed_classification"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'ed_classification'
    and table_catalog = 'synthea'
  
[0m01:39:12.126903 [debug] [ThreadPool]: On list_synthea_ccsr: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_ccsr"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'ccsr'
    and table_catalog = 'synthea'
  
[0m01:39:12.134892 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:12.135193 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:12.135510 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:12.135764 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:12.149880 [debug] [ThreadPool]: On list_synthea_ed_classification: ROLLBACK
[0m01:39:12.150713 [debug] [ThreadPool]: On list_synthea_ccsr: ROLLBACK
[0m01:39:12.151352 [debug] [ThreadPool]: On list_synthea_claims_expanded: ROLLBACK
[0m01:39:12.152133 [debug] [ThreadPool]: On list_synthea_chronic_conditions: ROLLBACK
[0m01:39:12.152695 [debug] [ThreadPool]: Failed to rollback 'list_synthea_ed_classification'
[0m01:39:12.153143 [debug] [ThreadPool]: Failed to rollback 'list_synthea_ccsr'
[0m01:39:12.153581 [debug] [ThreadPool]: Failed to rollback 'list_synthea_claims_expanded'
[0m01:39:12.154032 [debug] [ThreadPool]: Failed to rollback 'list_synthea_chronic_conditions'
[0m01:39:12.154382 [debug] [ThreadPool]: On list_synthea_ed_classification: Close
[0m01:39:12.154730 [debug] [ThreadPool]: On list_synthea_ccsr: Close
[0m01:39:12.155071 [debug] [ThreadPool]: On list_synthea_claims_expanded: Close
[0m01:39:12.155408 [debug] [ThreadPool]: On list_synthea_chronic_conditions: Close
[0m01:39:12.156282 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_ed_classification, now list_synthea_readmissions)
[0m01:39:12.157812 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_ccsr, now list_synthea_financial_pmpm)
[0m01:39:12.159471 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_claims_expanded, now list_synthea_insights)
[0m01:39:12.164969 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_chronic_conditions, now list_synthea_tuva_input)
[0m01:39:12.167573 [debug] [ThreadPool]: Using duckdb connection "list_synthea_readmissions"
[0m01:39:12.169046 [debug] [ThreadPool]: Using duckdb connection "list_synthea_financial_pmpm"
[0m01:39:12.170422 [debug] [ThreadPool]: Using duckdb connection "list_synthea_insights"
[0m01:39:12.171728 [debug] [ThreadPool]: Using duckdb connection "list_synthea_tuva_input"
[0m01:39:12.172107 [debug] [ThreadPool]: On list_synthea_readmissions: BEGIN
[0m01:39:12.172645 [debug] [ThreadPool]: On list_synthea_financial_pmpm: BEGIN
[0m01:39:12.173167 [debug] [ThreadPool]: On list_synthea_insights: BEGIN
[0m01:39:12.173567 [debug] [ThreadPool]: On list_synthea_tuva_input: BEGIN
[0m01:39:12.173970 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:39:12.174348 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:39:12.174709 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:39:12.175051 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:39:12.223202 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:12.223608 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:12.223940 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:12.224401 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:12.224771 [debug] [ThreadPool]: Using duckdb connection "list_synthea_readmissions"
[0m01:39:12.225134 [debug] [ThreadPool]: Using duckdb connection "list_synthea_financial_pmpm"
[0m01:39:12.225487 [debug] [ThreadPool]: Using duckdb connection "list_synthea_insights"
[0m01:39:12.225850 [debug] [ThreadPool]: Using duckdb connection "list_synthea_tuva_input"
[0m01:39:12.226223 [debug] [ThreadPool]: On list_synthea_readmissions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_readmissions"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'readmissions'
    and table_catalog = 'synthea'
  
[0m01:39:12.226596 [debug] [ThreadPool]: On list_synthea_financial_pmpm: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_financial_pmpm"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'financial_pmpm'
    and table_catalog = 'synthea'
  
[0m01:39:12.227008 [debug] [ThreadPool]: On list_synthea_insights: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_insights"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'insights'
    and table_catalog = 'synthea'
  
[0m01:39:12.227405 [debug] [ThreadPool]: On list_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_tuva_input"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'tuva_input'
    and table_catalog = 'synthea'
  
[0m01:39:12.235921 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:12.236295 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:12.236568 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:12.236894 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:12.250473 [debug] [ThreadPool]: On list_synthea_financial_pmpm: ROLLBACK
[0m01:39:12.251403 [debug] [ThreadPool]: On list_synthea_tuva_input: ROLLBACK
[0m01:39:12.252128 [debug] [ThreadPool]: On list_synthea_insights: ROLLBACK
[0m01:39:12.252485 [debug] [ThreadPool]: Failed to rollback 'list_synthea_financial_pmpm'
[0m01:39:12.253358 [debug] [ThreadPool]: On list_synthea_readmissions: ROLLBACK
[0m01:39:12.253679 [debug] [ThreadPool]: Failed to rollback 'list_synthea_tuva_input'
[0m01:39:12.254115 [debug] [ThreadPool]: Failed to rollback 'list_synthea_insights'
[0m01:39:12.254469 [debug] [ThreadPool]: On list_synthea_financial_pmpm: Close
[0m01:39:12.254920 [debug] [ThreadPool]: Failed to rollback 'list_synthea_readmissions'
[0m01:39:12.255286 [debug] [ThreadPool]: On list_synthea_tuva_input: Close
[0m01:39:12.255631 [debug] [ThreadPool]: On list_synthea_insights: Close
[0m01:39:12.256478 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_financial_pmpm, now list_synthea_core)
[0m01:39:12.257904 [debug] [ThreadPool]: On list_synthea_readmissions: Close
[0m01:39:12.258690 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_tuva_input, now list_synthea_data_quality)
[0m01:39:12.262785 [debug] [ThreadPool]: Using duckdb connection "list_synthea_core"
[0m01:39:12.271804 [debug] [ThreadPool]: Using duckdb connection "list_synthea_data_quality"
[0m01:39:12.272271 [debug] [ThreadPool]: On list_synthea_core: BEGIN
[0m01:39:12.272619 [debug] [ThreadPool]: On list_synthea_data_quality: BEGIN
[0m01:39:12.273043 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:39:12.273416 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m01:39:12.321164 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:12.321602 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:12.321863 [debug] [ThreadPool]: Using duckdb connection "list_synthea_core"
[0m01:39:12.322230 [debug] [ThreadPool]: Using duckdb connection "list_synthea_data_quality"
[0m01:39:12.322597 [debug] [ThreadPool]: On list_synthea_core: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_core"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'core'
    and table_catalog = 'synthea'
  
[0m01:39:12.322973 [debug] [ThreadPool]: On list_synthea_data_quality: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_data_quality"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'data_quality'
    and table_catalog = 'synthea'
  
[0m01:39:12.331175 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:12.331469 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m01:39:12.345179 [debug] [ThreadPool]: On list_synthea_data_quality: ROLLBACK
[0m01:39:12.345836 [debug] [ThreadPool]: Failed to rollback 'list_synthea_data_quality'
[0m01:39:12.346807 [debug] [ThreadPool]: On list_synthea_core: ROLLBACK
[0m01:39:12.347055 [debug] [ThreadPool]: On list_synthea_data_quality: Close
[0m01:39:12.347512 [debug] [ThreadPool]: Failed to rollback 'list_synthea_core'
[0m01:39:12.351894 [debug] [ThreadPool]: On list_synthea_core: Close
[0m01:39:12.361221 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '9bf7e87f-34b8-4223-a394-0507aa4c4153', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff9fd28750>]}
[0m01:39:12.361868 [debug] [MainThread]: Using duckdb connection "master"
[0m01:39:12.362280 [debug] [MainThread]: On master: BEGIN
[0m01:39:12.362680 [debug] [MainThread]: Opening a new connection, currently in state init
[0m01:39:12.407300 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:39:12.407818 [debug] [MainThread]: On master: COMMIT
[0m01:39:12.408168 [debug] [MainThread]: Using duckdb connection "master"
[0m01:39:12.408495 [debug] [MainThread]: On master: COMMIT
[0m01:39:12.408900 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:39:12.409258 [debug] [MainThread]: On master: Close
[0m01:39:12.413964 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
[0m01:39:12.414446 [info ] [MainThread]: 
[0m01:39:12.416586 [debug] [Thread-1 (]: Began running node model.the_tuva_project.medication
[0m01:39:12.417120 [info ] [Thread-1 (]: 1 of 1 START sql view model tuva_input.medication .............................. [RUN]
[0m01:39:12.417904 [debug] [Thread-1 (]: Acquiring new duckdb connection 'model.the_tuva_project.medication'
[0m01:39:12.418375 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.medication
[0m01:39:12.425265 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.medication"
[0m01:39:12.426765 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.medication (compile): 01:39:12.418731 => 01:39:12.426575
[0m01:39:12.427157 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.medication
[0m01:39:12.448552 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.medication"
[0m01:39:12.450258 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m01:39:12.450645 [debug] [Thread-1 (]: On model.the_tuva_project.medication: BEGIN
[0m01:39:12.451016 [debug] [Thread-1 (]: Opening a new connection, currently in state init
[0m01:39:12.493901 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:39:12.494485 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m01:39:12.494996 [debug] [Thread-1 (]: On model.the_tuva_project.medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medication"} */

  
  create view "synthea"."tuva_input"."medication__dbt_tmp" as (
    -- models/medication.sql

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(m, '$.id'), '"', '') AS medication_id,
    REPLACE(REPLACE(JSON_EXTRACT(m, '$.subject.reference'), '"Patient/', ''), '"', '') AS patient_id,
    REPLACE(REPLACE(JSON_EXTRACT(m, '$.encounter.reference'), '"Encounter/', ''), '"', '') AS encounter_id,
    CAST(SUBSTRING(JSON_EXTRACT(m, '$.authoredOn'), 2, 10) AS DATE) AS dispensing_date,
    CAST(SUBSTRING(JSON_EXTRACT(m, '$.authoredOn'), 2, 10) AS DATE) AS prescribing_date,
    'rxnorm' AS source_code_type,
    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '') AS source_code,
    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].display'), '"', '') AS source_description,
    (
        SELECT c2.concept_code
        FROM "synthea"."vocabulary"."concept_relationship" cr
        JOIN "synthea"."vocabulary"."concept" c1 ON c1.concept_id = cr.concept_id_1
        JOIN "synthea"."vocabulary"."concept" c2 ON c2.concept_id = cr.concept_id_2
        WHERE c1.concept_code = REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '')
        AND cr.relationship_id = 'Mapped from'
        AND c2.vocabulary_id = 'NDC'
        AND c2.domain_id = 'Drug'
        AND c2.invalid_reason IS NULL
        AND c1.concept_class_id in ('Branded Drug', 'Clinical Drug', 'Quant Clinical Drug', 'Quant Branded Drug')
        AND LENGTH(c2.concept_code) = 11
        ORDER BY c2.concept_id
        LIMIT 1
    ) AS ndc_code,
    (
        SELECT c2.concept_name
        FROM "synthea"."vocabulary"."concept_relationship" cr
        JOIN "synthea"."vocabulary"."concept" c1 ON c1.concept_id = cr.concept_id_1
        JOIN "synthea"."vocabulary"."concept" c2 ON c2.concept_id = cr.concept_id_2
        WHERE c1.concept_code = REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '')
        AND cr.relationship_id = 'Mapped from'
        AND c2.vocabulary_id = 'NDC'
        AND c2.domain_id = 'Drug'
        AND c2.invalid_reason IS NULL
        AND c1.concept_class_id in ('Branded Drug', 'Clinical Drug', 'Quant Clinical Drug', 'Quant Branded Drug')
        AND LENGTH(c2.concept_code) = 11
        ORDER BY c2.concept_id
        LIMIT 1
    ) AS ndc_description,
    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '') AS rxnorm_code,
    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].display'), '"', '') AS rxnorm_description,
    r."atc class id" AS atc_code,
    (
        SELECT c3.concept_name
        FROM "synthea"."vocabulary"."concept" c3
        WHERE c3.concept_code = atc_code
            AND c3.vocabulary_id = 'ATC'
            AND c3.domain_id = 'Drug'
            AND c3.invalid_reason IS NULL
            AND c3.standard_concept = 'C'
        LIMIT 1
    ) AS atc_description,
    NULL AS route,
    CASE
        WHEN ds.amount_value IS NOT NULL THEN ds.amount_value
        WHEN ds.numerator_value IS NOT NULL THEN
            CASE
                WHEN ds.denominator_value IS NOT NULL AND ds.denominator_value != 0 THEN ds.numerator_value / ds.denominator_value
                ELSE ds.numerator_value
            END
        ELSE NULL
    END AS strength,
    CASE
        WHEN REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '"', '') IS NOT NULL 
        THEN CAST(REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '"', '') AS INTEGER) * 30
        ELSE 1
    END AS quantity,
    (
        SELECT c4.concept_name
        FROM "synthea"."vocabulary"."concept" c1
        JOIN "synthea"."vocabulary"."drug_strength" ds ON c1.concept_id = ds.drug_concept_id
        JOIN "synthea"."vocabulary"."concept" c4 ON c4.concept_id = COALESCE(ds.amount_unit_concept_id, ds.numerator_unit_concept_id)
        WHERE c1.concept_code = REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '')
            AND c1.vocabulary_id = 'RxNorm'
            AND c1.domain_id = 'Drug'
            AND c1.invalid_reason IS NULL
            AND c1.standard_concept = 'S'
            AND c4.concept_id IS NOT NULL
        LIMIT 1
    ) AS quantity_unit,
    CASE
        WHEN REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '"', '') IS NOT NULL 
        THEN 30
        ELSE 1
    END AS days_supply,
    REPLACE(REPLACE(JSON_EXTRACT(m, '$.requester.reference'), '"Practitioner/', ''), '"', '') AS practitioner_id,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."MedicationRequest" m
LEFT JOIN "synthea"."vocabulary"."concept" c
    ON REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '') = c.concept_code
    AND c.vocabulary_id = 'RxNorm'
    AND c.domain_id = 'Drug'
    AND c.invalid_reason IS NULL
    AND c.standard_concept = 'S'
JOIN "synthea"."reference"."rxcuis_ndcs_atc" r
    ON REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '') = r.rxcui
JOIN "synthea"."vocabulary"."drug_strength" ds
    ON c.concept_id = ds.drug_concept_id
WHERE 
    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '') IS NOT NULL
  );

[0m01:39:12.498710 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:39:12.503248 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m01:39:12.503716 [debug] [Thread-1 (]: On model.the_tuva_project.medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medication"} */
alter view "synthea"."tuva_input"."medication" rename to "medication__dbt_backup"
[0m01:39:12.504292 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:39:12.506587 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m01:39:12.507061 [debug] [Thread-1 (]: On model.the_tuva_project.medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medication"} */
alter view "synthea"."tuva_input"."medication__dbt_tmp" rename to "medication"
[0m01:39:12.507596 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:39:12.516757 [debug] [Thread-1 (]: On model.the_tuva_project.medication: COMMIT
[0m01:39:12.517190 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m01:39:12.517552 [debug] [Thread-1 (]: On model.the_tuva_project.medication: COMMIT
[0m01:39:12.519140 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:39:12.522272 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m01:39:12.522676 [debug] [Thread-1 (]: On model.the_tuva_project.medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medication"} */
drop view if exists "synthea"."tuva_input"."medication__dbt_backup" cascade
[0m01:39:12.523474 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m01:39:12.524476 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.medication (execute): 01:39:12.427412 => 01:39:12.524340
[0m01:39:12.524872 [debug] [Thread-1 (]: On model.the_tuva_project.medication: Close
[0m01:39:12.629869 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '9bf7e87f-34b8-4223-a394-0507aa4c4153', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff9f3b3450>]}
[0m01:39:12.630588 [info ] [Thread-1 (]: 1 of 1 OK created sql view model tuva_input.medication ......................... [[32mOK[0m in 0.21s]
[0m01:39:12.631159 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.medication
[0m01:39:12.632766 [debug] [MainThread]: Using duckdb connection "master"
[0m01:39:12.633230 [debug] [MainThread]: On master: BEGIN
[0m01:39:12.634392 [debug] [MainThread]: Opening a new connection, currently in state closed
[0m01:39:12.679208 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:39:12.679728 [debug] [MainThread]: On master: COMMIT
[0m01:39:12.680095 [debug] [MainThread]: Using duckdb connection "master"
[0m01:39:12.680454 [debug] [MainThread]: On master: COMMIT
[0m01:39:12.680874 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m01:39:12.681249 [debug] [MainThread]: On master: Close
[0m01:39:12.686301 [debug] [MainThread]: Connection 'master' was properly closed.
[0m01:39:12.686760 [debug] [MainThread]: Connection 'list_synthea_insights' was properly closed.
[0m01:39:12.687097 [debug] [MainThread]: Connection 'list_synthea_readmissions' was properly closed.
[0m01:39:12.687407 [debug] [MainThread]: Connection 'list_synthea_core' was properly closed.
[0m01:39:12.687732 [debug] [MainThread]: Connection 'list_synthea_data_quality' was properly closed.
[0m01:39:12.688103 [debug] [MainThread]: Connection 'model.the_tuva_project.medication' was properly closed.
[0m01:39:12.690323 [info ] [MainThread]: 
[0m01:39:12.690810 [info ] [MainThread]: Finished running 1 view model in 0 hours 0 minutes and 0.87 seconds (0.87s).
[0m01:39:12.691480 [debug] [MainThread]: Command end result
[0m01:39:12.759158 [info ] [MainThread]: 
[0m01:39:12.759668 [info ] [MainThread]: [32mCompleted successfully[0m
[0m01:39:12.760012 [info ] [MainThread]: 
[0m01:39:12.760396 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=0 SKIP=0 TOTAL=1
[0m01:39:12.761132 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": true, "command_wall_clock_time": 1.654989, "process_user_time": 2.438901, "process_kernel_time": 0.339657, "process_mem_max_rss": "327592", "process_in_blocks": "0", "process_out_blocks": "0"}
[0m01:39:12.761595 [debug] [MainThread]: Command `dbt run` succeeded at 01:39:12.761501 after 1.66 seconds
[0m01:39:12.761969 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffad003c50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffad002f50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffad003f10>]}
[0m01:39:12.762335 [debug] [MainThread]: Flushing usage events
[0m03:13:02.745939 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffab469110>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffab469d50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffab469e10>]}


============================== 03:13:02.747197 | 770ade2b-fd8a-4f3d-a347-c4b762f1f5df ==============================
[0m03:13:02.747197 [info ] [MainThread]: Running with dbt=1.7.7
[0m03:13:02.747775 [debug] [MainThread]: running dbt with arguments {'invocation_command': 'dbt run -m medication.sql', 'profiles_dir': '/workspaces/synthea_dw/tuva', 'partial_parse': 'True', 'send_anonymous_usage_stats': 'True', 'indirect_selection': 'eager', 'warn_error': 'None', 'static_parser': 'True', 'log_path': '/workspaces/synthea_dw/tuva/logs', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'log_format': 'default', 'log_cache_events': 'False', 'no_print': 'None', 'cache_selected_only': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'introspect': 'True', 'quiet': 'False', 'target_path': 'None', 'printer_width': '80', 'version_check': 'True', 'write_json': 'True', 'debug': 'False', 'fail_fast': 'False'}
[0m03:13:02.917297 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '770ade2b-fd8a-4f3d-a347-c4b762f1f5df', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa3d11610>]}
[0m03:13:02.991234 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '770ade2b-fd8a-4f3d-a347-c4b762f1f5df', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffab2f6cd0>]}
[0m03:13:02.991928 [info ] [MainThread]: Registered adapter: duckdb=1.7.1
[0m03:13:02.999017 [debug] [MainThread]: checksum: 54188551c516f4dd1c42b8d9c289f2bf49f18ae42632e2ba36a64ad29fd60da4, vars: {}, profile: , target: , version: 1.7.7
[0m03:13:03.270872 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 1 files changed.
[0m03:13:03.272148 [debug] [MainThread]: Partial parsing: updated file: the_tuva_project://models/tuva_input/medication.sql
[0m03:13:03.487186 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '770ade2b-fd8a-4f3d-a347-c4b762f1f5df', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa36ac890>]}
[0m03:13:03.578349 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '770ade2b-fd8a-4f3d-a347-c4b762f1f5df', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa886a390>]}
[0m03:13:03.579019 [info ] [MainThread]: Found 296 models, 53 tests, 121 sources, 0 exposures, 0 metrics, 531 macros, 0 groups, 0 semantic models
[0m03:13:03.579496 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '770ade2b-fd8a-4f3d-a347-c4b762f1f5df', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffab333210>]}
[0m03:13:03.584804 [info ] [MainThread]: 
[0m03:13:03.585509 [debug] [MainThread]: Acquiring new duckdb connection 'master'
[0m03:13:03.586398 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea'
[0m03:13:03.594027 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m03:13:03.594648 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m03:13:03.595178 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m03:13:03.648439 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:03.649900 [debug] [ThreadPool]: On list_synthea: Close
[0m03:13:03.656441 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea, now create_synthea_tuva_input)
[0m03:13:03.657243 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "tuva_input"
"
[0m03:13:03.696633 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m03:13:03.697241 [debug] [ThreadPool]: On create_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_tuva_input"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m03:13:03.697649 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:13:03.740807 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:03.742073 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m03:13:03.742452 [debug] [ThreadPool]: On create_synthea_tuva_input: BEGIN
[0m03:13:03.742869 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:03.743228 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m03:13:03.743576 [debug] [ThreadPool]: On create_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_tuva_input"} */

    
    
        create schema if not exists "synthea"."tuva_input"
    
[0m03:13:03.744013 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:03.744672 [debug] [ThreadPool]: On create_synthea_tuva_input: COMMIT
[0m03:13:03.745020 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m03:13:03.745355 [debug] [ThreadPool]: On create_synthea_tuva_input: COMMIT
[0m03:13:03.745845 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:03.746181 [debug] [ThreadPool]: On create_synthea_tuva_input: Close
[0m03:13:03.757992 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_tuva_input, now list_synthea_claims_preprocessing)
[0m03:13:03.758652 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_quality_measures'
[0m03:13:03.759186 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_tuva_input'
[0m03:13:03.762652 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_preprocessing"
[0m03:13:03.763212 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_readmissions'
[0m03:13:03.764742 [debug] [ThreadPool]: Using duckdb connection "list_synthea_quality_measures"
[0m03:13:03.766182 [debug] [ThreadPool]: Using duckdb connection "list_synthea_tuva_input"
[0m03:13:03.766573 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: BEGIN
[0m03:13:03.767953 [debug] [ThreadPool]: Using duckdb connection "list_synthea_readmissions"
[0m03:13:03.768332 [debug] [ThreadPool]: On list_synthea_quality_measures: BEGIN
[0m03:13:03.768764 [debug] [ThreadPool]: On list_synthea_tuva_input: BEGIN
[0m03:13:03.769115 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:13:03.769469 [debug] [ThreadPool]: On list_synthea_readmissions: BEGIN
[0m03:13:03.769813 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m03:13:03.770148 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m03:13:03.813696 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:03.814013 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m03:13:03.814594 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:03.815178 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_preprocessing"
[0m03:13:03.815500 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:03.815894 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:03.816123 [debug] [ThreadPool]: Using duckdb connection "list_synthea_quality_measures"
[0m03:13:03.816498 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_claims_preprocessing"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'claims_preprocessing'
    and table_catalog = 'synthea'
  
[0m03:13:03.816872 [debug] [ThreadPool]: Using duckdb connection "list_synthea_tuva_input"
[0m03:13:03.817243 [debug] [ThreadPool]: Using duckdb connection "list_synthea_readmissions"
[0m03:13:03.817627 [debug] [ThreadPool]: On list_synthea_quality_measures: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_quality_measures"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'quality_measures'
    and table_catalog = 'synthea'
  
[0m03:13:03.818248 [debug] [ThreadPool]: On list_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_tuva_input"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'tuva_input'
    and table_catalog = 'synthea'
  
[0m03:13:03.818660 [debug] [ThreadPool]: On list_synthea_readmissions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_readmissions"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'readmissions'
    and table_catalog = 'synthea'
  
[0m03:13:03.827228 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:03.827721 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:03.828028 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:03.828279 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:03.845030 [debug] [ThreadPool]: On list_synthea_readmissions: ROLLBACK
[0m03:13:03.845996 [debug] [ThreadPool]: On list_synthea_tuva_input: ROLLBACK
[0m03:13:03.846851 [debug] [ThreadPool]: On list_synthea_quality_measures: ROLLBACK
[0m03:13:03.848295 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: ROLLBACK
[0m03:13:03.848778 [debug] [ThreadPool]: Failed to rollback 'list_synthea_readmissions'
[0m03:13:03.849257 [debug] [ThreadPool]: Failed to rollback 'list_synthea_tuva_input'
[0m03:13:03.849731 [debug] [ThreadPool]: Failed to rollback 'list_synthea_quality_measures'
[0m03:13:03.850219 [debug] [ThreadPool]: Failed to rollback 'list_synthea_claims_preprocessing'
[0m03:13:03.850615 [debug] [ThreadPool]: On list_synthea_readmissions: Close
[0m03:13:03.850991 [debug] [ThreadPool]: On list_synthea_tuva_input: Close
[0m03:13:03.851344 [debug] [ThreadPool]: On list_synthea_quality_measures: Close
[0m03:13:03.851701 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: Close
[0m03:13:03.852572 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_readmissions, now list_synthea_ed_classification)
[0m03:13:03.855979 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_tuva_input, now list_synthea_hcc_suspecting)
[0m03:13:03.857959 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_quality_measures, now list_synthea_claims_expanded)
[0m03:13:03.867015 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_claims_preprocessing, now list_synthea_insights)
[0m03:13:03.868563 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ed_classification"
[0m03:13:03.878945 [debug] [ThreadPool]: Using duckdb connection "list_synthea_hcc_suspecting"
[0m03:13:03.880301 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_expanded"
[0m03:13:03.882571 [debug] [ThreadPool]: Using duckdb connection "list_synthea_insights"
[0m03:13:03.882971 [debug] [ThreadPool]: On list_synthea_ed_classification: BEGIN
[0m03:13:03.883337 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: BEGIN
[0m03:13:03.883705 [debug] [ThreadPool]: On list_synthea_claims_expanded: BEGIN
[0m03:13:03.884057 [debug] [ThreadPool]: On list_synthea_insights: BEGIN
[0m03:13:03.884424 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:13:03.884772 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:13:03.885113 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:13:03.885488 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:13:03.934832 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:03.935297 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:03.935671 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:03.935994 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:03.936238 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ed_classification"
[0m03:13:03.936635 [debug] [ThreadPool]: Using duckdb connection "list_synthea_hcc_suspecting"
[0m03:13:03.936995 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_expanded"
[0m03:13:03.937345 [debug] [ThreadPool]: Using duckdb connection "list_synthea_insights"
[0m03:13:03.937749 [debug] [ThreadPool]: On list_synthea_ed_classification: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_ed_classification"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'ed_classification'
    and table_catalog = 'synthea'
  
[0m03:13:03.938133 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_hcc_suspecting"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'hcc_suspecting'
    and table_catalog = 'synthea'
  
[0m03:13:03.938518 [debug] [ThreadPool]: On list_synthea_claims_expanded: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_claims_expanded"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'claims_expanded'
    and table_catalog = 'synthea'
  
[0m03:13:03.938925 [debug] [ThreadPool]: On list_synthea_insights: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_insights"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'insights'
    and table_catalog = 'synthea'
  
[0m03:13:03.947563 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:03.947943 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:03.948209 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:03.948504 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:03.962100 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: ROLLBACK
[0m03:13:03.962963 [debug] [ThreadPool]: On list_synthea_insights: ROLLBACK
[0m03:13:03.963631 [debug] [ThreadPool]: On list_synthea_claims_expanded: ROLLBACK
[0m03:13:03.964008 [debug] [ThreadPool]: Failed to rollback 'list_synthea_hcc_suspecting'
[0m03:13:03.964778 [debug] [ThreadPool]: On list_synthea_ed_classification: ROLLBACK
[0m03:13:03.965102 [debug] [ThreadPool]: Failed to rollback 'list_synthea_insights'
[0m03:13:03.965558 [debug] [ThreadPool]: Failed to rollback 'list_synthea_claims_expanded'
[0m03:13:03.965919 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: Close
[0m03:13:03.966340 [debug] [ThreadPool]: Failed to rollback 'list_synthea_ed_classification'
[0m03:13:03.966709 [debug] [ThreadPool]: On list_synthea_insights: Close
[0m03:13:03.967064 [debug] [ThreadPool]: On list_synthea_claims_expanded: Close
[0m03:13:03.967927 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_hcc_suspecting, now list_synthea_chronic_conditions)
[0m03:13:03.969035 [debug] [ThreadPool]: On list_synthea_ed_classification: Close
[0m03:13:03.969841 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_insights, now list_synthea_cms_hcc)
[0m03:13:03.971619 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_claims_expanded, now list_synthea_ccsr)
[0m03:13:03.973312 [debug] [ThreadPool]: Using duckdb connection "list_synthea_chronic_conditions"
[0m03:13:03.979540 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_ed_classification, now list_synthea_financial_pmpm)
[0m03:13:03.980883 [debug] [ThreadPool]: Using duckdb connection "list_synthea_cms_hcc"
[0m03:13:03.983017 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ccsr"
[0m03:13:03.983410 [debug] [ThreadPool]: On list_synthea_chronic_conditions: BEGIN
[0m03:13:03.984834 [debug] [ThreadPool]: Using duckdb connection "list_synthea_financial_pmpm"
[0m03:13:03.985209 [debug] [ThreadPool]: On list_synthea_cms_hcc: BEGIN
[0m03:13:03.985570 [debug] [ThreadPool]: On list_synthea_ccsr: BEGIN
[0m03:13:03.985971 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:13:03.986647 [debug] [ThreadPool]: On list_synthea_financial_pmpm: BEGIN
[0m03:13:03.987165 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:13:03.987571 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:13:04.036723 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:04.037067 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:13:04.037588 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:04.037911 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:04.038274 [debug] [ThreadPool]: Using duckdb connection "list_synthea_chronic_conditions"
[0m03:13:04.038784 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:04.039135 [debug] [ThreadPool]: Using duckdb connection "list_synthea_cms_hcc"
[0m03:13:04.039510 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ccsr"
[0m03:13:04.039878 [debug] [ThreadPool]: On list_synthea_chronic_conditions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_chronic_conditions"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'chronic_conditions'
    and table_catalog = 'synthea'
  
[0m03:13:04.040249 [debug] [ThreadPool]: Using duckdb connection "list_synthea_financial_pmpm"
[0m03:13:04.040642 [debug] [ThreadPool]: On list_synthea_cms_hcc: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_cms_hcc"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'cms_hcc'
    and table_catalog = 'synthea'
  
[0m03:13:04.041009 [debug] [ThreadPool]: On list_synthea_ccsr: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_ccsr"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'ccsr'
    and table_catalog = 'synthea'
  
[0m03:13:04.041717 [debug] [ThreadPool]: On list_synthea_financial_pmpm: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_financial_pmpm"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'financial_pmpm'
    and table_catalog = 'synthea'
  
[0m03:13:04.049572 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:04.049913 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:04.050199 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:04.050506 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:04.063928 [debug] [ThreadPool]: On list_synthea_ccsr: ROLLBACK
[0m03:13:04.064770 [debug] [ThreadPool]: On list_synthea_financial_pmpm: ROLLBACK
[0m03:13:04.065568 [debug] [ThreadPool]: On list_synthea_cms_hcc: ROLLBACK
[0m03:13:04.065924 [debug] [ThreadPool]: Failed to rollback 'list_synthea_ccsr'
[0m03:13:04.066688 [debug] [ThreadPool]: On list_synthea_chronic_conditions: ROLLBACK
[0m03:13:04.067003 [debug] [ThreadPool]: Failed to rollback 'list_synthea_financial_pmpm'
[0m03:13:04.067494 [debug] [ThreadPool]: Failed to rollback 'list_synthea_cms_hcc'
[0m03:13:04.067854 [debug] [ThreadPool]: On list_synthea_ccsr: Close
[0m03:13:04.068307 [debug] [ThreadPool]: Failed to rollback 'list_synthea_chronic_conditions'
[0m03:13:04.068686 [debug] [ThreadPool]: On list_synthea_financial_pmpm: Close
[0m03:13:04.069033 [debug] [ThreadPool]: On list_synthea_cms_hcc: Close
[0m03:13:04.069887 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_ccsr, now list_synthea_core)
[0m03:13:04.071088 [debug] [ThreadPool]: On list_synthea_chronic_conditions: Close
[0m03:13:04.071882 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_financial_pmpm, now list_synthea_data_quality)
[0m03:13:04.077075 [debug] [ThreadPool]: Using duckdb connection "list_synthea_core"
[0m03:13:04.085126 [debug] [ThreadPool]: Using duckdb connection "list_synthea_data_quality"
[0m03:13:04.085557 [debug] [ThreadPool]: On list_synthea_core: BEGIN
[0m03:13:04.085932 [debug] [ThreadPool]: On list_synthea_data_quality: BEGIN
[0m03:13:04.086284 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:13:04.086670 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:13:04.135818 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:04.136213 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:04.136614 [debug] [ThreadPool]: Using duckdb connection "list_synthea_core"
[0m03:13:04.136992 [debug] [ThreadPool]: Using duckdb connection "list_synthea_data_quality"
[0m03:13:04.137360 [debug] [ThreadPool]: On list_synthea_core: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_core"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'core'
    and table_catalog = 'synthea'
  
[0m03:13:04.137741 [debug] [ThreadPool]: On list_synthea_data_quality: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_data_quality"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'data_quality'
    and table_catalog = 'synthea'
  
[0m03:13:04.145979 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:04.146384 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:13:04.160171 [debug] [ThreadPool]: On list_synthea_data_quality: ROLLBACK
[0m03:13:04.161310 [debug] [ThreadPool]: On list_synthea_core: ROLLBACK
[0m03:13:04.161704 [debug] [ThreadPool]: Failed to rollback 'list_synthea_data_quality'
[0m03:13:04.162159 [debug] [ThreadPool]: Failed to rollback 'list_synthea_core'
[0m03:13:04.162518 [debug] [ThreadPool]: On list_synthea_data_quality: Close
[0m03:13:04.162858 [debug] [ThreadPool]: On list_synthea_core: Close
[0m03:13:04.176177 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '770ade2b-fd8a-4f3d-a347-c4b762f1f5df', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa3505f90>]}
[0m03:13:04.176854 [debug] [MainThread]: Using duckdb connection "master"
[0m03:13:04.177303 [debug] [MainThread]: On master: BEGIN
[0m03:13:04.177700 [debug] [MainThread]: Opening a new connection, currently in state init
[0m03:13:04.223076 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m03:13:04.223616 [debug] [MainThread]: On master: COMMIT
[0m03:13:04.224035 [debug] [MainThread]: Using duckdb connection "master"
[0m03:13:04.224456 [debug] [MainThread]: On master: COMMIT
[0m03:13:04.224890 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m03:13:04.225248 [debug] [MainThread]: On master: Close
[0m03:13:04.230829 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
[0m03:13:04.231318 [info ] [MainThread]: 
[0m03:13:04.233462 [debug] [Thread-1 (]: Began running node model.the_tuva_project.medication
[0m03:13:04.234111 [info ] [Thread-1 (]: 1 of 1 START sql view model tuva_input.medication .............................. [RUN]
[0m03:13:04.234901 [debug] [Thread-1 (]: Acquiring new duckdb connection 'model.the_tuva_project.medication'
[0m03:13:04.235381 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.medication
[0m03:13:04.242053 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.medication"
[0m03:13:04.244731 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.medication (compile): 03:13:04.235756 => 03:13:04.244474
[0m03:13:04.245329 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.medication
[0m03:13:04.266014 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.medication"
[0m03:13:04.267837 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m03:13:04.268261 [debug] [Thread-1 (]: On model.the_tuva_project.medication: BEGIN
[0m03:13:04.268644 [debug] [Thread-1 (]: Opening a new connection, currently in state init
[0m03:13:04.311399 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:13:04.311970 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m03:13:04.312491 [debug] [Thread-1 (]: On model.the_tuva_project.medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medication"} */

  
  create view "synthea"."tuva_input"."medication__dbt_tmp" as (
    -- models/medication.sql

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(m, '$.id'), '"', '') AS medication_id,
    REPLACE(REPLACE(JSON_EXTRACT(m, '$.subject.reference'), '"Patient/', ''), '"', '') AS patient_id,
    REPLACE(REPLACE(JSON_EXTRACT(m, '$.encounter.reference'), '"Encounter/', ''), '"', '') AS encounter_id,
    CAST(SUBSTRING(JSON_EXTRACT(m, '$.authoredOn'), 2, 10) AS DATE) AS dispensing_date,
    CAST(SUBSTRING(JSON_EXTRACT(m, '$.authoredOn'), 2, 10) AS DATE) AS prescribing_date,
    'rxnorm' AS source_code_type,
    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '') AS source_code,
    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].display'), '"', '') AS source_description,
    (
        SELECT c2.concept_code
        FROM "synthea"."vocabulary"."concept_relationship" cr
        JOIN "synthea"."vocabulary"."concept" c1 ON c1.concept_id = cr.concept_id_1
        JOIN "synthea"."vocabulary"."concept" c2 ON c2.concept_id = cr.concept_id_2
        WHERE c1.concept_code = REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '')
        AND cr.relationship_id = 'Mapped from'
        AND c2.vocabulary_id = 'NDC'
        AND c2.domain_id = 'Drug'
        AND c2.invalid_reason IS NULL
        AND c1.concept_class_id in ('Branded Drug', 'Clinical Drug', 'Quant Clinical Drug', 'Quant Branded Drug')
        AND LENGTH(c2.concept_code) = 11
        ORDER BY c2.concept_id
        LIMIT 1
    ) AS ndc_code,
    (
        SELECT c2.concept_name
        FROM "synthea"."vocabulary"."concept_relationship" cr
        JOIN "synthea"."vocabulary"."concept" c1 ON c1.concept_id = cr.concept_id_1
        JOIN "synthea"."vocabulary"."concept" c2 ON c2.concept_id = cr.concept_id_2
        WHERE c1.concept_code = REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '')
        AND cr.relationship_id = 'Mapped from'
        AND c2.vocabulary_id = 'NDC'
        AND c2.domain_id = 'Drug'
        AND c2.invalid_reason IS NULL
        AND c1.concept_class_id in ('Branded Drug', 'Clinical Drug', 'Quant Clinical Drug', 'Quant Branded Drug')
        AND LENGTH(c2.concept_code) = 11
        ORDER BY c2.concept_id
        LIMIT 1
    ) AS ndc_description,
    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '') AS rxnorm_code,
    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].display'), '"', '') AS rxnorm_description,
    r."atc class id" AS atc_code,
    (
        SELECT c3.concept_name
        FROM "synthea"."vocabulary"."concept" c3
        WHERE c3.concept_code = atc_code
            AND c3.vocabulary_id = 'ATC'
            AND c3.domain_id = 'Drug'
            AND c3.invalid_reason IS NULL
            AND c3.standard_concept = 'C'
        LIMIT 1
    ) AS atc_description,
    NULL AS route,
    MIN(CASE
        WHEN ds.amount_value IS NOT NULL THEN ds.amount_value
        WHEN ds.numerator_value IS NOT NULL THEN
            CASE
                WHEN ds.denominator_value IS NOT NULL AND ds.denominator_value != 0 THEN ds.numerator_value / ds.denominator_value
                ELSE ds.numerator_value
            END
        ELSE NULL
    END) AS strength,
    CASE
        WHEN REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '"', '') IS NOT NULL 
        THEN CAST(REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '"', '') AS INTEGER) * 30
        ELSE 1
    END AS quantity,
    (
        SELECT c4.concept_name
        FROM "synthea"."vocabulary"."concept" c1
        JOIN "synthea"."vocabulary"."drug_strength" ds ON c1.concept_id = ds.drug_concept_id
        JOIN "synthea"."vocabulary"."concept" c4 ON c4.concept_id = COALESCE(ds.amount_unit_concept_id, ds.numerator_unit_concept_id)
        WHERE c1.concept_code = REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '')
            AND c1.vocabulary_id = 'RxNorm'
            AND c1.domain_id = 'Drug'
            AND c1.invalid_reason IS NULL
            AND c1.standard_concept = 'S'
            AND c4.concept_id IS NOT NULL
        LIMIT 1
    ) AS quantity_unit,
    CASE
        WHEN REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '"', '') IS NOT NULL 
        THEN 30
        ELSE 1
    END AS days_supply,
    REPLACE(REPLACE(JSON_EXTRACT(m, '$.requester.reference'), '"Practitioner/', ''), '"', '') AS practitioner_id,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."MedicationRequest" m
LEFT JOIN "synthea"."vocabulary"."concept" c
    ON REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '') = c.concept_code
    AND c.vocabulary_id = 'RxNorm'
    AND c.domain_id = 'Drug'
    AND c.invalid_reason IS NULL
    AND c.standard_concept = 'S'
JOIN "synthea"."reference"."rxcuis_ndcs_atc" r
    ON REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '') = r.rxcui
JOIN "synthea"."vocabulary"."drug_strength" ds
    ON c.concept_id = ds.drug_concept_id
WHERE 
    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '') IS NOT NULL
GROUP BY
    medication_id,
    patient_id,
    encounter_id,
    dispensing_date,
    prescribing_date,
    source_code_type,
    source_code,
    source_description,
    data_source
  );

[0m03:13:04.316333 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.medication (execute): 03:13:04.245751 => 03:13:04.316159
[0m03:13:04.316770 [debug] [Thread-1 (]: On model.the_tuva_project.medication: ROLLBACK
[0m03:13:04.318853 [debug] [Thread-1 (]: Failed to rollback 'model.the_tuva_project.medication'
[0m03:13:04.319241 [debug] [Thread-1 (]: On model.the_tuva_project.medication: Close
[0m03:13:04.326374 [debug] [Thread-1 (]: Runtime Error in model medication (models/tuva_input/medication.sql)
  Binder Error: column "resourceType" must appear in the GROUP BY clause or must be part of an aggregate function.
  Either add it to the GROUP BY list, or use "ANY_VALUE(resourceType)" if the exact value of "resourceType" is not important.
[0m03:13:04.327028 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '770ade2b-fd8a-4f3d-a347-c4b762f1f5df', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa3434090>]}
[0m03:13:04.327589 [error] [Thread-1 (]: 1 of 1 ERROR creating sql view model tuva_input.medication ..................... [[31mERROR[0m in 0.09s]
[0m03:13:04.328133 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.medication
[0m03:13:04.329705 [debug] [MainThread]: Using duckdb connection "master"
[0m03:13:04.330073 [debug] [MainThread]: On master: BEGIN
[0m03:13:04.330412 [debug] [MainThread]: Opening a new connection, currently in state closed
[0m03:13:04.375123 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m03:13:04.375633 [debug] [MainThread]: On master: COMMIT
[0m03:13:04.375974 [debug] [MainThread]: Using duckdb connection "master"
[0m03:13:04.376378 [debug] [MainThread]: On master: COMMIT
[0m03:13:04.376793 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m03:13:04.377129 [debug] [MainThread]: On master: Close
[0m03:13:04.381993 [debug] [MainThread]: Connection 'master' was properly closed.
[0m03:13:04.382436 [debug] [MainThread]: Connection 'list_synthea_cms_hcc' was properly closed.
[0m03:13:04.382807 [debug] [MainThread]: Connection 'list_synthea_core' was properly closed.
[0m03:13:04.383112 [debug] [MainThread]: Connection 'list_synthea_chronic_conditions' was properly closed.
[0m03:13:04.383428 [debug] [MainThread]: Connection 'list_synthea_data_quality' was properly closed.
[0m03:13:04.383792 [debug] [MainThread]: Connection 'model.the_tuva_project.medication' was properly closed.
[0m03:13:04.385814 [info ] [MainThread]: 
[0m03:13:04.386255 [info ] [MainThread]: Finished running 1 view model in 0 hours 0 minutes and 0.80 seconds (0.80s).
[0m03:13:04.386843 [debug] [MainThread]: Command end result
[0m03:13:04.420032 [info ] [MainThread]: 
[0m03:13:04.420537 [info ] [MainThread]: [31mCompleted with 1 error and 0 warnings:[0m
[0m03:13:04.420914 [info ] [MainThread]: 
[0m03:13:04.421297 [error] [MainThread]:   Runtime Error in model medication (models/tuva_input/medication.sql)
  Binder Error: column "resourceType" must appear in the GROUP BY clause or must be part of an aggregate function.
  Either add it to the GROUP BY list, or use "ANY_VALUE(resourceType)" if the exact value of "resourceType" is not important.
[0m03:13:04.421661 [info ] [MainThread]: 
[0m03:13:04.422019 [info ] [MainThread]: Done. PASS=0 WARN=0 ERROR=1 SKIP=0 TOTAL=1
[0m03:13:04.422748 [debug] [MainThread]: Resource report: {"command_name": "run", "command_wall_clock_time": 1.7093713, "process_user_time": 2.467572, "process_kernel_time": 0.319889, "process_mem_max_rss": "319052", "command_success": false, "process_in_blocks": "0", "process_out_blocks": "0"}
[0m03:13:04.423228 [debug] [MainThread]: Command `dbt run` failed at 03:13:04.423128 after 1.71 seconds
[0m03:13:04.423619 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffab2dadd0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffab2dad90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffb1043c50>]}
[0m03:13:04.424052 [debug] [MainThread]: Flushing usage events
[0m03:15:36.720363 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffb87fa250>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffb8671990>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffb87fa6d0>]}


============================== 03:15:36.721636 | c2df59e5-880d-4cb9-ae48-38fc173bfb69 ==============================
[0m03:15:36.721636 [info ] [MainThread]: Running with dbt=1.7.7
[0m03:15:36.722299 [debug] [MainThread]: running dbt with arguments {'log_path': '/workspaces/synthea_dw/tuva/logs', 'indirect_selection': 'eager', 'warn_error': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'version_check': 'True', 'partial_parse': 'True', 'introspect': 'True', 'quiet': 'False', 'fail_fast': 'False', 'printer_width': '80', 'use_colors': 'True', 'invocation_command': 'dbt run -m medication.sql', 'cache_selected_only': 'False', 'no_print': 'None', 'log_cache_events': 'False', 'log_format': 'default', 'debug': 'False', 'target_path': 'None', 'static_parser': 'True', 'use_experimental_parser': 'False', 'write_json': 'True', 'profiles_dir': '/workspaces/synthea_dw/tuva', 'send_anonymous_usage_stats': 'True'}
[0m03:15:36.893761 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'c2df59e5-880d-4cb9-ae48-38fc173bfb69', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffb114b4d0>]}
[0m03:15:36.967396 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'c2df59e5-880d-4cb9-ae48-38fc173bfb69', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffb86dd110>]}
[0m03:15:36.968084 [info ] [MainThread]: Registered adapter: duckdb=1.7.1
[0m03:15:36.975140 [debug] [MainThread]: checksum: 54188551c516f4dd1c42b8d9c289f2bf49f18ae42632e2ba36a64ad29fd60da4, vars: {}, profile: , target: , version: 1.7.7
[0m03:15:37.250413 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 1 files changed.
[0m03:15:37.251916 [debug] [MainThread]: Partial parsing: updated file: the_tuva_project://models/tuva_input/medication.sql
[0m03:15:37.469267 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'c2df59e5-880d-4cb9-ae48-38fc173bfb69', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffb0f13e10>]}
[0m03:15:37.558866 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'c2df59e5-880d-4cb9-ae48-38fc173bfb69', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffb8726f50>]}
[0m03:15:37.559418 [info ] [MainThread]: Found 296 models, 53 tests, 121 sources, 0 exposures, 0 metrics, 531 macros, 0 groups, 0 semantic models
[0m03:15:37.559923 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'c2df59e5-880d-4cb9-ae48-38fc173bfb69', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffb08b5f90>]}
[0m03:15:37.565360 [info ] [MainThread]: 
[0m03:15:37.566070 [debug] [MainThread]: Acquiring new duckdb connection 'master'
[0m03:15:37.566994 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea'
[0m03:15:37.574429 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m03:15:37.575088 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m03:15:37.575753 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m03:15:37.630890 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:37.632116 [debug] [ThreadPool]: On list_synthea: Close
[0m03:15:37.638164 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea, now create_synthea_tuva_input)
[0m03:15:37.638943 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "tuva_input"
"
[0m03:15:37.682050 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m03:15:37.682721 [debug] [ThreadPool]: On create_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_tuva_input"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m03:15:37.683296 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:15:37.729675 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:37.731081 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m03:15:37.731469 [debug] [ThreadPool]: On create_synthea_tuva_input: BEGIN
[0m03:15:37.731878 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:37.732203 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m03:15:37.732521 [debug] [ThreadPool]: On create_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_tuva_input"} */

    
    
        create schema if not exists "synthea"."tuva_input"
    
[0m03:15:37.732918 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:37.733540 [debug] [ThreadPool]: On create_synthea_tuva_input: COMMIT
[0m03:15:37.733874 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m03:15:37.734194 [debug] [ThreadPool]: On create_synthea_tuva_input: COMMIT
[0m03:15:37.734560 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:37.734887 [debug] [ThreadPool]: On create_synthea_tuva_input: Close
[0m03:15:37.746601 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_tuva_input, now list_synthea_hcc_suspecting)
[0m03:15:37.747217 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_data_quality'
[0m03:15:37.747817 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_claims_preprocessing'
[0m03:15:37.751304 [debug] [ThreadPool]: Using duckdb connection "list_synthea_hcc_suspecting"
[0m03:15:37.751781 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_ccsr'
[0m03:15:37.753301 [debug] [ThreadPool]: Using duckdb connection "list_synthea_data_quality"
[0m03:15:37.754670 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_preprocessing"
[0m03:15:37.755087 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: BEGIN
[0m03:15:37.756400 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ccsr"
[0m03:15:37.756766 [debug] [ThreadPool]: On list_synthea_data_quality: BEGIN
[0m03:15:37.757168 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: BEGIN
[0m03:15:37.757533 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:15:37.757885 [debug] [ThreadPool]: On list_synthea_ccsr: BEGIN
[0m03:15:37.758219 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m03:15:37.758550 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m03:15:37.801567 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:37.801894 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m03:15:37.802446 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:37.802865 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:37.803108 [debug] [ThreadPool]: Using duckdb connection "list_synthea_hcc_suspecting"
[0m03:15:37.803629 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:37.803876 [debug] [ThreadPool]: Using duckdb connection "list_synthea_data_quality"
[0m03:15:37.804224 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_preprocessing"
[0m03:15:37.804576 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_hcc_suspecting"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'hcc_suspecting'
    and table_catalog = 'synthea'
  
[0m03:15:37.805132 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ccsr"
[0m03:15:37.805610 [debug] [ThreadPool]: On list_synthea_data_quality: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_data_quality"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'data_quality'
    and table_catalog = 'synthea'
  
[0m03:15:37.806032 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_claims_preprocessing"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'claims_preprocessing'
    and table_catalog = 'synthea'
  
[0m03:15:37.806695 [debug] [ThreadPool]: On list_synthea_ccsr: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_ccsr"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'ccsr'
    and table_catalog = 'synthea'
  
[0m03:15:37.815485 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:37.815945 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:37.816220 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:37.816530 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:37.831857 [debug] [ThreadPool]: On list_synthea_ccsr: ROLLBACK
[0m03:15:37.832971 [debug] [ThreadPool]: On list_synthea_data_quality: ROLLBACK
[0m03:15:37.833679 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: ROLLBACK
[0m03:15:37.835338 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: ROLLBACK
[0m03:15:37.835712 [debug] [ThreadPool]: Failed to rollback 'list_synthea_ccsr'
[0m03:15:37.836046 [debug] [ThreadPool]: Failed to rollback 'list_synthea_data_quality'
[0m03:15:37.836511 [debug] [ThreadPool]: Failed to rollback 'list_synthea_hcc_suspecting'
[0m03:15:37.836956 [debug] [ThreadPool]: Failed to rollback 'list_synthea_claims_preprocessing'
[0m03:15:37.837306 [debug] [ThreadPool]: On list_synthea_ccsr: Close
[0m03:15:37.837660 [debug] [ThreadPool]: On list_synthea_data_quality: Close
[0m03:15:37.838029 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: Close
[0m03:15:37.838398 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: Close
[0m03:15:37.839267 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_ccsr, now list_synthea_readmissions)
[0m03:15:37.840946 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_data_quality, now list_synthea_claims_expanded)
[0m03:15:37.845196 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_hcc_suspecting, now list_synthea_ed_classification)
[0m03:15:37.852235 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_claims_preprocessing, now list_synthea_tuva_input)
[0m03:15:37.859318 [debug] [ThreadPool]: Using duckdb connection "list_synthea_readmissions"
[0m03:15:37.864251 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_expanded"
[0m03:15:37.865697 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ed_classification"
[0m03:15:37.867930 [debug] [ThreadPool]: Using duckdb connection "list_synthea_tuva_input"
[0m03:15:37.868325 [debug] [ThreadPool]: On list_synthea_readmissions: BEGIN
[0m03:15:37.868687 [debug] [ThreadPool]: On list_synthea_claims_expanded: BEGIN
[0m03:15:37.869083 [debug] [ThreadPool]: On list_synthea_ed_classification: BEGIN
[0m03:15:37.869466 [debug] [ThreadPool]: On list_synthea_tuva_input: BEGIN
[0m03:15:37.869890 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:15:37.870242 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:15:37.870586 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:15:37.870951 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:15:37.920615 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:37.921035 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:37.921557 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:37.922029 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:37.922419 [debug] [ThreadPool]: Using duckdb connection "list_synthea_readmissions"
[0m03:15:37.922784 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_expanded"
[0m03:15:37.923168 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ed_classification"
[0m03:15:37.923522 [debug] [ThreadPool]: Using duckdb connection "list_synthea_tuva_input"
[0m03:15:37.923900 [debug] [ThreadPool]: On list_synthea_readmissions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_readmissions"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'readmissions'
    and table_catalog = 'synthea'
  
[0m03:15:37.924309 [debug] [ThreadPool]: On list_synthea_claims_expanded: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_claims_expanded"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'claims_expanded'
    and table_catalog = 'synthea'
  
[0m03:15:37.924676 [debug] [ThreadPool]: On list_synthea_ed_classification: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_ed_classification"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'ed_classification'
    and table_catalog = 'synthea'
  
[0m03:15:37.925074 [debug] [ThreadPool]: On list_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_tuva_input"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'tuva_input'
    and table_catalog = 'synthea'
  
[0m03:15:37.933632 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:37.934058 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:37.934394 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:37.934661 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:37.948686 [debug] [ThreadPool]: On list_synthea_tuva_input: ROLLBACK
[0m03:15:37.949592 [debug] [ThreadPool]: On list_synthea_ed_classification: ROLLBACK
[0m03:15:37.950253 [debug] [ThreadPool]: On list_synthea_claims_expanded: ROLLBACK
[0m03:15:37.950762 [debug] [ThreadPool]: Failed to rollback 'list_synthea_tuva_input'
[0m03:15:37.951563 [debug] [ThreadPool]: On list_synthea_readmissions: ROLLBACK
[0m03:15:37.951886 [debug] [ThreadPool]: Failed to rollback 'list_synthea_ed_classification'
[0m03:15:37.952330 [debug] [ThreadPool]: Failed to rollback 'list_synthea_claims_expanded'
[0m03:15:37.952706 [debug] [ThreadPool]: On list_synthea_tuva_input: Close
[0m03:15:37.953170 [debug] [ThreadPool]: Failed to rollback 'list_synthea_readmissions'
[0m03:15:37.953524 [debug] [ThreadPool]: On list_synthea_ed_classification: Close
[0m03:15:37.953886 [debug] [ThreadPool]: On list_synthea_claims_expanded: Close
[0m03:15:37.954748 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_tuva_input, now list_synthea_cms_hcc)
[0m03:15:37.956442 [debug] [ThreadPool]: On list_synthea_readmissions: Close
[0m03:15:37.957281 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_ed_classification, now list_synthea_core)
[0m03:15:37.958683 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_claims_expanded, now list_synthea_quality_measures)
[0m03:15:37.960468 [debug] [ThreadPool]: Using duckdb connection "list_synthea_cms_hcc"
[0m03:15:37.966687 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_readmissions, now list_synthea_financial_pmpm)
[0m03:15:37.970644 [debug] [ThreadPool]: Using duckdb connection "list_synthea_core"
[0m03:15:37.972076 [debug] [ThreadPool]: Using duckdb connection "list_synthea_quality_measures"
[0m03:15:37.972489 [debug] [ThreadPool]: On list_synthea_cms_hcc: BEGIN
[0m03:15:37.974015 [debug] [ThreadPool]: Using duckdb connection "list_synthea_financial_pmpm"
[0m03:15:37.974434 [debug] [ThreadPool]: On list_synthea_core: BEGIN
[0m03:15:37.974863 [debug] [ThreadPool]: On list_synthea_quality_measures: BEGIN
[0m03:15:37.975323 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:15:37.975680 [debug] [ThreadPool]: On list_synthea_financial_pmpm: BEGIN
[0m03:15:37.976039 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:15:37.976408 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:15:38.026035 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:38.026364 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:15:38.026831 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:38.027279 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:38.027627 [debug] [ThreadPool]: Using duckdb connection "list_synthea_cms_hcc"
[0m03:15:38.028135 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:38.028481 [debug] [ThreadPool]: Using duckdb connection "list_synthea_core"
[0m03:15:38.028833 [debug] [ThreadPool]: Using duckdb connection "list_synthea_quality_measures"
[0m03:15:38.029214 [debug] [ThreadPool]: On list_synthea_cms_hcc: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_cms_hcc"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'cms_hcc'
    and table_catalog = 'synthea'
  
[0m03:15:38.029565 [debug] [ThreadPool]: Using duckdb connection "list_synthea_financial_pmpm"
[0m03:15:38.029946 [debug] [ThreadPool]: On list_synthea_core: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_core"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'core'
    and table_catalog = 'synthea'
  
[0m03:15:38.030304 [debug] [ThreadPool]: On list_synthea_quality_measures: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_quality_measures"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'quality_measures'
    and table_catalog = 'synthea'
  
[0m03:15:38.030915 [debug] [ThreadPool]: On list_synthea_financial_pmpm: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_financial_pmpm"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'financial_pmpm'
    and table_catalog = 'synthea'
  
[0m03:15:38.038767 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:38.039240 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:38.039559 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:38.039908 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:38.053423 [debug] [ThreadPool]: On list_synthea_financial_pmpm: ROLLBACK
[0m03:15:38.054462 [debug] [ThreadPool]: On list_synthea_core: ROLLBACK
[0m03:15:38.055291 [debug] [ThreadPool]: On list_synthea_quality_measures: ROLLBACK
[0m03:15:38.055676 [debug] [ThreadPool]: Failed to rollback 'list_synthea_financial_pmpm'
[0m03:15:38.056507 [debug] [ThreadPool]: On list_synthea_cms_hcc: ROLLBACK
[0m03:15:38.056830 [debug] [ThreadPool]: Failed to rollback 'list_synthea_core'
[0m03:15:38.057276 [debug] [ThreadPool]: Failed to rollback 'list_synthea_quality_measures'
[0m03:15:38.057633 [debug] [ThreadPool]: On list_synthea_financial_pmpm: Close
[0m03:15:38.058059 [debug] [ThreadPool]: Failed to rollback 'list_synthea_cms_hcc'
[0m03:15:38.058404 [debug] [ThreadPool]: On list_synthea_core: Close
[0m03:15:38.058760 [debug] [ThreadPool]: On list_synthea_quality_measures: Close
[0m03:15:38.059636 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_financial_pmpm, now list_synthea_chronic_conditions)
[0m03:15:38.060878 [debug] [ThreadPool]: On list_synthea_cms_hcc: Close
[0m03:15:38.061704 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_core, now list_synthea_insights)
[0m03:15:38.069451 [debug] [ThreadPool]: Using duckdb connection "list_synthea_chronic_conditions"
[0m03:15:38.079010 [debug] [ThreadPool]: Using duckdb connection "list_synthea_insights"
[0m03:15:38.079424 [debug] [ThreadPool]: On list_synthea_chronic_conditions: BEGIN
[0m03:15:38.079794 [debug] [ThreadPool]: On list_synthea_insights: BEGIN
[0m03:15:38.080275 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:15:38.080773 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:15:38.124464 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:38.124878 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:38.125248 [debug] [ThreadPool]: Using duckdb connection "list_synthea_chronic_conditions"
[0m03:15:38.125600 [debug] [ThreadPool]: Using duckdb connection "list_synthea_insights"
[0m03:15:38.126002 [debug] [ThreadPool]: On list_synthea_chronic_conditions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_chronic_conditions"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'chronic_conditions'
    and table_catalog = 'synthea'
  
[0m03:15:38.126396 [debug] [ThreadPool]: On list_synthea_insights: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_insights"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'insights'
    and table_catalog = 'synthea'
  
[0m03:15:38.134570 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:38.134879 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:15:38.149041 [debug] [ThreadPool]: On list_synthea_chronic_conditions: ROLLBACK
[0m03:15:38.149907 [debug] [ThreadPool]: On list_synthea_insights: ROLLBACK
[0m03:15:38.150270 [debug] [ThreadPool]: Failed to rollback 'list_synthea_chronic_conditions'
[0m03:15:38.150727 [debug] [ThreadPool]: Failed to rollback 'list_synthea_insights'
[0m03:15:38.151111 [debug] [ThreadPool]: On list_synthea_chronic_conditions: Close
[0m03:15:38.151456 [debug] [ThreadPool]: On list_synthea_insights: Close
[0m03:15:38.160603 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'c2df59e5-880d-4cb9-ae48-38fc173bfb69', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffb08b5f90>]}
[0m03:15:38.161315 [debug] [MainThread]: Using duckdb connection "master"
[0m03:15:38.161755 [debug] [MainThread]: On master: BEGIN
[0m03:15:38.162139 [debug] [MainThread]: Opening a new connection, currently in state init
[0m03:15:38.208427 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m03:15:38.208941 [debug] [MainThread]: On master: COMMIT
[0m03:15:38.209296 [debug] [MainThread]: Using duckdb connection "master"
[0m03:15:38.209715 [debug] [MainThread]: On master: COMMIT
[0m03:15:38.210161 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m03:15:38.210541 [debug] [MainThread]: On master: Close
[0m03:15:38.216200 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
[0m03:15:38.216687 [info ] [MainThread]: 
[0m03:15:38.218862 [debug] [Thread-1 (]: Began running node model.the_tuva_project.medication
[0m03:15:38.219419 [info ] [Thread-1 (]: 1 of 1 START sql view model tuva_input.medication .............................. [RUN]
[0m03:15:38.220143 [debug] [Thread-1 (]: Acquiring new duckdb connection 'model.the_tuva_project.medication'
[0m03:15:38.220542 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.medication
[0m03:15:38.227254 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.medication"
[0m03:15:38.228741 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.medication (compile): 03:15:38.220857 => 03:15:38.228577
[0m03:15:38.229156 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.medication
[0m03:15:38.250080 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.medication"
[0m03:15:38.251563 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m03:15:38.251953 [debug] [Thread-1 (]: On model.the_tuva_project.medication: BEGIN
[0m03:15:38.252334 [debug] [Thread-1 (]: Opening a new connection, currently in state init
[0m03:15:38.295147 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:15:38.295687 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m03:15:38.296207 [debug] [Thread-1 (]: On model.the_tuva_project.medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medication"} */

  
  create view "synthea"."tuva_input"."medication__dbt_tmp" as (
    -- models/medication.sql

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(m, '$.id'), '"', '') AS medication_id,
    REPLACE(REPLACE(JSON_EXTRACT(m, '$.subject.reference'), '"Patient/', ''), '"', '') AS patient_id,
    REPLACE(REPLACE(JSON_EXTRACT(m, '$.encounter.reference'), '"Encounter/', ''), '"', '') AS encounter_id,
    CAST(SUBSTRING(JSON_EXTRACT(m, '$.authoredOn'), 2, 10) AS DATE) AS dispensing_date,
    CAST(SUBSTRING(JSON_EXTRACT(m, '$.authoredOn'), 2, 10) AS DATE) AS prescribing_date,
    'rxnorm' AS source_code_type,
    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '') AS source_code,
    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].display'), '"', '') AS source_description,
    (
        SELECT c2.concept_code
        FROM "synthea"."vocabulary"."concept_relationship" cr
        JOIN "synthea"."vocabulary"."concept" c1 ON c1.concept_id = cr.concept_id_1
        JOIN "synthea"."vocabulary"."concept" c2 ON c2.concept_id = cr.concept_id_2
        WHERE c1.concept_code = REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '')
        AND cr.relationship_id = 'Mapped from'
        AND c2.vocabulary_id = 'NDC'
        AND c2.domain_id = 'Drug'
        AND c2.invalid_reason IS NULL
        AND c1.concept_class_id in ('Branded Drug', 'Clinical Drug', 'Quant Clinical Drug', 'Quant Branded Drug')
        AND LENGTH(c2.concept_code) = 11
        ORDER BY c2.concept_id
        LIMIT 1
    ) AS ndc_code,
    (
        SELECT c2.concept_name
        FROM "synthea"."vocabulary"."concept_relationship" cr
        JOIN "synthea"."vocabulary"."concept" c1 ON c1.concept_id = cr.concept_id_1
        JOIN "synthea"."vocabulary"."concept" c2 ON c2.concept_id = cr.concept_id_2
        WHERE c1.concept_code = REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '')
        AND cr.relationship_id = 'Mapped from'
        AND c2.vocabulary_id = 'NDC'
        AND c2.domain_id = 'Drug'
        AND c2.invalid_reason IS NULL
        AND c1.concept_class_id in ('Branded Drug', 'Clinical Drug', 'Quant Clinical Drug', 'Quant Branded Drug')
        AND LENGTH(c2.concept_code) = 11
        ORDER BY c2.concept_id
        LIMIT 1
    ) AS ndc_description,
    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '') AS rxnorm_code,
    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].display'), '"', '') AS rxnorm_description,
    r."atc class id" AS atc_code,
    (
        SELECT c3.concept_name
        FROM "synthea"."vocabulary"."concept" c3
        WHERE c3.concept_code = atc_code
            AND c3.vocabulary_id = 'ATC'
            AND c3.domain_id = 'Drug'
            AND c3.invalid_reason IS NULL
            AND c3.standard_concept = 'C'
        LIMIT 1
    ) AS atc_description,
    NULL AS route,
    MIN(CASE
        WHEN ds.amount_value IS NOT NULL THEN ds.amount_value
        WHEN ds.numerator_value IS NOT NULL THEN
            CASE
                WHEN ds.denominator_value IS NOT NULL AND ds.denominator_value != 0 THEN ds.numerator_value / ds.denominator_value
                ELSE ds.numerator_value
            END
        ELSE NULL
    END) AS strength,
    CASE
        WHEN REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '"', '') IS NOT NULL 
        THEN CAST(REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '"', '') AS INTEGER) * 30
        ELSE 1
    END AS quantity,
    (
        SELECT c4.concept_name
        FROM "synthea"."vocabulary"."concept" c1
        JOIN "synthea"."vocabulary"."drug_strength" ds ON c1.concept_id = ds.drug_concept_id
        JOIN "synthea"."vocabulary"."concept" c4 ON c4.concept_id = COALESCE(ds.amount_unit_concept_id, ds.numerator_unit_concept_id)
        WHERE c1.concept_code = REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '')
            AND c1.vocabulary_id = 'RxNorm'
            AND c1.domain_id = 'Drug'
            AND c1.invalid_reason IS NULL
            AND c1.standard_concept = 'S'
            AND c4.concept_id IS NOT NULL
        LIMIT 1
    ) AS quantity_unit,
    CASE
        WHEN REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '"', '') IS NOT NULL 
        THEN 30
        ELSE 1
    END AS days_supply,
    REPLACE(REPLACE(JSON_EXTRACT(m, '$.requester.reference'), '"Practitioner/', ''), '"', '') AS practitioner_id,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."MedicationRequest" m
LEFT JOIN "synthea"."vocabulary"."concept" c
    ON REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '') = c.concept_code
    AND c.vocabulary_id = 'RxNorm'
    AND c.domain_id = 'Drug'
    AND c.invalid_reason IS NULL
    AND c.standard_concept = 'S'
JOIN "synthea"."reference"."rxcuis_ndcs_atc" r
    ON REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '') = r.rxcui
JOIN "synthea"."vocabulary"."drug_strength" ds
    ON c.concept_id = ds.drug_concept_id
WHERE 
    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(m, '$.id'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(m, '$.subject.reference'), '"Patient/', ''), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(m, '$.encounter.reference'), '"Encounter/', ''), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(m, '$.authoredOn'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(m, '$.authoredOn'), 2, 10) AS DATE),
    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].display'), '"', '')
  );

[0m03:15:38.299824 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.medication (execute): 03:15:38.229427 => 03:15:38.299643
[0m03:15:38.300233 [debug] [Thread-1 (]: On model.the_tuva_project.medication: ROLLBACK
[0m03:15:38.302329 [debug] [Thread-1 (]: Failed to rollback 'model.the_tuva_project.medication'
[0m03:15:38.302729 [debug] [Thread-1 (]: On model.the_tuva_project.medication: Close
[0m03:15:38.309905 [debug] [Thread-1 (]: Runtime Error in model medication (models/tuva_input/medication.sql)
  Binder Error: column "resourceType" must appear in the GROUP BY clause or must be part of an aggregate function.
  Either add it to the GROUP BY list, or use "ANY_VALUE(resourceType)" if the exact value of "resourceType" is not important.
[0m03:15:38.310503 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'c2df59e5-880d-4cb9-ae48-38fc173bfb69', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffb0752410>]}
[0m03:15:38.311090 [error] [Thread-1 (]: 1 of 1 ERROR creating sql view model tuva_input.medication ..................... [[31mERROR[0m in 0.09s]
[0m03:15:38.311654 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.medication
[0m03:15:38.313207 [debug] [MainThread]: Using duckdb connection "master"
[0m03:15:38.313576 [debug] [MainThread]: On master: BEGIN
[0m03:15:38.313911 [debug] [MainThread]: Opening a new connection, currently in state closed
[0m03:15:38.358446 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m03:15:38.358969 [debug] [MainThread]: On master: COMMIT
[0m03:15:38.359316 [debug] [MainThread]: Using duckdb connection "master"
[0m03:15:38.359643 [debug] [MainThread]: On master: COMMIT
[0m03:15:38.360049 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m03:15:38.360408 [debug] [MainThread]: On master: Close
[0m03:15:38.365415 [debug] [MainThread]: Connection 'master' was properly closed.
[0m03:15:38.365896 [debug] [MainThread]: Connection 'list_synthea_insights' was properly closed.
[0m03:15:38.366236 [debug] [MainThread]: Connection 'list_synthea_quality_measures' was properly closed.
[0m03:15:38.366542 [debug] [MainThread]: Connection 'list_synthea_cms_hcc' was properly closed.
[0m03:15:38.366865 [debug] [MainThread]: Connection 'list_synthea_chronic_conditions' was properly closed.
[0m03:15:38.367228 [debug] [MainThread]: Connection 'model.the_tuva_project.medication' was properly closed.
[0m03:15:38.368837 [info ] [MainThread]: 
[0m03:15:38.369320 [info ] [MainThread]: Finished running 1 view model in 0 hours 0 minutes and 0.80 seconds (0.80s).
[0m03:15:38.370011 [debug] [MainThread]: Command end result
[0m03:15:38.403334 [info ] [MainThread]: 
[0m03:15:38.403852 [info ] [MainThread]: [31mCompleted with 1 error and 0 warnings:[0m
[0m03:15:38.404203 [info ] [MainThread]: 
[0m03:15:38.404588 [error] [MainThread]:   Runtime Error in model medication (models/tuva_input/medication.sql)
  Binder Error: column "resourceType" must appear in the GROUP BY clause or must be part of an aggregate function.
  Either add it to the GROUP BY list, or use "ANY_VALUE(resourceType)" if the exact value of "resourceType" is not important.
[0m03:15:38.404984 [info ] [MainThread]: 
[0m03:15:38.405390 [info ] [MainThread]: Done. PASS=0 WARN=0 ERROR=1 SKIP=0 TOTAL=1
[0m03:15:38.406122 [debug] [MainThread]: Resource report: {"command_name": "run", "command_wall_clock_time": 1.7182904, "process_user_time": 2.506064, "process_kernel_time": 0.322941, "process_mem_max_rss": "289660", "command_success": false, "process_in_blocks": "0", "process_out_blocks": "0"}
[0m03:15:38.406599 [debug] [MainThread]: Command `dbt run` failed at 03:15:38.406501 after 1.72 seconds
[0m03:15:38.406992 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffbe3d3b10>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffbe3d3b50>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffaec4ff50>]}
[0m03:15:38.407373 [debug] [MainThread]: Flushing usage events
[0m03:19:53.891130 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffadb8a290>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffad9f9990>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffad9ef8d0>]}


============================== 03:19:53.892421 | 42a49648-67e9-4784-bec6-7bcbc1fb5efb ==============================
[0m03:19:53.892421 [info ] [MainThread]: Running with dbt=1.7.7
[0m03:19:53.892965 [debug] [MainThread]: running dbt with arguments {'target_path': 'None', 'log_cache_events': 'False', 'printer_width': '80', 'version_check': 'True', 'indirect_selection': 'eager', 'log_format': 'default', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'debug': 'False', 'use_colors': 'True', 'quiet': 'False', 'use_experimental_parser': 'False', 'log_path': '/workspaces/synthea_dw/tuva/logs', 'introspect': 'True', 'invocation_command': 'dbt run -m medication.sql', 'cache_selected_only': 'False', 'write_json': 'True', 'no_print': 'None', 'fail_fast': 'False', 'profiles_dir': '/workspaces/synthea_dw/tuva', 'static_parser': 'True', 'warn_error': 'None', 'partial_parse': 'True', 'send_anonymous_usage_stats': 'True'}
[0m03:19:54.064780 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '42a49648-67e9-4784-bec6-7bcbc1fb5efb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa6417f10>]}
[0m03:19:54.138835 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '42a49648-67e9-4784-bec6-7bcbc1fb5efb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa63c1850>]}
[0m03:19:54.139550 [info ] [MainThread]: Registered adapter: duckdb=1.7.1
[0m03:19:54.146593 [debug] [MainThread]: checksum: 54188551c516f4dd1c42b8d9c289f2bf49f18ae42632e2ba36a64ad29fd60da4, vars: {}, profile: , target: , version: 1.7.7
[0m03:19:54.421494 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 1 files changed.
[0m03:19:54.422823 [debug] [MainThread]: Partial parsing: updated file: the_tuva_project://models/tuva_input/medication.sql
[0m03:19:54.641859 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '42a49648-67e9-4784-bec6-7bcbc1fb5efb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa5ed0610>]}
[0m03:19:54.732344 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '42a49648-67e9-4784-bec6-7bcbc1fb5efb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffada00d50>]}
[0m03:19:54.732955 [info ] [MainThread]: Found 296 models, 53 tests, 121 sources, 0 exposures, 0 metrics, 531 macros, 0 groups, 0 semantic models
[0m03:19:54.733413 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '42a49648-67e9-4784-bec6-7bcbc1fb5efb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa5ec6310>]}
[0m03:19:54.738662 [info ] [MainThread]: 
[0m03:19:54.739360 [debug] [MainThread]: Acquiring new duckdb connection 'master'
[0m03:19:54.740265 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea'
[0m03:19:54.747724 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m03:19:54.748375 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m03:19:54.748897 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m03:19:54.804144 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:54.805382 [debug] [ThreadPool]: On list_synthea: Close
[0m03:19:54.811215 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea, now create_synthea_tuva_input)
[0m03:19:54.811996 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "tuva_input"
"
[0m03:19:54.850844 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m03:19:54.851447 [debug] [ThreadPool]: On create_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_tuva_input"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m03:19:54.851796 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:19:54.894920 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:54.896252 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m03:19:54.896633 [debug] [ThreadPool]: On create_synthea_tuva_input: BEGIN
[0m03:19:54.897045 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:54.897376 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m03:19:54.897717 [debug] [ThreadPool]: On create_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_tuva_input"} */

    
    
        create schema if not exists "synthea"."tuva_input"
    
[0m03:19:54.898105 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:54.898753 [debug] [ThreadPool]: On create_synthea_tuva_input: COMMIT
[0m03:19:54.899085 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m03:19:54.899408 [debug] [ThreadPool]: On create_synthea_tuva_input: COMMIT
[0m03:19:54.899783 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:54.900112 [debug] [ThreadPool]: On create_synthea_tuva_input: Close
[0m03:19:54.911261 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_tuva_input, now list_synthea_claims_expanded)
[0m03:19:54.911956 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_ccsr'
[0m03:19:54.912516 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_financial_pmpm'
[0m03:19:54.915922 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_expanded"
[0m03:19:54.916510 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_ed_classification'
[0m03:19:54.917991 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ccsr"
[0m03:19:54.919362 [debug] [ThreadPool]: Using duckdb connection "list_synthea_financial_pmpm"
[0m03:19:54.919771 [debug] [ThreadPool]: On list_synthea_claims_expanded: BEGIN
[0m03:19:54.921085 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ed_classification"
[0m03:19:54.921459 [debug] [ThreadPool]: On list_synthea_ccsr: BEGIN
[0m03:19:54.921821 [debug] [ThreadPool]: On list_synthea_financial_pmpm: BEGIN
[0m03:19:54.922178 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:19:54.922529 [debug] [ThreadPool]: On list_synthea_ed_classification: BEGIN
[0m03:19:54.922864 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m03:19:54.923197 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m03:19:54.966204 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:54.966553 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m03:19:54.967305 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:54.967598 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_expanded"
[0m03:19:54.967861 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:54.968417 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:54.968669 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ccsr"
[0m03:19:54.969031 [debug] [ThreadPool]: On list_synthea_claims_expanded: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_claims_expanded"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'claims_expanded'
    and table_catalog = 'synthea'
  
[0m03:19:54.969385 [debug] [ThreadPool]: Using duckdb connection "list_synthea_financial_pmpm"
[0m03:19:54.969746 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ed_classification"
[0m03:19:54.970100 [debug] [ThreadPool]: On list_synthea_ccsr: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_ccsr"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'ccsr'
    and table_catalog = 'synthea'
  
[0m03:19:54.970899 [debug] [ThreadPool]: On list_synthea_financial_pmpm: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_financial_pmpm"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'financial_pmpm'
    and table_catalog = 'synthea'
  
[0m03:19:54.971426 [debug] [ThreadPool]: On list_synthea_ed_classification: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_ed_classification"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'ed_classification'
    and table_catalog = 'synthea'
  
[0m03:19:54.979922 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:54.980280 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:54.980576 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:54.980864 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:54.997451 [debug] [ThreadPool]: On list_synthea_financial_pmpm: ROLLBACK
[0m03:19:54.998305 [debug] [ThreadPool]: On list_synthea_ccsr: ROLLBACK
[0m03:19:54.999007 [debug] [ThreadPool]: On list_synthea_ed_classification: ROLLBACK
[0m03:19:54.999648 [debug] [ThreadPool]: On list_synthea_claims_expanded: ROLLBACK
[0m03:19:55.000231 [debug] [ThreadPool]: Failed to rollback 'list_synthea_financial_pmpm'
[0m03:19:55.000553 [debug] [ThreadPool]: Failed to rollback 'list_synthea_ccsr'
[0m03:19:55.001012 [debug] [ThreadPool]: Failed to rollback 'list_synthea_ed_classification'
[0m03:19:55.001471 [debug] [ThreadPool]: Failed to rollback 'list_synthea_claims_expanded'
[0m03:19:55.001828 [debug] [ThreadPool]: On list_synthea_financial_pmpm: Close
[0m03:19:55.002177 [debug] [ThreadPool]: On list_synthea_ccsr: Close
[0m03:19:55.002535 [debug] [ThreadPool]: On list_synthea_ed_classification: Close
[0m03:19:55.002878 [debug] [ThreadPool]: On list_synthea_claims_expanded: Close
[0m03:19:55.003750 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_financial_pmpm, now list_synthea_data_quality)
[0m03:19:55.005426 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_ccsr, now list_synthea_core)
[0m03:19:55.007215 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_ed_classification, now list_synthea_hcc_suspecting)
[0m03:19:55.013855 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_claims_expanded, now list_synthea_chronic_conditions)
[0m03:19:55.015372 [debug] [ThreadPool]: Using duckdb connection "list_synthea_data_quality"
[0m03:19:55.016963 [debug] [ThreadPool]: Using duckdb connection "list_synthea_core"
[0m03:19:55.018310 [debug] [ThreadPool]: Using duckdb connection "list_synthea_hcc_suspecting"
[0m03:19:55.019707 [debug] [ThreadPool]: Using duckdb connection "list_synthea_chronic_conditions"
[0m03:19:55.020198 [debug] [ThreadPool]: On list_synthea_data_quality: BEGIN
[0m03:19:55.020611 [debug] [ThreadPool]: On list_synthea_core: BEGIN
[0m03:19:55.021019 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: BEGIN
[0m03:19:55.021405 [debug] [ThreadPool]: On list_synthea_chronic_conditions: BEGIN
[0m03:19:55.021770 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:19:55.022132 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:19:55.022499 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:19:55.022845 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:19:55.072303 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:55.072747 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:55.073090 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:55.073432 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:55.073681 [debug] [ThreadPool]: Using duckdb connection "list_synthea_data_quality"
[0m03:19:55.074059 [debug] [ThreadPool]: Using duckdb connection "list_synthea_core"
[0m03:19:55.074429 [debug] [ThreadPool]: Using duckdb connection "list_synthea_hcc_suspecting"
[0m03:19:55.074808 [debug] [ThreadPool]: Using duckdb connection "list_synthea_chronic_conditions"
[0m03:19:55.075187 [debug] [ThreadPool]: On list_synthea_data_quality: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_data_quality"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'data_quality'
    and table_catalog = 'synthea'
  
[0m03:19:55.075601 [debug] [ThreadPool]: On list_synthea_core: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_core"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'core'
    and table_catalog = 'synthea'
  
[0m03:19:55.075967 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_hcc_suspecting"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'hcc_suspecting'
    and table_catalog = 'synthea'
  
[0m03:19:55.076331 [debug] [ThreadPool]: On list_synthea_chronic_conditions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_chronic_conditions"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'chronic_conditions'
    and table_catalog = 'synthea'
  
[0m03:19:55.085034 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:55.085422 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:55.085697 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:55.085993 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:55.099738 [debug] [ThreadPool]: On list_synthea_core: ROLLBACK
[0m03:19:55.100852 [debug] [ThreadPool]: On list_synthea_data_quality: ROLLBACK
[0m03:19:55.101522 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: ROLLBACK
[0m03:19:55.102185 [debug] [ThreadPool]: On list_synthea_chronic_conditions: ROLLBACK
[0m03:19:55.102563 [debug] [ThreadPool]: Failed to rollback 'list_synthea_core'
[0m03:19:55.103016 [debug] [ThreadPool]: Failed to rollback 'list_synthea_data_quality'
[0m03:19:55.103479 [debug] [ThreadPool]: Failed to rollback 'list_synthea_hcc_suspecting'
[0m03:19:55.103923 [debug] [ThreadPool]: Failed to rollback 'list_synthea_chronic_conditions'
[0m03:19:55.104281 [debug] [ThreadPool]: On list_synthea_core: Close
[0m03:19:55.104658 [debug] [ThreadPool]: On list_synthea_data_quality: Close
[0m03:19:55.105026 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: Close
[0m03:19:55.105412 [debug] [ThreadPool]: On list_synthea_chronic_conditions: Close
[0m03:19:55.106260 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_core, now list_synthea_readmissions)
[0m03:19:55.110026 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_data_quality, now list_synthea_insights)
[0m03:19:55.114172 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_hcc_suspecting, now list_synthea_quality_measures)
[0m03:19:55.121275 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_chronic_conditions, now list_synthea_tuva_input)
[0m03:19:55.123998 [debug] [ThreadPool]: Using duckdb connection "list_synthea_readmissions"
[0m03:19:55.126408 [debug] [ThreadPool]: Using duckdb connection "list_synthea_insights"
[0m03:19:55.127984 [debug] [ThreadPool]: Using duckdb connection "list_synthea_quality_measures"
[0m03:19:55.129432 [debug] [ThreadPool]: Using duckdb connection "list_synthea_tuva_input"
[0m03:19:55.129828 [debug] [ThreadPool]: On list_synthea_readmissions: BEGIN
[0m03:19:55.130202 [debug] [ThreadPool]: On list_synthea_insights: BEGIN
[0m03:19:55.130642 [debug] [ThreadPool]: On list_synthea_quality_measures: BEGIN
[0m03:19:55.131001 [debug] [ThreadPool]: On list_synthea_tuva_input: BEGIN
[0m03:19:55.131353 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:19:55.131716 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:19:55.132094 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:19:55.132473 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:19:55.181576 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:55.181976 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:55.182431 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:55.182874 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:55.183270 [debug] [ThreadPool]: Using duckdb connection "list_synthea_readmissions"
[0m03:19:55.183656 [debug] [ThreadPool]: Using duckdb connection "list_synthea_insights"
[0m03:19:55.184018 [debug] [ThreadPool]: Using duckdb connection "list_synthea_quality_measures"
[0m03:19:55.184363 [debug] [ThreadPool]: Using duckdb connection "list_synthea_tuva_input"
[0m03:19:55.184734 [debug] [ThreadPool]: On list_synthea_readmissions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_readmissions"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'readmissions'
    and table_catalog = 'synthea'
  
[0m03:19:55.185111 [debug] [ThreadPool]: On list_synthea_insights: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_insights"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'insights'
    and table_catalog = 'synthea'
  
[0m03:19:55.185490 [debug] [ThreadPool]: On list_synthea_quality_measures: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_quality_measures"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'quality_measures'
    and table_catalog = 'synthea'
  
[0m03:19:55.185864 [debug] [ThreadPool]: On list_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_tuva_input"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'tuva_input'
    and table_catalog = 'synthea'
  
[0m03:19:55.194479 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:55.195016 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:55.195326 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:55.195680 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:55.209370 [debug] [ThreadPool]: On list_synthea_quality_measures: ROLLBACK
[0m03:19:55.210281 [debug] [ThreadPool]: On list_synthea_insights: ROLLBACK
[0m03:19:55.211271 [debug] [ThreadPool]: On list_synthea_tuva_input: ROLLBACK
[0m03:19:55.211596 [debug] [ThreadPool]: Failed to rollback 'list_synthea_quality_measures'
[0m03:19:55.212356 [debug] [ThreadPool]: On list_synthea_readmissions: ROLLBACK
[0m03:19:55.212656 [debug] [ThreadPool]: Failed to rollback 'list_synthea_insights'
[0m03:19:55.213095 [debug] [ThreadPool]: Failed to rollback 'list_synthea_tuva_input'
[0m03:19:55.213476 [debug] [ThreadPool]: On list_synthea_quality_measures: Close
[0m03:19:55.213899 [debug] [ThreadPool]: Failed to rollback 'list_synthea_readmissions'
[0m03:19:55.214242 [debug] [ThreadPool]: On list_synthea_insights: Close
[0m03:19:55.214610 [debug] [ThreadPool]: On list_synthea_tuva_input: Close
[0m03:19:55.215494 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_quality_measures, now list_synthea_claims_preprocessing)
[0m03:19:55.218804 [debug] [ThreadPool]: On list_synthea_readmissions: Close
[0m03:19:55.219612 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_insights, now list_synthea_cms_hcc)
[0m03:19:55.223969 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_preprocessing"
[0m03:19:55.234011 [debug] [ThreadPool]: Using duckdb connection "list_synthea_cms_hcc"
[0m03:19:55.234482 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: BEGIN
[0m03:19:55.234846 [debug] [ThreadPool]: On list_synthea_cms_hcc: BEGIN
[0m03:19:55.235188 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:19:55.235584 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:19:55.284698 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:55.285108 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:55.285492 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_preprocessing"
[0m03:19:55.285857 [debug] [ThreadPool]: Using duckdb connection "list_synthea_cms_hcc"
[0m03:19:55.286222 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_claims_preprocessing"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'claims_preprocessing'
    and table_catalog = 'synthea'
  
[0m03:19:55.286615 [debug] [ThreadPool]: On list_synthea_cms_hcc: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_cms_hcc"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'cms_hcc'
    and table_catalog = 'synthea'
  
[0m03:19:55.294857 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:55.295160 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:19:55.308817 [debug] [ThreadPool]: On list_synthea_cms_hcc: ROLLBACK
[0m03:19:55.309479 [debug] [ThreadPool]: Failed to rollback 'list_synthea_cms_hcc'
[0m03:19:55.310827 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: ROLLBACK
[0m03:19:55.311072 [debug] [ThreadPool]: On list_synthea_cms_hcc: Close
[0m03:19:55.311552 [debug] [ThreadPool]: Failed to rollback 'list_synthea_claims_preprocessing'
[0m03:19:55.314830 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: Close
[0m03:19:55.330073 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '42a49648-67e9-4784-bec6-7bcbc1fb5efb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa63a5b90>]}
[0m03:19:55.330802 [debug] [MainThread]: Using duckdb connection "master"
[0m03:19:55.331269 [debug] [MainThread]: On master: BEGIN
[0m03:19:55.331682 [debug] [MainThread]: Opening a new connection, currently in state init
[0m03:19:55.378340 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m03:19:55.378864 [debug] [MainThread]: On master: COMMIT
[0m03:19:55.379222 [debug] [MainThread]: Using duckdb connection "master"
[0m03:19:55.379570 [debug] [MainThread]: On master: COMMIT
[0m03:19:55.379973 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m03:19:55.380323 [debug] [MainThread]: On master: Close
[0m03:19:55.385691 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
[0m03:19:55.386180 [info ] [MainThread]: 
[0m03:19:55.388556 [debug] [Thread-1 (]: Began running node model.the_tuva_project.medication
[0m03:19:55.389113 [info ] [Thread-1 (]: 1 of 1 START sql view model tuva_input.medication .............................. [RUN]
[0m03:19:55.389808 [debug] [Thread-1 (]: Acquiring new duckdb connection 'model.the_tuva_project.medication'
[0m03:19:55.390218 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.medication
[0m03:19:55.397412 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.medication"
[0m03:19:55.399071 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.medication (compile): 03:19:55.390511 => 03:19:55.398825
[0m03:19:55.399529 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.medication
[0m03:19:55.418897 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.medication"
[0m03:19:55.420573 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m03:19:55.421045 [debug] [Thread-1 (]: On model.the_tuva_project.medication: BEGIN
[0m03:19:55.421437 [debug] [Thread-1 (]: Opening a new connection, currently in state init
[0m03:19:55.464713 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:19:55.472892 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m03:19:55.473744 [debug] [Thread-1 (]: On model.the_tuva_project.medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medication"} */

  
  create view "synthea"."tuva_input"."medication__dbt_tmp" as (
    -- models/medication.sql

WITH MinStrength AS (
    SELECT
        REPLACE(JSON_EXTRACT(m, '$.id'), '"', '') AS medication_id,
        MIN(
            CASE
                WHEN ds.amount_value IS NOT NULL THEN ds.amount_value
                WHEN ds.numerator_value IS NOT NULL THEN
                    CASE
                        WHEN ds.denominator_value IS NOT NULL AND ds.denominator_value != 0 THEN ds.numerator_value / ds.denominator_value
                        ELSE ds.numerator_value
                    END
                ELSE NULL
            END
        ) AS min_strength
    FROM "synthea"."json"."MedicationRequest" m
    JOIN "synthea"."vocabulary"."concept" c
        ON REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '') = c.concept_code
        AND c.vocabulary_id = 'RxNorm'
        AND c.domain_id = 'Drug'
        AND c.invalid_reason IS NULL
        AND c.standard_concept = 'S'
    JOIN "synthea"."vocabulary"."drug_strength" ds
        ON c.concept_id = ds.drug_concept_id
    GROUP BY medication_id
)

SELECT DISTINCT
    m.medication_id,
    REPLACE(REPLACE(JSON_EXTRACT(m, '$.subject.reference'), '"Patient/', ''), '"', '') AS patient_id,
    REPLACE(REPLACE(JSON_EXTRACT(m, '$.encounter.reference'), '"Encounter/', ''), '"', '') AS encounter_id,
    CAST(SUBSTRING(JSON_EXTRACT(m, '$.authoredOn'), 2, 10) AS DATE) AS dispensing_date,
    CAST(SUBSTRING(JSON_EXTRACT(m, '$.authoredOn'), 2, 10) AS DATE) AS prescribing_date,
    'rxnorm' AS source_code_type,
    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '') AS source_code,
    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].display'), '"', '') AS source_description,
    (
        SELECT c2.concept_code
        FROM "synthea"."vocabulary"."concept_relationship" cr
        JOIN "synthea"."vocabulary"."concept" c1 ON c1.concept_id = cr.concept_id_1
        JOIN "synthea"."vocabulary"."concept" c2 ON c2.concept_id = cr.concept_id_2
        WHERE c1.concept_code = REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '')
        AND cr.relationship_id = 'Mapped from'
        AND c2.vocabulary_id = 'NDC'
        AND c2.domain_id = 'Drug'
        AND c2.invalid_reason IS NULL
        AND c1.concept_class_id in ('Branded Drug', 'Clinical Drug', 'Quant Clinical Drug', 'Quant Branded Drug')
        AND LENGTH(c2.concept_code) = 11
        ORDER BY c2.concept_id
        LIMIT 1
    ) AS ndc_code,
    (
        SELECT c2.concept_name
        FROM "synthea"."vocabulary"."concept_relationship" cr
        JOIN "synthea"."vocabulary"."concept" c1 ON c1.concept_id = cr.concept_id_1
        JOIN "synthea"."vocabulary"."concept" c2 ON c2.concept_id = cr.concept_id_2
        WHERE c1.concept_code = REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '')
        AND cr.relationship_id = 'Mapped from'
        AND c2.vocabulary_id = 'NDC'
        AND c2.domain_id = 'Drug'
        AND c2.invalid_reason IS NULL
        AND c1.concept_class_id in ('Branded Drug', 'Clinical Drug', 'Quant Clinical Drug', 'Quant Branded Drug')
        AND LENGTH(c2.concept_code) = 11
        ORDER BY c2.concept_id
        LIMIT 1
    ) AS ndc_description,
    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '') AS rxnorm_code,
    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].display'), '"', '') AS rxnorm_description,
    r."atc class id" AS atc_code,
    (
        SELECT c3.concept_name
        FROM "synthea"."vocabulary"."concept" c3
        WHERE c3.concept_code = atc_code
            AND c3.vocabulary_id = 'ATC'
            AND c3.domain_id = 'Drug'
            AND c3.invalid_reason IS NULL
            AND c3.standard_concept = 'C'
        LIMIT 1
    ) AS atc_description,
    NULL AS route,
    ms.strength,
    CASE
        WHEN REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '"', '') IS NOT NULL 
        THEN CAST(REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '"', '') AS INTEGER) * 30
        ELSE 1
    END AS quantity,
    (
        SELECT c4.concept_name
        FROM "synthea"."vocabulary"."concept" c1
        JOIN "synthea"."vocabulary"."drug_strength" ds ON c1.concept_id = ds.drug_concept_id
        JOIN "synthea"."vocabulary"."concept" c4 ON c4.concept_id = COALESCE(ds.amount_unit_concept_id, ds.numerator_unit_concept_id)
        WHERE c1.concept_code = REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '')
            AND c1.vocabulary_id = 'RxNorm'
            AND c1.domain_id = 'Drug'
            AND c1.invalid_reason IS NULL
            AND c1.standard_concept = 'S'
            AND c4.concept_id IS NOT NULL
        LIMIT 1
    ) AS quantity_unit,
    CASE
        WHEN REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '"', '') IS NOT NULL 
        THEN 30
        ELSE 1
    END AS days_supply,
    REPLACE(REPLACE(JSON_EXTRACT(m, '$.requester.reference'), '"Practitioner/', ''), '"', '') AS practitioner_id,
    'SyntheaFhir' AS data_source
FROM MinStrength ms
JOIN "synthea"."json"."MedicationRequest" mr
    ON ms.medication_id = REPLACE(JSON_EXTRACT(mr, '$.id'), '"', '')
LEFT JOIN "synthea"."vocabulary"."concept" c
    ON REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '') = c.concept_code
    AND c.vocabulary_id = 'RxNorm'
    AND c.domain_id = 'Drug'
    AND c.invalid_reason IS NULL
    AND c.standard_concept = 'S'
JOIN "synthea"."reference"."rxcuis_ndcs_atc" r
    ON REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '') = r.rxcui
JOIN "synthea"."vocabulary"."drug_strength" ds
    ON c.concept_id = ds.drug_concept_id
WHERE 
    REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '') IS NOT NULL
  );

[0m03:19:55.475651 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.medication (execute): 03:19:55.399856 => 03:19:55.475468
[0m03:19:55.476101 [debug] [Thread-1 (]: On model.the_tuva_project.medication: ROLLBACK
[0m03:19:55.478356 [debug] [Thread-1 (]: Failed to rollback 'model.the_tuva_project.medication'
[0m03:19:55.478791 [debug] [Thread-1 (]: On model.the_tuva_project.medication: Close
[0m03:19:55.485369 [debug] [Thread-1 (]: Runtime Error in model medication (models/tuva_input/medication.sql)
  Binder Error: Referenced column "m" not found in FROM clause!
  Candidate bindings: "mr.id", "mr.meta"
[0m03:19:55.485955 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '42a49648-67e9-4784-bec6-7bcbc1fb5efb', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffa58f6910>]}
[0m03:19:55.486537 [error] [Thread-1 (]: 1 of 1 ERROR creating sql view model tuva_input.medication ..................... [[31mERROR[0m in 0.10s]
[0m03:19:55.487112 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.medication
[0m03:19:55.488991 [debug] [MainThread]: Using duckdb connection "master"
[0m03:19:55.489381 [debug] [MainThread]: On master: BEGIN
[0m03:19:55.489798 [debug] [MainThread]: Opening a new connection, currently in state closed
[0m03:19:55.534451 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m03:19:55.534976 [debug] [MainThread]: On master: COMMIT
[0m03:19:55.535313 [debug] [MainThread]: Using duckdb connection "master"
[0m03:19:55.535677 [debug] [MainThread]: On master: COMMIT
[0m03:19:55.536097 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m03:19:55.536474 [debug] [MainThread]: On master: Close
[0m03:19:55.541599 [debug] [MainThread]: Connection 'master' was properly closed.
[0m03:19:55.541984 [debug] [MainThread]: Connection 'list_synthea_tuva_input' was properly closed.
[0m03:19:55.542297 [debug] [MainThread]: Connection 'list_synthea_readmissions' was properly closed.
[0m03:19:55.542633 [debug] [MainThread]: Connection 'list_synthea_cms_hcc' was properly closed.
[0m03:19:55.542961 [debug] [MainThread]: Connection 'list_synthea_claims_preprocessing' was properly closed.
[0m03:19:55.543267 [debug] [MainThread]: Connection 'model.the_tuva_project.medication' was properly closed.
[0m03:19:55.544595 [info ] [MainThread]: 
[0m03:19:55.545144 [info ] [MainThread]: Finished running 1 view model in 0 hours 0 minutes and 0.81 seconds (0.81s).
[0m03:19:55.545827 [debug] [MainThread]: Command end result
[0m03:19:55.579712 [info ] [MainThread]: 
[0m03:19:55.580229 [info ] [MainThread]: [31mCompleted with 1 error and 0 warnings:[0m
[0m03:19:55.580628 [info ] [MainThread]: 
[0m03:19:55.581078 [error] [MainThread]:   Runtime Error in model medication (models/tuva_input/medication.sql)
  Binder Error: Referenced column "m" not found in FROM clause!
  Candidate bindings: "mr.id", "mr.meta"
[0m03:19:55.581538 [info ] [MainThread]: 
[0m03:19:55.581993 [info ] [MainThread]: Done. PASS=0 WARN=0 ERROR=1 SKIP=0 TOTAL=1
[0m03:19:55.582761 [debug] [MainThread]: Resource report: {"command_name": "run", "command_wall_clock_time": 1.7244761, "process_user_time": 2.514744, "process_kernel_time": 0.323769, "process_mem_max_rss": "323492", "command_success": false, "process_in_blocks": "0", "process_out_blocks": "0"}
[0m03:19:55.583251 [debug] [MainThread]: Command `dbt run` failed at 03:19:55.583153 after 1.73 seconds
[0m03:19:55.583702 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffadb90650>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffada1b990>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffffada538d0>]}
[0m03:19:55.584292 [debug] [MainThread]: Flushing usage events
[0m03:22:26.185133 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff94622a90>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff92e8b110>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff92e8a6d0>]}


============================== 03:22:26.186364 | ba381603-1fc3-458e-9f48-220f2022366b ==============================
[0m03:22:26.186364 [info ] [MainThread]: Running with dbt=1.7.7
[0m03:22:26.186887 [debug] [MainThread]: running dbt with arguments {'use_experimental_parser': 'False', 'cache_selected_only': 'False', 'use_colors': 'True', 'introspect': 'True', 'target_path': 'None', 'log_cache_events': 'False', 'log_format': 'default', 'no_print': 'None', 'write_json': 'True', 'send_anonymous_usage_stats': 'True', 'partial_parse': 'True', 'quiet': 'False', 'invocation_command': 'dbt run -m medication.sql', 'warn_error': 'None', 'static_parser': 'True', 'indirect_selection': 'eager', 'profiles_dir': '/workspaces/synthea_dw/tuva', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'printer_width': '80', 'fail_fast': 'False', 'version_check': 'True', 'debug': 'False', 'log_path': '/workspaces/synthea_dw/tuva/logs'}
[0m03:22:26.356553 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'ba381603-1fc3-458e-9f48-220f2022366b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8b6cced0>]}
[0m03:22:26.432150 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'ba381603-1fc3-458e-9f48-220f2022366b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff943a17d0>]}
[0m03:22:26.433034 [info ] [MainThread]: Registered adapter: duckdb=1.7.1
[0m03:22:26.440894 [debug] [MainThread]: checksum: 54188551c516f4dd1c42b8d9c289f2bf49f18ae42632e2ba36a64ad29fd60da4, vars: {}, profile: , target: , version: 1.7.7
[0m03:22:26.712596 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 1 files changed.
[0m03:22:26.713969 [debug] [MainThread]: Partial parsing: updated file: the_tuva_project://models/tuva_input/medication.sql
[0m03:22:26.930394 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'ba381603-1fc3-458e-9f48-220f2022366b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8b71b7d0>]}
[0m03:22:27.019382 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'ba381603-1fc3-458e-9f48-220f2022366b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff9032eb10>]}
[0m03:22:27.019990 [info ] [MainThread]: Found 296 models, 53 tests, 121 sources, 0 exposures, 0 metrics, 531 macros, 0 groups, 0 semantic models
[0m03:22:27.020441 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'ba381603-1fc3-458e-9f48-220f2022366b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8abf7e90>]}
[0m03:22:27.025864 [info ] [MainThread]: 
[0m03:22:27.026550 [debug] [MainThread]: Acquiring new duckdb connection 'master'
[0m03:22:27.027428 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea'
[0m03:22:27.034533 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m03:22:27.035171 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m03:22:27.035684 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m03:22:27.090134 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.091419 [debug] [ThreadPool]: On list_synthea: Close
[0m03:22:27.096909 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea, now create_synthea_tuva_input)
[0m03:22:27.097625 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "tuva_input"
"
[0m03:22:27.136513 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m03:22:27.137085 [debug] [ThreadPool]: On create_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_tuva_input"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m03:22:27.137448 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:22:27.180981 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.182257 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m03:22:27.182635 [debug] [ThreadPool]: On create_synthea_tuva_input: BEGIN
[0m03:22:27.183051 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.183447 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m03:22:27.183794 [debug] [ThreadPool]: On create_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_tuva_input"} */

    
    
        create schema if not exists "synthea"."tuva_input"
    
[0m03:22:27.184211 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.184952 [debug] [ThreadPool]: On create_synthea_tuva_input: COMMIT
[0m03:22:27.185325 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m03:22:27.185653 [debug] [ThreadPool]: On create_synthea_tuva_input: COMMIT
[0m03:22:27.186040 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.186382 [debug] [ThreadPool]: On create_synthea_tuva_input: Close
[0m03:22:27.197691 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_tuva_input, now list_synthea_claims_preprocessing)
[0m03:22:27.198345 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_ccsr'
[0m03:22:27.198880 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_readmissions'
[0m03:22:27.202390 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_preprocessing"
[0m03:22:27.202970 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea_tuva_input'
[0m03:22:27.204508 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ccsr"
[0m03:22:27.205879 [debug] [ThreadPool]: Using duckdb connection "list_synthea_readmissions"
[0m03:22:27.206270 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: BEGIN
[0m03:22:27.207641 [debug] [ThreadPool]: Using duckdb connection "list_synthea_tuva_input"
[0m03:22:27.208018 [debug] [ThreadPool]: On list_synthea_ccsr: BEGIN
[0m03:22:27.208368 [debug] [ThreadPool]: On list_synthea_readmissions: BEGIN
[0m03:22:27.208709 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:22:27.209062 [debug] [ThreadPool]: On list_synthea_tuva_input: BEGIN
[0m03:22:27.209407 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m03:22:27.209744 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m03:22:27.253138 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.253494 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m03:22:27.254061 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.254455 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.254698 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_preprocessing"
[0m03:22:27.255221 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.255453 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ccsr"
[0m03:22:27.255811 [debug] [ThreadPool]: Using duckdb connection "list_synthea_readmissions"
[0m03:22:27.256178 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_claims_preprocessing"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'claims_preprocessing'
    and table_catalog = 'synthea'
  
[0m03:22:27.256536 [debug] [ThreadPool]: Using duckdb connection "list_synthea_tuva_input"
[0m03:22:27.256904 [debug] [ThreadPool]: On list_synthea_ccsr: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_ccsr"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'ccsr'
    and table_catalog = 'synthea'
  
[0m03:22:27.257306 [debug] [ThreadPool]: On list_synthea_readmissions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_readmissions"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'readmissions'
    and table_catalog = 'synthea'
  
[0m03:22:27.257930 [debug] [ThreadPool]: On list_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_tuva_input"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'tuva_input'
    and table_catalog = 'synthea'
  
[0m03:22:27.266676 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.267053 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.267351 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.267668 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.283954 [debug] [ThreadPool]: On list_synthea_ccsr: ROLLBACK
[0m03:22:27.285659 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: ROLLBACK
[0m03:22:27.286454 [debug] [ThreadPool]: On list_synthea_tuva_input: ROLLBACK
[0m03:22:27.287332 [debug] [ThreadPool]: On list_synthea_readmissions: ROLLBACK
[0m03:22:27.287898 [debug] [ThreadPool]: Failed to rollback 'list_synthea_ccsr'
[0m03:22:27.288360 [debug] [ThreadPool]: Failed to rollback 'list_synthea_claims_preprocessing'
[0m03:22:27.288826 [debug] [ThreadPool]: Failed to rollback 'list_synthea_tuva_input'
[0m03:22:27.289287 [debug] [ThreadPool]: Failed to rollback 'list_synthea_readmissions'
[0m03:22:27.289637 [debug] [ThreadPool]: On list_synthea_ccsr: Close
[0m03:22:27.289981 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: Close
[0m03:22:27.290410 [debug] [ThreadPool]: On list_synthea_tuva_input: Close
[0m03:22:27.290770 [debug] [ThreadPool]: On list_synthea_readmissions: Close
[0m03:22:27.291632 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_ccsr, now list_synthea_chronic_conditions)
[0m03:22:27.293304 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_claims_preprocessing, now list_synthea_core)
[0m03:22:27.300452 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_tuva_input, now list_synthea_claims_expanded)
[0m03:22:27.309657 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_readmissions, now list_synthea_hcc_suspecting)
[0m03:22:27.313871 [debug] [ThreadPool]: Using duckdb connection "list_synthea_chronic_conditions"
[0m03:22:27.315250 [debug] [ThreadPool]: Using duckdb connection "list_synthea_core"
[0m03:22:27.316708 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_expanded"
[0m03:22:27.319175 [debug] [ThreadPool]: Using duckdb connection "list_synthea_hcc_suspecting"
[0m03:22:27.319590 [debug] [ThreadPool]: On list_synthea_chronic_conditions: BEGIN
[0m03:22:27.319972 [debug] [ThreadPool]: On list_synthea_core: BEGIN
[0m03:22:27.320361 [debug] [ThreadPool]: On list_synthea_claims_expanded: BEGIN
[0m03:22:27.320737 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: BEGIN
[0m03:22:27.321117 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:22:27.321499 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:22:27.321853 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:22:27.322219 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:22:27.371673 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.372193 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.372523 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.372906 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.373173 [debug] [ThreadPool]: Using duckdb connection "list_synthea_chronic_conditions"
[0m03:22:27.373550 [debug] [ThreadPool]: Using duckdb connection "list_synthea_core"
[0m03:22:27.373916 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_expanded"
[0m03:22:27.374273 [debug] [ThreadPool]: Using duckdb connection "list_synthea_hcc_suspecting"
[0m03:22:27.374649 [debug] [ThreadPool]: On list_synthea_chronic_conditions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_chronic_conditions"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'chronic_conditions'
    and table_catalog = 'synthea'
  
[0m03:22:27.375057 [debug] [ThreadPool]: On list_synthea_core: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_core"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'core'
    and table_catalog = 'synthea'
  
[0m03:22:27.375443 [debug] [ThreadPool]: On list_synthea_claims_expanded: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_claims_expanded"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'claims_expanded'
    and table_catalog = 'synthea'
  
[0m03:22:27.375811 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_hcc_suspecting"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'hcc_suspecting'
    and table_catalog = 'synthea'
  
[0m03:22:27.384443 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.384861 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.385228 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.385494 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.399277 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: ROLLBACK
[0m03:22:27.400143 [debug] [ThreadPool]: On list_synthea_claims_expanded: ROLLBACK
[0m03:22:27.400941 [debug] [ThreadPool]: On list_synthea_chronic_conditions: ROLLBACK
[0m03:22:27.401344 [debug] [ThreadPool]: Failed to rollback 'list_synthea_hcc_suspecting'
[0m03:22:27.402244 [debug] [ThreadPool]: On list_synthea_core: ROLLBACK
[0m03:22:27.402566 [debug] [ThreadPool]: Failed to rollback 'list_synthea_claims_expanded'
[0m03:22:27.403016 [debug] [ThreadPool]: Failed to rollback 'list_synthea_chronic_conditions'
[0m03:22:27.403394 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: Close
[0m03:22:27.403864 [debug] [ThreadPool]: Failed to rollback 'list_synthea_core'
[0m03:22:27.404217 [debug] [ThreadPool]: On list_synthea_claims_expanded: Close
[0m03:22:27.404563 [debug] [ThreadPool]: On list_synthea_chronic_conditions: Close
[0m03:22:27.405449 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_hcc_suspecting, now list_synthea_cms_hcc)
[0m03:22:27.406640 [debug] [ThreadPool]: On list_synthea_core: Close
[0m03:22:27.407458 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_claims_expanded, now list_synthea_quality_measures)
[0m03:22:27.408424 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_chronic_conditions, now list_synthea_financial_pmpm)
[0m03:22:27.410930 [debug] [ThreadPool]: Using duckdb connection "list_synthea_cms_hcc"
[0m03:22:27.416967 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_core, now list_synthea_insights)
[0m03:22:27.418399 [debug] [ThreadPool]: Using duckdb connection "list_synthea_quality_measures"
[0m03:22:27.422922 [debug] [ThreadPool]: Using duckdb connection "list_synthea_financial_pmpm"
[0m03:22:27.423328 [debug] [ThreadPool]: On list_synthea_cms_hcc: BEGIN
[0m03:22:27.425050 [debug] [ThreadPool]: Using duckdb connection "list_synthea_insights"
[0m03:22:27.425528 [debug] [ThreadPool]: On list_synthea_quality_measures: BEGIN
[0m03:22:27.425939 [debug] [ThreadPool]: On list_synthea_financial_pmpm: BEGIN
[0m03:22:27.426334 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:22:27.426698 [debug] [ThreadPool]: On list_synthea_insights: BEGIN
[0m03:22:27.427058 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:22:27.427424 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:22:27.476918 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.477248 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:22:27.477784 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.478120 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.478518 [debug] [ThreadPool]: Using duckdb connection "list_synthea_cms_hcc"
[0m03:22:27.478961 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.479333 [debug] [ThreadPool]: Using duckdb connection "list_synthea_quality_measures"
[0m03:22:27.479711 [debug] [ThreadPool]: Using duckdb connection "list_synthea_financial_pmpm"
[0m03:22:27.480087 [debug] [ThreadPool]: On list_synthea_cms_hcc: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_cms_hcc"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'cms_hcc'
    and table_catalog = 'synthea'
  
[0m03:22:27.480470 [debug] [ThreadPool]: Using duckdb connection "list_synthea_insights"
[0m03:22:27.480834 [debug] [ThreadPool]: On list_synthea_quality_measures: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_quality_measures"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'quality_measures'
    and table_catalog = 'synthea'
  
[0m03:22:27.481203 [debug] [ThreadPool]: On list_synthea_financial_pmpm: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_financial_pmpm"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'financial_pmpm'
    and table_catalog = 'synthea'
  
[0m03:22:27.481815 [debug] [ThreadPool]: On list_synthea_insights: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_insights"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'insights'
    and table_catalog = 'synthea'
  
[0m03:22:27.489855 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.490296 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.490581 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.490826 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.504824 [debug] [ThreadPool]: On list_synthea_insights: ROLLBACK
[0m03:22:27.505800 [debug] [ThreadPool]: On list_synthea_cms_hcc: ROLLBACK
[0m03:22:27.506650 [debug] [ThreadPool]: On list_synthea_quality_measures: ROLLBACK
[0m03:22:27.507329 [debug] [ThreadPool]: On list_synthea_financial_pmpm: ROLLBACK
[0m03:22:27.507701 [debug] [ThreadPool]: Failed to rollback 'list_synthea_insights'
[0m03:22:27.508258 [debug] [ThreadPool]: Failed to rollback 'list_synthea_cms_hcc'
[0m03:22:27.508719 [debug] [ThreadPool]: Failed to rollback 'list_synthea_quality_measures'
[0m03:22:27.509197 [debug] [ThreadPool]: Failed to rollback 'list_synthea_financial_pmpm'
[0m03:22:27.509551 [debug] [ThreadPool]: On list_synthea_insights: Close
[0m03:22:27.509909 [debug] [ThreadPool]: On list_synthea_cms_hcc: Close
[0m03:22:27.510267 [debug] [ThreadPool]: On list_synthea_quality_measures: Close
[0m03:22:27.510624 [debug] [ThreadPool]: On list_synthea_financial_pmpm: Close
[0m03:22:27.511511 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_insights, now list_synthea_ed_classification)
[0m03:22:27.513352 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_cms_hcc, now list_synthea_data_quality)
[0m03:22:27.526857 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ed_classification"
[0m03:22:27.528551 [debug] [ThreadPool]: Using duckdb connection "list_synthea_data_quality"
[0m03:22:27.528957 [debug] [ThreadPool]: On list_synthea_ed_classification: BEGIN
[0m03:22:27.529356 [debug] [ThreadPool]: On list_synthea_data_quality: BEGIN
[0m03:22:27.529749 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:22:27.530115 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:22:27.572790 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.573211 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.573591 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ed_classification"
[0m03:22:27.573970 [debug] [ThreadPool]: Using duckdb connection "list_synthea_data_quality"
[0m03:22:27.574377 [debug] [ThreadPool]: On list_synthea_ed_classification: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_ed_classification"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'ed_classification'
    and table_catalog = 'synthea'
  
[0m03:22:27.574769 [debug] [ThreadPool]: On list_synthea_data_quality: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_data_quality"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'data_quality'
    and table_catalog = 'synthea'
  
[0m03:22:27.582900 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.583240 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:22:27.596840 [debug] [ThreadPool]: On list_synthea_data_quality: ROLLBACK
[0m03:22:27.597664 [debug] [ThreadPool]: On list_synthea_ed_classification: ROLLBACK
[0m03:22:27.598026 [debug] [ThreadPool]: Failed to rollback 'list_synthea_data_quality'
[0m03:22:27.598487 [debug] [ThreadPool]: Failed to rollback 'list_synthea_ed_classification'
[0m03:22:27.598844 [debug] [ThreadPool]: On list_synthea_data_quality: Close
[0m03:22:27.599223 [debug] [ThreadPool]: On list_synthea_ed_classification: Close
[0m03:22:27.610413 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'ba381603-1fc3-458e-9f48-220f2022366b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8b60d590>]}
[0m03:22:27.611075 [debug] [MainThread]: Using duckdb connection "master"
[0m03:22:27.611559 [debug] [MainThread]: On master: BEGIN
[0m03:22:27.611968 [debug] [MainThread]: Opening a new connection, currently in state init
[0m03:22:27.658510 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m03:22:27.659031 [debug] [MainThread]: On master: COMMIT
[0m03:22:27.659418 [debug] [MainThread]: Using duckdb connection "master"
[0m03:22:27.659791 [debug] [MainThread]: On master: COMMIT
[0m03:22:27.660182 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m03:22:27.660514 [debug] [MainThread]: On master: Close
[0m03:22:27.665705 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
[0m03:22:27.666215 [info ] [MainThread]: 
[0m03:22:27.668208 [debug] [Thread-1 (]: Began running node model.the_tuva_project.medication
[0m03:22:27.668694 [info ] [Thread-1 (]: 1 of 1 START sql view model tuva_input.medication .............................. [RUN]
[0m03:22:27.669415 [debug] [Thread-1 (]: Acquiring new duckdb connection 'model.the_tuva_project.medication'
[0m03:22:27.669890 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.medication
[0m03:22:27.676253 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.medication"
[0m03:22:27.677784 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.medication (compile): 03:22:27.670210 => 03:22:27.677587
[0m03:22:27.678216 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.medication
[0m03:22:27.699261 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.medication"
[0m03:22:27.700887 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m03:22:27.701275 [debug] [Thread-1 (]: On model.the_tuva_project.medication: BEGIN
[0m03:22:27.701631 [debug] [Thread-1 (]: Opening a new connection, currently in state init
[0m03:22:27.744327 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:22:27.744883 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m03:22:27.745357 [debug] [Thread-1 (]: On model.the_tuva_project.medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medication"} */

  
  create view "synthea"."tuva_input"."medication__dbt_tmp" as (
    -- models/medication.sql

WITH MinStrength AS (
    SELECT
        REPLACE(JSON_EXTRACT(m, '$.id'), '"', '') AS medication_id,
        MIN(
            CASE
                WHEN ds.amount_value IS NOT NULL THEN ds.amount_value
                WHEN ds.numerator_value IS NOT NULL THEN
                    CASE
                        WHEN ds.denominator_value IS NOT NULL AND ds.denominator_value != 0 THEN ds.numerator_value / ds.denominator_value
                        ELSE ds.numerator_value
                    END
                ELSE NULL
            END
        ) AS min_strength
    FROM "synthea"."json"."MedicationRequest" m
    JOIN "synthea"."vocabulary"."concept" c
        ON REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '') = c.concept_code
        AND c.vocabulary_id = 'RxNorm'
        AND c.domain_id = 'Drug'
        AND c.invalid_reason IS NULL
        AND c.standard_concept = 'S'
    JOIN "synthea"."vocabulary"."drug_strength" ds
        ON c.concept_id = ds.drug_concept_id
    GROUP BY medication_id
)

SELECT DISTINCT
    ms.medication_id,
    REPLACE(REPLACE(JSON_EXTRACT(mr, '$.subject.reference'), '"Patient/', ''), '"', '') AS patient_id,
    REPLACE(REPLACE(JSON_EXTRACT(mr, '$.encounter.reference'), '"Encounter/', ''), '"', '') AS encounter_id,
    CAST(SUBSTRING(JSON_EXTRACT(mr, '$.authoredOn'), 2, 10) AS DATE) AS dispensing_date,
    CAST(SUBSTRING(JSON_EXTRACT(mr, '$.authoredOn'), 2, 10) AS DATE) AS prescribing_date,
    'rxnorm' AS source_code_type,
    REPLACE(JSON_EXTRACT(mr, '$.medicationCodeableConcept.coding[0].code'), '"', '') AS source_code,
    REPLACE(JSON_EXTRACT(mr, '$.medicationCodeableConcept.coding[0].display'), '"', '') AS source_description,
    ndc.ndc_code,
    ndc.ndc_description,
    REPLACE(JSON_EXTRACT(mr, '$.medicationCodeableConcept.coding[0].code'), '"', '') AS rxnorm_code,
    REPLACE(JSON_EXTRACT(mr, '$.medicationCodeableConcept.coding[0].display'), '"', '') AS rxnorm_description,
    r."atc class id" AS atc_code,
    atc.atc_description,
    NULL AS route,
    ms.min_strength AS strength,
    CASE
        WHEN REPLACE(JSON_EXTRACT(mr, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '"', '') IS NOT NULL 
        THEN CAST(REPLACE(JSON_EXTRACT(mr, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '"', '') AS INTEGER) * 30
        ELSE 1
    END AS quantity,
    qu.quantity_unit,
    CASE
        WHEN REPLACE(JSON_EXTRACT(mr, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '"', '') IS NOT NULL 
        THEN 30
        ELSE 1
    END AS days_supply,
    REPLACE(REPLACE(JSON_EXTRACT(mr, '$.requester.reference'), '"Practitioner/', ''), '"', '') AS practitioner_id,
    'SyntheaFhir' AS data_source
FROM MinStrength ms
JOIN "synthea"."json"."MedicationRequest" mr ON ms.medication_id = REPLACE(JSON_EXTRACT(mr, '$.id'), '"', '')
LEFT JOIN (
    SELECT 
        c1.concept_code AS rxnorm_code,
        c2.concept_code AS ndc_code,
        c2.concept_name AS ndc_description
    FROM "synthea"."vocabulary"."concept_relationship" cr
    JOIN "synthea"."vocabulary"."concept" c1 ON c1.concept_id = cr.concept_id_1
    JOIN "synthea"."vocabulary"."concept" c2 ON c2.concept_id = cr.concept_id_2
    WHERE cr.relationship_id = 'Mapped from'
    AND c2.vocabulary_id = 'NDC'
    AND c2.domain_id = 'Drug'
    AND c2.invalid_reason IS NULL
    AND c1.concept_class_id in ('Branded Drug', 'Clinical Drug', 'Quant Clinical Drug', 'Quant Branded Drug')
    AND LENGTH(c2.concept_code) = 11
) ndc ON REPLACE(JSON_EXTRACT(mr, '$.medicationCodeableConcept.coding[0].code'), '"', '') = ndc.rxnorm_code
LEFT JOIN "synthea"."reference"."rxcuis_ndcs_atc" r ON REPLACE(JSON_EXTRACT(mr, '$.medicationCodeableConcept.coding[0].code'), '"', '') = r.rxcui
LEFT JOIN (
    SELECT 
        c3.concept_code AS atc_code,
        c3.concept_name AS atc_description
    FROM "synthea"."vocabulary"."concept" c3
    WHERE c3.vocabulary_id = 'ATC'
    AND c3.domain_id = 'Drug'
    AND c3.invalid_reason IS NULL
    AND c3.standard_concept = 'C'
) atc ON r."atc class id" = atc.atc_code
LEFT JOIN (
    SELECT 
        ds.drug_concept_id,
        c4.concept_name AS quantity_unit
    FROM "synthea"."vocabulary"."drug_strength" ds
    JOIN "synthea"."vocabulary"."concept" c4 ON c4.concept_id = COALESCE(ds.amount_unit_concept_id, ds.numerator_unit_concept_id)
) qu ON REPLACE(JSON_EXTRACT(mr, '$.medicationCodeableConcept.coding[0].code'), '"', '') = qu.drug_concept_id
  );

[0m03:22:27.748311 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:22:27.752802 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m03:22:27.753314 [debug] [Thread-1 (]: On model.the_tuva_project.medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medication"} */
alter view "synthea"."tuva_input"."medication" rename to "medication__dbt_backup"
[0m03:22:27.753845 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:22:27.755968 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m03:22:27.756378 [debug] [Thread-1 (]: On model.the_tuva_project.medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medication"} */
alter view "synthea"."tuva_input"."medication__dbt_tmp" rename to "medication"
[0m03:22:27.756911 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:22:27.766090 [debug] [Thread-1 (]: On model.the_tuva_project.medication: COMMIT
[0m03:22:27.766527 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m03:22:27.766884 [debug] [Thread-1 (]: On model.the_tuva_project.medication: COMMIT
[0m03:22:27.768398 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:22:27.771573 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m03:22:27.771983 [debug] [Thread-1 (]: On model.the_tuva_project.medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medication"} */
drop view if exists "synthea"."tuva_input"."medication__dbt_backup" cascade
[0m03:22:27.772786 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:22:27.773785 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.medication (execute): 03:22:27.678532 => 03:22:27.773647
[0m03:22:27.774171 [debug] [Thread-1 (]: On model.the_tuva_project.medication: Close
[0m03:22:27.879537 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ba381603-1fc3-458e-9f48-220f2022366b', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8b501210>]}
[0m03:22:27.880270 [info ] [Thread-1 (]: 1 of 1 OK created sql view model tuva_input.medication ......................... [[32mOK[0m in 0.21s]
[0m03:22:27.880816 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.medication
[0m03:22:27.883090 [debug] [MainThread]: Using duckdb connection "master"
[0m03:22:27.883614 [debug] [MainThread]: On master: BEGIN
[0m03:22:27.883961 [debug] [MainThread]: Opening a new connection, currently in state closed
[0m03:22:27.928583 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m03:22:27.929117 [debug] [MainThread]: On master: COMMIT
[0m03:22:27.929516 [debug] [MainThread]: Using duckdb connection "master"
[0m03:22:27.929916 [debug] [MainThread]: On master: COMMIT
[0m03:22:27.930335 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m03:22:27.930708 [debug] [MainThread]: On master: Close
[0m03:22:27.935305 [debug] [MainThread]: Connection 'master' was properly closed.
[0m03:22:27.935773 [debug] [MainThread]: Connection 'list_synthea_ed_classification' was properly closed.
[0m03:22:27.936112 [debug] [MainThread]: Connection 'list_synthea_financial_pmpm' was properly closed.
[0m03:22:27.936459 [debug] [MainThread]: Connection 'list_synthea_data_quality' was properly closed.
[0m03:22:27.936780 [debug] [MainThread]: Connection 'list_synthea_quality_measures' was properly closed.
[0m03:22:27.937095 [debug] [MainThread]: Connection 'model.the_tuva_project.medication' was properly closed.
[0m03:22:27.939280 [info ] [MainThread]: 
[0m03:22:27.939701 [info ] [MainThread]: Finished running 1 view model in 0 hours 0 minutes and 0.91 seconds (0.91s).
[0m03:22:27.940301 [debug] [MainThread]: Command end result
[0m03:22:27.972611 [info ] [MainThread]: 
[0m03:22:27.973203 [info ] [MainThread]: [32mCompleted successfully[0m
[0m03:22:27.973586 [info ] [MainThread]: 
[0m03:22:27.973987 [info ] [MainThread]: Done. PASS=1 WARN=0 ERROR=0 SKIP=0 TOTAL=1
[0m03:22:27.974747 [debug] [MainThread]: Resource report: {"command_name": "run", "command_success": true, "command_wall_clock_time": 1.821836, "process_user_time": 2.610053, "process_kernel_time": 0.299878, "process_mem_max_rss": "315708", "process_in_blocks": "0", "process_out_blocks": "0"}
[0m03:22:27.975257 [debug] [MainThread]: Command `dbt run` succeeded at 03:22:27.975149 after 1.82 seconds
[0m03:22:27.975644 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff989016d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8a986090>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff98a63b50>]}
[0m03:22:27.976010 [debug] [MainThread]: Flushing usage events
[0m03:41:53.544615 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff87feaad0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff87e62450>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff87e62750>]}


============================== 03:41:53.546105 | 8548c01c-e2ce-4395-a4c0-301a885e77a2 ==============================
[0m03:41:53.546105 [info ] [MainThread]: Running with dbt=1.7.7
[0m03:41:53.546664 [debug] [MainThread]: running dbt with arguments {'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'write_json': 'True', 'log_path': '/workspaces/synthea_dw/tuva/logs', 'partial_parse': 'True', 'debug': 'False', 'use_experimental_parser': 'False', 'introspect': 'True', 'log_format': 'default', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'printer_width': '80', 'fail_fast': 'False', 'static_parser': 'True', 'target_path': 'None', 'cache_selected_only': 'False', 'no_print': 'None', 'invocation_command': 'dbt build', 'profiles_dir': '/workspaces/synthea_dw/tuva', 'send_anonymous_usage_stats': 'True', 'quiet': 'False', 'version_check': 'True', 'warn_error': 'None', 'use_colors': 'True'}
[0m03:41:53.718614 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff807ce890>]}
[0m03:41:53.792712 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8095ec10>]}
[0m03:41:53.793446 [info ] [MainThread]: Registered adapter: duckdb=1.7.1
[0m03:41:53.800659 [debug] [MainThread]: checksum: 54188551c516f4dd1c42b8d9c289f2bf49f18ae42632e2ba36a64ad29fd60da4, vars: {}, profile: , target: , version: 1.7.7
[0m03:41:54.085546 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.
[0m03:41:54.086072 [debug] [MainThread]: Partial parsing enabled, no changes found, skipping parsing
[0m03:41:54.132218 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7fcdea90>]}
[0m03:41:54.282225 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8078b7d0>]}
[0m03:41:54.282968 [info ] [MainThread]: Found 296 models, 53 tests, 121 sources, 0 exposures, 0 metrics, 531 macros, 0 groups, 0 semantic models
[0m03:41:54.296257 [info ] [MainThread]: 
[0m03:41:54.297236 [debug] [MainThread]: Acquiring new duckdb connection 'master'
[0m03:41:54.303998 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea'
[0m03:41:54.305055 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea'
[0m03:41:54.313777 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m03:41:54.314507 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea'
[0m03:41:54.316280 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m03:41:54.316855 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea'
[0m03:41:54.317375 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m03:41:54.318937 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m03:41:54.319394 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m03:41:54.321258 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m03:41:54.321739 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m03:41:54.322161 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m03:41:54.322600 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m03:41:54.323062 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m03:41:54.377862 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m03:41:54.378809 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.379082 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m03:41:54.379330 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.380976 [debug] [ThreadPool]: On list_synthea: Close
[0m03:41:54.381406 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.382507 [debug] [ThreadPool]: On list_synthea: Close
[0m03:41:54.382768 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.384902 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m03:41:54.385979 [debug] [ThreadPool]: On list_synthea: Close
[0m03:41:54.387974 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m03:41:54.389192 [debug] [ThreadPool]: On list_synthea: Close
[0m03:41:54.389545 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m03:41:54.392627 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m03:41:54.393081 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m03:41:54.400403 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m03:41:54.400968 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:54.401468 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m03:41:54.401890 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:54.402296 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m03:41:54.446327 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:54.447057 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.447421 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.447720 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:54.448387 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.449387 [debug] [ThreadPool]: On list_synthea: Close
[0m03:41:54.450223 [debug] [ThreadPool]: On list_synthea: Close
[0m03:41:54.450849 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.451692 [debug] [ThreadPool]: On list_synthea: Close
[0m03:41:54.453810 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m03:41:54.455938 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m03:41:54.457229 [debug] [ThreadPool]: On list_synthea: Close
[0m03:41:54.459364 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m03:41:54.459846 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m03:41:54.460274 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m03:41:54.467126 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m03:41:54.467668 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m03:41:54.468239 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:54.468695 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:54.469090 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m03:41:54.469474 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:54.513476 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.513800 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.514033 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:54.514636 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.515564 [debug] [ThreadPool]: On list_synthea: Close
[0m03:41:54.516328 [debug] [ThreadPool]: On list_synthea: Close
[0m03:41:54.516853 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.517592 [debug] [ThreadPool]: On list_synthea: Close
[0m03:41:54.519611 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m03:41:54.521544 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m03:41:54.522558 [debug] [ThreadPool]: On list_synthea: Close
[0m03:41:54.523323 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m03:41:54.523843 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m03:41:54.529474 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:54.529966 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:54.583848 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.584226 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.585177 [debug] [ThreadPool]: On list_synthea: Close
[0m03:41:54.585941 [debug] [ThreadPool]: On list_synthea: Close
[0m03:41:54.593005 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea, now create_synthea_quality_measures)
[0m03:41:54.593682 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea, now create_synthea_core)
[0m03:41:54.594236 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea, now create_synthea_ed_classification)
[0m03:41:54.594842 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "quality_measures"
"
[0m03:41:54.595267 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea, now create_synthea_ccsr)
[0m03:41:54.595930 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "core"
"
[0m03:41:54.596520 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "ed_classification"
"
[0m03:41:54.601246 [debug] [ThreadPool]: Using duckdb connection "create_synthea_quality_measures"
[0m03:41:54.601934 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "ccsr"
"
[0m03:41:54.603536 [debug] [ThreadPool]: Using duckdb connection "create_synthea_core"
[0m03:41:54.606212 [debug] [ThreadPool]: Using duckdb connection "create_synthea_ed_classification"
[0m03:41:54.606652 [debug] [ThreadPool]: On create_synthea_quality_measures: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_quality_measures"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m03:41:54.608171 [debug] [ThreadPool]: Using duckdb connection "create_synthea_ccsr"
[0m03:41:54.608561 [debug] [ThreadPool]: On create_synthea_core: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_core"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m03:41:54.608979 [debug] [ThreadPool]: On create_synthea_ed_classification: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_ed_classification"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m03:41:54.609380 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:54.609753 [debug] [ThreadPool]: On create_synthea_ccsr: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_ccsr"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m03:41:54.610150 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:54.610555 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:54.661215 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.661572 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:54.662603 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.663000 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.663929 [debug] [ThreadPool]: Using duckdb connection "create_synthea_quality_measures"
[0m03:41:54.664380 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.665090 [debug] [ThreadPool]: Using duckdb connection "create_synthea_core"
[0m03:41:54.665976 [debug] [ThreadPool]: Using duckdb connection "create_synthea_ed_classification"
[0m03:41:54.666372 [debug] [ThreadPool]: On create_synthea_quality_measures: BEGIN
[0m03:41:54.667242 [debug] [ThreadPool]: Using duckdb connection "create_synthea_ccsr"
[0m03:41:54.667624 [debug] [ThreadPool]: On create_synthea_core: BEGIN
[0m03:41:54.667977 [debug] [ThreadPool]: On create_synthea_ed_classification: BEGIN
[0m03:41:54.668386 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.668737 [debug] [ThreadPool]: On create_synthea_ccsr: BEGIN
[0m03:41:54.669128 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.669551 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.669976 [debug] [ThreadPool]: Using duckdb connection "create_synthea_quality_measures"
[0m03:41:54.670523 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.670961 [debug] [ThreadPool]: Using duckdb connection "create_synthea_core"
[0m03:41:54.671351 [debug] [ThreadPool]: Using duckdb connection "create_synthea_ed_classification"
[0m03:41:54.671741 [debug] [ThreadPool]: On create_synthea_quality_measures: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_quality_measures"} */

    
    
        create schema if not exists "synthea"."quality_measures"
    
[0m03:41:54.672112 [debug] [ThreadPool]: Using duckdb connection "create_synthea_ccsr"
[0m03:41:54.672481 [debug] [ThreadPool]: On create_synthea_core: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_core"} */

    
    
        create schema if not exists "synthea"."core"
    
[0m03:41:54.672850 [debug] [ThreadPool]: On create_synthea_ed_classification: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_ed_classification"} */

    
    
        create schema if not exists "synthea"."ed_classification"
    
[0m03:41:54.673356 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.673609 [debug] [ThreadPool]: On create_synthea_ccsr: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_ccsr"} */

    
    
        create schema if not exists "synthea"."ccsr"
    
[0m03:41:54.674054 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.674496 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.675202 [debug] [ThreadPool]: On create_synthea_quality_measures: COMMIT
[0m03:41:54.675666 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.676311 [debug] [ThreadPool]: On create_synthea_core: COMMIT
[0m03:41:54.676953 [debug] [ThreadPool]: On create_synthea_ed_classification: COMMIT
[0m03:41:54.677376 [debug] [ThreadPool]: Using duckdb connection "create_synthea_quality_measures"
[0m03:41:54.677994 [debug] [ThreadPool]: On create_synthea_ccsr: COMMIT
[0m03:41:54.678337 [debug] [ThreadPool]: Using duckdb connection "create_synthea_core"
[0m03:41:54.678694 [debug] [ThreadPool]: Using duckdb connection "create_synthea_ed_classification"
[0m03:41:54.679038 [debug] [ThreadPool]: On create_synthea_quality_measures: COMMIT
[0m03:41:54.679401 [debug] [ThreadPool]: Using duckdb connection "create_synthea_ccsr"
[0m03:41:54.679747 [debug] [ThreadPool]: On create_synthea_core: COMMIT
[0m03:41:54.680085 [debug] [ThreadPool]: On create_synthea_ed_classification: COMMIT
[0m03:41:54.680492 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.680832 [debug] [ThreadPool]: On create_synthea_ccsr: COMMIT
[0m03:41:54.681221 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.681615 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.681964 [debug] [ThreadPool]: On create_synthea_quality_measures: Close
[0m03:41:54.682379 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.682726 [debug] [ThreadPool]: On create_synthea_core: Close
[0m03:41:54.683072 [debug] [ThreadPool]: On create_synthea_ed_classification: Close
[0m03:41:54.684058 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_quality_measures, now create_synthea_cms_hcc)
[0m03:41:54.684458 [debug] [ThreadPool]: On create_synthea_ccsr: Close
[0m03:41:54.685339 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_core, now create_synthea_hcc_suspecting)
[0m03:41:54.686287 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_ed_classification, now create_synthea_data_quality)
[0m03:41:54.686908 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "cms_hcc"
"
[0m03:41:54.692749 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_ccsr, now create_synthea_claims_preprocessing)
[0m03:41:54.693485 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "hcc_suspecting"
"
[0m03:41:54.694047 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "data_quality"
"
[0m03:41:54.695989 [debug] [ThreadPool]: Using duckdb connection "create_synthea_cms_hcc"
[0m03:41:54.696669 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "claims_preprocessing"
"
[0m03:41:54.698216 [debug] [ThreadPool]: Using duckdb connection "create_synthea_hcc_suspecting"
[0m03:41:54.699807 [debug] [ThreadPool]: Using duckdb connection "create_synthea_data_quality"
[0m03:41:54.700200 [debug] [ThreadPool]: On create_synthea_cms_hcc: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_cms_hcc"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m03:41:54.701678 [debug] [ThreadPool]: Using duckdb connection "create_synthea_claims_preprocessing"
[0m03:41:54.702035 [debug] [ThreadPool]: On create_synthea_hcc_suspecting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_hcc_suspecting"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m03:41:54.702463 [debug] [ThreadPool]: On create_synthea_data_quality: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_data_quality"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m03:41:54.702826 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:54.703179 [debug] [ThreadPool]: On create_synthea_claims_preprocessing: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_claims_preprocessing"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m03:41:54.703523 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:54.703968 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:54.746554 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:54.746970 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.747416 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.747863 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.748244 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.749157 [debug] [ThreadPool]: Using duckdb connection "create_synthea_cms_hcc"
[0m03:41:54.750052 [debug] [ThreadPool]: Using duckdb connection "create_synthea_hcc_suspecting"
[0m03:41:54.751329 [debug] [ThreadPool]: Using duckdb connection "create_synthea_data_quality"
[0m03:41:54.752397 [debug] [ThreadPool]: Using duckdb connection "create_synthea_claims_preprocessing"
[0m03:41:54.752801 [debug] [ThreadPool]: On create_synthea_cms_hcc: BEGIN
[0m03:41:54.753162 [debug] [ThreadPool]: On create_synthea_hcc_suspecting: BEGIN
[0m03:41:54.753555 [debug] [ThreadPool]: On create_synthea_data_quality: BEGIN
[0m03:41:54.753959 [debug] [ThreadPool]: On create_synthea_claims_preprocessing: BEGIN
[0m03:41:54.754424 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.754858 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.755283 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.755723 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.756073 [debug] [ThreadPool]: Using duckdb connection "create_synthea_cms_hcc"
[0m03:41:54.756415 [debug] [ThreadPool]: Using duckdb connection "create_synthea_hcc_suspecting"
[0m03:41:54.756781 [debug] [ThreadPool]: Using duckdb connection "create_synthea_data_quality"
[0m03:41:54.757124 [debug] [ThreadPool]: Using duckdb connection "create_synthea_claims_preprocessing"
[0m03:41:54.757520 [debug] [ThreadPool]: On create_synthea_cms_hcc: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_cms_hcc"} */

    
    
        create schema if not exists "synthea"."cms_hcc"
    
[0m03:41:54.757871 [debug] [ThreadPool]: On create_synthea_hcc_suspecting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_hcc_suspecting"} */

    
    
        create schema if not exists "synthea"."hcc_suspecting"
    
[0m03:41:54.758234 [debug] [ThreadPool]: On create_synthea_data_quality: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_data_quality"} */

    
    
        create schema if not exists "synthea"."data_quality"
    
[0m03:41:54.758620 [debug] [ThreadPool]: On create_synthea_claims_preprocessing: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_claims_preprocessing"} */

    
    
        create schema if not exists "synthea"."claims_preprocessing"
    
[0m03:41:54.759048 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.759451 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.759899 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.760219 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.760770 [debug] [ThreadPool]: On create_synthea_cms_hcc: COMMIT
[0m03:41:54.761412 [debug] [ThreadPool]: On create_synthea_hcc_suspecting: COMMIT
[0m03:41:54.762057 [debug] [ThreadPool]: On create_synthea_data_quality: COMMIT
[0m03:41:54.762697 [debug] [ThreadPool]: On create_synthea_claims_preprocessing: COMMIT
[0m03:41:54.763053 [debug] [ThreadPool]: Using duckdb connection "create_synthea_cms_hcc"
[0m03:41:54.763374 [debug] [ThreadPool]: Using duckdb connection "create_synthea_hcc_suspecting"
[0m03:41:54.763796 [debug] [ThreadPool]: Using duckdb connection "create_synthea_data_quality"
[0m03:41:54.764152 [debug] [ThreadPool]: Using duckdb connection "create_synthea_claims_preprocessing"
[0m03:41:54.764502 [debug] [ThreadPool]: On create_synthea_cms_hcc: COMMIT
[0m03:41:54.764823 [debug] [ThreadPool]: On create_synthea_hcc_suspecting: COMMIT
[0m03:41:54.765160 [debug] [ThreadPool]: On create_synthea_data_quality: COMMIT
[0m03:41:54.765500 [debug] [ThreadPool]: On create_synthea_claims_preprocessing: COMMIT
[0m03:41:54.765901 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.766280 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.766678 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.767066 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.767432 [debug] [ThreadPool]: On create_synthea_cms_hcc: Close
[0m03:41:54.767754 [debug] [ThreadPool]: On create_synthea_hcc_suspecting: Close
[0m03:41:54.768106 [debug] [ThreadPool]: On create_synthea_data_quality: Close
[0m03:41:54.768460 [debug] [ThreadPool]: On create_synthea_claims_preprocessing: Close
[0m03:41:54.769453 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_cms_hcc, now create_synthea_financial_pmpm)
[0m03:41:54.770384 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_hcc_suspecting, now create_synthea_readmissions)
[0m03:41:54.771276 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_data_quality, now create_synthea_chronic_conditions)
[0m03:41:54.776974 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_claims_preprocessing, now create_synthea_tuva_input)
[0m03:41:54.777719 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "financial_pmpm"
"
[0m03:41:54.778358 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "readmissions"
"
[0m03:41:54.778978 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "chronic_conditions"
"
[0m03:41:54.779553 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "tuva_input"
"
[0m03:41:54.781505 [debug] [ThreadPool]: Using duckdb connection "create_synthea_financial_pmpm"
[0m03:41:54.782983 [debug] [ThreadPool]: Using duckdb connection "create_synthea_readmissions"
[0m03:41:54.784442 [debug] [ThreadPool]: Using duckdb connection "create_synthea_chronic_conditions"
[0m03:41:54.785844 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m03:41:54.786237 [debug] [ThreadPool]: On create_synthea_financial_pmpm: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_financial_pmpm"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m03:41:54.786608 [debug] [ThreadPool]: On create_synthea_readmissions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_readmissions"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m03:41:54.786963 [debug] [ThreadPool]: On create_synthea_chronic_conditions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_chronic_conditions"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m03:41:54.787319 [debug] [ThreadPool]: On create_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_tuva_input"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m03:41:54.787681 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:54.787997 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:54.788329 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:54.788726 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:54.831122 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.831604 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.831945 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.833023 [debug] [ThreadPool]: Using duckdb connection "create_synthea_readmissions"
[0m03:41:54.833281 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.834216 [debug] [ThreadPool]: Using duckdb connection "create_synthea_financial_pmpm"
[0m03:41:54.835141 [debug] [ThreadPool]: Using duckdb connection "create_synthea_chronic_conditions"
[0m03:41:54.835524 [debug] [ThreadPool]: On create_synthea_readmissions: BEGIN
[0m03:41:54.836370 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m03:41:54.836755 [debug] [ThreadPool]: On create_synthea_financial_pmpm: BEGIN
[0m03:41:54.837113 [debug] [ThreadPool]: On create_synthea_chronic_conditions: BEGIN
[0m03:41:54.837529 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.837890 [debug] [ThreadPool]: On create_synthea_tuva_input: BEGIN
[0m03:41:54.838278 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.838679 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.839033 [debug] [ThreadPool]: Using duckdb connection "create_synthea_readmissions"
[0m03:41:54.839451 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.839831 [debug] [ThreadPool]: Using duckdb connection "create_synthea_financial_pmpm"
[0m03:41:54.840179 [debug] [ThreadPool]: Using duckdb connection "create_synthea_chronic_conditions"
[0m03:41:54.840545 [debug] [ThreadPool]: On create_synthea_readmissions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_readmissions"} */

    
    
        create schema if not exists "synthea"."readmissions"
    
[0m03:41:54.840894 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m03:41:54.841238 [debug] [ThreadPool]: On create_synthea_financial_pmpm: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_financial_pmpm"} */

    
    
        create schema if not exists "synthea"."financial_pmpm"
    
[0m03:41:54.841620 [debug] [ThreadPool]: On create_synthea_chronic_conditions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_chronic_conditions"} */

    
    
        create schema if not exists "synthea"."chronic_conditions"
    
[0m03:41:54.842038 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.842396 [debug] [ThreadPool]: On create_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_tuva_input"} */

    
    
        create schema if not exists "synthea"."tuva_input"
    
[0m03:41:54.842818 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.843220 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.843870 [debug] [ThreadPool]: On create_synthea_readmissions: COMMIT
[0m03:41:54.844306 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.844945 [debug] [ThreadPool]: On create_synthea_financial_pmpm: COMMIT
[0m03:41:54.845556 [debug] [ThreadPool]: On create_synthea_chronic_conditions: COMMIT
[0m03:41:54.845898 [debug] [ThreadPool]: Using duckdb connection "create_synthea_readmissions"
[0m03:41:54.846506 [debug] [ThreadPool]: On create_synthea_tuva_input: COMMIT
[0m03:41:54.846846 [debug] [ThreadPool]: Using duckdb connection "create_synthea_financial_pmpm"
[0m03:41:54.847186 [debug] [ThreadPool]: Using duckdb connection "create_synthea_chronic_conditions"
[0m03:41:54.847554 [debug] [ThreadPool]: On create_synthea_readmissions: COMMIT
[0m03:41:54.847953 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m03:41:54.848303 [debug] [ThreadPool]: On create_synthea_financial_pmpm: COMMIT
[0m03:41:54.848653 [debug] [ThreadPool]: On create_synthea_chronic_conditions: COMMIT
[0m03:41:54.849063 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.849418 [debug] [ThreadPool]: On create_synthea_tuva_input: COMMIT
[0m03:41:54.849820 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.850233 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.850600 [debug] [ThreadPool]: On create_synthea_readmissions: Close
[0m03:41:54.850992 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.851355 [debug] [ThreadPool]: On create_synthea_financial_pmpm: Close
[0m03:41:54.851707 [debug] [ThreadPool]: On create_synthea_chronic_conditions: Close
[0m03:41:54.852675 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_readmissions, now create_synthea_insights)
[0m03:41:54.853076 [debug] [ThreadPool]: On create_synthea_tuva_input: Close
[0m03:41:54.853984 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_financial_pmpm, now create_synthea_claims_expanded)
[0m03:41:54.855144 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "insights"
"
[0m03:41:54.860950 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "claims_expanded"
"
[0m03:41:54.864126 [debug] [ThreadPool]: Using duckdb connection "create_synthea_insights"
[0m03:41:54.865613 [debug] [ThreadPool]: Using duckdb connection "create_synthea_claims_expanded"
[0m03:41:54.866113 [debug] [ThreadPool]: On create_synthea_insights: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_insights"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m03:41:54.866520 [debug] [ThreadPool]: On create_synthea_claims_expanded: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_claims_expanded"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m03:41:54.866884 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:54.867241 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:54.917396 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.917861 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.918752 [debug] [ThreadPool]: Using duckdb connection "create_synthea_insights"
[0m03:41:54.919451 [debug] [ThreadPool]: Using duckdb connection "create_synthea_claims_expanded"
[0m03:41:54.919806 [debug] [ThreadPool]: On create_synthea_insights: BEGIN
[0m03:41:54.920161 [debug] [ThreadPool]: On create_synthea_claims_expanded: BEGIN
[0m03:41:54.920586 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.920959 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.921295 [debug] [ThreadPool]: Using duckdb connection "create_synthea_insights"
[0m03:41:54.921643 [debug] [ThreadPool]: Using duckdb connection "create_synthea_claims_expanded"
[0m03:41:54.921985 [debug] [ThreadPool]: On create_synthea_insights: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_insights"} */

    
    
        create schema if not exists "synthea"."insights"
    
[0m03:41:54.922329 [debug] [ThreadPool]: On create_synthea_claims_expanded: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_claims_expanded"} */

    
    
        create schema if not exists "synthea"."claims_expanded"
    
[0m03:41:54.922779 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.923385 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.924104 [debug] [ThreadPool]: On create_synthea_insights: COMMIT
[0m03:41:54.924799 [debug] [ThreadPool]: On create_synthea_claims_expanded: COMMIT
[0m03:41:54.925177 [debug] [ThreadPool]: Using duckdb connection "create_synthea_insights"
[0m03:41:54.925539 [debug] [ThreadPool]: Using duckdb connection "create_synthea_claims_expanded"
[0m03:41:54.925911 [debug] [ThreadPool]: On create_synthea_insights: COMMIT
[0m03:41:54.926296 [debug] [ThreadPool]: On create_synthea_claims_expanded: COMMIT
[0m03:41:54.926745 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.927158 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.927554 [debug] [ThreadPool]: On create_synthea_insights: Close
[0m03:41:54.927941 [debug] [ThreadPool]: On create_synthea_claims_expanded: Close
[0m03:41:54.941427 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_claims_expanded, now list_synthea_quality_measures)
[0m03:41:54.942010 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_insights, now list_synthea_core)
[0m03:41:54.942522 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_chronic_conditions, now list_synthea_ed_classification)
[0m03:41:54.945980 [debug] [ThreadPool]: Using duckdb connection "list_synthea_quality_measures"
[0m03:41:54.946536 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_tuva_input, now list_synthea_ccsr)
[0m03:41:54.948001 [debug] [ThreadPool]: Using duckdb connection "list_synthea_core"
[0m03:41:54.949386 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ed_classification"
[0m03:41:54.949772 [debug] [ThreadPool]: On list_synthea_quality_measures: BEGIN
[0m03:41:54.951112 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ccsr"
[0m03:41:54.951491 [debug] [ThreadPool]: On list_synthea_core: BEGIN
[0m03:41:54.951841 [debug] [ThreadPool]: On list_synthea_ed_classification: BEGIN
[0m03:41:54.952183 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:54.952530 [debug] [ThreadPool]: On list_synthea_ccsr: BEGIN
[0m03:41:54.952871 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:54.953221 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:54.995190 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.995516 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:54.995995 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.996462 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.996836 [debug] [ThreadPool]: Using duckdb connection "list_synthea_quality_measures"
[0m03:41:54.997276 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:54.997657 [debug] [ThreadPool]: Using duckdb connection "list_synthea_core"
[0m03:41:54.997998 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ed_classification"
[0m03:41:54.998371 [debug] [ThreadPool]: On list_synthea_quality_measures: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_quality_measures"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'quality_measures'
    and table_catalog = 'synthea'
  
[0m03:41:54.998753 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ccsr"
[0m03:41:54.999115 [debug] [ThreadPool]: On list_synthea_core: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_core"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'core'
    and table_catalog = 'synthea'
  
[0m03:41:54.999510 [debug] [ThreadPool]: On list_synthea_ed_classification: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_ed_classification"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'ed_classification'
    and table_catalog = 'synthea'
  
[0m03:41:55.000125 [debug] [ThreadPool]: On list_synthea_ccsr: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_ccsr"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'ccsr'
    and table_catalog = 'synthea'
  
[0m03:41:55.008368 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:55.008714 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:55.009085 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:55.009351 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:55.023905 [debug] [ThreadPool]: On list_synthea_core: ROLLBACK
[0m03:41:55.024745 [debug] [ThreadPool]: On list_synthea_ccsr: ROLLBACK
[0m03:41:55.025621 [debug] [ThreadPool]: On list_synthea_quality_measures: ROLLBACK
[0m03:41:55.026254 [debug] [ThreadPool]: On list_synthea_ed_classification: ROLLBACK
[0m03:41:55.027094 [debug] [ThreadPool]: Failed to rollback 'list_synthea_core'
[0m03:41:55.027449 [debug] [ThreadPool]: Failed to rollback 'list_synthea_ccsr'
[0m03:41:55.027907 [debug] [ThreadPool]: Failed to rollback 'list_synthea_quality_measures'
[0m03:41:55.028339 [debug] [ThreadPool]: Failed to rollback 'list_synthea_ed_classification'
[0m03:41:55.028713 [debug] [ThreadPool]: On list_synthea_core: Close
[0m03:41:55.029055 [debug] [ThreadPool]: On list_synthea_ccsr: Close
[0m03:41:55.029413 [debug] [ThreadPool]: On list_synthea_quality_measures: Close
[0m03:41:55.029755 [debug] [ThreadPool]: On list_synthea_ed_classification: Close
[0m03:41:55.030619 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_core, now list_synthea_cms_hcc)
[0m03:41:55.034593 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_ccsr, now list_synthea_hcc_suspecting)
[0m03:41:55.036185 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_quality_measures, now list_synthea_data_quality)
[0m03:41:55.044574 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_ed_classification, now list_synthea_claims_preprocessing)
[0m03:41:55.046926 [debug] [ThreadPool]: Using duckdb connection "list_synthea_cms_hcc"
[0m03:41:55.048462 [debug] [ThreadPool]: Using duckdb connection "list_synthea_hcc_suspecting"
[0m03:41:55.049892 [debug] [ThreadPool]: Using duckdb connection "list_synthea_data_quality"
[0m03:41:55.051315 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_preprocessing"
[0m03:41:55.051786 [debug] [ThreadPool]: On list_synthea_cms_hcc: BEGIN
[0m03:41:55.052159 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: BEGIN
[0m03:41:55.052541 [debug] [ThreadPool]: On list_synthea_data_quality: BEGIN
[0m03:41:55.052903 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: BEGIN
[0m03:41:55.053255 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:55.053669 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:55.054011 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:55.054354 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:55.096601 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:55.097021 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:55.097391 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:55.097708 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:55.097947 [debug] [ThreadPool]: Using duckdb connection "list_synthea_cms_hcc"
[0m03:41:55.098308 [debug] [ThreadPool]: Using duckdb connection "list_synthea_hcc_suspecting"
[0m03:41:55.098682 [debug] [ThreadPool]: Using duckdb connection "list_synthea_data_quality"
[0m03:41:55.099031 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_preprocessing"
[0m03:41:55.099402 [debug] [ThreadPool]: On list_synthea_cms_hcc: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_cms_hcc"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'cms_hcc'
    and table_catalog = 'synthea'
  
[0m03:41:55.099792 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_hcc_suspecting"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'hcc_suspecting'
    and table_catalog = 'synthea'
  
[0m03:41:55.100164 [debug] [ThreadPool]: On list_synthea_data_quality: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_data_quality"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'data_quality'
    and table_catalog = 'synthea'
  
[0m03:41:55.100555 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_claims_preprocessing"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'claims_preprocessing'
    and table_catalog = 'synthea'
  
[0m03:41:55.109079 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:55.109559 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:55.109857 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:55.110102 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:55.124329 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: ROLLBACK
[0m03:41:55.126767 [debug] [ThreadPool]: On list_synthea_data_quality: ROLLBACK
[0m03:41:55.127960 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: ROLLBACK
[0m03:41:55.128804 [debug] [ThreadPool]: On list_synthea_cms_hcc: ROLLBACK
[0m03:41:55.129179 [debug] [ThreadPool]: Failed to rollback 'list_synthea_hcc_suspecting'
[0m03:41:55.129661 [debug] [ThreadPool]: Failed to rollback 'list_synthea_data_quality'
[0m03:41:55.130132 [debug] [ThreadPool]: Failed to rollback 'list_synthea_claims_preprocessing'
[0m03:41:55.130568 [debug] [ThreadPool]: Failed to rollback 'list_synthea_cms_hcc'
[0m03:41:55.130915 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: Close
[0m03:41:55.131257 [debug] [ThreadPool]: On list_synthea_data_quality: Close
[0m03:41:55.131617 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: Close
[0m03:41:55.131958 [debug] [ThreadPool]: On list_synthea_cms_hcc: Close
[0m03:41:55.132949 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_hcc_suspecting, now list_synthea_financial_pmpm)
[0m03:41:55.134509 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_data_quality, now list_synthea_readmissions)
[0m03:41:55.138757 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_claims_preprocessing, now list_synthea_chronic_conditions)
[0m03:41:55.151234 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_cms_hcc, now list_synthea_tuva_input)
[0m03:41:55.157413 [debug] [ThreadPool]: Using duckdb connection "list_synthea_financial_pmpm"
[0m03:41:55.158844 [debug] [ThreadPool]: Using duckdb connection "list_synthea_readmissions"
[0m03:41:55.160250 [debug] [ThreadPool]: Using duckdb connection "list_synthea_chronic_conditions"
[0m03:41:55.161638 [debug] [ThreadPool]: Using duckdb connection "list_synthea_tuva_input"
[0m03:41:55.162040 [debug] [ThreadPool]: On list_synthea_financial_pmpm: BEGIN
[0m03:41:55.162411 [debug] [ThreadPool]: On list_synthea_readmissions: BEGIN
[0m03:41:55.162775 [debug] [ThreadPool]: On list_synthea_chronic_conditions: BEGIN
[0m03:41:55.163127 [debug] [ThreadPool]: On list_synthea_tuva_input: BEGIN
[0m03:41:55.163480 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:55.163830 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:55.164175 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:55.164527 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:55.206887 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:55.207308 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:55.207633 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:55.208081 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:55.208477 [debug] [ThreadPool]: Using duckdb connection "list_synthea_financial_pmpm"
[0m03:41:55.208868 [debug] [ThreadPool]: Using duckdb connection "list_synthea_readmissions"
[0m03:41:55.209219 [debug] [ThreadPool]: Using duckdb connection "list_synthea_chronic_conditions"
[0m03:41:55.209616 [debug] [ThreadPool]: Using duckdb connection "list_synthea_tuva_input"
[0m03:41:55.209977 [debug] [ThreadPool]: On list_synthea_financial_pmpm: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_financial_pmpm"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'financial_pmpm'
    and table_catalog = 'synthea'
  
[0m03:41:55.210348 [debug] [ThreadPool]: On list_synthea_readmissions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_readmissions"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'readmissions'
    and table_catalog = 'synthea'
  
[0m03:41:55.210761 [debug] [ThreadPool]: On list_synthea_chronic_conditions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_chronic_conditions"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'chronic_conditions'
    and table_catalog = 'synthea'
  
[0m03:41:55.211268 [debug] [ThreadPool]: On list_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_tuva_input"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'tuva_input'
    and table_catalog = 'synthea'
  
[0m03:41:55.219788 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:55.220238 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:55.220530 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:55.220762 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:55.234787 [debug] [ThreadPool]: On list_synthea_readmissions: ROLLBACK
[0m03:41:55.235608 [debug] [ThreadPool]: On list_synthea_financial_pmpm: ROLLBACK
[0m03:41:55.236463 [debug] [ThreadPool]: On list_synthea_tuva_input: ROLLBACK
[0m03:41:55.237150 [debug] [ThreadPool]: On list_synthea_chronic_conditions: ROLLBACK
[0m03:41:55.237518 [debug] [ThreadPool]: Failed to rollback 'list_synthea_readmissions'
[0m03:41:55.237952 [debug] [ThreadPool]: Failed to rollback 'list_synthea_financial_pmpm'
[0m03:41:55.238371 [debug] [ThreadPool]: Failed to rollback 'list_synthea_tuva_input'
[0m03:41:55.238788 [debug] [ThreadPool]: Failed to rollback 'list_synthea_chronic_conditions'
[0m03:41:55.239133 [debug] [ThreadPool]: On list_synthea_readmissions: Close
[0m03:41:55.239493 [debug] [ThreadPool]: On list_synthea_financial_pmpm: Close
[0m03:41:55.239858 [debug] [ThreadPool]: On list_synthea_tuva_input: Close
[0m03:41:55.240196 [debug] [ThreadPool]: On list_synthea_chronic_conditions: Close
[0m03:41:55.241046 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_readmissions, now list_synthea_insights)
[0m03:41:55.244288 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_financial_pmpm, now list_synthea_claims_expanded)
[0m03:41:55.255312 [debug] [ThreadPool]: Using duckdb connection "list_synthea_insights"
[0m03:41:55.256715 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_expanded"
[0m03:41:55.257124 [debug] [ThreadPool]: On list_synthea_insights: BEGIN
[0m03:41:55.257489 [debug] [ThreadPool]: On list_synthea_claims_expanded: BEGIN
[0m03:41:55.257884 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:55.258218 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m03:41:55.298943 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:55.299382 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:55.299662 [debug] [ThreadPool]: Using duckdb connection "list_synthea_insights"
[0m03:41:55.300049 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_expanded"
[0m03:41:55.300453 [debug] [ThreadPool]: On list_synthea_insights: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_insights"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'insights'
    and table_catalog = 'synthea'
  
[0m03:41:55.300913 [debug] [ThreadPool]: On list_synthea_claims_expanded: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_claims_expanded"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'claims_expanded'
    and table_catalog = 'synthea'
  
[0m03:41:55.309443 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:55.309801 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m03:41:55.323997 [debug] [ThreadPool]: On list_synthea_insights: ROLLBACK
[0m03:41:55.324940 [debug] [ThreadPool]: On list_synthea_claims_expanded: ROLLBACK
[0m03:41:55.325373 [debug] [ThreadPool]: Failed to rollback 'list_synthea_insights'
[0m03:41:55.326025 [debug] [ThreadPool]: Failed to rollback 'list_synthea_claims_expanded'
[0m03:41:55.326580 [debug] [ThreadPool]: On list_synthea_insights: Close
[0m03:41:55.327031 [debug] [ThreadPool]: On list_synthea_claims_expanded: Close
[0m03:41:55.336619 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7f9e2310>]}
[0m03:41:55.337301 [debug] [MainThread]: Using duckdb connection "master"
[0m03:41:55.337918 [debug] [MainThread]: On master: BEGIN
[0m03:41:55.338430 [debug] [MainThread]: Opening a new connection, currently in state init
[0m03:41:55.391747 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m03:41:55.392419 [debug] [MainThread]: On master: COMMIT
[0m03:41:55.392920 [debug] [MainThread]: Using duckdb connection "master"
[0m03:41:55.393294 [debug] [MainThread]: On master: COMMIT
[0m03:41:55.393756 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m03:41:55.394174 [debug] [MainThread]: On master: Close
[0m03:41:55.399632 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
[0m03:41:55.400185 [info ] [MainThread]: 
[0m03:41:55.402515 [debug] [Thread-1 (]: Began running node model.the_tuva_project.ccsr__dx_vertical_pivot
[0m03:41:55.402856 [debug] [Thread-2 (]: Began running node model.the_tuva_project.ccsr__procedure_category_map
[0m03:41:55.403186 [debug] [Thread-3 (]: Began running node model.the_tuva_project.cms_chronic_conditions__stg_medical_claim
[0m03:41:55.403495 [debug] [Thread-4 (]: Began running node model.the_tuva_project.cms_chronic_conditions__stg_pharmacy_claim
[0m03:41:55.403849 [info ] [Thread-1 (]: 1 of 307 START sql table model ccsr.dx_vertical_pivot .......................... [RUN]
[0m03:41:55.404585 [info ] [Thread-2 (]: 2 of 307 START sql table model ccsr.procedure_category_map ..................... [RUN]
[0m03:41:55.405428 [debug] [Thread-3 (]: Acquiring new duckdb connection 'model.the_tuva_project.cms_chronic_conditions__stg_medical_claim'
[0m03:41:55.406195 [debug] [Thread-4 (]: Acquiring new duckdb connection 'model.the_tuva_project.cms_chronic_conditions__stg_pharmacy_claim'
[0m03:41:55.406888 [debug] [Thread-1 (]: Acquiring new duckdb connection 'model.the_tuva_project.ccsr__dx_vertical_pivot'
[0m03:41:55.407601 [debug] [Thread-2 (]: Acquiring new duckdb connection 'model.the_tuva_project.ccsr__procedure_category_map'
[0m03:41:55.408061 [debug] [Thread-3 (]: Began compiling node model.the_tuva_project.cms_chronic_conditions__stg_medical_claim
[0m03:41:55.408549 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.cms_chronic_conditions__stg_pharmacy_claim
[0m03:41:55.408957 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.ccsr__dx_vertical_pivot
[0m03:41:55.409387 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.ccsr__procedure_category_map
[0m03:41:55.415456 [debug] [Thread-3 (]: Writing injected SQL for node "model.the_tuva_project.cms_chronic_conditions__stg_medical_claim"
[0m03:41:55.420612 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.cms_chronic_conditions__stg_pharmacy_claim"
[0m03:41:55.464252 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.ccsr__dx_vertical_pivot"
[0m03:41:55.467624 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.ccsr__procedure_category_map"
[0m03:41:55.470189 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.cms_chronic_conditions__stg_pharmacy_claim (compile): 03:41:55.416074 => 03:41:55.469934
[0m03:41:55.470716 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.cms_chronic_conditions__stg_medical_claim (compile): 03:41:55.409691 => 03:41:55.470485
[0m03:41:55.471503 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.cms_chronic_conditions__stg_pharmacy_claim
[0m03:41:55.471839 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.ccsr__dx_vertical_pivot (compile): 03:41:55.421129 => 03:41:55.471686
[0m03:41:55.472390 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.ccsr__procedure_category_map (compile): 03:41:55.464738 => 03:41:55.472166
[0m03:41:55.472993 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.cms_chronic_conditions__stg_medical_claim
[0m03:41:55.473494 [debug] [Thread-4 (]: Began running node model.the_tuva_project.condition
[0m03:41:55.473917 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.ccsr__dx_vertical_pivot
[0m03:41:55.474322 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.ccsr__procedure_category_map
[0m03:41:55.474783 [debug] [Thread-3 (]: Began running node model.the_tuva_project.eligibility
[0m03:41:55.475335 [info ] [Thread-4 (]: 3 of 307 START sql view model tuva_input.condition ............................. [RUN]
[0m03:41:55.505514 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.ccsr__procedure_category_map"
[0m03:41:55.507626 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.ccsr__dx_vertical_pivot"
[0m03:41:55.508084 [info ] [Thread-3 (]: 4 of 307 START sql view model tuva_input.eligibility ........................... [RUN]
[0m03:41:55.508858 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.cms_chronic_conditions__stg_pharmacy_claim, now model.the_tuva_project.condition)
[0m03:41:55.510209 [debug] [Thread-3 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.cms_chronic_conditions__stg_medical_claim, now model.the_tuva_project.eligibility)
[0m03:41:55.510787 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.condition
[0m03:41:55.511363 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.ccsr__dx_vertical_pivot"
[0m03:41:55.511688 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.ccsr__procedure_category_map"
[0m03:41:55.511954 [debug] [Thread-3 (]: Began compiling node model.the_tuva_project.eligibility
[0m03:41:55.515001 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.condition"
[0m03:41:55.515641 [debug] [Thread-1 (]: On model.the_tuva_project.ccsr__dx_vertical_pivot: BEGIN
[0m03:41:55.516069 [debug] [Thread-2 (]: On model.the_tuva_project.ccsr__procedure_category_map: BEGIN
[0m03:41:55.518357 [debug] [Thread-3 (]: Writing injected SQL for node "model.the_tuva_project.eligibility"
[0m03:41:55.519071 [debug] [Thread-1 (]: Opening a new connection, currently in state init
[0m03:41:55.519490 [debug] [Thread-2 (]: Opening a new connection, currently in state init
[0m03:41:55.519957 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.condition (compile): 03:41:55.512357 => 03:41:55.519794
[0m03:41:55.564735 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:41:55.565255 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.eligibility (compile): 03:41:55.516369 => 03:41:55.564995
[0m03:41:55.565797 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:55.566110 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.condition
[0m03:41:55.566551 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.ccsr__dx_vertical_pivot"
[0m03:41:55.566958 [debug] [Thread-3 (]: Began executing node model.the_tuva_project.eligibility
[0m03:41:55.567397 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.ccsr__procedure_category_map"
[0m03:41:55.579220 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.condition"
[0m03:41:55.579652 [debug] [Thread-1 (]: On model.the_tuva_project.ccsr__dx_vertical_pivot: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.ccsr__dx_vertical_pivot"} */

  
    
    

    create  table
      "synthea"."ccsr"."dx_vertical_pivot__dbt_tmp"
  
    as (
      

with codes as (
    
    select
        icd_10_cm_code as code, 
        icd_10_cm_code_description as code_description,
        -- loop to generate columns for CCSR categories 1-6
        ccsr_category_1,
        ccsr_category_1_description,
        ccsr_category_2,
        ccsr_category_2_description,
        ccsr_category_3,
        ccsr_category_3_description,
        ccsr_category_4,
        ccsr_category_4_description,
        ccsr_category_5,
        ccsr_category_5_description,
        ccsr_category_6,
        ccsr_category_6_description,
        default_ccsr_category_ip,
        default_ccsr_category_op
    from "synthea"."ccsr"."_value_set_dxccsr_v2023_1_cleaned_map"

), long_union as (
    -- generate select & union statements to pivot category columns to rows
    
    select 
        code,
        code_description,
        left(ccsr_category_1, 3) as ccsr_parent_category,
        ccsr_category_1 as ccsr_category,
        ccsr_category_1_description as ccsr_category_description,
        1 as ccsr_category_rank,
        (ccsr_category_1 = default_ccsr_category_ip) as is_ip_default_category,
        (ccsr_category_1 = default_ccsr_category_op) as is_op_default_category
    from codes 
    union all
    select 
        code,
        code_description,
        left(ccsr_category_2, 3) as ccsr_parent_category,
        ccsr_category_2 as ccsr_category,
        ccsr_category_2_description as ccsr_category_description,
        2 as ccsr_category_rank,
        (ccsr_category_2 = default_ccsr_category_ip) as is_ip_default_category,
        (ccsr_category_2 = default_ccsr_category_op) as is_op_default_category
    from codes 
    union all
    select 
        code,
        code_description,
        left(ccsr_category_3, 3) as ccsr_parent_category,
        ccsr_category_3 as ccsr_category,
        ccsr_category_3_description as ccsr_category_description,
        3 as ccsr_category_rank,
        (ccsr_category_3 = default_ccsr_category_ip) as is_ip_default_category,
        (ccsr_category_3 = default_ccsr_category_op) as is_op_default_category
    from codes 
    union all
    select 
        code,
        code_description,
        left(ccsr_category_4, 3) as ccsr_parent_category,
        ccsr_category_4 as ccsr_category,
        ccsr_category_4_description as ccsr_category_description,
        4 as ccsr_category_rank,
        (ccsr_category_4 = default_ccsr_category_ip) as is_ip_default_category,
        (ccsr_category_4 = default_ccsr_category_op) as is_op_default_category
    from codes 
    union all
    select 
        code,
        code_description,
        left(ccsr_category_5, 3) as ccsr_parent_category,
        ccsr_category_5 as ccsr_category,
        ccsr_category_5_description as ccsr_category_description,
        5 as ccsr_category_rank,
        (ccsr_category_5 = default_ccsr_category_ip) as is_ip_default_category,
        (ccsr_category_5 = default_ccsr_category_op) as is_op_default_category
    from codes 
    union all
    select 
        code,
        code_description,
        left(ccsr_category_6, 3) as ccsr_parent_category,
        ccsr_category_6 as ccsr_category,
        ccsr_category_6_description as ccsr_category_description,
        6 as ccsr_category_rank,
        (ccsr_category_6 = default_ccsr_category_ip) as is_ip_default_category,
        (ccsr_category_6 = default_ccsr_category_op) as is_op_default_category
    from codes 
    

)

select distinct
    *,
    '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from long_union
-- as not all diagnosis codes have multiple categories, we can discard nulls
where ccsr_category is not null
    );
  
  
[0m03:41:55.583872 [debug] [Thread-3 (]: Writing runtime sql for node "model.the_tuva_project.eligibility"
[0m03:41:55.584538 [debug] [Thread-2 (]: On model.the_tuva_project.ccsr__procedure_category_map: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.ccsr__procedure_category_map"} */

  
    
    

    create  table
      "synthea"."ccsr"."procedure_category_map__dbt_tmp"
  
    as (
      

select 
    icd_10_pcs as code,
    icd_10_pcs_description as code_description,
    prccsr as ccsr_category,
    left(prccsr, 3) as ccsr_parent_category,
    prccsr_description as ccsr_category_description,
    clinical_domain,
   '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from "synthea"."ccsr"."_value_set_prccsr_v2023_1_cleaned_map"
    );
  
  
[0m03:41:55.585940 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.condition"
[0m03:41:55.587096 [debug] [Thread-4 (]: On model.the_tuva_project.condition: BEGIN
[0m03:41:55.587598 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.eligibility"
[0m03:41:55.587956 [debug] [Thread-4 (]: Opening a new connection, currently in state init
[0m03:41:55.588476 [debug] [Thread-3 (]: On model.the_tuva_project.eligibility: BEGIN
[0m03:41:55.589193 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m03:41:55.589626 [debug] [Thread-3 (]: Opening a new connection, currently in state init
[0m03:41:55.590008 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.condition"
[0m03:41:55.590610 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:55.590985 [debug] [Thread-4 (]: On model.the_tuva_project.condition: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.condition"} */

  
  create view "synthea"."tuva_input"."condition__dbt_tmp" as (
    SELECT
    MAX(REPLACE(JSON_EXTRACT(co, '$.id'), '"', '')) AS condition_id,
    MAX(REPLACE(REPLACE(JSON_EXTRACT(co, '$.subject.reference'), '"Patient/', ''), '"', '')) AS patient_id,
    MAX(REPLACE(REPLACE(JSON_EXTRACT(co, '$.encounter.reference'), '"Encounter/', ''), '"', '')) AS encounter_id,
    MAX(REPLACE(JSON_EXTRACT(cl, '$.id'), '"', '')) AS claim_id,
    MAX(CAST(SUBSTRING(JSON_EXTRACT(co, '$.recordedDate'), 2, 10) AS DATE)) AS recorded_date,
    MAX(CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE)) AS onset_date,
    MAX(CAST(SUBSTRING(JSON_EXTRACT(co, '$.abatementDateTime'), 2, 10) AS DATE)) AS resolved_date,
    MAX(REPLACE(JSON_EXTRACT(co, '$.clinicalStatus.coding[0].code'), '"', '')) AS status,
    MAX(REPLACE(JSON_EXTRACT(co, '$.category[0].coding[0].display'), '"', '')) AS condition_type,
    'snomed' AS source_code_type,
    MAX(REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '')) AS source_code,
    MAX(REPLACE(JSON_EXTRACT(co, '$.code.coding[0].display'), '"', '')) AS source_description,
    'icd-10-cm' AS normalized_code_type,
    MAX(map.map_target) AS normalized_code,
    MAX(map.map_target_name) AS normalized_description,
    MAX(CASE
        WHEN REPLACE(JSON_EXTRACT(cl, '$.diagnosis[0].sequence'), '"', '') IS NOT NULL THEN CAST(REPLACE(JSON_EXTRACT(cl, '$.diagnosis[0].sequence'), '"', '') AS INTEGER)
        ELSE 1
    END) AS condition_rank,
    MAX(CASE
        WHEN CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) < CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE) THEN 'Y'
        WHEN CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) > CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE) THEN 'N'
        ELSE 'U'
    END) AS present_on_admit_code,
    MAX(CASE
        WHEN CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) < CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE) THEN 'Diagnosis was present at the time of inpatient admission. CMS will pay the CC/MCC DRG for those selected HACs that are coded as Y for the POA Indicator.'
        WHEN CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) > CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE) THEN 'Diagnosis was not present at the time of inpatient admission. CMS will not pay the CC/MCC DRG for those selected HACs that are coded as N for the POA Indicator.'
        ELSE 'Documentation is insufficient to determine if the condition was present at the time of inpatient admission. CMS will not pay the CC/MCC DRG for those selected HACs that are coded as U for the POA Indicator.'
    END) AS present_on_admit_description,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Condition" co
LEFT JOIN "synthea"."json"."Claim" cl
    ON REPLACE(REPLACE(JSON_EXTRACT(co, '$.encounter.reference'), '"Encounter/', ''), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(cl, '$.item[0].encounter[0].reference'), '"Encounter/', ''), '"', '')
LEFT JOIN "synthea"."json"."Encounter" e
    ON REPLACE(REPLACE(JSON_EXTRACT(co, '$.encounter.reference'), '"Encounter/', ''), '"', '') = REPLACE(JSON_EXTRACT(e, '$.id'), '"', '')
JOIN "synthea"."terminology"."snomed_icd_10_map" map
    ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
GROUP BY REPLACE(JSON_EXTRACT(co, '$.id'), '"', '')
  );

[0m03:41:55.591562 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.eligibility"
[0m03:41:55.592794 [debug] [Thread-3 (]: On model.the_tuva_project.eligibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.eligibility"} */

  
  create view "synthea"."tuva_input"."eligibility__dbt_tmp" as (
    -- models/eligibility.sql

SELECT DISTINCT
    MAX(REPLACE(REPLACE(JSON_EXTRACT(e, '$.patient.reference'), '"Patient/', ''), '"', '')) AS patient_id,
    NULL AS member_id,
    MAX(REPLACE(JSON_EXTRACT(p, '$.extension[3].valueCode'), '"', '')) AS gender,
    MAX(REPLACE(JSON_EXTRACT(p, '$.extension[0].extension[1].valueString'), '"', '')) AS race,
    MAX(CAST(SUBSTRING(JSON_EXTRACT(p, '$.birthDate'), 2, 10) AS DATE)) AS birth_date,
    MAX(CAST(SUBSTRING(JSON_EXTRACT(p, '$.deceasedDateTime'), 2, 10) AS DATE)) AS death_date,
    MAX(CASE
        WHEN JSON_EXTRACT(p, '$.deceasedDateTime') IS NOT NULL THEN 1
        ELSE 0
    END) AS death_flag,
    MAX(CAST(SUBSTRING(JSON_EXTRACT(e, '$.billablePeriod.start'), 2, 10) AS DATE)) AS enrollment_start_date,
    MAX(CAST(SUBSTRING(JSON_EXTRACT(e, '$.billablePeriod.end'), 2, 10) AS DATE)) AS enrollment_end_date,
    MAX(REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '"', '')) AS payer,
    MAX(CASE
        WHEN REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '"', '') = 'Medicare' THEN 'medicare'
        WHEN REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '"', '') = 'Medicaid' THEN 'medicaid'
        WHEN REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '"', '') = 'NO_INSURANCE' THEN NULL
        ELSE 'commercial'
    END) AS payer_type,
    NULL AS plan,
    NULL AS original_reason_entitlement_code,
    NULL AS dual_status_code,
    NULL AS medicare_status_code,
    MAX(REPLACE(REPLACE(REPLACE(SPLIT_PART(JSON_EXTRACT(p, '$.name[0].given'), ',', -1), '"', ''), '[', ''), ']', '')) AS first_name,
    MAX(REPLACE(JSON_EXTRACT(p, '$.name[0].family'), '"', '')) AS last_name,
    MAX(REPLACE(JSON_EXTRACT(p, '$.address[0].line[0]'), '"', '')) AS address,
    MAX(REPLACE(JSON_EXTRACT(p, '$.address[0].city'), '"', '')) AS city,
    MAX(REPLACE(JSON_EXTRACT(p, '$.address[0].state'), '"', '')) AS state,
    MAX(REPLACE(JSON_EXTRACT(p, '$.address[0].postalCode'), '"', '')) AS zip_code,
    MAX(REPLACE(JSON_EXTRACT(p, '$.telecom[0].value'), '"', '')) AS phone,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."ExplanationOfBenefit" e
LEFT JOIN "synthea"."json"."Patient" p
    ON REPLACE(REPLACE(JSON_EXTRACT(e, '$.patient.reference'), '"Patient/', ''), '"', '') = REPLACE(JSON_EXTRACT(p, '$.id'), '"', '')
GROUP BY REPLACE(REPLACE(JSON_EXTRACT(e, '$.patient.reference'), '"Patient/', ''), '"', '')
  );

[0m03:41:55.599536 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m03:41:55.605404 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.condition"
[0m03:41:55.606545 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:55.607059 [debug] [Thread-4 (]: On model.the_tuva_project.condition: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.condition"} */
alter view "synthea"."tuva_input"."condition" rename to "condition__dbt_backup"
[0m03:41:55.612125 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.eligibility"
[0m03:41:55.613821 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m03:41:55.614324 [debug] [Thread-3 (]: On model.the_tuva_project.eligibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.eligibility"} */
alter view "synthea"."tuva_input"."eligibility" rename to "eligibility__dbt_backup"
[0m03:41:55.617649 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.condition"
[0m03:41:55.619447 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:55.620592 [debug] [Thread-4 (]: On model.the_tuva_project.condition: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.condition"} */
alter view "synthea"."tuva_input"."condition__dbt_tmp" rename to "condition"
[0m03:41:55.623677 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.eligibility"
[0m03:41:55.624720 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m03:41:55.625155 [debug] [Thread-3 (]: On model.the_tuva_project.eligibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.eligibility"} */
alter view "synthea"."tuva_input"."eligibility__dbt_tmp" rename to "eligibility"
[0m03:41:55.638692 [debug] [Thread-4 (]: On model.the_tuva_project.condition: COMMIT
[0m03:41:55.644847 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:55.645681 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.condition"
[0m03:41:55.647766 [debug] [Thread-3 (]: On model.the_tuva_project.eligibility: COMMIT
[0m03:41:55.648959 [debug] [Thread-4 (]: On model.the_tuva_project.condition: COMMIT
[0m03:41:55.653512 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.eligibility"
[0m03:41:55.655272 [debug] [Thread-3 (]: On model.the_tuva_project.eligibility: COMMIT
[0m03:41:55.656002 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m03:41:55.662112 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.condition"
[0m03:41:55.666012 [debug] [Thread-4 (]: On model.the_tuva_project.condition: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.condition"} */
drop view if exists "synthea"."tuva_input"."condition__dbt_backup" cascade
[0m03:41:55.686669 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:55.691444 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.eligibility"
[0m03:41:55.691899 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m03:41:55.692531 [debug] [Thread-3 (]: On model.the_tuva_project.eligibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.eligibility"} */
drop view if exists "synthea"."tuva_input"."eligibility__dbt_backup" cascade
[0m03:41:55.694527 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.condition (execute): 03:41:55.567748 => 03:41:55.694367
[0m03:41:55.695337 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:55.696145 [debug] [Thread-4 (]: On model.the_tuva_project.condition: Close
[0m03:41:55.696634 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:55.699024 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.ccsr__procedure_category_map"
[0m03:41:55.699996 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff80220e90>]}
[0m03:41:55.701526 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.eligibility (execute): 03:41:55.580094 => 03:41:55.701339
[0m03:41:55.702153 [debug] [Thread-2 (]: On model.the_tuva_project.ccsr__procedure_category_map: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.ccsr__procedure_category_map"} */
alter table "synthea"."ccsr"."procedure_category_map" rename to "procedure_category_map__dbt_backup"
[0m03:41:55.702918 [info ] [Thread-4 (]: 3 of 307 OK created sql view model tuva_input.condition ........................ [[32mOK[0m in 0.19s]
[0m03:41:55.703734 [debug] [Thread-3 (]: On model.the_tuva_project.eligibility: Close
[0m03:41:55.704632 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.condition
[0m03:41:55.705167 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:55.706152 [debug] [Thread-3 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7f9addd0>]}
[0m03:41:55.706840 [debug] [Thread-4 (]: Began running node model.the_tuva_project.encounter
[0m03:41:55.709680 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.ccsr__procedure_category_map"
[0m03:41:55.710583 [info ] [Thread-3 (]: 4 of 307 OK created sql view model tuva_input.eligibility ...................... [[32mOK[0m in 0.20s]
[0m03:41:55.711271 [info ] [Thread-4 (]: 5 of 307 START sql view model tuva_input.encounter ............................. [RUN]
[0m03:41:55.712598 [debug] [Thread-2 (]: On model.the_tuva_project.ccsr__procedure_category_map: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.ccsr__procedure_category_map"} */
alter table "synthea"."ccsr"."procedure_category_map__dbt_tmp" rename to "procedure_category_map"
[0m03:41:55.713508 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.eligibility
[0m03:41:55.714284 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.condition, now model.the_tuva_project.encounter)
[0m03:41:55.715262 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:55.715934 [debug] [Thread-3 (]: Began running node model.the_tuva_project.lab_result
[0m03:41:55.716941 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.encounter
[0m03:41:55.721228 [debug] [Thread-2 (]: On model.the_tuva_project.ccsr__procedure_category_map: COMMIT
[0m03:41:55.722120 [info ] [Thread-3 (]: 6 of 307 START sql view model tuva_input.lab_result ............................ [RUN]
[0m03:41:55.725899 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.encounter"
[0m03:41:55.726807 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.ccsr__procedure_category_map"
[0m03:41:55.727679 [debug] [Thread-3 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.eligibility, now model.the_tuva_project.lab_result)
[0m03:41:55.728694 [debug] [Thread-2 (]: On model.the_tuva_project.ccsr__procedure_category_map: COMMIT
[0m03:41:55.729725 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.encounter (compile): 03:41:55.722760 => 03:41:55.729455
[0m03:41:55.730123 [debug] [Thread-3 (]: Began compiling node model.the_tuva_project.lab_result
[0m03:41:55.731031 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.encounter
[0m03:41:55.735575 [debug] [Thread-3 (]: Writing injected SQL for node "model.the_tuva_project.lab_result"
[0m03:41:55.739697 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.encounter"
[0m03:41:55.761590 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.lab_result (compile): 03:41:55.731609 => 03:41:55.761239
[0m03:41:55.762280 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.encounter"
[0m03:41:55.762776 [debug] [Thread-3 (]: Began executing node model.the_tuva_project.lab_result
[0m03:41:55.763451 [debug] [Thread-4 (]: On model.the_tuva_project.encounter: BEGIN
[0m03:41:55.768534 [debug] [Thread-3 (]: Writing runtime sql for node "model.the_tuva_project.lab_result"
[0m03:41:55.769331 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m03:41:55.772441 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m03:41:55.773274 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.lab_result"
[0m03:41:55.773772 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.encounter"
[0m03:41:55.774389 [debug] [Thread-3 (]: On model.the_tuva_project.lab_result: BEGIN
[0m03:41:55.775186 [debug] [Thread-4 (]: On model.the_tuva_project.encounter: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.encounter"} */

  
  create view "synthea"."tuva_input"."encounter__dbt_tmp" as (
    -- models/encounter.sql

SELECT DISTINCT
    MAX(REPLACE(JSON_EXTRACT(e, '$.id'), '"', '')) AS encounter_id,
    MAX(REPLACE(REPLACE(JSON_EXTRACT(e, '$.subject.reference'), '"Patient/', ''), '"', '')) AS patient_id,
    MAX(CASE
        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '"', '') = 'AMB' THEN 'outpatient'
        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '"', '') = 'EMER' THEN 'emergency department'
        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '"', '') = 'IMP' THEN 'acute inpatient'
        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '"', '') = 'FLD' THEN 'other'
        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '"', '') = 'HH' THEN 'home health'
        ELSE 'other'
    END) AS encounter_type,
    MAX(CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE)) AS encounter_start_date,
    MAX(CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE)) AS encounter_end_date,
    MAX(CASE
        WHEN 
            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) IS NOT NULL AND 
            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE) IS NOT NULL AND
            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) = CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE)
        THEN 1
        WHEN 
            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) IS NOT NULL AND 
            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE) IS NOT NULL 
        THEN
            DATEDIFF(
                'day',
                CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE),
                CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE)
            ) + 1
        ELSE 1
    END) AS length_of_stay,
    9 AS admit_source_code,
    'Information Not Available' AS admit_source_description,
    9 AS admit_type_code,
    'Unknown' AS admit_type_description,
    00 AS discharge_disposition_code,
    'Unknown Value (but present in data)' AS discharge_disposition_description,
    MAX(REPLACE(REPLACE(JSON_EXTRACT(e, '$.participant[0].individual.reference'), '"Practitioner/', ''), '"', '')) AS attending_provider_id,
    NULL AS facility_npi,
    'snomed' AS primary_diagnosis_code_type,
    MAX(REPLACE(JSON_EXTRACT(e, '$.reasonCode[0].coding[0].code'), '"', '')) AS primary_diagnosis_code,
    MAX(REPLACE(JSON_EXTRACT(e, '$.reasonCode[0].coding[0].display'), '"', '')) AS primary_diagnosis_description,
    MAX(icd."MS-DRG") AS ms_drg_code,
    MAX(icd."MS-DRG_description") AS ms_drg_description,
    MAX(apr.apr_drg_code) AS apr_drg_code,
    MAX(apr.apr_drg_description) AS apr_drg_description,
    MAX(REPLACE(JSON_EXTRACT(ex, '$.payment.amount.value'), '"', '')) AS paid_amount,
    MAX(REPLACE(JSON_EXTRACT(ex, '$.total[0].amount.value'), '"', '')) AS allowed_amount,
    MAX(REPLACE(JSON_EXTRACT(ex, '$.total[0].amount.value'), '"', '')) AS charge_amount,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Encounter" e
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" ex
    ON REPLACE(JSON_EXTRACT(e, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(ex, '$.item[0].encounter[0].reference'), '"Encounter/', ''), '"', '')
JOIN "synthea"."terminology"."snomed_icd_10_map" sno
    ON REPLACE(JSON_EXTRACT(e, '$.reasonCode[0].coding[0].code'), '"', '') = sno.referenced_component_id
JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" icd
    ON sno.map_target = REPLACE(icd.ICD10, '.', '')
JOIN "synthea"."terminology"."apr_drg" apr
    ON icd.MDC = apr.mdc_code
GROUP BY REPLACE(JSON_EXTRACT(e, '$.id'), '"', '')
  );

[0m03:41:55.775957 [debug] [Thread-3 (]: Opening a new connection, currently in state closed
[0m03:41:55.777358 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:55.777934 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.lab_result"
[0m03:41:55.778448 [debug] [Thread-3 (]: On model.the_tuva_project.lab_result: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.lab_result"} */

  
  create view "synthea"."tuva_input"."lab_result__dbt_tmp" as (
    -- models/lab_result.sql

SELECT DISTINCT
    MAX(REPLACE(JSON_EXTRACT(o, '$.id'), '"', '')) AS lab_result_id,
    MAX(REPLACE(REPLACE(JSON_EXTRACT(o, '$.subject.reference'), '"Patient/', ''), '"', '')) AS patient_id,
    MAX(REPLACE(REPLACE(JSON_EXTRACT(o, '$.encounter.reference'), '"Encounter/', ''), '"', '')) AS encounter_id,
    NULL AS accession_number,
    'loinc' AS source_code_type,
    MAX(REPLACE(JSON_EXTRACT(o, '$.code.coding[0].code'), '"', '')) AS source_code,
    MAX(REPLACE(JSON_EXTRACT(o, '$.code.coding[0].display'), '"', '')) AS source_description,
    NULL AS source_component,
    'loinc' AS normalized_code_type,
    MAX(l.loinc) AS normalized_code,
    MAX(l.short_name) AS normalized_description,
    MAX(l.component) AS normalized_component,
    MAX(REPLACE(JSON_EXTRACT(o, '$.status'), '"', '')) AS status,
    MAX(REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '"', '')) AS result, 
    MAX(CAST(SUBSTRING(JSON_EXTRACT(o, '$.effectiveDateTime'), 2, 10) AS DATE)) AS result_date,
    MAX(CAST(SUBSTRING(JSON_EXTRACT(o, '$.issued'), 2, 10) AS DATE)) AS collection_date,
    MAX(REPLACE(JSON_EXTRACT(o, '$.valueQuantity.unit'), '"', '')) AS source_units,
    MAX(REPLACE(JSON_EXTRACT(o, '$.valueQuantity.unit'), '"', '')) AS normalized_units,
    NULL AS source_reference_range_low,
    NULL AS source_reference_range_high,
    NULL AS normalized_reference_range_low,
    NULL AS normalized_reference_range_high,
    NULL AS source_abnormal_flag,
    NULL AS normalized_abnormal_flag,
    NULL AS specimen,
    MAX(REPLACE(REPLACE(JSON_EXTRACT(e, '$.participant[0].individual.reference'), '"Practitioner/', ''), '"', '')) AS ordering_practitioner_id,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Observation" o
LEFT JOIN "synthea"."terminology"."loinc" l ON REPLACE(JSON_EXTRACT(o, '$.code.coding[0].code'), '"', '') = l.loinc
LEFT JOIN "synthea"."json"."Encounter" e ON REPLACE(REPLACE(JSON_EXTRACT(o, '$.encounter.reference'), '"Encounter/', ''), '"', '') = REPLACE(JSON_EXTRACT(e, '$.id'), '"', '')
WHERE REPLACE(JSON_EXTRACT(o, '$.category[0].coding[0].code'), '"', '') = ('laboratory')
AND REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '"', '') IS NOT NULL
GROUP BY REPLACE(JSON_EXTRACT(o, '$.id'), '"', '')
  );

[0m03:41:56.215296 [debug] [Thread-1 (]: SQL status: OK in 1.0 seconds
[0m03:41:56.218236 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.ccsr__dx_vertical_pivot"
[0m03:41:56.218733 [debug] [Thread-1 (]: On model.the_tuva_project.ccsr__dx_vertical_pivot: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.ccsr__dx_vertical_pivot"} */
alter table "synthea"."ccsr"."dx_vertical_pivot" rename to "dx_vertical_pivot__dbt_backup"
[0m03:41:56.219445 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:41:56.221755 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.ccsr__dx_vertical_pivot"
[0m03:41:56.222206 [debug] [Thread-1 (]: On model.the_tuva_project.ccsr__dx_vertical_pivot: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.ccsr__dx_vertical_pivot"} */
alter table "synthea"."ccsr"."dx_vertical_pivot__dbt_tmp" rename to "dx_vertical_pivot"
[0m03:41:56.222743 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:41:56.224058 [debug] [Thread-1 (]: On model.the_tuva_project.ccsr__dx_vertical_pivot: COMMIT
[0m03:41:56.224470 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.ccsr__dx_vertical_pivot"
[0m03:41:56.224882 [debug] [Thread-1 (]: On model.the_tuva_project.ccsr__dx_vertical_pivot: COMMIT
[0m03:41:56.347185 [debug] [Thread-2 (]: SQL status: OK in 1.0 seconds
[0m03:41:56.349462 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.ccsr__procedure_category_map"
[0m03:41:56.349972 [debug] [Thread-2 (]: On model.the_tuva_project.ccsr__procedure_category_map: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.ccsr__procedure_category_map"} */
drop table if exists "synthea"."ccsr"."procedure_category_map__dbt_backup" cascade
[0m03:41:56.351507 [debug] [Thread-3 (]: SQL status: OK in 1.0 seconds
[0m03:41:56.354272 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.lab_result"
[0m03:41:56.354813 [debug] [Thread-4 (]: SQL status: OK in 1.0 seconds
[0m03:41:56.355134 [debug] [Thread-3 (]: On model.the_tuva_project.lab_result: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.lab_result"} */
alter view "synthea"."tuva_input"."lab_result" rename to "lab_result__dbt_backup"
[0m03:41:56.357604 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.encounter"
[0m03:41:56.358374 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:56.358666 [debug] [Thread-4 (]: On model.the_tuva_project.encounter: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.encounter"} */
alter view "synthea"."tuva_input"."encounter" rename to "encounter__dbt_backup"
[0m03:41:56.360862 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.lab_result"
[0m03:41:56.361605 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m03:41:56.361919 [debug] [Thread-3 (]: On model.the_tuva_project.lab_result: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.lab_result"} */
alter view "synthea"."tuva_input"."lab_result__dbt_tmp" rename to "lab_result"
[0m03:41:56.364056 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.encounter"
[0m03:41:56.364683 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:56.364965 [debug] [Thread-4 (]: On model.the_tuva_project.encounter: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.encounter"} */
alter view "synthea"."tuva_input"."encounter__dbt_tmp" rename to "encounter"
[0m03:41:56.366175 [debug] [Thread-3 (]: On model.the_tuva_project.lab_result: COMMIT
[0m03:41:56.366786 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m03:41:56.367201 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.lab_result"
[0m03:41:56.368318 [debug] [Thread-4 (]: On model.the_tuva_project.encounter: COMMIT
[0m03:41:56.368732 [debug] [Thread-3 (]: On model.the_tuva_project.lab_result: COMMIT
[0m03:41:56.369121 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.encounter"
[0m03:41:56.369712 [debug] [Thread-4 (]: On model.the_tuva_project.encounter: COMMIT
[0m03:41:58.556801 [debug] [Thread-1 (]: SQL status: OK in 2.0 seconds
[0m03:41:58.557480 [debug] [Thread-3 (]: SQL status: OK in 2.0 seconds
[0m03:41:58.560921 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.ccsr__dx_vertical_pivot"
[0m03:41:58.561414 [debug] [Thread-4 (]: SQL status: OK in 2.0 seconds
[0m03:41:58.563980 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.lab_result"
[0m03:41:58.564600 [debug] [Thread-1 (]: On model.the_tuva_project.ccsr__dx_vertical_pivot: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.ccsr__dx_vertical_pivot"} */
drop table if exists "synthea"."ccsr"."dx_vertical_pivot__dbt_backup" cascade
[0m03:41:58.566893 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.encounter"
[0m03:41:58.567471 [debug] [Thread-3 (]: On model.the_tuva_project.lab_result: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.lab_result"} */
drop view if exists "synthea"."tuva_input"."lab_result__dbt_backup" cascade
[0m03:41:58.568159 [debug] [Thread-4 (]: On model.the_tuva_project.encounter: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.encounter"} */
drop view if exists "synthea"."tuva_input"."encounter__dbt_backup" cascade
[0m03:41:58.755504 [debug] [Thread-2 (]: SQL status: OK in 2.0 seconds
[0m03:41:58.757320 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.ccsr__procedure_category_map (execute): 03:41:55.488292 => 03:41:58.757137
[0m03:41:58.757779 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:41:58.758189 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m03:41:58.758528 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:58.758845 [debug] [Thread-2 (]: On model.the_tuva_project.ccsr__procedure_category_map: Close
[0m03:41:58.760061 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.ccsr__dx_vertical_pivot (execute): 03:41:55.475764 => 03:41:58.759913
[0m03:41:58.761260 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.encounter (execute): 03:41:55.736145 => 03:41:58.761110
[0m03:41:58.762534 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.lab_result (execute): 03:41:55.764107 => 03:41:58.762322
[0m03:41:58.763389 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff87febf90>]}
[0m03:41:58.763887 [debug] [Thread-1 (]: On model.the_tuva_project.ccsr__dx_vertical_pivot: Close
[0m03:41:58.764316 [debug] [Thread-4 (]: On model.the_tuva_project.encounter: Close
[0m03:41:58.764729 [debug] [Thread-3 (]: On model.the_tuva_project.lab_result: Close
[0m03:41:58.765268 [info ] [Thread-2 (]: 2 of 307 OK created sql table model ccsr.procedure_category_map ................ [[32mOK[0m in 3.36s]
[0m03:41:58.765993 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7f9ae1d0>]}
[0m03:41:58.766674 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7ffcf2d0>]}
[0m03:41:58.861652 [debug] [Thread-3 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff80541c50>]}
[0m03:41:58.862661 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.ccsr__procedure_category_map
[0m03:41:58.863453 [info ] [Thread-1 (]: 1 of 307 OK created sql table model ccsr.dx_vertical_pivot ..................... [[32mOK[0m in 3.36s]
[0m03:41:58.864217 [info ] [Thread-4 (]: 5 of 307 OK created sql view model tuva_input.encounter ........................ [[32mOK[0m in 3.05s]
[0m03:41:58.864905 [info ] [Thread-3 (]: 6 of 307 OK created sql view model tuva_input.lab_result ....................... [[32mOK[0m in 3.13s]
[0m03:41:58.865584 [debug] [Thread-2 (]: Began running node model.the_tuva_project.location
[0m03:41:58.866281 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.ccsr__dx_vertical_pivot
[0m03:41:58.866944 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.encounter
[0m03:41:58.867582 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.lab_result
[0m03:41:58.868163 [info ] [Thread-2 (]: 7 of 307 START sql view model tuva_input.location .............................. [RUN]
[0m03:41:58.868834 [debug] [Thread-1 (]: Began running node model.the_tuva_project.medical_claim
[0m03:41:58.869472 [debug] [Thread-4 (]: Began running node model.the_tuva_project.medical_claim_expanded
[0m03:41:58.870079 [debug] [Thread-3 (]: Began running node model.the_tuva_project.medication
[0m03:41:58.870980 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.ccsr__procedure_category_map, now model.the_tuva_project.location)
[0m03:41:58.871662 [info ] [Thread-1 (]: 8 of 307 START sql view model tuva_input.medical_claim ......................... [RUN]
[0m03:41:58.872329 [info ] [Thread-4 (]: 9 of 307 START sql table model claims_expanded.medical_claim_expanded .......... [RUN]
[0m03:41:58.872882 [info ] [Thread-3 (]: 10 of 307 START sql view model tuva_input.medication ........................... [RUN]
[0m03:41:58.873491 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.location
[0m03:41:58.874293 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.ccsr__dx_vertical_pivot, now model.the_tuva_project.medical_claim)
[0m03:41:58.875016 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.encounter, now model.the_tuva_project.medical_claim_expanded)
[0m03:41:58.875646 [debug] [Thread-3 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.lab_result, now model.the_tuva_project.medication)
[0m03:41:58.878399 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.location"
[0m03:41:58.879022 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.medical_claim
[0m03:41:58.879636 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.medical_claim_expanded
[0m03:41:58.880124 [debug] [Thread-3 (]: Began compiling node model.the_tuva_project.medication
[0m03:41:58.901504 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.medical_claim_expanded"
[0m03:41:58.926419 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.location (compile): 03:41:58.875993 => 03:41:58.926119
[0m03:41:58.931395 [debug] [Thread-3 (]: Writing injected SQL for node "model.the_tuva_project.medication"
[0m03:41:58.973849 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.location
[0m03:41:58.977685 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.medical_claim"
[0m03:41:58.978722 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.medical_claim_expanded (compile): 03:41:58.898993 => 03:41:58.978517
[0m03:41:58.981909 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.location"
[0m03:41:58.982583 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.medication (compile): 03:41:58.926665 => 03:41:58.982403
[0m03:41:58.983244 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.medical_claim_expanded
[0m03:41:58.984067 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.medical_claim (compile): 03:41:58.880853 => 03:41:58.983898
[0m03:41:58.984367 [debug] [Thread-3 (]: Began executing node model.the_tuva_project.medication
[0m03:41:58.987259 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.medical_claim_expanded"
[0m03:41:58.987921 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.medical_claim
[0m03:41:58.988433 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.location"
[0m03:41:58.991615 [debug] [Thread-3 (]: Writing runtime sql for node "model.the_tuva_project.medication"
[0m03:41:58.995012 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.medical_claim"
[0m03:41:58.995677 [debug] [Thread-2 (]: On model.the_tuva_project.location: BEGIN
[0m03:41:58.996141 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.medical_claim_expanded"
[0m03:41:58.997252 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m03:41:58.997690 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m03:41:58.997981 [debug] [Thread-4 (]: On model.the_tuva_project.medical_claim_expanded: BEGIN
[0m03:41:58.998435 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m03:41:59.044209 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.044605 [debug] [Thread-3 (]: On model.the_tuva_project.medication: BEGIN
[0m03:41:59.045069 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m03:41:59.045483 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: BEGIN
[0m03:41:59.045899 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.location"
[0m03:41:59.046304 [debug] [Thread-3 (]: Opening a new connection, currently in state closed
[0m03:41:59.046844 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.047124 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m03:41:59.047543 [debug] [Thread-2 (]: On model.the_tuva_project.location: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.location"} */

  
  create view "synthea"."tuva_input"."location__dbt_tmp" as (
    -- models/location.sql

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(l, '$.id'), '"', '') AS location_id,
    NULL AS npi,
    REPLACE(JSON_EXTRACT(l, '$.name'), '"', '') AS name,
    NULL AS facility_type,
    REPLACE(JSON_EXTRACT(l, '$.managingOrganization.display'), '"', '') AS parent_organization,
    REPLACE(REPLACE(REPLACE(JSON_EXTRACT(l, '$.address.line'), '"', ''), '[', ''), ']', '') AS address,
    REPLACE(JSON_EXTRACT(l, '$.address.city'), '"', '') AS city,
    REPLACE(JSON_EXTRACT(l, '$.address.state'), '"', '') AS state,
    REPLACE(JSON_EXTRACT(l, '$.address.postalCode'), '"', '') AS zip_code,
    CAST(REPLACE(JSON_EXTRACT(l, '$.position.latitude'), '"', '') AS FLOAT) AS latitude,
    CAST(REPLACE(JSON_EXTRACT(l, '$.position.longitude'), '"', '') AS FLOAT) AS longitude,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Location" l
  );

[0m03:41:59.048167 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.048479 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.medical_claim_expanded"
[0m03:41:59.049029 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.049691 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m03:41:59.050143 [debug] [Thread-4 (]: On model.the_tuva_project.medical_claim_expanded: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim_expanded"} */

  
    
    

    create  table
      "synthea"."claims_expanded"."medical_claim_expanded__dbt_tmp"
  
    as (
      


select *
from "synthea"."tuva_input"."medical_claim"
    );
  
  
[0m03:41:59.050598 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m03:41:59.051117 [debug] [Thread-3 (]: On model.the_tuva_project.medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medication"} */

  
  create view "synthea"."tuva_input"."medication__dbt_tmp" as (
    -- models/medication.sql

WITH MinStrength AS (
    SELECT
        REPLACE(JSON_EXTRACT(m, '$.id'), '"', '') AS medication_id,
        MIN(
            CASE
                WHEN ds.amount_value IS NOT NULL THEN ds.amount_value
                WHEN ds.numerator_value IS NOT NULL THEN
                    CASE
                        WHEN ds.denominator_value IS NOT NULL AND ds.denominator_value != 0 THEN ds.numerator_value / ds.denominator_value
                        ELSE ds.numerator_value
                    END
                ELSE NULL
            END
        ) AS min_strength
    FROM "synthea"."json"."MedicationRequest" m
    JOIN "synthea"."vocabulary"."concept" c
        ON REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '') = c.concept_code
        AND c.vocabulary_id = 'RxNorm'
        AND c.domain_id = 'Drug'
        AND c.invalid_reason IS NULL
        AND c.standard_concept = 'S'
    JOIN "synthea"."vocabulary"."drug_strength" ds
        ON c.concept_id = ds.drug_concept_id
    GROUP BY medication_id
)

SELECT DISTINCT
    ms.medication_id,
    REPLACE(REPLACE(JSON_EXTRACT(mr, '$.subject.reference'), '"Patient/', ''), '"', '') AS patient_id,
    REPLACE(REPLACE(JSON_EXTRACT(mr, '$.encounter.reference'), '"Encounter/', ''), '"', '') AS encounter_id,
    CAST(SUBSTRING(JSON_EXTRACT(mr, '$.authoredOn'), 2, 10) AS DATE) AS dispensing_date,
    CAST(SUBSTRING(JSON_EXTRACT(mr, '$.authoredOn'), 2, 10) AS DATE) AS prescribing_date,
    'rxnorm' AS source_code_type,
    REPLACE(JSON_EXTRACT(mr, '$.medicationCodeableConcept.coding[0].code'), '"', '') AS source_code,
    REPLACE(JSON_EXTRACT(mr, '$.medicationCodeableConcept.coding[0].display'), '"', '') AS source_description,
    ndc.ndc_code,
    ndc.ndc_description,
    REPLACE(JSON_EXTRACT(mr, '$.medicationCodeableConcept.coding[0].code'), '"', '') AS rxnorm_code,
    REPLACE(JSON_EXTRACT(mr, '$.medicationCodeableConcept.coding[0].display'), '"', '') AS rxnorm_description,
    r."atc class id" AS atc_code,
    atc.atc_description,
    NULL AS route,
    ms.min_strength AS strength,
    CASE
        WHEN REPLACE(JSON_EXTRACT(mr, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '"', '') IS NOT NULL 
        THEN CAST(REPLACE(JSON_EXTRACT(mr, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '"', '') AS INTEGER) * 30
        ELSE 1
    END AS quantity,
    qu.quantity_unit,
    CASE
        WHEN REPLACE(JSON_EXTRACT(mr, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '"', '') IS NOT NULL 
        THEN 30
        ELSE 1
    END AS days_supply,
    REPLACE(REPLACE(JSON_EXTRACT(mr, '$.requester.reference'), '"Practitioner/', ''), '"', '') AS practitioner_id,
    'SyntheaFhir' AS data_source
FROM MinStrength ms
JOIN "synthea"."json"."MedicationRequest" mr ON ms.medication_id = REPLACE(JSON_EXTRACT(mr, '$.id'), '"', '')
LEFT JOIN (
    SELECT 
        c1.concept_code AS rxnorm_code,
        c2.concept_code AS ndc_code,
        c2.concept_name AS ndc_description
    FROM "synthea"."vocabulary"."concept_relationship" cr
    JOIN "synthea"."vocabulary"."concept" c1 ON c1.concept_id = cr.concept_id_1
    JOIN "synthea"."vocabulary"."concept" c2 ON c2.concept_id = cr.concept_id_2
    WHERE cr.relationship_id = 'Mapped from'
    AND c2.vocabulary_id = 'NDC'
    AND c2.domain_id = 'Drug'
    AND c2.invalid_reason IS NULL
    AND c1.concept_class_id in ('Branded Drug', 'Clinical Drug', 'Quant Clinical Drug', 'Quant Branded Drug')
    AND LENGTH(c2.concept_code) = 11
) ndc ON REPLACE(JSON_EXTRACT(mr, '$.medicationCodeableConcept.coding[0].code'), '"', '') = ndc.rxnorm_code
LEFT JOIN "synthea"."reference"."rxcuis_ndcs_atc" r ON REPLACE(JSON_EXTRACT(mr, '$.medicationCodeableConcept.coding[0].code'), '"', '') = r.rxcui
LEFT JOIN (
    SELECT 
        c3.concept_code AS atc_code,
        c3.concept_name AS atc_description
    FROM "synthea"."vocabulary"."concept" c3
    WHERE c3.vocabulary_id = 'ATC'
    AND c3.domain_id = 'Drug'
    AND c3.invalid_reason IS NULL
    AND c3.standard_concept = 'C'
) atc ON r."atc class id" = atc.atc_code
LEFT JOIN (
    SELECT 
        ds.drug_concept_id,
        c4.concept_name AS quantity_unit
    FROM "synthea"."vocabulary"."drug_strength" ds
    JOIN "synthea"."vocabulary"."concept" c4 ON c4.concept_id = COALESCE(ds.amount_unit_concept_id, ds.numerator_unit_concept_id)
) qu ON REPLACE(JSON_EXTRACT(mr, '$.medicationCodeableConcept.coding[0].code'), '"', '') = qu.drug_concept_id
  );

[0m03:41:59.051569 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.057138 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim"} */

  
  create view "synthea"."tuva_input"."medical_claim__dbt_tmp" as (
    -- models/medical_claim.sql

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[0].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[0].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[1].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[1].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[2].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[2].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[2].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[2].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[2].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[3].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[3].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[3].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[3].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[3].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[4].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[4].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[4].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[4].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[4].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)
  );

[0m03:41:59.065323 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.location"
[0m03:41:59.066413 [debug] [Thread-2 (]: On model.the_tuva_project.location: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.location"} */
alter view "synthea"."tuva_input"."location" rename to "location__dbt_backup"
[0m03:41:59.066984 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.069202 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.location"
[0m03:41:59.069599 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.069877 [debug] [Thread-2 (]: On model.the_tuva_project.location: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.location"} */
alter view "synthea"."tuva_input"."location__dbt_tmp" rename to "location"
[0m03:41:59.072794 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m03:41:59.073551 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.073866 [debug] [Thread-3 (]: On model.the_tuva_project.medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medication"} */
alter view "synthea"."tuva_input"."medication" rename to "medication__dbt_backup"
[0m03:41:59.075147 [debug] [Thread-2 (]: On model.the_tuva_project.location: COMMIT
[0m03:41:59.075774 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.076095 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.location"
[0m03:41:59.078553 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m03:41:59.079088 [debug] [Thread-2 (]: On model.the_tuva_project.location: COMMIT
[0m03:41:59.079530 [debug] [Thread-3 (]: On model.the_tuva_project.medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medication"} */
alter view "synthea"."tuva_input"."medication__dbt_tmp" rename to "medication"
[0m03:41:59.080567 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.081014 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.082923 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.location"
[0m03:41:59.084305 [debug] [Thread-3 (]: On model.the_tuva_project.medication: COMMIT
[0m03:41:59.084786 [debug] [Thread-2 (]: On model.the_tuva_project.location: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.location"} */
drop view if exists "synthea"."tuva_input"."location__dbt_backup" cascade
[0m03:41:59.085181 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m03:41:59.085805 [debug] [Thread-3 (]: On model.the_tuva_project.medication: COMMIT
[0m03:41:59.086107 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.087189 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.location (execute): 03:41:58.978957 => 03:41:59.087044
[0m03:41:59.087472 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.087858 [debug] [Thread-2 (]: On model.the_tuva_project.location: Close
[0m03:41:59.089856 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m03:41:59.090572 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7f788e90>]}
[0m03:41:59.091009 [debug] [Thread-3 (]: On model.the_tuva_project.medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medication"} */
drop view if exists "synthea"."tuva_input"."medication__dbt_backup" cascade
[0m03:41:59.091625 [info ] [Thread-2 (]: 7 of 307 OK created sql view model tuva_input.location ......................... [[32mOK[0m in 0.22s]
[0m03:41:59.092419 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.location
[0m03:41:59.092718 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.093039 [debug] [Thread-2 (]: Began running node model.the_tuva_project.observation
[0m03:41:59.094111 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.medication (execute): 03:41:58.988619 => 03:41:59.093978
[0m03:41:59.094577 [info ] [Thread-2 (]: 11 of 307 START sql view model tuva_input.observation .......................... [RUN]
[0m03:41:59.095011 [debug] [Thread-3 (]: On model.the_tuva_project.medication: Close
[0m03:41:59.095570 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.location, now model.the_tuva_project.observation)
[0m03:41:59.096175 [debug] [Thread-3 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7fff34d0>]}
[0m03:41:59.096552 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.observation
[0m03:41:59.097031 [info ] [Thread-3 (]: 10 of 307 OK created sql view model tuva_input.medication ...................... [[32mOK[0m in 0.22s]
[0m03:41:59.099433 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.observation"
[0m03:41:59.100009 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.medication
[0m03:41:59.100733 [debug] [Thread-3 (]: Began running node model.the_tuva_project.patient
[0m03:41:59.101381 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.observation (compile): 03:41:59.097353 => 03:41:59.101198
[0m03:41:59.101718 [info ] [Thread-3 (]: 12 of 307 START sql view model tuva_input.patient .............................. [RUN]
[0m03:41:59.102230 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.observation
[0m03:41:59.102840 [debug] [Thread-3 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.medication, now model.the_tuva_project.patient)
[0m03:41:59.105973 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.observation"
[0m03:41:59.106612 [debug] [Thread-3 (]: Began compiling node model.the_tuva_project.patient
[0m03:41:59.109250 [debug] [Thread-3 (]: Writing injected SQL for node "model.the_tuva_project.patient"
[0m03:41:59.109991 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.observation"
[0m03:41:59.110470 [debug] [Thread-2 (]: On model.the_tuva_project.observation: BEGIN
[0m03:41:59.110975 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.patient (compile): 03:41:59.107314 => 03:41:59.110823
[0m03:41:59.111271 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m03:41:59.111719 [debug] [Thread-3 (]: Began executing node model.the_tuva_project.patient
[0m03:41:59.112300 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.115275 [debug] [Thread-3 (]: Writing runtime sql for node "model.the_tuva_project.patient"
[0m03:41:59.115793 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.observation"
[0m03:41:59.116650 [debug] [Thread-2 (]: On model.the_tuva_project.observation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.observation"} */

  
  create view "synthea"."tuva_input"."observation__dbt_tmp" as (
    -- models/observation.sql

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(o, '$.id'), '"', '') AS observation_id,
    REPLACE(REPLACE(JSON_EXTRACT(o, '$.subject.reference'), '"Patient/', ''), '"', '') AS patient_id,
    REPLACE(REPLACE(JSON_EXTRACT(o, '$.encounter.reference'), '"Encounter/', ''), '"', '') AS encounter_id,
    NULL AS panel_id,
    CAST(SUBSTRING(JSON_EXTRACT(o, '$.effectiveDateTime'), 2, 10) AS DATE) AS observation_date,
    REPLACE(JSON_EXTRACT(o, '$.category[0].display'), '"', '') AS observation_type,
    'loinc' AS source_code_type,
    REPLACE(JSON_EXTRACT(o, '$.code.coding[0].code'), '"', '') AS source_code,
    REPLACE(JSON_EXTRACT(o, '$.code.coding[0].display'), '"', '') AS source_description,
    'loinc' AS normalized_code_type,
    REPLACE(JSON_EXTRACT(o, '$.code.coding[0].code'), '"', '') AS normalized_code,
    REPLACE(JSON_EXTRACT(o, '$.code.coding[0].display'), '"', '') AS normalized_description,
    CASE
        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '"', '')
        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '"', '') IS NULL AND REPLACE(JSON_EXTRACT(o, '$.component'), '"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.component[0].code.coding[0].code'), '"', '')
        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '"', '') IS NULL AND REPLACE(JSON_EXTRACT(o, '$.component'), '"', '') IS NULL THEN REPLACE(JSON_EXTRACT(o, '$.valueCodeableConcept.coding[0].display'), '"', '')
    END AS result,
    CASE
        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.unit'), '"', '')
        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '"', '') IS NULL AND REPLACE(JSON_EXTRACT(o, '$.component'), '"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.component[0].valueQuantity.unit'), '"', '')
    END AS source_units,
    CASE
        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.unit'), '"', '')
        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '"', '') IS NULL AND REPLACE(JSON_EXTRACT(o, '$.component'), '"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.component[0].valueQuantity.unit'), '"', '')
    END AS normalized_units,
    NULL AS source_reference_range_low,
    NULL AS source_reference_range_high,
    NULL AS normalized_reference_range_low,
    NULL AS normalized_reference_range_high,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Observation" o
  );

[0m03:41:59.117660 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.patient"
[0m03:41:59.118249 [debug] [Thread-3 (]: On model.the_tuva_project.patient: BEGIN
[0m03:41:59.118779 [debug] [Thread-3 (]: Opening a new connection, currently in state closed
[0m03:41:59.119448 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.119859 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.patient"
[0m03:41:59.120290 [debug] [Thread-3 (]: On model.the_tuva_project.patient: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.patient"} */

  
  create view "synthea"."tuva_input"."patient__dbt_tmp" as (
    -- models/patient.sql

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') AS patient_id,
    REPLACE(JSON_EXTRACT(p, '$.name[0].given[0]'), '"', '') AS first_name,
    REPLACE(JSON_EXTRACT(p, '$.name[0].family'), '"', '') AS last_name,
    REPLACE(JSON_EXTRACT(p, '$.gender'), '"', '') AS sex,
    REPLACE(JSON_EXTRACT(p, '$.extension[0].extension[0].valueCoding.display'), '"', '') AS race,
    CAST(REPLACE(JSON_EXTRACT(p, '$.birthDate'), '"', '') AS DATE) AS birth_date,
    CAST(REPLACE(JSON_EXTRACT(p, '$.deceasedDateTime'), '"', '') AS DATE) AS death_date,
    CASE
        WHEN JSON_EXTRACT(p, '$.deceasedDateTime') IS NOT NULL THEN 1
        ELSE 0
    END AS death_flag,
    REPLACE(REPLACE(REPLACE(JSON_EXTRACT(p, '$.address[0].line'), '"', ''), '[', ''), ']', '') AS address,
    REPLACE(JSON_EXTRACT(p, '$.address[0].city'), '"', '') AS city,
    REPLACE(JSON_EXTRACT(p, '$.address[0].state'), '"', '') AS state,
    REPLACE(JSON_EXTRACT(p, '$.address[0].postalCode'), '"', '') AS zip_code,
    NULL AS county,
    REPLACE(JSON_EXTRACT(p, '$.address[0].extension[0].extension[0].valueDecimal'), '"', '') AS latitude,
    REPLACE(JSON_EXTRACT(p, '$.address[0].extension[0].extension[1].valueDecimal'), '"', '') AS longitude,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Patient" p
  );

[0m03:41:59.122799 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.125908 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.observation"
[0m03:41:59.126328 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.126662 [debug] [Thread-2 (]: On model.the_tuva_project.observation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.observation"} */
alter view "synthea"."tuva_input"."observation" rename to "observation__dbt_backup"
[0m03:41:59.129712 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.patient"
[0m03:41:59.130847 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.131215 [debug] [Thread-3 (]: On model.the_tuva_project.patient: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.patient"} */
alter view "synthea"."tuva_input"."patient" rename to "patient__dbt_backup"
[0m03:41:59.134052 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.observation"
[0m03:41:59.134916 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.135481 [debug] [Thread-2 (]: On model.the_tuva_project.observation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.observation"} */
alter view "synthea"."tuva_input"."observation__dbt_tmp" rename to "observation"
[0m03:41:59.139495 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.patient"
[0m03:41:59.140906 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.141786 [debug] [Thread-3 (]: On model.the_tuva_project.patient: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.patient"} */
alter view "synthea"."tuva_input"."patient__dbt_tmp" rename to "patient"
[0m03:41:59.143379 [debug] [Thread-2 (]: On model.the_tuva_project.observation: COMMIT
[0m03:41:59.144320 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.144741 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.observation"
[0m03:41:59.146337 [debug] [Thread-3 (]: On model.the_tuva_project.patient: COMMIT
[0m03:41:59.146884 [debug] [Thread-2 (]: On model.the_tuva_project.observation: COMMIT
[0m03:41:59.147467 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.patient"
[0m03:41:59.148813 [debug] [Thread-3 (]: On model.the_tuva_project.patient: COMMIT
[0m03:41:59.149751 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.152114 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.observation"
[0m03:41:59.152567 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.153015 [debug] [Thread-2 (]: On model.the_tuva_project.observation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.observation"} */
drop view if exists "synthea"."tuva_input"."observation__dbt_backup" cascade
[0m03:41:59.156027 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.patient"
[0m03:41:59.156965 [debug] [Thread-3 (]: On model.the_tuva_project.patient: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.patient"} */
drop view if exists "synthea"."tuva_input"."patient__dbt_backup" cascade
[0m03:41:59.157629 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.158862 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.observation (execute): 03:41:59.103143 => 03:41:59.158712
[0m03:41:59.159171 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.159481 [debug] [Thread-2 (]: On model.the_tuva_project.observation: Close
[0m03:41:59.160634 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.patient (execute): 03:41:59.112491 => 03:41:59.160490
[0m03:41:59.161438 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7ff86fd0>]}
[0m03:41:59.161920 [debug] [Thread-3 (]: On model.the_tuva_project.patient: Close
[0m03:41:59.162547 [info ] [Thread-2 (]: 11 of 307 OK created sql view model tuva_input.observation ..................... [[32mOK[0m in 0.07s]
[0m03:41:59.163356 [debug] [Thread-3 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff80533d50>]}
[0m03:41:59.163914 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.observation
[0m03:41:59.164438 [info ] [Thread-3 (]: 12 of 307 OK created sql view model tuva_input.patient ......................... [[32mOK[0m in 0.06s]
[0m03:41:59.164897 [debug] [Thread-2 (]: Began running node model.the_tuva_project.pharmacy_claim
[0m03:41:59.165461 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.patient
[0m03:41:59.165961 [info ] [Thread-2 (]: 13 of 307 START sql view model tuva_input.pharmacy_claim ....................... [RUN]
[0m03:41:59.166477 [debug] [Thread-3 (]: Began running node model.the_tuva_project.practitioner
[0m03:41:59.167202 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.observation, now model.the_tuva_project.pharmacy_claim)
[0m03:41:59.167708 [info ] [Thread-3 (]: 14 of 307 START sql view model tuva_input.practitioner ......................... [RUN]
[0m03:41:59.168276 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.pharmacy_claim
[0m03:41:59.169087 [debug] [Thread-3 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.patient, now model.the_tuva_project.practitioner)
[0m03:41:59.173045 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.pharmacy_claim"
[0m03:41:59.173652 [debug] [Thread-3 (]: Began compiling node model.the_tuva_project.practitioner
[0m03:41:59.176617 [debug] [Thread-3 (]: Writing injected SQL for node "model.the_tuva_project.practitioner"
[0m03:41:59.177559 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.pharmacy_claim (compile): 03:41:59.169529 => 03:41:59.177294
[0m03:41:59.178055 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.pharmacy_claim
[0m03:41:59.178499 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.practitioner (compile): 03:41:59.174479 => 03:41:59.178254
[0m03:41:59.182121 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.pharmacy_claim"
[0m03:41:59.182867 [debug] [Thread-3 (]: Began executing node model.the_tuva_project.practitioner
[0m03:41:59.186676 [debug] [Thread-3 (]: Writing runtime sql for node "model.the_tuva_project.practitioner"
[0m03:41:59.187612 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.pharmacy_claim"
[0m03:41:59.188156 [debug] [Thread-2 (]: On model.the_tuva_project.pharmacy_claim: BEGIN
[0m03:41:59.188575 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.practitioner"
[0m03:41:59.188932 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m03:41:59.189320 [debug] [Thread-3 (]: On model.the_tuva_project.practitioner: BEGIN
[0m03:41:59.189937 [debug] [Thread-3 (]: Opening a new connection, currently in state closed
[0m03:41:59.190264 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.190759 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.191060 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.pharmacy_claim"
[0m03:41:59.191492 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.practitioner"
[0m03:41:59.191994 [debug] [Thread-2 (]: On model.the_tuva_project.pharmacy_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.pharmacy_claim"} */

  
  create view "synthea"."tuva_input"."pharmacy_claim__dbt_tmp" as (
    -- models/pharmacy_claim.sql

SELECT *
FROM (
    SELECT DISTINCT
        REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
        REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', '') AS claim_line_number,
        REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
        NULL AS member_id,
        REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '"', '') AS payer,
        NULL AS plan,
        REPLACE(JSON_EXTRACT(p, '$.identifier[0].value'), '"', '') AS prescribing_provider_npi,
        NULL AS dispensing_provider_npi,
        CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS dispensing_date,
        (
            SELECT c2.concept_code
            FROM "synthea"."vocabulary"."concept_relationship" cr
            JOIN "synthea"."vocabulary"."concept" c1 ON c1.concept_id = cr.concept_id_1
            JOIN "synthea"."vocabulary"."concept" c2 ON c2.concept_id = cr.concept_id_2
            WHERE c1.concept_code = REPLACE(JSON_EXTRACT(c, '$.item[0].productOrService.coding[0].code'), '"', '')
            AND cr.relationship_id = 'Mapped from'
            AND c2.vocabulary_id = 'NDC'
            AND c2.domain_id = 'Drug'
            AND c2.invalid_reason IS NULL
            AND c1.concept_class_id in ('Branded Drug', 'Clinical Drug', 'Quant Clinical Drug')
            AND LENGTH(c2.concept_code) = 11
            ORDER BY c2.concept_code
            LIMIT 1
        ) AS ndc_code,
        CASE
            WHEN REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '"', '') IS NOT NULL 
            THEN CAST(REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '"', '') AS INTEGER) * 30
            ELSE 1
        END AS quantity,
        CASE
            WHEN REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '"', '') IS NOT NULL 
            THEN 30
            ELSE 1
        END AS days_supply,
        0 AS refills,
        CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
        CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
        CASE
            WHEN REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].category.coding[0].display'), '"', '') = 'Line Allowed Charge Amount'
                THEN CAST(REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].amount.value'), '"', '') AS FLOAT)
            ELSE 0
        END AS allowed_amount,
        CASE
            WHEN REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].category.coding[0].display'), '"', '') = 'Line Beneficiary Coinsurance Amount'
                THEN CAST(REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].amount.value'), '"', '') AS FLOAT)
            ELSE 0
        END AS coinsurance_amount,
        CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS copayment_amount,
        CASE
            WHEN REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].category.coding[0].display'), '"', '') = 'Line Beneficiary Part B Deductible Amount'
                THEN CAST(REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].amount.value'), '"', '') AS FLOAT)
            ELSE 0
        END AS deductible_amount,
        'SyntheaFhir' AS data_source
    FROM "synthea"."json"."Claim" c
    LEFT JOIN "synthea"."json"."MedicationRequest" m
        ON REPLACE(REPLACE(JSON_EXTRACT(c, '$.prescription.reference'), '"MedicationRequest/', ''), '"', '') = REPLACE(JSON_EXTRACT(m, '$.id'), '"', '')
    LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e
        ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
    LEFT JOIN "synthea"."json"."Encounter" enc
        ON REPLACE(REPLACE(JSON_EXTRACT(c, '$.item[0].encounter[0].reference'), '"Encounter/', ''), '"', '') = REPLACE(JSON_EXTRACT(enc, '$.id'), '"', '')
    LEFT JOIN "synthea"."json"."Practitioner" p
        ON REPLACE(REPLACE(JSON_EXTRACT(enc, '$.participant[0].individual.reference'), '"Practitioner/', ''), '"', '') = REPLACE(JSON_EXTRACT(p, '$.id'), '"', '')
    LEFT JOIN "synthea"."vocabulary"."drug_strength" ds ON REPLACE(JSON_EXTRACT(c, '$.item[0].productOrService.coding[0].code'), '"', '') = ds.drug_concept_id
    WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'pharmacy'
) AS pharmacy_claim
WHERE pharmacy_claim.ndc_code IS NOT NULL
  );

[0m03:41:59.192509 [debug] [Thread-3 (]: On model.the_tuva_project.practitioner: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.practitioner"} */

  
  create view "synthea"."tuva_input"."practitioner__dbt_tmp" as (
    -- models/practitioner.sql

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') AS practitioner_id,
    REPLACE(JSON_EXTRACT(p, '$.identifier[0].value'), '"', '') AS npi,
    REPLACE(JSON_EXTRACT(p, '$.name[0].given[0]'), '"', '') AS first_name,
    REPLACE(JSON_EXTRACT(p, '$.name[0].family'), '"', '') AS last_name,
    REPLACE(JSON_EXTRACT(pr, '$.location[0].display'), '"', '') AS practice_affiliation,
    REPLACE(JSON_EXTRACT(pr, '$.specialty[0].text'), '"', '') AS specialty,
    NULL AS sub_specialty,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Practitioner" p
JOIN "synthea"."json"."PractitionerRole" pr
    ON REPLACE(JSON_EXTRACT(p, '$.identifier[0].value'), '"', '') = REPLACE(JSON_EXTRACT(pr, '$.practitioner.identifier.value'), '"', '')
  );

[0m03:41:59.194205 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.196991 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.practitioner"
[0m03:41:59.197451 [debug] [Thread-3 (]: On model.the_tuva_project.practitioner: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.practitioner"} */
alter view "synthea"."tuva_input"."practitioner" rename to "practitioner__dbt_backup"
[0m03:41:59.197955 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.200062 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.practitioner"
[0m03:41:59.200492 [debug] [Thread-3 (]: On model.the_tuva_project.practitioner: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.practitioner"} */
alter view "synthea"."tuva_input"."practitioner__dbt_tmp" rename to "practitioner"
[0m03:41:59.201001 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.205160 [debug] [Thread-3 (]: On model.the_tuva_project.practitioner: COMMIT
[0m03:41:59.205893 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.206232 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.practitioner"
[0m03:41:59.208913 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.pharmacy_claim"
[0m03:41:59.209443 [debug] [Thread-3 (]: On model.the_tuva_project.practitioner: COMMIT
[0m03:41:59.209870 [debug] [Thread-2 (]: On model.the_tuva_project.pharmacy_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.pharmacy_claim"} */
alter view "synthea"."tuva_input"."pharmacy_claim" rename to "pharmacy_claim__dbt_backup"
[0m03:41:59.210757 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.211064 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.214428 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.pharmacy_claim"
[0m03:41:59.216333 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.practitioner"
[0m03:41:59.216775 [debug] [Thread-2 (]: On model.the_tuva_project.pharmacy_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.pharmacy_claim"} */
alter view "synthea"."tuva_input"."pharmacy_claim__dbt_tmp" rename to "pharmacy_claim"
[0m03:41:59.217156 [debug] [Thread-3 (]: On model.the_tuva_project.practitioner: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.practitioner"} */
drop view if exists "synthea"."tuva_input"."practitioner__dbt_backup" cascade
[0m03:41:59.217853 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.219070 [debug] [Thread-2 (]: On model.the_tuva_project.pharmacy_claim: COMMIT
[0m03:41:59.219428 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.219714 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.pharmacy_claim"
[0m03:41:59.220729 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.practitioner (execute): 03:41:59.183860 => 03:41:59.220593
[0m03:41:59.221114 [debug] [Thread-2 (]: On model.the_tuva_project.pharmacy_claim: COMMIT
[0m03:41:59.221516 [debug] [Thread-3 (]: On model.the_tuva_project.practitioner: Close
[0m03:41:59.222611 [debug] [Thread-3 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7fce5710>]}
[0m03:41:59.222997 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.223486 [info ] [Thread-3 (]: 14 of 307 OK created sql view model tuva_input.practitioner .................... [[32mOK[0m in 0.05s]
[0m03:41:59.225531 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.pharmacy_claim"
[0m03:41:59.226046 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.practitioner
[0m03:41:59.226446 [debug] [Thread-2 (]: On model.the_tuva_project.pharmacy_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.pharmacy_claim"} */
drop view if exists "synthea"."tuva_input"."pharmacy_claim__dbt_backup" cascade
[0m03:41:59.226867 [debug] [Thread-3 (]: Began running node model.the_tuva_project.procedure
[0m03:41:59.227776 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.227543 [info ] [Thread-3 (]: 15 of 307 START sql view model tuva_input.procedure ............................ [RUN]
[0m03:41:59.228858 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.pharmacy_claim (execute): 03:41:59.178940 => 03:41:59.228723
[0m03:41:59.229496 [debug] [Thread-3 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.practitioner, now model.the_tuva_project.procedure)
[0m03:41:59.229922 [debug] [Thread-2 (]: On model.the_tuva_project.pharmacy_claim: Close
[0m03:41:59.230304 [debug] [Thread-3 (]: Began compiling node model.the_tuva_project.procedure
[0m03:41:59.231263 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff87e2f950>]}
[0m03:41:59.234145 [debug] [Thread-3 (]: Writing injected SQL for node "model.the_tuva_project.procedure"
[0m03:41:59.234800 [info ] [Thread-2 (]: 13 of 307 OK created sql view model tuva_input.pharmacy_claim .................. [[32mOK[0m in 0.06s]
[0m03:41:59.235699 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.pharmacy_claim
[0m03:41:59.236137 [debug] [Thread-2 (]: Began running node model.the_tuva_project.quality_measures__int_nqf0034__performance_period
[0m03:41:59.236772 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.procedure (compile): 03:41:59.231750 => 03:41:59.236547
[0m03:41:59.237147 [info ] [Thread-2 (]: 16 of 307 START sql view model quality_measures._int_nqf0034__performance_period  [RUN]
[0m03:41:59.237704 [debug] [Thread-3 (]: Began executing node model.the_tuva_project.procedure
[0m03:41:59.238416 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.pharmacy_claim, now model.the_tuva_project.quality_measures__int_nqf0034__performance_period)
[0m03:41:59.241882 [debug] [Thread-3 (]: Writing runtime sql for node "model.the_tuva_project.procedure"
[0m03:41:59.242571 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.quality_measures__int_nqf0034__performance_period
[0m03:41:59.255565 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.quality_measures__int_nqf0034__performance_period"
[0m03:41:59.256172 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.procedure"
[0m03:41:59.257060 [debug] [Thread-3 (]: On model.the_tuva_project.procedure: BEGIN
[0m03:41:59.257498 [debug] [Thread-3 (]: Opening a new connection, currently in state closed
[0m03:41:59.258021 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.quality_measures__int_nqf0034__performance_period (compile): 03:41:59.243205 => 03:41:59.257825
[0m03:41:59.258499 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.258803 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.quality_measures__int_nqf0034__performance_period
[0m03:41:59.259202 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.procedure"
[0m03:41:59.262909 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.quality_measures__int_nqf0034__performance_period"
[0m03:41:59.263686 [debug] [Thread-3 (]: On model.the_tuva_project.procedure: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.procedure"} */

  
  create view "synthea"."tuva_input"."procedure__dbt_tmp" as (
    -- models/procedure.sql

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') AS procedure_id,
    REPLACE(REPLACE(JSON_EXTRACT(p, '$.subject.reference'), '"Patient/', ''), '"', '') AS patient_id,
    REPLACE(REPLACE(JSON_EXTRACT(p, '$.encounter.reference'), '"Encounter/', ''), '"', '') AS encounter_id,
    REPLACE(JSON_EXTRACT(cl, '$.id'), '"', '') AS claim_id,
    CAST(REPLACE(JSON_EXTRACT(p, '$.performedPeriod.start'), '"', '') AS DATE) AS procedure_date,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code,
    'snomed' AS source_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS source_code,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].display'), '"', '') AS source_description,
    'snomed' AS normalized_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS normalized_code,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].display'), '"', '') AS normalized_description,
    NULL AS modifier_1,
    NULL AS modifier_2,
    NULL AS modifier_3,
    NULL AS modifier_4,
    NULL AS modifier_5,
    REPLACE(REPLACE(JSON_EXTRACT(e, '$.participant[0].individual.reference'), '"Practitioner/', ''), '"', '') AS practitioner_id,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Procedure" p
LEFT JOIN "synthea"."json"."Encounter" e
    ON REPLACE(REPLACE(JSON_EXTRACT(p, '$.encounter.reference'), '"Encounter/', ''), '"', '') = REPLACE(JSON_EXTRACT(e, '$.id'), '"', '')
LEFT JOIN "synthea"."json"."Claim" cl
    ON REPLACE(REPLACE(JSON_EXTRACT(p, '$.encounter.reference'), '"Encounter/', ''), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(cl, '$.item[0].encounter[0].reference'), '"Encounter/', ''), '"', '')
  );

[0m03:41:59.265378 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.quality_measures__int_nqf0034__performance_period"
[0m03:41:59.266165 [debug] [Thread-2 (]: On model.the_tuva_project.quality_measures__int_nqf0034__performance_period: BEGIN
[0m03:41:59.266767 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.267133 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m03:41:59.269866 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.procedure"
[0m03:41:59.270634 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.270954 [debug] [Thread-3 (]: On model.the_tuva_project.procedure: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.procedure"} */
alter view "synthea"."tuva_input"."procedure" rename to "procedure__dbt_backup"
[0m03:41:59.271399 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.quality_measures__int_nqf0034__performance_period"
[0m03:41:59.271977 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.272326 [debug] [Thread-2 (]: On model.the_tuva_project.quality_measures__int_nqf0034__performance_period: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.quality_measures__int_nqf0034__performance_period"} */

  
  create view "synthea"."quality_measures"."_int_nqf0034__performance_period__dbt_tmp" as (
    
/*
    set performance period end to the end of the current calendar year
    or use the quality_measures_period_end variable if provided
*/
with period_end as (

    select
        cast(
        

    

    date_trunc('year', now()) + ((interval '1 year') * (1))

 + ((interval '1 day') * (-1))


        as date)
        
         as performance_period_end
)

/*
    set performance period begin to a year and a day prior
    for a complete calendar year
*/
, period_begin as (

    select
          performance_period_end
        , 

    

    performance_period_end + ((interval '1 year') * (-1))

 + ((interval '1 day') * (1))

 as performance_period_begin
    from period_end

)

/*
    set performance lookback periods for each type of test

    during the measurement period:
    - Fecal occult blood test (FOBT) during the measurement period

    during the measurement period or the two years prior:
    - Fecal immunochemical DNA test (FIT-DNA)

    during the measurement period or the four years prior:
    - Flexible sigmoidoscopy
    - Computed tomography (CT) colonography

    during the measurement period or the nine years prior:
    - Colonoscopy

*/
, period_lookback as (

    select
          performance_period_end
        , performance_period_begin
        , 

    performance_period_end + ((interval '1 year') * (-2))

 as performance_period_begin_1yp
        , 

    performance_period_end + ((interval '1 year') * (-3))

 as performance_period_begin_2yp
        , 

    performance_period_end + ((interval '1 year') * (-5))

 as performance_period_begin_4yp
        , 

    performance_period_end + ((interval '1 year') * (-10))

 as performance_period_begin_9yp
    from period_begin

)

select
      cast(performance_period_begin as date) as performance_period_begin
    , cast(performance_period_end as date) as performance_period_end
    , cast(performance_period_begin_1yp as date) as performance_period_begin_1yp
    , cast(performance_period_begin_2yp as date) as performance_period_begin_2yp
    , cast(performance_period_begin_4yp as date) as performance_period_begin_4yp
    , cast(performance_period_begin_9yp as date) as performance_period_begin_9yp
from period_lookback
  );

[0m03:41:59.274579 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.procedure"
[0m03:41:59.275285 [debug] [Thread-3 (]: On model.the_tuva_project.procedure: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.procedure"} */
alter view "synthea"."tuva_input"."procedure__dbt_tmp" rename to "procedure"
[0m03:41:59.275930 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.277464 [debug] [Thread-3 (]: On model.the_tuva_project.procedure: COMMIT
[0m03:41:59.277897 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.278244 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.procedure"
[0m03:41:59.280961 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.quality_measures__int_nqf0034__performance_period"
[0m03:41:59.281476 [debug] [Thread-3 (]: On model.the_tuva_project.procedure: COMMIT
[0m03:41:59.281900 [debug] [Thread-2 (]: On model.the_tuva_project.quality_measures__int_nqf0034__performance_period: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.quality_measures__int_nqf0034__performance_period"} */
alter view "synthea"."quality_measures"."_int_nqf0034__performance_period" rename to "_int_nqf0034__performance_period__dbt_backup"
[0m03:41:59.282750 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.283057 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.286385 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.quality_measures__int_nqf0034__performance_period"
[0m03:41:59.288610 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.procedure"
[0m03:41:59.289137 [debug] [Thread-2 (]: On model.the_tuva_project.quality_measures__int_nqf0034__performance_period: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.quality_measures__int_nqf0034__performance_period"} */
alter view "synthea"."quality_measures"."_int_nqf0034__performance_period__dbt_tmp" rename to "_int_nqf0034__performance_period"
[0m03:41:59.289582 [debug] [Thread-3 (]: On model.the_tuva_project.procedure: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.procedure"} */
drop view if exists "synthea"."tuva_input"."procedure__dbt_backup" cascade
[0m03:41:59.290179 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.291508 [debug] [Thread-2 (]: On model.the_tuva_project.quality_measures__int_nqf0034__performance_period: COMMIT
[0m03:41:59.291806 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.292218 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.quality_measures__int_nqf0034__performance_period"
[0m03:41:59.293243 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.procedure (execute): 03:41:59.238827 => 03:41:59.293104
[0m03:41:59.293725 [debug] [Thread-2 (]: On model.the_tuva_project.quality_measures__int_nqf0034__performance_period: COMMIT
[0m03:41:59.294181 [debug] [Thread-3 (]: On model.the_tuva_project.procedure: Close
[0m03:41:59.295256 [debug] [Thread-3 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7fa5eb50>]}
[0m03:41:59.295635 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.296057 [info ] [Thread-3 (]: 15 of 307 OK created sql view model tuva_input.procedure ....................... [[32mOK[0m in 0.07s]
[0m03:41:59.298146 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.quality_measures__int_nqf0034__performance_period"
[0m03:41:59.298752 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.procedure
[0m03:41:59.299196 [debug] [Thread-2 (]: On model.the_tuva_project.quality_measures__int_nqf0034__performance_period: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.quality_measures__int_nqf0034__performance_period"} */
drop view if exists "synthea"."quality_measures"."_int_nqf0034__performance_period__dbt_backup" cascade
[0m03:41:59.299681 [debug] [Thread-3 (]: Began running node model.the_tuva_project.quality_measures__int_nqf2372__performance_period
[0m03:41:59.300585 [info ] [Thread-3 (]: 17 of 307 START sql view model quality_measures._int_nqf2372__performance_period  [RUN]
[0m03:41:59.300949 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.301426 [debug] [Thread-3 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.procedure, now model.the_tuva_project.quality_measures__int_nqf2372__performance_period)
[0m03:41:59.302568 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.quality_measures__int_nqf0034__performance_period (execute): 03:41:59.259496 => 03:41:59.302414
[0m03:41:59.303001 [debug] [Thread-3 (]: Began compiling node model.the_tuva_project.quality_measures__int_nqf2372__performance_period
[0m03:41:59.303444 [debug] [Thread-2 (]: On model.the_tuva_project.quality_measures__int_nqf0034__performance_period: Close
[0m03:41:59.311248 [debug] [Thread-3 (]: Writing injected SQL for node "model.the_tuva_project.quality_measures__int_nqf2372__performance_period"
[0m03:41:59.312127 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7f7c2910>]}
[0m03:41:59.313104 [info ] [Thread-2 (]: 16 of 307 OK created sql view model quality_measures._int_nqf0034__performance_period  [[32mOK[0m in 0.07s]
[0m03:41:59.313767 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf0034__performance_period
[0m03:41:59.314390 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.quality_measures__int_nqf2372__performance_period (compile): 03:41:59.303750 => 03:41:59.314183
[0m03:41:59.314741 [debug] [Thread-2 (]: Began running node model.the_tuva_project.core__stg_clinical_condition
[0m03:41:59.315218 [debug] [Thread-3 (]: Began executing node model.the_tuva_project.quality_measures__int_nqf2372__performance_period
[0m03:41:59.315712 [info ] [Thread-2 (]: 18 of 307 START sql view model core._stg_clinical_condition .................... [RUN]
[0m03:41:59.319281 [debug] [Thread-3 (]: Writing runtime sql for node "model.the_tuva_project.quality_measures__int_nqf2372__performance_period"
[0m03:41:59.320054 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.quality_measures__int_nqf0034__performance_period, now model.the_tuva_project.core__stg_clinical_condition)
[0m03:41:59.321030 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.core__stg_clinical_condition
[0m03:41:59.333021 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.333536 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.quality_measures__int_nqf2372__performance_period"
[0m03:41:59.334729 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.core__stg_clinical_condition"
[0m03:41:59.337540 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m03:41:59.338468 [debug] [Thread-3 (]: On model.the_tuva_project.quality_measures__int_nqf2372__performance_period: BEGIN
[0m03:41:59.339506 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim"} */
alter view "synthea"."tuva_input"."medical_claim" rename to "medical_claim__dbt_backup"
[0m03:41:59.340042 [debug] [Thread-3 (]: Opening a new connection, currently in state closed
[0m03:41:59.340607 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.core__stg_clinical_condition (compile): 03:41:59.321391 => 03:41:59.340394
[0m03:41:59.341434 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.341766 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.core__stg_clinical_condition
[0m03:41:59.342256 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.quality_measures__int_nqf2372__performance_period"
[0m03:41:59.342699 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.346223 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.core__stg_clinical_condition"
[0m03:41:59.346864 [debug] [Thread-3 (]: On model.the_tuva_project.quality_measures__int_nqf2372__performance_period: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.quality_measures__int_nqf2372__performance_period"} */

  
  create view "synthea"."quality_measures"."_int_nqf2372__performance_period__dbt_tmp" as (
    /*
    set performance period end to the end of the current calendar year
    or use the quality_measures_period_end variable if provided
*/
with period_end as (

    select
        cast(
        

    

    date_trunc('year', now()) + ((interval '1 year') * (1))

 + ((interval '1 day') * (-1))


        as date)
        
         as performance_period_end
)

/*
    set performance period begin to a year and a day prior
    for a complete calendar year
*/
, period_begin as (

    select
          performance_period_end
        , 

    

    performance_period_end + ((interval '1 year') * (-1))

 + ((interval '1 day') * (1))

 as performance_period_begin
    from period_end

)

/*
    set performance lookback period to 27 months prior to the end of the
    performance period
*/
, period_lookback as (

    select
          performance_period_end
        , performance_period_begin
        , 

    performance_period_end + ((interval '1 month') * (-27))

 as performance_period_lookback
    from period_begin


)

select
      cast((select id
from "synthea"."quality_measures"."_value_set_measures"
where id = 'NQF2372') as TEXT) as measure_id
    , cast((select name
from "synthea"."quality_measures"."_value_set_measures"
where id = 'NQF2372') as TEXT) as measure_name
    , cast((select version
from "synthea"."quality_measures"."_value_set_measures"
where id = 'NQF2372') as TEXT) as measure_version
    , cast(performance_period_end as date) as performance_period_end
    , cast(performance_period_begin as date) as performance_period_begin
    , cast(performance_period_lookback as date) as performance_period_lookback
from period_lookback
  );

[0m03:41:59.350692 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m03:41:59.351983 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim"} */
alter view "synthea"."tuva_input"."medical_claim__dbt_tmp" rename to "medical_claim"
[0m03:41:59.352550 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_condition"
[0m03:41:59.353104 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.353488 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_condition: BEGIN
[0m03:41:59.353904 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.356946 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.quality_measures__int_nqf2372__performance_period"
[0m03:41:59.357535 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m03:41:59.358918 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: COMMIT
[0m03:41:59.359360 [debug] [Thread-3 (]: On model.the_tuva_project.quality_measures__int_nqf2372__performance_period: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.quality_measures__int_nqf2372__performance_period"} */
alter view "synthea"."quality_measures"."_int_nqf2372__performance_period" rename to "_int_nqf2372__performance_period__dbt_backup"
[0m03:41:59.359999 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.360289 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m03:41:59.360825 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.361100 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_condition"
[0m03:41:59.361496 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: COMMIT
[0m03:41:59.363876 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.quality_measures__int_nqf2372__performance_period"
[0m03:41:59.364447 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_condition: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_condition"} */

  
  create view "synthea"."core"."_stg_clinical_condition__dbt_tmp" as (
    

select
    cast(condition_id as TEXT ) as condition_id
    , cast(patient_id as TEXT ) as patient_id
    , cast(encounter_id as TEXT ) as encounter_id
    , cast(claim_id as TEXT ) as claim_id
    , try_cast( recorded_date as date ) as recorded_date
    , try_cast( onset_date as date ) as onset_date
    , try_cast( resolved_date as date ) as resolved_date
    , cast(status as TEXT ) as status
    , cast(condition_type as TEXT ) as condition_type
    , cast(source_code_type as TEXT ) as source_code_type
    , cast(source_code as TEXT ) as source_code
    , cast(source_description as TEXT ) as source_description
    , cast(normalized_code_type as TEXT ) as normalized_code_type
    , cast(normalized_code as TEXT ) as normalized_code
    , cast(normalized_description as TEXT ) as normalized_description
    , cast(condition_rank as integer ) as condition_rank
    , cast(present_on_admit_code as TEXT ) as present_on_admit_code
    , cast(present_on_admit_description as TEXT ) as present_on_admit_description
    , cast(data_source as TEXT ) as data_source
    , cast('2024-02-21 03:41:53.543436+00:00' as timestamp ) as tuva_last_run
from "synthea"."tuva_input"."condition"
  );

[0m03:41:59.365187 [debug] [Thread-3 (]: On model.the_tuva_project.quality_measures__int_nqf2372__performance_period: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.quality_measures__int_nqf2372__performance_period"} */
alter view "synthea"."quality_measures"."_int_nqf2372__performance_period__dbt_tmp" rename to "_int_nqf2372__performance_period"
[0m03:41:59.393375 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.393809 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.395300 [debug] [Thread-3 (]: On model.the_tuva_project.quality_measures__int_nqf2372__performance_period: COMMIT
[0m03:41:59.397677 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m03:41:59.398248 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.quality_measures__int_nqf2372__performance_period"
[0m03:41:59.398754 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim"} */
drop view if exists "synthea"."tuva_input"."medical_claim__dbt_backup" cascade
[0m03:41:59.399222 [debug] [Thread-3 (]: On model.the_tuva_project.quality_measures__int_nqf2372__performance_period: COMMIT
[0m03:41:59.400162 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.401415 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.medical_claim (execute): 03:41:58.992321 => 03:41:59.401236
[0m03:41:59.401771 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.402087 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: Close
[0m03:41:59.402546 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.404599 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.quality_measures__int_nqf2372__performance_period"
[0m03:41:59.407876 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_condition"
[0m03:41:59.408233 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7f791210>]}
[0m03:41:59.408613 [debug] [Thread-3 (]: On model.the_tuva_project.quality_measures__int_nqf2372__performance_period: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.quality_measures__int_nqf2372__performance_period"} */
drop view if exists "synthea"."quality_measures"."_int_nqf2372__performance_period__dbt_backup" cascade
[0m03:41:59.409035 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_condition: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_condition"} */
alter view "synthea"."core"."_stg_clinical_condition" rename to "_stg_clinical_condition__dbt_backup"
[0m03:41:59.409584 [info ] [Thread-1 (]: 8 of 307 OK created sql view model tuva_input.medical_claim .................... [[32mOK[0m in 0.53s]
[0m03:41:59.410320 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.410635 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.411009 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.medical_claim
[0m03:41:59.413243 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_condition"
[0m03:41:59.414369 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.quality_measures__int_nqf2372__performance_period (execute): 03:41:59.316104 => 03:41:59.414209
[0m03:41:59.414827 [debug] [Thread-1 (]: Began running node model.the_tuva_project.normalized_input__stg_eligibility
[0m03:41:59.415269 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_condition: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_condition"} */
alter view "synthea"."core"."_stg_clinical_condition__dbt_tmp" rename to "_stg_clinical_condition"
[0m03:41:59.415687 [debug] [Thread-3 (]: On model.the_tuva_project.quality_measures__int_nqf2372__performance_period: Close
[0m03:41:59.416255 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.medical_claim, now model.the_tuva_project.normalized_input__stg_eligibility)
[0m03:41:59.416865 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.417512 [debug] [Thread-3 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7f844050>]}
[0m03:41:59.417986 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.normalized_input__stg_eligibility
[0m03:41:59.419217 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_condition: COMMIT
[0m03:41:59.419789 [info ] [Thread-3 (]: 17 of 307 OK created sql view model quality_measures._int_nqf2372__performance_period  [[32mOK[0m in 0.12s]
[0m03:41:59.422429 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__stg_eligibility"
[0m03:41:59.422916 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_condition"
[0m03:41:59.423451 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf2372__performance_period
[0m03:41:59.424280 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_condition: COMMIT
[0m03:41:59.424883 [debug] [Thread-3 (]: Began running node model.the_tuva_project.core__stg_clinical_encounter
[0m03:41:59.425527 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__stg_eligibility (compile): 03:41:59.420061 => 03:41:59.425312
[0m03:41:59.426099 [info ] [Thread-3 (]: 19 of 307 START sql view model core._stg_clinical_encounter .................... [RUN]
[0m03:41:59.426498 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.427369 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.normalized_input__stg_eligibility
[0m03:41:59.427987 [debug] [Thread-3 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.quality_measures__int_nqf2372__performance_period, now model.the_tuva_project.core__stg_clinical_encounter)
[0m03:41:59.430103 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_condition"
[0m03:41:59.430620 [debug] [Thread-1 (]: Began running node model.the_tuva_project.core__stg_clinical_lab_result
[0m03:41:59.431070 [debug] [Thread-3 (]: Began compiling node model.the_tuva_project.core__stg_clinical_encounter
[0m03:41:59.431504 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_condition: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_condition"} */
drop view if exists "synthea"."core"."_stg_clinical_condition__dbt_backup" cascade
[0m03:41:59.431998 [info ] [Thread-1 (]: 20 of 307 START sql view model core._stg_clinical_lab_result ................... [RUN]
[0m03:41:59.442462 [debug] [Thread-3 (]: Writing injected SQL for node "model.the_tuva_project.core__stg_clinical_encounter"
[0m03:41:59.443714 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__stg_eligibility, now model.the_tuva_project.core__stg_clinical_lab_result)
[0m03:41:59.444197 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.444861 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.core__stg_clinical_lab_result
[0m03:41:59.446097 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.core__stg_clinical_condition (execute): 03:41:59.342951 => 03:41:59.445942
[0m03:41:59.446596 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.core__stg_clinical_encounter (compile): 03:41:59.432336 => 03:41:59.446433
[0m03:41:59.457718 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.core__stg_clinical_lab_result"
[0m03:41:59.458400 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_condition: Close
[0m03:41:59.458887 [debug] [Thread-3 (]: Began executing node model.the_tuva_project.core__stg_clinical_encounter
[0m03:41:59.459978 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7cfa75d0>]}
[0m03:41:59.463328 [debug] [Thread-3 (]: Writing runtime sql for node "model.the_tuva_project.core__stg_clinical_encounter"
[0m03:41:59.463969 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.core__stg_clinical_lab_result (compile): 03:41:59.446783 => 03:41:59.463772
[0m03:41:59.464420 [info ] [Thread-2 (]: 18 of 307 OK created sql view model core._stg_clinical_condition ............... [[32mOK[0m in 0.14s]
[0m03:41:59.465372 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.core__stg_clinical_lab_result
[0m03:41:59.465961 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.core__stg_clinical_condition
[0m03:41:59.466490 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_encounter"
[0m03:41:59.469707 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.core__stg_clinical_lab_result"
[0m03:41:59.470371 [debug] [Thread-2 (]: Began running node model.the_tuva_project.core__stg_clinical_location
[0m03:41:59.471120 [debug] [Thread-3 (]: On model.the_tuva_project.core__stg_clinical_encounter: BEGIN
[0m03:41:59.472222 [info ] [Thread-2 (]: 21 of 307 START sql view model core._stg_clinical_location ..................... [RUN]
[0m03:41:59.472998 [debug] [Thread-3 (]: Opening a new connection, currently in state closed
[0m03:41:59.473317 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_lab_result"
[0m03:41:59.473941 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.core__stg_clinical_condition, now model.the_tuva_project.core__stg_clinical_location)
[0m03:41:59.474558 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.474843 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_lab_result: BEGIN
[0m03:41:59.475230 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.core__stg_clinical_location
[0m03:41:59.475634 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_encounter"
[0m03:41:59.476003 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m03:41:59.483498 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.core__stg_clinical_location"
[0m03:41:59.484129 [debug] [Thread-3 (]: On model.the_tuva_project.core__stg_clinical_encounter: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_encounter"} */

  
  create view "synthea"."core"."_stg_clinical_encounter__dbt_tmp" as (
    

select 
    cast(encounter_id as TEXT ) as encounter_id
    , cast(patient_id as TEXT ) as patient_id
    , cast(encounter_type as TEXT ) as encounter_type
    , try_cast( encounter_start_date as date ) as encounter_start_date
    , try_cast( encounter_end_date as date ) as encounter_end_date
    , cast(length_of_stay as integer ) as length_of_stay
    , cast(admit_source_code as TEXT ) as admit_source_code
    , cast(admit_source_description as TEXT ) as admit_source_description
    , cast(admit_type_code as TEXT ) as admit_type_code
    , cast(admit_type_description as TEXT ) as admit_type_description
    , cast(discharge_disposition_code as TEXT ) as discharge_disposition_code
    , cast(discharge_disposition_description as TEXT ) as discharge_disposition_description
    , cast(attending_provider_id as TEXT ) as attending_provider_id
    , cast(facility_npi as TEXT ) as facility_npi
    , cast(primary_diagnosis_code_type as TEXT ) as primary_diagnosis_code_type
    , cast(primary_diagnosis_code as TEXT ) as primary_diagnosis_code
    , cast(primary_diagnosis_description as TEXT ) as primary_diagnosis_description
    , cast(ms_drg_code as TEXT ) as ms_drg_code
    , cast(ms_drg_description as TEXT ) as ms_drg_description 
    , cast(apr_drg_code as TEXT ) as apr_drg_code
    , cast(apr_drg_description as TEXT ) as apr_drg_description
    , cast(paid_amount as numeric(28,6) ) as paid_amount
    , cast(allowed_amount as numeric(28,6) ) as allowed_amount
    , cast(charge_amount as numeric(28,6) ) as charge_amount
    , cast(data_source as TEXT ) as data_source
    , cast('2024-02-21 03:41:53.543436+00:00' as timestamp ) as tuva_last_run
from "synthea"."tuva_input"."encounter"
  );

[0m03:41:59.484816 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.485775 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_lab_result"
[0m03:41:59.486236 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.core__stg_clinical_location (compile): 03:41:59.476287 => 03:41:59.486028
[0m03:41:59.486615 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_lab_result: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_lab_result"} */

  
  create view "synthea"."core"."_stg_clinical_lab_result__dbt_tmp" as (
    

select
    cast(lab_result_id as TEXT ) as lab_result_id
    , cast(patient_id as TEXT ) as patient_id
    , cast(encounter_id as TEXT ) as encounter_id
    , cast(accession_number as TEXT ) as accession_number
    , cast(source_code_type as TEXT ) as source_code_type
    , cast(source_code as TEXT ) as source_code
    , cast(source_description as TEXT ) as source_description
    , cast(source_component as TEXT ) as source_component
    , cast(normalized_code_type as TEXT ) as normalized_code_type
    , cast(normalized_code as TEXT ) as normalized_code
    , cast(normalized_description as TEXT ) as normalized_description
    , cast(normalized_component as TEXT ) as normalized_component
    , cast(status as TEXT ) as status
    , cast(result as TEXT ) as result
    , try_cast( result_date as date ) as result_date
    , try_cast( collection_date as date ) as collection_date
    , cast(source_units as TEXT ) as source_units
    , cast(normalized_units as TEXT ) as normalized_units
    , cast(source_reference_range_low as TEXT ) as source_reference_range_low
    , cast(source_reference_range_high as TEXT ) as source_reference_range_high
    , cast(normalized_reference_range_low as TEXT ) as normalized_reference_range_low
    , cast(normalized_reference_range_high as TEXT ) as normalized_reference_range_high
    , cast(source_abnormal_flag as integer ) as source_abnormal_flag
    , cast(normalized_abnormal_flag as integer ) as normalized_abnormal_flag
    , cast(specimen as TEXT ) as specimen
    , cast(ordering_practitioner_id as TEXT ) as ordering_practitioner_id
    , cast(data_source as TEXT ) as data_source
    , cast('2024-02-21 03:41:53.543436+00:00' as timestamp ) as tuva_last_run
from "synthea"."tuva_input"."lab_result"
  );

[0m03:41:59.487409 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.core__stg_clinical_location
[0m03:41:59.491356 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.core__stg_clinical_location"
[0m03:41:59.491881 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.494582 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_lab_result"
[0m03:41:59.495105 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.495416 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_lab_result: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_lab_result"} */
alter view "synthea"."core"."_stg_clinical_lab_result" rename to "_stg_clinical_lab_result__dbt_backup"
[0m03:41:59.495856 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_location"
[0m03:41:59.498083 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_encounter"
[0m03:41:59.498718 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.499004 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_location: BEGIN
[0m03:41:59.499402 [debug] [Thread-3 (]: On model.the_tuva_project.core__stg_clinical_encounter: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_encounter"} */
alter view "synthea"."core"."_stg_clinical_encounter" rename to "_stg_clinical_encounter__dbt_backup"
[0m03:41:59.501486 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_lab_result"
[0m03:41:59.501919 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m03:41:59.502486 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.502773 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_lab_result: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_lab_result"} */
alter view "synthea"."core"."_stg_clinical_lab_result__dbt_tmp" rename to "_stg_clinical_lab_result"
[0m03:41:59.503296 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.506242 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_encounter"
[0m03:41:59.507001 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.507281 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_location"
[0m03:41:59.507702 [debug] [Thread-3 (]: On model.the_tuva_project.core__stg_clinical_encounter: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_encounter"} */
alter view "synthea"."core"."_stg_clinical_encounter__dbt_tmp" rename to "_stg_clinical_encounter"
[0m03:41:59.508837 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_lab_result: COMMIT
[0m03:41:59.509250 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_location: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_location"} */

  
  create view "synthea"."core"."_stg_clinical_location__dbt_tmp" as (
    

select
    cast(location_id as TEXT ) as location_id
    , cast(npi as TEXT ) as npi
    , cast(name as TEXT ) as name
    , cast(facility_type as TEXT ) as facility_type
    , cast(parent_organization as TEXT ) as parent_organization
    , cast(address as TEXT ) as address
    , cast(city as TEXT ) as city
    , cast(state as TEXT ) as state
    , cast(zip_code as TEXT ) as zip_code
    , cast(latitude as float ) as latitude
    , cast(longitude as float ) as longitude
    , cast(data_source as TEXT ) as data_source
    , cast('2024-02-21 03:41:53.543436+00:00' as timestamp ) as tuva_last_run
from "synthea"."tuva_input"."location"
  );

[0m03:41:59.509770 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.510152 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_lab_result"
[0m03:41:59.511652 [debug] [Thread-3 (]: On model.the_tuva_project.core__stg_clinical_encounter: COMMIT
[0m03:41:59.512284 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_lab_result: COMMIT
[0m03:41:59.512922 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_encounter"
[0m03:41:59.513371 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.513873 [debug] [Thread-3 (]: On model.the_tuva_project.core__stg_clinical_encounter: COMMIT
[0m03:41:59.514294 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.516633 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_location"
[0m03:41:59.518709 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_lab_result"
[0m03:41:59.519031 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.519315 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_location: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_location"} */
alter view "synthea"."core"."_stg_clinical_location" rename to "_stg_clinical_location__dbt_backup"
[0m03:41:59.519716 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_lab_result: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_lab_result"} */
drop view if exists "synthea"."core"."_stg_clinical_lab_result__dbt_backup" cascade
[0m03:41:59.521528 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_encounter"
[0m03:41:59.522072 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.522505 [debug] [Thread-3 (]: On model.the_tuva_project.core__stg_clinical_encounter: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_encounter"} */
drop view if exists "synthea"."core"."_stg_clinical_encounter__dbt_backup" cascade
[0m03:41:59.522817 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.524843 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_location"
[0m03:41:59.526163 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.core__stg_clinical_lab_result (execute): 03:41:59.466675 => 03:41:59.526011
[0m03:41:59.526472 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.526884 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_location: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_location"} */
alter view "synthea"."core"."_stg_clinical_location__dbt_tmp" rename to "_stg_clinical_location"
[0m03:41:59.527292 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_lab_result: Close
[0m03:41:59.528301 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.core__stg_clinical_encounter (execute): 03:41:59.460373 => 03:41:59.528168
[0m03:41:59.528831 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.529384 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7cf7e990>]}
[0m03:41:59.529784 [debug] [Thread-3 (]: On model.the_tuva_project.core__stg_clinical_encounter: Close
[0m03:41:59.530972 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_location: COMMIT
[0m03:41:59.531513 [info ] [Thread-1 (]: 20 of 307 OK created sql view model core._stg_clinical_lab_result .............. [[32mOK[0m in 0.09s]
[0m03:41:59.532189 [debug] [Thread-3 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff804c9d50>]}
[0m03:41:59.532622 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_location"
[0m03:41:59.533113 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.core__stg_clinical_lab_result
[0m03:41:59.533593 [info ] [Thread-3 (]: 19 of 307 OK created sql view model core._stg_clinical_encounter ............... [[32mOK[0m in 0.10s]
[0m03:41:59.534014 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_location: COMMIT
[0m03:41:59.534461 [debug] [Thread-1 (]: Began running node model.the_tuva_project.core__stg_clinical_medication
[0m03:41:59.534961 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.core__stg_clinical_encounter
[0m03:41:59.535638 [info ] [Thread-1 (]: 22 of 307 START sql view model core._stg_clinical_medication ................... [RUN]
[0m03:41:59.535950 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.536430 [debug] [Thread-3 (]: Began running node model.the_tuva_project.core__stg_clinical_observation
[0m03:41:59.537006 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.core__stg_clinical_lab_result, now model.the_tuva_project.core__stg_clinical_medication)
[0m03:41:59.539115 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_location"
[0m03:41:59.539623 [info ] [Thread-3 (]: 23 of 307 START sql view model core._stg_clinical_observation .................. [RUN]
[0m03:41:59.540045 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.core__stg_clinical_medication
[0m03:41:59.540447 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_location: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_location"} */
drop view if exists "synthea"."core"."_stg_clinical_location__dbt_backup" cascade
[0m03:41:59.541005 [debug] [Thread-3 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.core__stg_clinical_encounter, now model.the_tuva_project.core__stg_clinical_observation)
[0m03:41:59.548446 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.core__stg_clinical_medication"
[0m03:41:59.548935 [debug] [Thread-3 (]: Began compiling node model.the_tuva_project.core__stg_clinical_observation
[0m03:41:59.549645 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.557300 [debug] [Thread-3 (]: Writing injected SQL for node "model.the_tuva_project.core__stg_clinical_observation"
[0m03:41:59.557861 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.core__stg_clinical_medication (compile): 03:41:59.541283 => 03:41:59.557576
[0m03:41:59.559232 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.core__stg_clinical_location (execute): 03:41:59.488273 => 03:41:59.559082
[0m03:41:59.560073 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.core__stg_clinical_medication
[0m03:41:59.560614 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_location: Close
[0m03:41:59.561123 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.core__stg_clinical_observation (compile): 03:41:59.550028 => 03:41:59.560868
[0m03:41:59.565331 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.core__stg_clinical_medication"
[0m03:41:59.566268 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7da5e390>]}
[0m03:41:59.566800 [debug] [Thread-3 (]: Began executing node model.the_tuva_project.core__stg_clinical_observation
[0m03:41:59.567659 [info ] [Thread-2 (]: 21 of 307 OK created sql view model core._stg_clinical_location ................ [[32mOK[0m in 0.09s]
[0m03:41:59.571139 [debug] [Thread-3 (]: Writing runtime sql for node "model.the_tuva_project.core__stg_clinical_observation"
[0m03:41:59.571703 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_medication"
[0m03:41:59.572176 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.core__stg_clinical_location
[0m03:41:59.573000 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_medication: BEGIN
[0m03:41:59.573594 [debug] [Thread-2 (]: Began running node model.the_tuva_project.core__stg_clinical_patient
[0m03:41:59.574028 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_observation"
[0m03:41:59.574338 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m03:41:59.574944 [info ] [Thread-2 (]: 24 of 307 START sql view model core._stg_clinical_patient ...................... [RUN]
[0m03:41:59.575477 [debug] [Thread-3 (]: On model.the_tuva_project.core__stg_clinical_observation: BEGIN
[0m03:41:59.576125 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.576635 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.core__stg_clinical_location, now model.the_tuva_project.core__stg_clinical_patient)
[0m03:41:59.577045 [debug] [Thread-3 (]: Opening a new connection, currently in state closed
[0m03:41:59.577438 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_medication"
[0m03:41:59.577855 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.core__stg_clinical_patient
[0m03:41:59.578421 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.578730 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_medication"} */

  
  create view "synthea"."core"."_stg_clinical_medication__dbt_tmp" as (
    

select
    cast(medication_id as TEXT ) as medication_id
    , cast(patient_id as TEXT ) as patient_id
    , cast(encounter_id as TEXT ) as encounter_id
    , try_cast( dispensing_date as date ) as dispensing_date
    , try_cast( prescribing_date as date ) as prescribing_date
    , cast(source_code_type as TEXT ) as source_code_type
    , cast(source_code as TEXT ) as source_code
    , cast(source_description as TEXT ) as source_description
    , cast(ndc_code as TEXT ) as ndc_code
    , cast(ndc_description as TEXT ) as ndc_description
    , cast(rxnorm_code as TEXT ) as rxnorm_code
    , cast(rxnorm_description as TEXT ) as rxnorm_description 
    , cast(atc_code as TEXT ) as atc_code
    , cast(atc_description as TEXT ) as atc_description
    , cast(route as TEXT ) as route
    , cast(strength as TEXT ) as strength
    , cast(quantity as integer ) as quantity
    , cast(quantity_unit as TEXT ) as quantity_unit
    , cast(days_supply as integer ) as days_supply
    , cast(practitioner_id as TEXT ) as practitioner_id
    , cast(data_source as TEXT ) as data_source
    , cast('2024-02-21 03:41:53.543436+00:00' as timestamp ) as tuva_last_run
from "synthea"."tuva_input"."medication"
  );

[0m03:41:59.586305 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.core__stg_clinical_patient"
[0m03:41:59.586940 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_observation"
[0m03:41:59.588267 [debug] [Thread-3 (]: On model.the_tuva_project.core__stg_clinical_observation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_observation"} */

  
  create view "synthea"."core"."_stg_clinical_observation__dbt_tmp" as (
    


select
    cast(observation_id as TEXT ) as observation_id
    , cast(patient_id as TEXT ) as patient_id
    , cast(encounter_id as TEXT ) as encounter_id
    , cast(panel_id as TEXT ) as panel_id
    , try_cast( observation_date as date ) as observation_date
    , cast(observation_type as TEXT ) as observation_type
    , cast(source_code_type as TEXT ) as source_code_type
    , cast(source_code as TEXT ) as source_code
    , cast(source_description as TEXT ) as source_description
    , cast(normalized_code_type as TEXT ) as normalized_code_type
    , cast(normalized_code as TEXT ) as normalized_code
    , cast(normalized_description as TEXT ) as normalized_description
    , cast(result as TEXT ) as result
    , cast(source_units as TEXT ) as source_units
    , cast(normalized_units as TEXT ) as normalized_units
    , cast(source_reference_range_low as TEXT ) as source_reference_range_low
    , cast(source_reference_range_high as TEXT ) as source_reference_range_high
    , cast(normalized_reference_range_low as TEXT ) as normalized_reference_range_low
    , cast(normalized_reference_range_high as TEXT ) as normalized_reference_range_high
    , cast(data_source as TEXT ) as data_source
    , cast('2024-02-21 03:41:53.543436+00:00' as timestamp ) as tuva_last_run
from "synthea"."tuva_input"."observation"
  );

[0m03:41:59.589130 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.core__stg_clinical_patient (compile): 03:41:59.579062 => 03:41:59.588919
[0m03:41:59.589775 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.core__stg_clinical_patient
[0m03:41:59.593270 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.core__stg_clinical_patient"
[0m03:41:59.593915 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.594325 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.597412 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_observation"
[0m03:41:59.600458 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_medication"
[0m03:41:59.601059 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_patient"
[0m03:41:59.601491 [debug] [Thread-3 (]: On model.the_tuva_project.core__stg_clinical_observation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_observation"} */
alter view "synthea"."core"."_stg_clinical_observation" rename to "_stg_clinical_observation__dbt_backup"
[0m03:41:59.602019 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_medication"} */
alter view "synthea"."core"."_stg_clinical_medication" rename to "_stg_clinical_medication__dbt_backup"
[0m03:41:59.602550 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_patient: BEGIN
[0m03:41:59.603222 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.603668 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.603944 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m03:41:59.606308 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_observation"
[0m03:41:59.608952 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_medication"
[0m03:41:59.609877 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.610337 [debug] [Thread-3 (]: On model.the_tuva_project.core__stg_clinical_observation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_observation"} */
alter view "synthea"."core"."_stg_clinical_observation__dbt_tmp" rename to "_stg_clinical_observation"
[0m03:41:59.610908 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_medication"} */
alter view "synthea"."core"."_stg_clinical_medication__dbt_tmp" rename to "_stg_clinical_medication"
[0m03:41:59.611371 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_patient"
[0m03:41:59.611948 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.612319 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.612683 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_patient: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_patient"} */

  
  create view "synthea"."core"."_stg_clinical_patient__dbt_tmp" as (
    

select
    cast(patient_id as TEXT ) as patient_id
    , cast(first_name as TEXT ) as first_name
    , cast(last_name as TEXT ) as last_name
    , cast(sex as TEXT ) as sex
    , cast(race as TEXT ) as race
    , try_cast( birth_date as date ) as birth_date
    , try_cast( death_date as date ) as death_date
    , cast(death_flag as integer ) as death_flag
    , cast(address as TEXT ) as address
    , cast(city as TEXT ) as city
    , cast(state as TEXT ) as state
    , cast(zip_code as TEXT ) as zip_code
    , cast(county as TEXT ) as county
    , cast(latitude as float ) as latitude
    , cast(longitude as float ) as longitude
    , cast(data_source as TEXT ) as data_source
    , cast('2024-02-21 03:41:53.543436+00:00' as timestamp ) as tuva_last_run
from "synthea"."tuva_input"."patient"
  );

[0m03:41:59.614333 [debug] [Thread-3 (]: On model.the_tuva_project.core__stg_clinical_observation: COMMIT
[0m03:41:59.615927 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_medication: COMMIT
[0m03:41:59.616817 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_observation"
[0m03:41:59.617314 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_medication"
[0m03:41:59.617763 [debug] [Thread-3 (]: On model.the_tuva_project.core__stg_clinical_observation: COMMIT
[0m03:41:59.618191 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_medication: COMMIT
[0m03:41:59.619517 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.619991 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.620372 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.622915 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_patient"
[0m03:41:59.626024 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_medication"
[0m03:41:59.628370 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_observation"
[0m03:41:59.629006 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_patient: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_patient"} */
alter view "synthea"."core"."_stg_clinical_patient" rename to "_stg_clinical_patient__dbt_backup"
[0m03:41:59.629588 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_medication"} */
drop view if exists "synthea"."core"."_stg_clinical_medication__dbt_backup" cascade
[0m03:41:59.630142 [debug] [Thread-3 (]: On model.the_tuva_project.core__stg_clinical_observation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_observation"} */
drop view if exists "synthea"."core"."_stg_clinical_observation__dbt_backup" cascade
[0m03:41:59.630981 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.631760 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.633799 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_patient"
[0m03:41:59.635196 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.core__stg_clinical_medication (execute): 03:41:59.561364 => 03:41:59.635026
[0m03:41:59.635547 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.636096 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_patient: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_patient"} */
alter view "synthea"."core"."_stg_clinical_patient__dbt_tmp" rename to "_stg_clinical_patient"
[0m03:41:59.636642 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_medication: Close
[0m03:41:59.637741 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.core__stg_clinical_observation (execute): 03:41:59.568043 => 03:41:59.637599
[0m03:41:59.638384 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.639118 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7cf2a490>]}
[0m03:41:59.639611 [debug] [Thread-3 (]: On model.the_tuva_project.core__stg_clinical_observation: Close
[0m03:41:59.640806 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_patient: COMMIT
[0m03:41:59.641359 [info ] [Thread-1 (]: 22 of 307 OK created sql view model core._stg_clinical_medication .............. [[32mOK[0m in 0.10s]
[0m03:41:59.642075 [debug] [Thread-3 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7da8fed0>]}
[0m03:41:59.642489 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_patient"
[0m03:41:59.642988 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.core__stg_clinical_medication
[0m03:41:59.643466 [info ] [Thread-3 (]: 23 of 307 OK created sql view model core._stg_clinical_observation ............. [[32mOK[0m in 0.10s]
[0m03:41:59.643893 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_patient: COMMIT
[0m03:41:59.644336 [debug] [Thread-1 (]: Began running node model.the_tuva_project.core__stg_clinical_practitioner
[0m03:41:59.644904 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.core__stg_clinical_observation
[0m03:41:59.645644 [info ] [Thread-1 (]: 25 of 307 START sql view model core._stg_clinical_practitioner ................. [RUN]
[0m03:41:59.645955 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.646388 [debug] [Thread-3 (]: Began running node model.the_tuva_project.normalized_input__stg_pharmacy_claim
[0m03:41:59.647098 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.core__stg_clinical_medication, now model.the_tuva_project.core__stg_clinical_practitioner)
[0m03:41:59.649354 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_patient"
[0m03:41:59.651727 [debug] [Thread-3 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.core__stg_clinical_observation, now model.the_tuva_project.normalized_input__stg_pharmacy_claim)
[0m03:41:59.665100 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.core__stg_clinical_practitioner
[0m03:41:59.666505 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_patient: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_patient"} */
drop view if exists "synthea"."core"."_stg_clinical_patient__dbt_backup" cascade
[0m03:41:59.667103 [debug] [Thread-3 (]: Began compiling node model.the_tuva_project.normalized_input__stg_pharmacy_claim
[0m03:41:59.674293 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.core__stg_clinical_practitioner"
[0m03:41:59.678396 [debug] [Thread-3 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__stg_pharmacy_claim"
[0m03:41:59.678922 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.689059 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.core__stg_clinical_practitioner (compile): 03:41:59.667837 => 03:41:59.688288
[0m03:41:59.691792 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.core__stg_clinical_patient (execute): 03:41:59.590144 => 03:41:59.691438
[0m03:41:59.694159 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.core__stg_clinical_practitioner
[0m03:41:59.695074 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.normalized_input__stg_pharmacy_claim (compile): 03:41:59.675664 => 03:41:59.694690
[0m03:41:59.696268 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_patient: Close
[0m03:41:59.701215 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.core__stg_clinical_practitioner"
[0m03:41:59.702473 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.normalized_input__stg_pharmacy_claim
[0m03:41:59.703596 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7cf89650>]}
[0m03:41:59.704675 [debug] [Thread-3 (]: Began running node model.the_tuva_project.core__stg_clinical_procedure
[0m03:41:59.705734 [info ] [Thread-2 (]: 24 of 307 OK created sql view model core._stg_clinical_patient ................. [[32mOK[0m in 0.13s]
[0m03:41:59.706620 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_practitioner"
[0m03:41:59.707070 [info ] [Thread-3 (]: 26 of 307 START sql view model core._stg_clinical_procedure .................... [RUN]
[0m03:41:59.707959 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.core__stg_clinical_patient
[0m03:41:59.708536 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_practitioner: BEGIN
[0m03:41:59.709305 [debug] [Thread-3 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__stg_pharmacy_claim, now model.the_tuva_project.core__stg_clinical_procedure)
[0m03:41:59.710110 [debug] [Thread-2 (]: Began running node model.the_tuva_project.normalized_input__stg_medical_claim
[0m03:41:59.710793 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m03:41:59.711423 [debug] [Thread-3 (]: Began compiling node model.the_tuva_project.core__stg_clinical_procedure
[0m03:41:59.712212 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.core__stg_clinical_patient, now model.the_tuva_project.normalized_input__stg_medical_claim)
[0m03:41:59.713471 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.724305 [debug] [Thread-3 (]: Writing injected SQL for node "model.the_tuva_project.core__stg_clinical_procedure"
[0m03:41:59.725182 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.normalized_input__stg_medical_claim
[0m03:41:59.726000 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_practitioner"
[0m03:41:59.730678 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__stg_medical_claim"
[0m03:41:59.732133 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.core__stg_clinical_procedure (compile): 03:41:59.713726 => 03:41:59.731718
[0m03:41:59.732646 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_practitioner: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_practitioner"} */

  
  create view "synthea"."core"."_stg_clinical_practitioner__dbt_tmp" as (
    

select
    cast(practitioner_id as TEXT ) as practitioner_id
    , cast(npi as TEXT ) as npi
    , cast(first_name as TEXT ) as first_name
    , cast(last_name as TEXT ) as last_name
    , cast(practice_affiliation as TEXT ) as practice_affiliation
    , cast(specialty as TEXT ) as specialty
    , cast(sub_specialty as TEXT ) as sub_specialty
    , cast(data_source as TEXT ) as data_source
    , cast('2024-02-21 03:41:53.543436+00:00' as timestamp ) as tuva_last_run
from "synthea"."tuva_input"."practitioner"
  );

[0m03:41:59.733944 [debug] [Thread-3 (]: Began executing node model.the_tuva_project.core__stg_clinical_procedure
[0m03:41:59.734866 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__stg_medical_claim (compile): 03:41:59.726901 => 03:41:59.734627
[0m03:41:59.741775 [debug] [Thread-3 (]: Writing runtime sql for node "model.the_tuva_project.core__stg_clinical_procedure"
[0m03:41:59.743092 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.744069 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.normalized_input__stg_medical_claim
[0m03:41:59.748933 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_practitioner"
[0m03:41:59.750041 [debug] [Thread-2 (]: Began running node model.the_tuva_project.normalized_input__int_eligibility_dates_normalize
[0m03:41:59.751048 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_procedure"
[0m03:41:59.751895 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_practitioner: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_practitioner"} */
alter view "synthea"."core"."_stg_clinical_practitioner" rename to "_stg_clinical_practitioner__dbt_backup"
[0m03:41:59.752611 [info ] [Thread-2 (]: 27 of 307 START sql table model claims_preprocessing._int_normalized_input_eligibility_dates_normalize  [RUN]
[0m03:41:59.753393 [debug] [Thread-3 (]: On model.the_tuva_project.core__stg_clinical_procedure: BEGIN
[0m03:41:59.754809 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.755866 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__stg_medical_claim, now model.the_tuva_project.normalized_input__int_eligibility_dates_normalize)
[0m03:41:59.756459 [debug] [Thread-3 (]: Opening a new connection, currently in state closed
[0m03:41:59.760150 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_practitioner"
[0m03:41:59.761100 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.normalized_input__int_eligibility_dates_normalize
[0m03:41:59.765520 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.778821 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_procedure"
[0m03:41:59.777798 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize"
[0m03:41:59.766742 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_practitioner: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_practitioner"} */
alter view "synthea"."core"."_stg_clinical_practitioner__dbt_tmp" rename to "_stg_clinical_practitioner"
[0m03:41:59.783232 [debug] [Thread-3 (]: On model.the_tuva_project.core__stg_clinical_procedure: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_procedure"} */

  
  create view "synthea"."core"."_stg_clinical_procedure__dbt_tmp" as (
    

select
    cast(procedure_id as TEXT ) as procedure_id 
    , cast(patient_id as TEXT ) as patient_id
    , cast(encounter_id as TEXT ) as encounter_id
    , cast(claim_id as TEXT ) as claim_id
    , try_cast( procedure_date as date ) as procedure_date
    , cast(source_code_type as TEXT ) as source_code_type
    , cast(source_code as TEXT ) as source_code
    , cast(source_description as TEXT ) as source_description
    , cast(normalized_code_type as TEXT ) as normalized_code_type
    , cast(normalized_code as TEXT ) as normalized_code
    , cast(normalized_description as TEXT ) as normalized_description
    , cast(modifier_1 as TEXT ) as modifier_1
    , cast(modifier_2 as TEXT ) as modifier_2
    , cast(modifier_3 as TEXT ) as modifier_3
    , cast(modifier_4 as TEXT ) as modifier_4
    , cast(modifier_5 as TEXT ) as modifier_5
    , cast(practitioner_id as TEXT ) as practitioner_id
    , cast(data_source as TEXT ) as data_source
    , cast('2024-02-21 03:41:53.543436+00:00' as timestamp ) as tuva_last_run
from "synthea"."tuva_input"."procedure"
  );

[0m03:41:59.785472 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.792077 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__int_eligibility_dates_normalize (compile): 03:41:59.768015 => 03:41:59.790862
[0m03:41:59.795553 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_practitioner: COMMIT
[0m03:41:59.796611 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.797065 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.normalized_input__int_eligibility_dates_normalize
[0m03:41:59.797785 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_practitioner"
[0m03:41:59.801401 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_procedure"
[0m03:41:59.807215 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize"
[0m03:41:59.808620 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_practitioner: COMMIT
[0m03:41:59.809441 [debug] [Thread-3 (]: On model.the_tuva_project.core__stg_clinical_procedure: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_procedure"} */
alter view "synthea"."core"."_stg_clinical_procedure" rename to "_stg_clinical_procedure__dbt_backup"
[0m03:41:59.811548 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.813730 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.815254 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize"
[0m03:41:59.817957 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_practitioner"
[0m03:41:59.821583 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_procedure"
[0m03:41:59.823282 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_eligibility_dates_normalize: BEGIN
[0m03:41:59.831773 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m03:41:59.826463 [debug] [Thread-3 (]: On model.the_tuva_project.core__stg_clinical_procedure: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_procedure"} */
alter view "synthea"."core"."_stg_clinical_procedure__dbt_tmp" rename to "_stg_clinical_procedure"
[0m03:41:59.825116 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_practitioner: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_practitioner"} */
drop view if exists "synthea"."core"."_stg_clinical_practitioner__dbt_backup" cascade
[0m03:41:59.835717 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.837157 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.839505 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize"
[0m03:41:59.840885 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.843447 [debug] [Thread-3 (]: On model.the_tuva_project.core__stg_clinical_procedure: COMMIT
[0m03:41:59.844728 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_eligibility_dates_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_eligibility_dates_normalize__dbt_tmp"
  
    as (
      


with __dbt__cte__normalized_input__stg_eligibility as (



select
      patient_id
    , patient_id||data_source||payer||plan||enrollment_start_date||enrollment_end_date as patient_id_key
    , member_id
    , gender
    , race
    , birth_date
    , death_date
    , death_flag
    , enrollment_start_date
    , enrollment_end_date
    , payer
    , payer_type
    , plan
    , original_reason_entitlement_code
    , dual_status_code
    , medicare_status_code
    , first_name
    , last_name
    , address
    , city
    , state
    , zip_code
    , phone
    , data_source
from "synthea"."tuva_input"."eligibility"
) select distinct
  elig.patient_id
  , elig.patient_id||elig.data_source||elig.payer||elig.plan||elig.enrollment_start_date||elig.enrollment_end_date as patient_id_key
  , cal_dob.full_date as normalized_birth_date
  , cal_death.full_date as normalized_death_date
  , cal_enroll_start.full_date as normalized_enrollment_start_date
  , cal_enroll_end.full_date as normalized_enrollment_end_date
  , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from __dbt__cte__normalized_input__stg_eligibility elig
left join "synthea"."terminology"."calendar" cal_dob
    on elig.birth_date = cal_dob.full_date
left join "synthea"."terminology"."calendar" cal_death
    on elig.death_date = cal_death.full_date
left join "synthea"."terminology"."calendar" cal_enroll_start
    on elig.enrollment_start_date = cal_enroll_start.full_date
left join "synthea"."terminology"."calendar" cal_enroll_end
    on elig.enrollment_end_date = cal_enroll_end.full_date
    );
  
  
[0m03:41:59.847084 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.core__stg_clinical_practitioner (execute): 03:41:59.697075 => 03:41:59.846884
[0m03:41:59.848418 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_procedure"
[0m03:41:59.849865 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_practitioner: Close
[0m03:41:59.852053 [debug] [Thread-3 (]: On model.the_tuva_project.core__stg_clinical_procedure: COMMIT
[0m03:41:59.853984 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff805b1e10>]}
[0m03:41:59.858697 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.861879 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_procedure"
[0m03:41:59.864775 [debug] [Thread-3 (]: On model.the_tuva_project.core__stg_clinical_procedure: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_procedure"} */
drop view if exists "synthea"."core"."_stg_clinical_procedure__dbt_backup" cascade
[0m03:41:59.866626 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:41:59.868220 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.core__stg_clinical_procedure (execute): 03:41:59.735287 => 03:41:59.868038
[0m03:41:59.869304 [debug] [Thread-3 (]: On model.the_tuva_project.core__stg_clinical_procedure: Close
[0m03:41:59.870655 [debug] [Thread-3 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff801fe790>]}
[0m03:42:00.000996 [info ] [Thread-1 (]: 25 of 307 OK created sql view model core._stg_clinical_practitioner ............ [[32mOK[0m in 0.21s]
[0m03:42:00.001683 [info ] [Thread-3 (]: 26 of 307 OK created sql view model core._stg_clinical_procedure ............... [[32mOK[0m in 0.16s]
[0m03:42:00.003081 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.core__stg_clinical_practitioner
[0m03:42:00.004086 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.core__stg_clinical_procedure
[0m03:42:00.004880 [debug] [Thread-1 (]: Began running node model.the_tuva_project.core__lab_result
[0m03:42:00.006946 [debug] [Thread-3 (]: Began running node model.the_tuva_project.core__medication
[0m03:42:00.008119 [info ] [Thread-1 (]: 28 of 307 START sql table model core.lab_result ................................ [RUN]
[0m03:42:00.009113 [info ] [Thread-3 (]: 29 of 307 START sql table model core.medication ................................ [RUN]
[0m03:42:00.010224 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.core__stg_clinical_practitioner, now model.the_tuva_project.core__lab_result)
[0m03:42:00.011272 [debug] [Thread-3 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.core__stg_clinical_procedure, now model.the_tuva_project.core__medication)
[0m03:42:00.012081 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.core__lab_result
[0m03:42:00.012814 [debug] [Thread-3 (]: Began compiling node model.the_tuva_project.core__medication
[0m03:42:00.016036 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.core__lab_result"
[0m03:42:00.021609 [debug] [Thread-3 (]: Writing injected SQL for node "model.the_tuva_project.core__medication"
[0m03:42:00.026820 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.core__lab_result (compile): 03:42:00.013446 => 03:42:00.026489
[0m03:42:00.027264 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.core__medication (compile): 03:42:00.017422 => 03:42:00.027065
[0m03:42:00.028144 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.core__lab_result
[0m03:42:00.029860 [debug] [Thread-3 (]: Began executing node model.the_tuva_project.core__medication
[0m03:42:00.037827 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.core__lab_result"
[0m03:42:00.043609 [debug] [Thread-3 (]: Writing runtime sql for node "model.the_tuva_project.core__medication"
[0m03:42:00.051961 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.core__medication"
[0m03:42:00.053053 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__lab_result"
[0m03:42:00.053953 [debug] [Thread-3 (]: On model.the_tuva_project.core__medication: BEGIN
[0m03:42:00.056648 [debug] [Thread-1 (]: On model.the_tuva_project.core__lab_result: BEGIN
[0m03:42:00.060047 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m03:42:00.058860 [debug] [Thread-3 (]: Opening a new connection, currently in state closed
[0m03:42:00.062013 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:42:00.063162 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:42:00.064204 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__lab_result"
[0m03:42:00.066685 [debug] [Thread-1 (]: On model.the_tuva_project.core__lab_result: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__lab_result"} */

  
    
    

    create  table
      "synthea"."core"."lab_result__dbt_tmp"
  
    as (
      

select * from "synthea"."core"."_stg_clinical_lab_result"
    );
  
  
[0m03:42:00.065460 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.core__medication"
[0m03:42:00.079541 [debug] [Thread-3 (]: On model.the_tuva_project.core__medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__medication"} */

  
    
    

    create  table
      "synthea"."core"."medication__dbt_tmp"
  
    as (
      


select * from "synthea"."core"."_stg_clinical_medication"
    );
  
  
[0m03:42:00.319206 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:42:00.323266 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize"
[0m03:42:00.324280 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_eligibility_dates_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_eligibility_dates_normalize" rename to "_int_normalized_input_eligibility_dates_normalize__dbt_backup"
[0m03:42:00.326563 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:42:00.333187 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize"
[0m03:42:00.335525 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_eligibility_dates_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_eligibility_dates_normalize__dbt_tmp" rename to "_int_normalized_input_eligibility_dates_normalize"
[0m03:42:00.339159 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:42:00.343294 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_eligibility_dates_normalize: COMMIT
[0m03:42:00.346792 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize"
[0m03:42:00.349607 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_eligibility_dates_normalize: COMMIT
[0m03:42:00.353423 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:42:00.356536 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize"
[0m03:42:00.357277 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_eligibility_dates_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_eligibility_dates_normalize__dbt_backup" cascade
[0m03:42:00.358929 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:42:00.360570 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__int_eligibility_dates_normalize (execute): 03:41:59.801974 => 03:42:00.360373
[0m03:42:00.361188 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_eligibility_dates_normalize: Close
[0m03:42:00.362649 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff805b0cd0>]}
[0m03:42:00.363388 [info ] [Thread-2 (]: 27 of 307 OK created sql table model claims_preprocessing._int_normalized_input_eligibility_dates_normalize  [[32mOK[0m in 0.61s]
[0m03:42:00.364463 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.normalized_input__int_eligibility_dates_normalize
[0m03:42:00.365139 [debug] [Thread-2 (]: Began running node model.the_tuva_project.core__observation
[0m03:42:00.365874 [info ] [Thread-2 (]: 30 of 307 START sql table model core.observation ............................... [RUN]
[0m03:42:00.366830 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_eligibility_dates_normalize, now model.the_tuva_project.core__observation)
[0m03:42:00.367510 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.core__observation
[0m03:42:00.370745 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.core__observation"
[0m03:42:00.375441 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.core__observation (compile): 03:42:00.368136 => 03:42:00.374907
[0m03:42:00.376801 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.core__observation
[0m03:42:00.381065 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.core__observation"
[0m03:42:00.382874 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:42:00.387223 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__lab_result"
[0m03:42:00.392164 [debug] [Thread-1 (]: On model.the_tuva_project.core__lab_result: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__lab_result"} */
alter table "synthea"."core"."lab_result" rename to "lab_result__dbt_backup"
[0m03:42:00.390612 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__observation"
[0m03:42:00.407162 [debug] [Thread-2 (]: On model.the_tuva_project.core__observation: BEGIN
[0m03:42:00.407772 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m03:42:00.408437 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:42:00.409116 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:42:00.410416 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__observation"
[0m03:42:00.417817 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__lab_result"
[0m03:42:00.418206 [debug] [Thread-2 (]: On model.the_tuva_project.core__observation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__observation"} */

  
    
    

    create  table
      "synthea"."core"."observation__dbt_tmp"
  
    as (
      


select * from "synthea"."core"."_stg_clinical_observation"
    );
  
  
[0m03:42:00.418858 [debug] [Thread-1 (]: On model.the_tuva_project.core__lab_result: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__lab_result"} */
alter table "synthea"."core"."lab_result__dbt_tmp" rename to "lab_result"
[0m03:42:00.419730 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:42:00.426696 [debug] [Thread-1 (]: On model.the_tuva_project.core__lab_result: COMMIT
[0m03:42:00.443821 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__lab_result"
[0m03:42:00.444405 [debug] [Thread-1 (]: On model.the_tuva_project.core__lab_result: COMMIT
[0m03:42:00.585158 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:42:00.715672 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__lab_result"
[0m03:42:00.717389 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:42:00.718715 [debug] [Thread-1 (]: On model.the_tuva_project.core__lab_result: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__lab_result"} */
drop table if exists "synthea"."core"."lab_result__dbt_backup" cascade
[0m03:42:00.722511 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__observation"
[0m03:42:00.730137 [debug] [Thread-2 (]: On model.the_tuva_project.core__observation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__observation"} */
alter table "synthea"."core"."observation" rename to "observation__dbt_backup"
[0m03:42:00.730882 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:42:00.731730 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:42:00.733196 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.core__lab_result (execute): 03:42:00.033194 => 03:42:00.733015
[0m03:42:00.739323 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__observation"
[0m03:42:00.740553 [debug] [Thread-1 (]: On model.the_tuva_project.core__lab_result: Close
[0m03:42:00.741651 [debug] [Thread-2 (]: On model.the_tuva_project.core__observation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__observation"} */
alter table "synthea"."core"."observation__dbt_tmp" rename to "observation"
[0m03:42:00.743286 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7db2bdd0>]}
[0m03:42:00.744948 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:42:00.746289 [info ] [Thread-1 (]: 28 of 307 OK created sql table model core.lab_result ........................... [[32mOK[0m in 0.73s]
[0m03:42:00.748555 [debug] [Thread-2 (]: On model.the_tuva_project.core__observation: COMMIT
[0m03:42:00.749519 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.core__lab_result
[0m03:42:00.750500 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__observation"
[0m03:42:00.751636 [debug] [Thread-1 (]: Began running node model.the_tuva_project.normalized_input__pharmacy_claim
[0m03:42:00.753491 [info ] [Thread-1 (]: 31 of 307 START sql table model claims_preprocessing.normalized_input_pharmacy_claim  [RUN]
[0m03:42:00.752673 [debug] [Thread-2 (]: On model.the_tuva_project.core__observation: COMMIT
[0m03:42:00.754956 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.core__lab_result, now model.the_tuva_project.normalized_input__pharmacy_claim)
[0m03:42:00.756201 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.normalized_input__pharmacy_claim
[0m03:42:00.795120 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__pharmacy_claim"
[0m03:42:00.803584 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__pharmacy_claim (compile): 03:42:00.756799 => 03:42:00.803060
[0m03:42:00.804915 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.normalized_input__pharmacy_claim
[0m03:42:00.810409 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__pharmacy_claim"
[0m03:42:00.817983 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__pharmacy_claim"
[0m03:42:00.818705 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__pharmacy_claim: BEGIN
[0m03:42:00.819500 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m03:42:00.820679 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:42:00.821440 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__pharmacy_claim"
[0m03:42:00.823556 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__pharmacy_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__pharmacy_claim"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim__dbt_tmp"
  
    as (
      


with __dbt__cte__normalized_input__stg_pharmacy_claim as (



select
      claim_id
    , claim_line_number
    , patient_id
    , member_id
    , payer
    , plan
    , prescribing_provider_npi
    , dispensing_provider_npi
    , dispensing_date
    , ndc_code
    , quantity
    , days_supply
    , refills
    , paid_date
    , paid_amount
    , allowed_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , data_source
from "synthea"."tuva_input"."pharmacy_claim"
) select
      cast(claim_id as TEXT ) as claim_id
    , cast(claim_line_number as int ) as claim_line_number
    , cast(patient_id as TEXT ) as patient_id
    , cast(member_id as TEXT ) as member_id
    , cast(payer as TEXT ) as payer
    , cast(plan as TEXT ) as plan
    , cast(prescribing_provider_npi as TEXT ) as prescribing_provider_npi
    , cast(dispensing_provider_npi as TEXT ) as dispensing_provider_npi
    , cast(dispensing_date as date ) as dispensing_date
    , cast(ndc_code as TEXT ) as ndc_code
    , cast(quantity as int ) as quantity
    , cast(days_supply as int ) as days_supply
    , cast(refills as int ) as refills
    , cast(paid_date as date ) as paid_date
    , cast(paid_amount as numeric(28,6) ) as paid_amount
    , cast(allowed_amount as numeric(28,6) ) as allowed_amount
    , cast(coinsurance_amount as numeric(28,6) ) as coinsurance_amount
    , cast(copayment_amount as numeric(28,6) ) as copayment_amount
    , cast(deductible_amount as numeric(28,6) ) as deductible_amount
    , cast(data_source as TEXT ) as data_source
    , cast('2024-02-21 03:41:53.543436+00:00' as TEXT ) as tuva_last_run
from __dbt__cte__normalized_input__stg_pharmacy_claim
    );
  
  
[0m03:42:00.960868 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:42:00.964070 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__observation"
[0m03:42:00.964682 [debug] [Thread-2 (]: On model.the_tuva_project.core__observation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__observation"} */
drop table if exists "synthea"."core"."observation__dbt_backup" cascade
[0m03:42:00.967399 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:42:00.969333 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.core__observation (execute): 03:42:00.377339 => 03:42:00.969149
[0m03:42:00.971032 [debug] [Thread-2 (]: On model.the_tuva_project.core__observation: Close
[0m03:42:00.973122 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7db39290>]}
[0m03:42:00.974233 [info ] [Thread-2 (]: 30 of 307 OK created sql table model core.observation .......................... [[32mOK[0m in 0.61s]
[0m03:42:00.984042 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.core__observation
[0m03:42:00.984733 [debug] [Thread-2 (]: Began running node model.the_tuva_project.normalized_input__int_admit_source_voting
[0m03:42:00.985564 [info ] [Thread-2 (]: 32 of 307 START sql table model claims_preprocessing._int_normalized_input_admit_source_voting  [RUN]
[0m03:42:00.986657 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.core__observation, now model.the_tuva_project.normalized_input__int_admit_source_voting)
[0m03:42:00.987432 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.normalized_input__int_admit_source_voting
[0m03:42:00.999920 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_admit_source_voting"
[0m03:42:01.005310 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__int_admit_source_voting (compile): 03:42:00.987832 => 03:42:01.004970
[0m03:42:01.006057 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.normalized_input__int_admit_source_voting
[0m03:42:01.012794 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_admit_source_voting"
[0m03:42:01.015647 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_source_voting"
[0m03:42:01.016671 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_admit_source_voting: BEGIN
[0m03:42:01.017305 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m03:42:01.018051 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:42:01.018566 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_source_voting"
[0m03:42:01.019445 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_admit_source_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_source_voting"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_admit_source_voting__dbt_tmp"
  
    as (
      


with  __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
), normalize as(
    select 
        med.claim_id
        , med.data_source
        , admit.admit_source_code
    from __dbt__cte__normalized_input__stg_medical_claim med
    inner join "synthea"."terminology"."admit_source" admit
        on med.admit_source_code = admit.admit_source_code
    where claim_type = 'institutional'
)
, distinct_counts as(
    select 
        claim_id
        , data_source
        , admit_source_code
        , count(*) as admit_source_occurrence_count
    from normalize
    where admit_source_code is not null
    group by 
        claim_id
        , data_source
        , admit_source_code
)

, occurence_comparison as(
    select
        claim_id
        , data_source
        , 'admit_source_code' as column_name
        , admit_source_code as normalized_code
        , admit_source_occurrence_count as occurrence_count
        , coalesce(lead(admit_source_occurrence_count) 
            over (partition by claim_id, data_source order by admit_source_occurrence_count desc),0) as next_occurrence_count
        , row_number() over (partition by claim_id, data_source order by admit_source_occurrence_count desc) as occurrence_row_count
    from distinct_counts dist
)

select
    claim_id
    , data_source
    , column_name
    , normalized_code
    , occurrence_count
    , next_occurrence_count
    , occurrence_row_count
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from occurence_comparison
    );
  
  
[0m03:42:04.159643 [debug] [Thread-1 (]: SQL status: OK in 3.0 seconds
[0m03:42:04.164363 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__pharmacy_claim"
[0m03:42:04.165272 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__pharmacy_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__pharmacy_claim"} */
alter table "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim" rename to "normalized_input_pharmacy_claim__dbt_backup"
[0m03:42:04.166662 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:42:04.169658 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__pharmacy_claim"
[0m03:42:04.170468 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__pharmacy_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__pharmacy_claim"} */
alter table "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim__dbt_tmp" rename to "normalized_input_pharmacy_claim"
[0m03:42:04.171501 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:42:04.173074 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__pharmacy_claim: COMMIT
[0m03:42:04.174366 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__pharmacy_claim"
[0m03:42:04.176113 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__pharmacy_claim: COMMIT
[0m03:42:04.193873 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:42:04.196923 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__pharmacy_claim"
[0m03:42:04.198771 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__pharmacy_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__pharmacy_claim"} */
drop table if exists "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim__dbt_backup" cascade
[0m03:42:04.202082 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:42:04.203488 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__pharmacy_claim (execute): 03:42:00.805894 => 03:42:04.203310
[0m03:42:04.204146 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__pharmacy_claim: Close
[0m03:42:04.205055 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7fa77590>]}
[0m03:42:04.205762 [info ] [Thread-1 (]: 31 of 307 OK created sql table model claims_preprocessing.normalized_input_pharmacy_claim  [[32mOK[0m in 3.45s]
[0m03:42:04.206437 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.normalized_input__pharmacy_claim
[0m03:42:04.207261 [debug] [Thread-1 (]: Began running node model.the_tuva_project.normalized_input__int_admit_type_voting
[0m03:42:04.208105 [info ] [Thread-1 (]: 33 of 307 START sql table model claims_preprocessing._int_normalized_input_admit_type_normalize_voting  [RUN]
[0m03:42:04.208995 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__pharmacy_claim, now model.the_tuva_project.normalized_input__int_admit_type_voting)
[0m03:42:04.209603 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.normalized_input__int_admit_type_voting
[0m03:42:04.220375 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_admit_type_voting"
[0m03:42:04.225502 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__int_admit_type_voting (compile): 03:42:04.210019 => 03:42:04.225117
[0m03:42:04.226558 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.normalized_input__int_admit_type_voting
[0m03:42:04.231036 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_admit_type_voting"
[0m03:42:04.235302 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_type_voting"
[0m03:42:04.237379 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_type_voting: BEGIN
[0m03:42:04.238918 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m03:42:04.240100 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:42:04.240896 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_type_voting"
[0m03:42:04.241852 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_type_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_type_voting"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_admit_type_normalize_voting__dbt_tmp"
  
    as (
      


with  __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
), normalize as(
    select 
        med.claim_id
        , med.data_source
        , admit.admit_type_code
    from __dbt__cte__normalized_input__stg_medical_claim med
    inner join "synthea"."terminology"."admit_type" admit
        on med.admit_type_code = admit.admit_type_code
    where claim_type = 'institutional'
)
, distinct_counts as(
    select 
        claim_id
        , data_source
        , admit_type_code
        , count(*) as admit_type_occurrence_count
    from normalize
    where admit_type_code is not null
    group by 
        claim_id
        , data_source
        , admit_type_code
)

, occurence_comparison as(
    select
        claim_id
        , data_source
        , 'admit_type_code' as column_name
        , admit_type_code as normalized_code
        , admit_type_occurrence_count as occurrence_count
        , coalesce(lead(admit_type_occurrence_count) 
            over (partition by claim_id, data_source order by admit_type_occurrence_count desc),0) as next_occurrence_count
        , row_number() over (partition by claim_id, data_source order by admit_type_occurrence_count desc) as occurrence_row_count
    from distinct_counts dist
)

select
    claim_id
    , data_source
    , column_name
    , normalized_code
    , occurrence_count
    , next_occurrence_count
    , occurrence_row_count
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from occurence_comparison
    );
  
  
[0m03:42:04.617076 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:42:04.620244 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_type_voting"
[0m03:42:04.620980 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_type_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_type_voting"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_admit_type_normalize_voting" rename to "_int_normalized_input_admit_type_normalize_voting__dbt_backup"
[0m03:42:04.622169 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:42:04.625225 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_type_voting"
[0m03:42:04.626389 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_type_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_type_voting"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_admit_type_normalize_voting__dbt_tmp" rename to "_int_normalized_input_admit_type_normalize_voting"
[0m03:42:04.627195 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:42:04.628691 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_type_voting: COMMIT
[0m03:42:04.629117 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_type_voting"
[0m03:42:04.629982 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_type_voting: COMMIT
[0m03:42:04.632256 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:42:04.635741 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_type_voting"
[0m03:42:04.636487 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_type_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_type_voting"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_admit_type_normalize_voting__dbt_backup" cascade
[0m03:42:04.637835 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:42:04.640160 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__int_admit_type_voting (execute): 03:42:04.227024 => 03:42:04.639705
[0m03:42:04.641558 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_type_voting: Close
[0m03:42:04.642974 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7cf4c4d0>]}
[0m03:42:04.643788 [info ] [Thread-1 (]: 33 of 307 OK created sql table model claims_preprocessing._int_normalized_input_admit_type_normalize_voting  [[32mOK[0m in 0.43s]
[0m03:42:04.644620 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.normalized_input__int_admit_type_voting
[0m03:42:04.645116 [debug] [Thread-1 (]: Began running node model.the_tuva_project.normalized_input__int_apr_drg_voting
[0m03:42:04.646021 [info ] [Thread-1 (]: 34 of 307 START sql table model claims_preprocessing._int_normalized_input_apr_drg_voting  [RUN]
[0m03:42:04.647011 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_admit_type_voting, now model.the_tuva_project.normalized_input__int_apr_drg_voting)
[0m03:42:04.647787 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.normalized_input__int_apr_drg_voting
[0m03:42:04.660802 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_apr_drg_voting"
[0m03:42:04.663714 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__int_apr_drg_voting (compile): 03:42:04.648375 => 03:42:04.663394
[0m03:42:04.664336 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.normalized_input__int_apr_drg_voting
[0m03:42:04.668801 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_apr_drg_voting"
[0m03:42:04.670309 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_apr_drg_voting"
[0m03:42:04.670928 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_apr_drg_voting: BEGIN
[0m03:42:04.671527 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m03:42:04.672403 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:42:04.672881 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_apr_drg_voting"
[0m03:42:04.673612 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_apr_drg_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_apr_drg_voting"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_apr_drg_voting__dbt_tmp"
  
    as (
      

with  __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
), normalize as(
    select 
        med.claim_id
        , med.data_source
        , apr.apr_drg_code
    from __dbt__cte__normalized_input__stg_medical_claim med
    inner join "synthea"."terminology"."apr_drg" apr
        on med.apr_drg_code = apr.apr_drg_code
    where claim_type = 'institutional'
)
, distinct_counts as(
    select 
        claim_id
        , data_source
        , apr_drg_code
        , count(*) as apr_drg_occurrence_count
    from normalize
    where apr_drg_code is not null
    group by 
        claim_id
        , data_source
        , apr_drg_code
)

, occurence_comparison as(
    select
        claim_id
        , data_source
        , 'apr_drg_code' as column_name
        , apr_drg_code as normalized_code
        , apr_drg_occurrence_count as occurrence_count
        , coalesce(lead(apr_drg_occurrence_count) 
            over (partition by claim_id, data_source order by apr_drg_occurrence_count desc),0) as next_occurrence_count
        , row_number() over (partition by claim_id, data_source order by apr_drg_occurrence_count desc) as occurrence_row_count
    from distinct_counts dist
)

select
    claim_id
    , data_source
    , column_name
    , normalized_code
    , occurrence_count
    , next_occurrence_count
    , occurrence_row_count
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from occurence_comparison
    );
  
  
[0m03:42:06.469583 [debug] [Thread-3 (]: SQL status: OK in 6.0 seconds
[0m03:42:06.473321 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.core__medication"
[0m03:42:06.474738 [debug] [Thread-3 (]: On model.the_tuva_project.core__medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__medication"} */
alter table "synthea"."core"."medication" rename to "medication__dbt_backup"
[0m03:42:06.476719 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:42:06.479934 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.core__medication"
[0m03:42:06.481206 [debug] [Thread-3 (]: On model.the_tuva_project.core__medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__medication"} */
alter table "synthea"."core"."medication__dbt_tmp" rename to "medication"
[0m03:42:06.482780 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:42:06.485681 [debug] [Thread-3 (]: On model.the_tuva_project.core__medication: COMMIT
[0m03:42:06.486920 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.core__medication"
[0m03:42:06.489036 [debug] [Thread-3 (]: On model.the_tuva_project.core__medication: COMMIT
[0m03:42:09.155397 [debug] [Thread-3 (]: SQL status: OK in 3.0 seconds
[0m03:42:09.158883 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.core__medication"
[0m03:42:09.159846 [debug] [Thread-3 (]: On model.the_tuva_project.core__medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__medication"} */
drop table if exists "synthea"."core"."medication__dbt_backup" cascade
[0m03:42:09.161926 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:42:09.164032 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.core__medication (execute): 03:42:00.039929 => 03:42:09.163750
[0m03:42:09.165486 [debug] [Thread-3 (]: On model.the_tuva_project.core__medication: Close
[0m03:42:09.168256 [debug] [Thread-3 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8054ea50>]}
[0m03:42:09.169674 [info ] [Thread-3 (]: 29 of 307 OK created sql table model core.medication ........................... [[32mOK[0m in 9.16s]
[0m03:42:09.170923 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.core__medication
[0m03:42:09.172269 [debug] [Thread-3 (]: Began running node model.the_tuva_project.normalized_input__int_bill_type_voting
[0m03:42:09.173150 [info ] [Thread-3 (]: 35 of 307 START sql table model claims_preprocessing._int_normalized_input_bill_type_voting  [RUN]
[0m03:42:09.175458 [debug] [Thread-3 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.core__medication, now model.the_tuva_project.normalized_input__int_bill_type_voting)
[0m03:42:09.176323 [debug] [Thread-3 (]: Began compiling node model.the_tuva_project.normalized_input__int_bill_type_voting
[0m03:42:09.189548 [debug] [Thread-3 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_bill_type_voting"
[0m03:42:09.191605 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.normalized_input__int_bill_type_voting (compile): 03:42:09.176992 => 03:42:09.191294
[0m03:42:09.192540 [debug] [Thread-3 (]: Began executing node model.the_tuva_project.normalized_input__int_bill_type_voting
[0m03:42:09.198332 [debug] [Thread-3 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_bill_type_voting"
[0m03:42:09.203006 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_bill_type_voting"
[0m03:42:09.203907 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_bill_type_voting: BEGIN
[0m03:42:09.205476 [debug] [Thread-3 (]: Opening a new connection, currently in state closed
[0m03:42:09.208745 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:42:09.209654 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_bill_type_voting"
[0m03:42:09.210485 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_bill_type_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_bill_type_voting"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_bill_type_voting__dbt_tmp"
  
    as (
      


with  __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
), normalize as(
    select 
        med.claim_id
        , med.data_source
        , bill.bill_type_code
    from __dbt__cte__normalized_input__stg_medical_claim med
    inner join "synthea"."terminology"."bill_type" bill
        on med.bill_type_code = bill.bill_type_code
    where claim_type = 'institutional'
)
, distinct_counts as(
    select 
        claim_id
        , data_source
        , bill_type_code
        , count(*) as bill_type_occurrence_count
    from normalize
    where bill_type_code is not null
    group by 
        claim_id
        , data_source
        , bill_type_code
)

, occurence_comparison as(
    select
        claim_id
        , data_source
        , 'bill_type_code' as column_name
        , bill_type_code as normalized_code
        , bill_type_occurrence_count as occurrence_count
        , coalesce(lead(bill_type_occurrence_count) 
            over (partition by claim_id, data_source order by bill_type_occurrence_count desc),0) as next_occurrence_count
        , row_number() over (partition by claim_id, data_source order by bill_type_occurrence_count desc) as occurrence_row_count
    from distinct_counts dist
)

select
    claim_id
    , data_source
    , column_name
    , normalized_code
    , occurrence_count
    , next_occurrence_count
    , occurrence_row_count
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from occurence_comparison
    );
  
  
[0m03:43:37.518710 [debug] [Thread-4 (]: SQL status: OK in 98.0 seconds
[0m03:43:49.626069 [debug] [Thread-3 (]: SQL status: OK in 100.0 seconds
[0m03:43:49.631690 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.medical_claim_expanded"
[0m03:43:49.632871 [debug] [Thread-2 (]: SQL status: OK in 109.0 seconds
[0m03:43:56.491382 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_bill_type_voting"
[0m03:43:56.492866 [debug] [Thread-1 (]: SQL status: OK in 112.0 seconds
[0m03:43:56.494971 [debug] [Thread-4 (]: On model.the_tuva_project.medical_claim_expanded: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim_expanded"} */
alter table "synthea"."claims_expanded"."medical_claim_expanded" rename to "medical_claim_expanded__dbt_backup"
[0m03:43:56.502524 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_source_voting"
[0m03:43:56.503188 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_bill_type_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_bill_type_voting"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_bill_type_voting" rename to "_int_normalized_input_bill_type_voting__dbt_backup"
[0m03:43:56.505640 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_apr_drg_voting"
[0m03:43:56.506462 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_admit_source_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_source_voting"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_admit_source_voting" rename to "_int_normalized_input_admit_source_voting__dbt_backup"
[0m03:43:56.507314 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_apr_drg_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_apr_drg_voting"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_apr_drg_voting" rename to "_int_normalized_input_apr_drg_voting__dbt_backup"
[0m03:43:56.507705 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m03:43:56.508017 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:43:56.508703 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:43:56.511085 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.medical_claim_expanded"
[0m03:43:56.511529 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:43:56.513719 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_bill_type_voting"
[0m03:43:56.515994 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_source_voting"
[0m03:43:56.516487 [debug] [Thread-4 (]: On model.the_tuva_project.medical_claim_expanded: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim_expanded"} */
alter table "synthea"."claims_expanded"."medical_claim_expanded__dbt_tmp" rename to "medical_claim_expanded"
[0m03:43:56.518807 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_apr_drg_voting"
[0m03:43:56.519236 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_bill_type_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_bill_type_voting"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_bill_type_voting__dbt_tmp" rename to "_int_normalized_input_bill_type_voting"
[0m03:43:56.519653 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_admit_source_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_source_voting"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_admit_source_voting__dbt_tmp" rename to "_int_normalized_input_admit_source_voting"
[0m03:43:56.520345 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_apr_drg_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_apr_drg_voting"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_apr_drg_voting__dbt_tmp" rename to "_int_normalized_input_apr_drg_voting"
[0m03:43:56.520684 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m03:43:56.521213 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:43:56.521665 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:43:56.522110 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:43:56.524035 [debug] [Thread-4 (]: On model.the_tuva_project.medical_claim_expanded: COMMIT
[0m03:43:56.525512 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_bill_type_voting: COMMIT
[0m03:43:56.527155 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_admit_source_voting: COMMIT
[0m03:43:56.528441 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_apr_drg_voting: COMMIT
[0m03:43:56.528896 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.medical_claim_expanded"
[0m03:43:56.529316 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_bill_type_voting"
[0m03:43:56.529719 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_source_voting"
[0m03:43:56.530154 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_apr_drg_voting"
[0m03:43:56.530537 [debug] [Thread-4 (]: On model.the_tuva_project.medical_claim_expanded: COMMIT
[0m03:43:56.530943 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_bill_type_voting: COMMIT
[0m03:43:56.531336 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_admit_source_voting: COMMIT
[0m03:43:56.531745 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_apr_drg_voting: COMMIT
[0m03:43:56.667943 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m03:43:56.671706 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.medical_claim_expanded"
[0m03:43:56.672144 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:43:56.672709 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:43:56.673422 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:43:56.673855 [debug] [Thread-4 (]: On model.the_tuva_project.medical_claim_expanded: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim_expanded"} */
drop table if exists "synthea"."claims_expanded"."medical_claim_expanded__dbt_backup" cascade
[0m03:43:56.676613 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_bill_type_voting"
[0m03:43:56.678826 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_source_voting"
[0m03:43:56.681079 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_apr_drg_voting"
[0m03:43:56.681845 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_bill_type_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_bill_type_voting"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_bill_type_voting__dbt_backup" cascade
[0m03:43:56.682321 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_admit_source_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_source_voting"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_admit_source_voting__dbt_backup" cascade
[0m03:43:56.682819 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_apr_drg_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_apr_drg_voting"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_apr_drg_voting__dbt_backup" cascade
[0m03:43:57.180778 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m03:43:57.182902 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.medical_claim_expanded (execute): 03:41:58.984806 => 03:43:57.182453
[0m03:43:57.183269 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:43:57.183623 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:43:57.183953 [debug] [Thread-2 (]: SQL status: OK in 1.0 seconds
[0m03:43:57.184346 [debug] [Thread-4 (]: On model.the_tuva_project.medical_claim_expanded: Close
[0m03:43:57.185435 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.normalized_input__int_bill_type_voting (execute): 03:42:09.193466 => 03:43:57.185307
[0m03:43:57.186695 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__int_apr_drg_voting (execute): 03:42:04.664783 => 03:43:57.186535
[0m03:43:57.188032 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__int_admit_source_voting (execute): 03:42:01.006601 => 03:43:57.187882
[0m03:43:57.189635 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff804a7010>]}
[0m03:43:57.190165 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_bill_type_voting: Close
[0m03:43:57.190610 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_apr_drg_voting: Close
[0m03:43:57.191024 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_admit_source_voting: Close
[0m03:43:57.192162 [info ] [Thread-4 (]: 9 of 307 OK created sql table model claims_expanded.medical_claim_expanded ..... [[32mOK[0m in 118.31s]
[0m03:43:57.193101 [debug] [Thread-3 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7da80ed0>]}
[0m03:43:57.193928 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8054f890>]}
[0m03:51:14.563117 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7da57f90>]}
[0m03:51:14.564479 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.medical_claim_expanded
[0m03:51:14.565552 [info ] [Thread-3 (]: 35 of 307 OK created sql table model claims_preprocessing._int_normalized_input_bill_type_voting  [[32mOK[0m in 108.02s]
[0m03:51:14.566758 [info ] [Thread-1 (]: 34 of 307 OK created sql table model claims_preprocessing._int_normalized_input_apr_drg_voting  [[32mOK[0m in 112.55s]
[0m03:51:14.567874 [info ] [Thread-2 (]: 32 of 307 OK created sql table model claims_preprocessing._int_normalized_input_admit_source_voting  [[32mOK[0m in 553.58s]
[0m03:51:14.568688 [debug] [Thread-4 (]: Began running node model.the_tuva_project.normalized_input__int_diagnosis_code_normalize
[0m03:51:14.569909 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.normalized_input__int_bill_type_voting
[0m03:51:14.570717 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.normalized_input__int_apr_drg_voting
[0m03:51:14.571673 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.normalized_input__int_admit_source_voting
[0m03:51:14.572538 [info ] [Thread-4 (]: 36 of 307 START sql table model claims_preprocessing._int_normalized_input_diagnosis_code_normalize  [RUN]
[0m03:51:14.573461 [debug] [Thread-3 (]: Began running node model.the_tuva_project.normalized_input__int_discharge_disposition_voting
[0m03:51:14.574291 [debug] [Thread-1 (]: Began running node model.the_tuva_project.normalized_input__int_medical_claim_date_normalize
[0m03:51:14.575498 [debug] [Thread-2 (]: Began running node model.the_tuva_project.normalized_input__int_medical_npi_normalize
[0m03:51:14.577657 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.medical_claim_expanded, now model.the_tuva_project.normalized_input__int_diagnosis_code_normalize)
[0m03:51:14.578540 [info ] [Thread-3 (]: 37 of 307 START sql table model claims_preprocessing._int_normalized_input_discharge_disposition_voting  [RUN]
[0m03:51:14.579490 [info ] [Thread-1 (]: 38 of 307 START sql table model claims_preprocessing._int_normalized_input_medical_claim_date_normalize  [RUN]
[0m03:51:14.580517 [info ] [Thread-2 (]: 39 of 307 START sql table model claims_preprocessing._int_normalized_input_medical_npi_normalize  [RUN]
[0m03:51:14.581308 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.normalized_input__int_diagnosis_code_normalize
[0m03:51:14.582311 [debug] [Thread-3 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_bill_type_voting, now model.the_tuva_project.normalized_input__int_discharge_disposition_voting)
[0m03:51:14.583353 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_apr_drg_voting, now model.the_tuva_project.normalized_input__int_medical_claim_date_normalize)
[0m03:51:14.584387 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_admit_source_voting, now model.the_tuva_project.normalized_input__int_medical_npi_normalize)
[0m03:51:14.606286 [debug] [Thread-3 (]: Began compiling node model.the_tuva_project.normalized_input__int_discharge_disposition_voting
[0m03:51:14.625832 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_diagnosis_code_normalize"
[0m03:51:14.626375 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.normalized_input__int_medical_claim_date_normalize
[0m03:51:14.627162 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.normalized_input__int_medical_npi_normalize
[0m03:51:14.637616 [debug] [Thread-3 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_discharge_disposition_voting"
[0m03:51:14.646928 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize"
[0m03:51:14.654368 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_medical_npi_normalize"
[0m03:51:14.654900 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.normalized_input__int_diagnosis_code_normalize (compile): 03:51:14.585071 => 03:51:14.654678
[0m03:51:14.657293 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.normalized_input__int_discharge_disposition_voting (compile): 03:51:14.627648 => 03:51:14.657040
[0m03:51:14.657713 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.normalized_input__int_diagnosis_code_normalize
[0m03:51:14.658544 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__int_medical_claim_date_normalize (compile): 03:51:14.638476 => 03:51:14.658284
[0m03:51:14.658948 [debug] [Thread-3 (]: Began executing node model.the_tuva_project.normalized_input__int_discharge_disposition_voting
[0m03:51:14.659394 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__int_medical_npi_normalize (compile): 03:51:14.647611 => 03:51:14.659213
[0m03:51:14.663957 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_diagnosis_code_normalize"
[0m03:51:14.664798 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.normalized_input__int_medical_claim_date_normalize
[0m03:51:14.670562 [debug] [Thread-3 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_discharge_disposition_voting"
[0m03:51:14.671355 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.normalized_input__int_medical_npi_normalize
[0m03:51:14.676218 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize"
[0m03:51:14.677091 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_diagnosis_code_normalize"
[0m03:51:14.681252 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_medical_npi_normalize"
[0m03:51:14.682388 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_discharge_disposition_voting"
[0m03:51:14.683097 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_diagnosis_code_normalize: BEGIN
[0m03:51:14.683728 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize"
[0m03:51:14.684488 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_voting: BEGIN
[0m03:51:14.685140 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m03:51:14.685772 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_npi_normalize"
[0m03:51:14.686172 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_medical_claim_date_normalize: BEGIN
[0m03:51:14.686726 [debug] [Thread-3 (]: Opening a new connection, currently in state closed
[0m03:51:14.797852 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m03:51:14.798299 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_medical_npi_normalize: BEGIN
[0m03:51:14.798918 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m03:51:14.799671 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:51:14.800018 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_diagnosis_code_normalize"
[0m03:51:14.800494 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m03:51:14.801182 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:51:14.801532 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_discharge_disposition_voting"
[0m03:51:14.802298 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_diagnosis_code_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_diagnosis_code_normalize"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_diagnosis_code_normalize__dbt_tmp"
  
    as (
      


with  __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
), pivot_diagnosis as(
    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_1'  as diagnosis_column
        ,  diagnosis_code_1  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_2'  as diagnosis_column
        ,  diagnosis_code_2  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_3'  as diagnosis_column
        ,  diagnosis_code_3  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_4'  as diagnosis_column
        ,  diagnosis_code_4  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_5'  as diagnosis_column
        ,  diagnosis_code_5  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_6'  as diagnosis_column
        ,  diagnosis_code_6  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_7'  as diagnosis_column
        ,  diagnosis_code_7  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_8'  as diagnosis_column
        ,  diagnosis_code_8  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_9'  as diagnosis_column
        ,  diagnosis_code_9  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_10'  as diagnosis_column
        ,  diagnosis_code_10  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_11'  as diagnosis_column
        ,  diagnosis_code_11  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_12'  as diagnosis_column
        ,  diagnosis_code_12  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_13'  as diagnosis_column
        ,  diagnosis_code_13  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_14'  as diagnosis_column
        ,  diagnosis_code_14  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_15'  as diagnosis_column
        ,  diagnosis_code_15  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_16'  as diagnosis_column
        ,  diagnosis_code_16  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_17'  as diagnosis_column
        ,  diagnosis_code_17  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_18'  as diagnosis_column
        ,  diagnosis_code_18  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_19'  as diagnosis_column
        ,  diagnosis_code_19  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_20'  as diagnosis_column
        ,  diagnosis_code_20  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_21'  as diagnosis_column
        ,  diagnosis_code_21  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_22'  as diagnosis_column
        ,  diagnosis_code_22  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_23'  as diagnosis_column
        ,  diagnosis_code_24  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_24'  as diagnosis_column
        ,  diagnosis_code_24  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_25'  as diagnosis_column
        ,  diagnosis_code_25  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim
)

select
    claim_id
    , data_source
    , diagnosis_code_type
    , diagnosis_column
    , coalesce(icd_9.icd_9_cm,icd_10.icd_10_cm) as normalized_diagnosis_code
    , count(*) as diagnosis_code_occurrence_count
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from pivot_diagnosis piv
left join "synthea"."terminology"."icd_10_cm" icd_10
    on replace(piv.diagnosis_code,'.','') = icd_10.icd_10_cm
    and piv.diagnosis_code_type = 'icd-10-cm'
left join "synthea"."terminology"."icd_9_cm" icd_9
    on replace(piv.diagnosis_code,'.','') = icd_9.icd_9_cm
    and piv.diagnosis_code_type = 'icd-9-cm'
where claim_type <> 'undetermined'
group by 
    claim_id
    , data_source
    , diagnosis_code_type
    , diagnosis_column
    , coalesce(icd_9.icd_9_cm,icd_10.icd_10_cm)
    );
  
  
[0m03:51:14.803241 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:51:14.803567 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize"
[0m03:51:14.804141 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_discharge_disposition_voting"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_discharge_disposition_voting__dbt_tmp"
  
    as (
      


with  __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
), normalize as(
    select 
        med.claim_id
        , med.data_source
        , disch.discharge_disposition_code
    from __dbt__cte__normalized_input__stg_medical_claim med
    inner join "synthea"."terminology"."discharge_disposition" disch
        on med.discharge_disposition_code = disch.discharge_disposition_code
    where claim_type = 'institutional'
)
, distinct_counts as(
    select 
        claim_id
        , data_source
        , discharge_disposition_code
        , count(*) as discharge_disposition_occurrence_count
    from normalize
    where discharge_disposition_code is not null
    group by 
        claim_id
        , data_source
        , discharge_disposition_code
)

, occurence_comparison as(
    select
        claim_id
        , data_source
        , 'discharge_disposition_code' as column_name
        , discharge_disposition_code as normalized_code
        , discharge_disposition_occurrence_count as occurrence_count
        , coalesce(lead(discharge_disposition_occurrence_count) 
            over (partition by claim_id, data_source order by discharge_disposition_occurrence_count desc),0) as next_occurrence_count
        , row_number() over (partition by claim_id, data_source order by discharge_disposition_occurrence_count desc) as occurrence_row_count
    from distinct_counts dist
)

select
    claim_id
    , data_source
    , column_name
    , normalized_code
    , occurrence_count
    , next_occurrence_count
    , occurrence_row_count
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from occurence_comparison
    );
  
  
[0m03:51:14.805001 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_npi_normalize"
[0m03:51:14.805536 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_medical_claim_date_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_medical_claim_date_normalize__dbt_tmp"
  
    as (
      


with __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
) select distinct
  med.claim_id
  , med.claim_line_number
  , med.claim_type
  , med.data_source
  , cal_claim_start.full_date as normalized_claim_start_date
  , cal_claim_end.full_date as normalized_claim_end_date
  , cal_claim_line_start.full_date as normalized_claim_line_start_date
  , cal_claim_line_end.full_date as normalized_claim_line_end_date
  , cal_admission.full_date as normalized_admission_date
  , cal_discharge.full_date as normalized_discharge_date
  , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from __dbt__cte__normalized_input__stg_medical_claim med
left join "synthea"."terminology"."calendar" cal_claim_start
    on med.claim_start_date = cal_claim_start.full_date
left join "synthea"."terminology"."calendar" cal_claim_end
    on med.claim_end_Date = cal_claim_end.full_date
left join "synthea"."terminology"."calendar" cal_claim_line_start
    on med.claim_line_start_date = cal_claim_line_start.full_date
left join "synthea"."terminology"."calendar" cal_claim_line_end
    on med.claim_line_end_date = cal_claim_line_end.full_date
left join "synthea"."terminology"."calendar" cal_admission
    on med.admission_date = cal_admission.full_date
left join "synthea"."terminology"."calendar" cal_discharge
    on med.discharge_date = cal_discharge.full_date
    );
  
  
[0m03:51:14.806826 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_medical_npi_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_medical_npi_normalize"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_medical_npi_normalize__dbt_tmp"
  
    as (
      


with __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
) select distinct
  med.claim_id
  , med.claim_line_number
  , med.claim_type
  , med.data_source
  , rend_prov.npi as normalized_rendering_npi
  , bill_prov.npi as normalized_billing_npi
  , fac_prov.npi as normalized_facility_npi
  , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from __dbt__cte__normalized_input__stg_medical_claim med
left join "synthea"."terminology"."provider" rend_prov
    on med.rendering_npi = rend_prov.npi
    and rend_prov.entity_type_description = 'Individual'
left join "synthea"."terminology"."provider" bill_prov
    on med.billing_npi = bill_prov.npi
left join "synthea"."terminology"."provider" fac_prov
    on med.facility_npi = fac_prov.npi
    and fac_prov.entity_type_description = 'Organization'
    and med.claim_type = 'institutional'
    );
  
  
[0m03:52:16.036217 [debug] [Thread-2 (]: SQL status: OK in 61.0 seconds
[0m03:52:29.168601 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_npi_normalize"
[0m03:52:29.170705 [debug] [Thread-3 (]: SQL status: OK in 74.0 seconds
[0m03:52:29.174301 [debug] [Thread-1 (]: SQL status: OK in 74.0 seconds
[0m03:52:29.175792 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_medical_npi_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_medical_npi_normalize"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_medical_npi_normalize" rename to "_int_normalized_input_medical_npi_normalize__dbt_backup"
[0m03:52:29.181034 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_discharge_disposition_voting"
[0m03:52:29.184202 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize"
[0m03:52:29.185204 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_discharge_disposition_voting"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_discharge_disposition_voting" rename to "_int_normalized_input_discharge_disposition_voting__dbt_backup"
[0m03:52:29.185838 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_medical_claim_date_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_medical_claim_date_normalize" rename to "_int_normalized_input_medical_claim_date_normalize__dbt_backup"
[0m03:52:29.186345 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:52:29.190397 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_npi_normalize"
[0m03:52:29.191006 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:52:29.191405 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_medical_npi_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_medical_npi_normalize"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_medical_npi_normalize__dbt_tmp" rename to "_int_normalized_input_medical_npi_normalize"
[0m03:52:29.191747 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:52:29.194920 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_discharge_disposition_voting"
[0m03:52:29.195919 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:52:29.198812 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize"
[0m03:52:29.199505 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_discharge_disposition_voting"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_discharge_disposition_voting__dbt_tmp" rename to "_int_normalized_input_discharge_disposition_voting"
[0m03:52:29.202797 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_medical_npi_normalize: COMMIT
[0m03:52:29.203445 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_medical_claim_date_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_medical_claim_date_normalize__dbt_tmp" rename to "_int_normalized_input_medical_claim_date_normalize"
[0m03:52:29.204275 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:52:29.204625 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_npi_normalize"
[0m03:52:29.205339 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:52:29.206913 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_voting: COMMIT
[0m03:52:29.207497 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_medical_npi_normalize: COMMIT
[0m03:52:29.210197 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_medical_claim_date_normalize: COMMIT
[0m03:52:29.210762 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_discharge_disposition_voting"
[0m03:52:29.211662 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize"
[0m03:52:29.212287 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_voting: COMMIT
[0m03:52:29.212839 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_medical_claim_date_normalize: COMMIT
[0m03:52:29.218197 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:52:29.222844 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_npi_normalize"
[0m03:52:29.223325 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:52:29.223807 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_medical_npi_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_medical_npi_normalize"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_medical_npi_normalize__dbt_backup" cascade
[0m03:52:29.226102 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_discharge_disposition_voting"
[0m03:52:29.226540 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:52:29.227123 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_discharge_disposition_voting"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_discharge_disposition_voting__dbt_backup" cascade
[0m03:52:29.229409 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize"
[0m03:52:29.229768 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:52:29.230478 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_medical_claim_date_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_medical_claim_date_normalize__dbt_backup" cascade
[0m03:52:29.230854 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:52:29.232774 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__int_medical_npi_normalize (execute): 03:51:14.677750 => 03:52:29.232201
[0m03:52:29.234488 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.normalized_input__int_discharge_disposition_voting (execute): 03:51:14.665642 => 03:52:29.234296
[0m03:52:29.234891 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:52:29.235301 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_medical_npi_normalize: Close
[0m03:52:29.235795 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_voting: Close
[0m03:52:29.237141 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__int_medical_claim_date_normalize (execute): 03:51:14.672647 => 03:52:29.236984
[0m03:52:29.238865 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7ff56050>]}
[0m03:52:29.239743 [debug] [Thread-3 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7cf6c810>]}
[0m03:52:29.240241 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_medical_claim_date_normalize: Close
[0m03:52:29.241590 [info ] [Thread-2 (]: 39 of 307 OK created sql table model claims_preprocessing._int_normalized_input_medical_npi_normalize  [[32mOK[0m in 74.65s]
[0m03:52:29.242353 [info ] [Thread-3 (]: 37 of 307 OK created sql table model claims_preprocessing._int_normalized_input_discharge_disposition_voting  [[32mOK[0m in 74.66s]
[0m03:52:29.243312 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7feed410>]}
[0m03:52:29.244033 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.normalized_input__int_medical_npi_normalize
[0m03:52:29.244571 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.normalized_input__int_discharge_disposition_voting
[0m03:52:29.245094 [info ] [Thread-1 (]: 38 of 307 OK created sql table model claims_preprocessing._int_normalized_input_medical_claim_date_normalize  [[32mOK[0m in 74.66s]
[0m03:52:29.245778 [debug] [Thread-2 (]: Began running node model.the_tuva_project.normalized_input__int_ms_drg_voting
[0m03:52:29.246736 [debug] [Thread-3 (]: Began running node model.the_tuva_project.normalized_input__int_place_of_service_normalize
[0m03:52:29.247575 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.normalized_input__int_medical_claim_date_normalize
[0m03:52:29.248200 [info ] [Thread-2 (]: 40 of 307 START sql table model claims_preprocessing._int_normalized_input_ms_drg_voting  [RUN]
[0m03:52:29.248753 [info ] [Thread-3 (]: 41 of 307 START sql table model claims_preprocessing._int_normalized_input_place_of_service_normalize  [RUN]
[0m03:52:29.249536 [debug] [Thread-1 (]: Began running node model.the_tuva_project.normalized_input__int_present_on_admit_normalize
[0m03:52:29.250339 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_medical_npi_normalize, now model.the_tuva_project.normalized_input__int_ms_drg_voting)
[0m03:52:29.250996 [debug] [Thread-3 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_discharge_disposition_voting, now model.the_tuva_project.normalized_input__int_place_of_service_normalize)
[0m03:52:29.251459 [info ] [Thread-1 (]: 42 of 307 START sql table model claims_preprocessing._int_normalized_input_present_on_admit_normalize  [RUN]
[0m03:52:29.251917 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.normalized_input__int_ms_drg_voting
[0m03:52:29.252377 [debug] [Thread-3 (]: Began compiling node model.the_tuva_project.normalized_input__int_place_of_service_normalize
[0m03:52:29.253033 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_medical_claim_date_normalize, now model.the_tuva_project.normalized_input__int_present_on_admit_normalize)
[0m03:52:29.271180 [debug] [Thread-3 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_place_of_service_normalize"
[0m03:52:29.273337 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_ms_drg_voting"
[0m03:52:29.273833 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.normalized_input__int_present_on_admit_normalize
[0m03:52:29.303090 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.normalized_input__int_place_of_service_normalize (compile): 03:52:29.265341 => 03:52:29.302743
[0m03:52:29.307580 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_present_on_admit_normalize"
[0m03:52:29.308055 [debug] [Thread-3 (]: Began executing node model.the_tuva_project.normalized_input__int_place_of_service_normalize
[0m03:52:29.308674 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__int_ms_drg_voting (compile): 03:52:29.253376 => 03:52:29.308334
[0m03:52:29.316565 [debug] [Thread-3 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_place_of_service_normalize"
[0m03:52:29.317367 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.normalized_input__int_ms_drg_voting
[0m03:52:29.317983 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__int_present_on_admit_normalize (compile): 03:52:29.275066 => 03:52:29.317768
[0m03:52:29.322177 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_ms_drg_voting"
[0m03:52:29.322922 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.normalized_input__int_present_on_admit_normalize
[0m03:52:29.323795 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_place_of_service_normalize"
[0m03:52:29.328076 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_present_on_admit_normalize"
[0m03:52:29.328745 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_place_of_service_normalize: BEGIN
[0m03:52:29.329128 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_ms_drg_voting"
[0m03:52:29.329688 [debug] [Thread-3 (]: Opening a new connection, currently in state closed
[0m03:52:29.330186 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_ms_drg_voting: BEGIN
[0m03:52:29.330661 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_present_on_admit_normalize"
[0m03:52:29.331292 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:52:29.331585 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m03:52:29.332037 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_present_on_admit_normalize: BEGIN
[0m03:52:29.332455 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_place_of_service_normalize"
[0m03:52:29.333007 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:52:29.333348 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m03:52:29.333882 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_place_of_service_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_place_of_service_normalize"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_place_of_service_normalize__dbt_tmp"
  
    as (
      


with __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
) select
    claim_id
    , claim_line_number
    , data_source
    , pos.place_of_service_code as normalized_code
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from __dbt__cte__normalized_input__stg_medical_claim med
left join "synthea"."terminology"."place_of_service" pos
    on lpad(med.place_of_service_code, 2, '0') = pos.place_of_service_code
where claim_type = 'professional'
    );
  
  
[0m03:52:29.334446 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_ms_drg_voting"
[0m03:52:29.335328 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m03:52:29.336061 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_ms_drg_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_ms_drg_voting"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_ms_drg_voting__dbt_tmp"
  
    as (
      


with  __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
), normalize as(
    select 
        med.claim_id
        , med.data_source
        , ms.ms_drg_code
    from __dbt__cte__normalized_input__stg_medical_claim med
    inner join "synthea"."terminology"."ms_drg" ms
        on med.ms_drg_code = ms.ms_drg_code
    where claim_type = 'institutional'
)
, distinct_counts as(
    select 
        claim_id
        , data_source
        , ms_drg_code
        , count(*) as ms_drg_occurrence_count
    from normalize
    where ms_drg_code is not null
    group by 
        claim_id
        , data_source
        , ms_drg_code
)

, occurence_comparison as(
    select
        claim_id
        , data_source
        , 'ms_drg_code' as column_name
        , ms_drg_code as normalized_code
        , ms_drg_occurrence_count as occurrence_count
        , coalesce(lead(ms_drg_occurrence_count) 
            over (partition by claim_id, data_source order by ms_drg_occurrence_count desc),0) as next_occurrence_count
        , row_number() over (partition by claim_id, data_source order by ms_drg_occurrence_count desc) as occurrence_row_count
    from distinct_counts dist
)

select
    claim_id
    , data_source
    , column_name
    , normalized_code
    , occurrence_count
    , next_occurrence_count
    , occurrence_row_count
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from occurence_comparison
    );
  
  
[0m03:52:29.336742 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_present_on_admit_normalize"
[0m03:52:29.337868 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_present_on_admit_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_present_on_admit_normalize"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_present_on_admit_normalize__dbt_tmp"
  
    as (
      


with  __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
), pivot_poa as(
    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_1'  as diagnosis_column
        ,  diagnosis_poa_1  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_2'  as diagnosis_column
        ,  diagnosis_poa_2  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_3'  as diagnosis_column
        ,  diagnosis_poa_3  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_4'  as diagnosis_column
        ,  diagnosis_poa_4  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_5'  as diagnosis_column
        ,  diagnosis_poa_5  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_6'  as diagnosis_column
        ,  diagnosis_poa_6  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_7'  as diagnosis_column
        ,  diagnosis_poa_7  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_8'  as diagnosis_column
        ,  diagnosis_poa_8  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_9'  as diagnosis_column
        ,  diagnosis_poa_9  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_10'  as diagnosis_column
        ,  diagnosis_poa_10  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_11'  as diagnosis_column
        ,  diagnosis_poa_11  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_12'  as diagnosis_column
        ,  diagnosis_poa_12  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_13'  as diagnosis_column
        ,  diagnosis_poa_13  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_14'  as diagnosis_column
        ,  diagnosis_poa_14  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_15'  as diagnosis_column
        ,  diagnosis_poa_15  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_16'  as diagnosis_column
        ,  diagnosis_poa_16  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_17'  as diagnosis_column
        ,  diagnosis_poa_17  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_18'  as diagnosis_column
        ,  diagnosis_poa_18  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_19'  as diagnosis_column
        ,  diagnosis_poa_19  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_20'  as diagnosis_column
        ,  diagnosis_poa_20  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_21'  as diagnosis_column
        ,  diagnosis_poa_21  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_22'  as diagnosis_column
        ,  diagnosis_poa_22  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_23'  as diagnosis_column
        ,  diagnosis_poa_24  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_24'  as diagnosis_column
        ,  diagnosis_poa_24  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_25'  as diagnosis_column
        ,  diagnosis_poa_25  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim
)

select
    claim_id
    , data_source
    , diagnosis_column
    , poa.present_on_admit_code as normalized_present_on_admit_code
    , count(*) as present_on_admit_occurrence_count
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from pivot_poa piv
left join "synthea"."terminology"."present_on_admission" poa
    on replace(piv.present_on_admit_code,'.','') = poa.present_on_admit_code
where claim_type = 'institutional'
group by 
    claim_id
    , data_source
    , diagnosis_column
    , poa.present_on_admit_code
    );
  
  
[0m03:52:54.088505 [debug] [Thread-2 (]: SQL status: OK in 25.0 seconds
[0m03:52:59.825771 [debug] [Thread-3 (]: SQL status: OK in 30.0 seconds
[0m03:52:59.831489 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_ms_drg_voting"
[0m03:52:59.834814 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_place_of_service_normalize"
[0m03:52:59.835454 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_ms_drg_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_ms_drg_voting"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_ms_drg_voting" rename to "_int_normalized_input_ms_drg_voting__dbt_backup"
[0m03:52:59.836001 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_place_of_service_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_place_of_service_normalize"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_place_of_service_normalize" rename to "_int_normalized_input_place_of_service_normalize__dbt_backup"
[0m03:52:59.837341 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:52:59.840381 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_ms_drg_voting"
[0m03:52:59.840850 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:52:59.841400 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_ms_drg_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_ms_drg_voting"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_ms_drg_voting__dbt_tmp" rename to "_int_normalized_input_ms_drg_voting"
[0m03:52:59.845323 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_place_of_service_normalize"
[0m03:52:59.846186 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:52:59.846560 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_place_of_service_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_place_of_service_normalize"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_place_of_service_normalize__dbt_tmp" rename to "_int_normalized_input_place_of_service_normalize"
[0m03:52:59.849344 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_ms_drg_voting: COMMIT
[0m03:52:59.850247 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:52:59.850596 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_ms_drg_voting"
[0m03:52:59.853471 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_place_of_service_normalize: COMMIT
[0m03:52:59.854110 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_ms_drg_voting: COMMIT
[0m03:52:59.854584 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_place_of_service_normalize"
[0m03:52:59.855353 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_place_of_service_normalize: COMMIT
[0m03:52:59.857526 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:52:59.860286 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_ms_drg_voting"
[0m03:52:59.860790 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_ms_drg_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_ms_drg_voting"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_ms_drg_voting__dbt_backup" cascade
[0m03:52:59.864452 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:52:59.867074 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_place_of_service_normalize"
[0m03:52:59.867471 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:52:59.868091 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_place_of_service_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_place_of_service_normalize"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_place_of_service_normalize__dbt_backup" cascade
[0m03:52:59.871039 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__int_ms_drg_voting (execute): 03:52:29.318419 => 03:52:59.870629
[0m03:52:59.872034 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_ms_drg_voting: Close
[0m03:52:59.872436 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:52:59.873863 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff80105110>]}
[0m03:52:59.875741 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.normalized_input__int_place_of_service_normalize (execute): 03:52:29.309782 => 03:52:59.875573
[0m03:52:59.876743 [info ] [Thread-2 (]: 40 of 307 OK created sql table model claims_preprocessing._int_normalized_input_ms_drg_voting  [[32mOK[0m in 30.62s]
[0m03:52:59.877594 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_place_of_service_normalize: Close
[0m03:52:59.878469 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.normalized_input__int_ms_drg_voting
[0m03:52:59.879831 [debug] [Thread-3 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7da6c410>]}
[0m03:52:59.880604 [debug] [Thread-2 (]: Began running node model.the_tuva_project.normalized_input__int_procedure_code_normalize
[0m03:52:59.881493 [info ] [Thread-3 (]: 41 of 307 OK created sql table model claims_preprocessing._int_normalized_input_place_of_service_normalize  [[32mOK[0m in 30.63s]
[0m03:52:59.882326 [info ] [Thread-2 (]: 43 of 307 START sql table model claims_preprocessing._int_normalized_input_procedure_code_normalize  [RUN]
[0m03:52:59.883072 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.normalized_input__int_place_of_service_normalize
[0m03:52:59.883911 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_ms_drg_voting, now model.the_tuva_project.normalized_input__int_procedure_code_normalize)
[0m03:52:59.884687 [debug] [Thread-3 (]: Began running node model.the_tuva_project.normalized_input__int_procedure_date_normalize
[0m03:52:59.885274 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.normalized_input__int_procedure_code_normalize
[0m03:52:59.885928 [info ] [Thread-3 (]: 44 of 307 START sql table model claims_preprocessing._int_normalized_input_procedure_date_normalize  [RUN]
[0m03:52:59.900409 [debug] [Thread-3 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_place_of_service_normalize, now model.the_tuva_project.normalized_input__int_procedure_date_normalize)
[0m03:52:59.906403 [debug] [Thread-3 (]: Began compiling node model.the_tuva_project.normalized_input__int_procedure_date_normalize
[0m03:52:59.947278 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_procedure_code_normalize"
[0m03:52:59.959897 [debug] [Thread-3 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_procedure_date_normalize"
[0m03:52:59.962911 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__int_procedure_code_normalize (compile): 03:52:59.886477 => 03:52:59.962602
[0m03:52:59.963551 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.normalized_input__int_procedure_date_normalize (compile): 03:52:59.912293 => 03:52:59.963365
[0m03:52:59.963920 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.normalized_input__int_procedure_code_normalize
[0m03:52:59.964527 [debug] [Thread-3 (]: Began executing node model.the_tuva_project.normalized_input__int_procedure_date_normalize
[0m03:52:59.970147 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_procedure_code_normalize"
[0m03:52:59.975563 [debug] [Thread-3 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_procedure_date_normalize"
[0m03:52:59.978288 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_procedure_date_normalize"
[0m03:52:59.978974 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_procedure_code_normalize"
[0m03:52:59.979333 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_procedure_date_normalize: BEGIN
[0m03:52:59.979876 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_procedure_code_normalize: BEGIN
[0m03:52:59.980392 [debug] [Thread-3 (]: Opening a new connection, currently in state closed
[0m03:52:59.980843 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m03:52:59.981720 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m03:52:59.982086 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m03:52:59.982394 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_procedure_date_normalize"
[0m03:52:59.982846 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_procedure_code_normalize"
[0m03:52:59.983495 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_procedure_date_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_procedure_date_normalize"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_procedure_date_normalize__dbt_tmp"
  
    as (
      


with  __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
), pivot_procedure as(
    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_1'  as procedure_column
        ,  procedure_date_1  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_2'  as procedure_column
        ,  procedure_date_2  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_3'  as procedure_column
        ,  procedure_date_3  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_4'  as procedure_column
        ,  procedure_date_4  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_5'  as procedure_column
        ,  procedure_date_5  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_6'  as procedure_column
        ,  procedure_date_6  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_7'  as procedure_column
        ,  procedure_date_7  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_8'  as procedure_column
        ,  procedure_date_8  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_9'  as procedure_column
        ,  procedure_date_9  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_10'  as procedure_column
        ,  procedure_date_10  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_11'  as procedure_column
        ,  procedure_date_11  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_12'  as procedure_column
        ,  procedure_date_12  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_13'  as procedure_column
        ,  procedure_date_13  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_14'  as procedure_column
        ,  procedure_date_14  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_15'  as procedure_column
        ,  procedure_date_15  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_16'  as procedure_column
        ,  procedure_date_16  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_17'  as procedure_column
        ,  procedure_date_17  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_18'  as procedure_column
        ,  procedure_date_18  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_19'  as procedure_column
        ,  procedure_date_19  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_20'  as procedure_column
        ,  procedure_date_20  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_21'  as procedure_column
        ,  procedure_date_21  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_22'  as procedure_column
        ,  procedure_date_22  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_23'  as procedure_column
        ,  procedure_date_24  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_24'  as procedure_column
        ,  procedure_date_24  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_25'  as procedure_column
        ,  procedure_date_25  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim
)

select
    claim_id
    , data_source
    , procedure_column
    , cal.full_date as procedure_date
    , count(*) as procedure_date_occurrence_count
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from pivot_procedure piv
left join "synthea"."terminology"."calendar" cal
    on piv.procedure_date = cal.full_date
where claim_type = 'institutional'
group by 
    claim_id
    , data_source
    , procedure_column
    , cal.full_date
    );
  
  
[0m03:52:59.984512 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_procedure_code_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_procedure_code_normalize"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_procedure_code_normalize__dbt_tmp"
  
    as (
      


with  __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
), pivot_procedure as(
    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_1'  as procedure_column
        ,  procedure_code_1  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_2'  as procedure_column
        ,  procedure_code_2  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_3'  as procedure_column
        ,  procedure_code_3  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_4'  as procedure_column
        ,  procedure_code_4  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_5'  as procedure_column
        ,  procedure_code_5  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_6'  as procedure_column
        ,  procedure_code_6  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_7'  as procedure_column
        ,  procedure_code_7  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_8'  as procedure_column
        ,  procedure_code_8  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_9'  as procedure_column
        ,  procedure_code_9  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_10'  as procedure_column
        ,  procedure_code_10  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_11'  as procedure_column
        ,  procedure_code_11  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_12'  as procedure_column
        ,  procedure_code_12  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_13'  as procedure_column
        ,  procedure_code_13  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_14'  as procedure_column
        ,  procedure_code_14  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_15'  as procedure_column
        ,  procedure_code_15  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_16'  as procedure_column
        ,  procedure_code_16  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_17'  as procedure_column
        ,  procedure_code_17  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_18'  as procedure_column
        ,  procedure_code_18  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_19'  as procedure_column
        ,  procedure_code_19  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_20'  as procedure_column
        ,  procedure_code_20  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_21'  as procedure_column
        ,  procedure_code_21  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_22'  as procedure_column
        ,  procedure_code_22  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_23'  as procedure_column
        ,  procedure_code_24  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_24'  as procedure_column
        ,  procedure_code_24  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_25'  as procedure_column
        ,  procedure_code_25  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim
)

select
    claim_id
    , data_source
    , procedure_code_type
    , procedure_column
    , coalesce(icd_9.icd_9_pcs,icd_10.icd_10_pcs) as normalized_procedure_code
    , count(*) as procedure_code_occurrence_count
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from pivot_procedure piv
left join "synthea"."terminology"."icd_10_pcs" icd_10
    on replace(piv.procedure_code,'.','') = icd_10.icd_10_pcs
    and piv.procedure_code_type = 'icd-10-pcs'
left join "synthea"."terminology"."icd_9_pcs" icd_9
    on replace(piv.procedure_code,'.','') = icd_9.icd_9_pcs
    and piv.procedure_code_type = 'icd-9-pcs'
where claim_type = 'institutional'
group by 
    claim_id
    , data_source
    , procedure_code_type
    , procedure_column
    , coalesce(icd_9.icd_9_pcs,icd_10.icd_10_pcs)
    );
  
  
[0m04:25:09.727024 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__int_procedure_code_normalize (execute): 03:52:59.964946 => 04:25:09.693026
[0m04:25:09.740306 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.normalized_input__int_diagnosis_code_normalize (execute): 03:51:14.659587 => 04:25:09.621021
[0m04:25:09.724622 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.normalized_input__int_procedure_date_normalize (execute): 03:52:59.970874 => 04:25:09.610406
[0m04:25:09.735936 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__int_present_on_admit_normalize (execute): 03:52:29.324012 => 04:25:09.614985
[0m04:25:09.771269 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_procedure_code_normalize: ROLLBACK
[0m04:25:09.774879 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_diagnosis_code_normalize: ROLLBACK
[0m04:25:09.776732 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_procedure_date_normalize: ROLLBACK
[0m04:25:09.778611 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_present_on_admit_normalize: ROLLBACK
[0m04:25:09.855777 [debug] [Thread-3 (]: Failed to rollback 'model.the_tuva_project.normalized_input__int_procedure_date_normalize'
[0m04:25:09.859258 [debug] [Thread-1 (]: Failed to rollback 'model.the_tuva_project.normalized_input__int_present_on_admit_normalize'
[0m04:25:09.860952 [debug] [Thread-2 (]: Failed to rollback 'model.the_tuva_project.normalized_input__int_procedure_code_normalize'
[0m04:25:09.862575 [debug] [Thread-4 (]: Failed to rollback 'model.the_tuva_project.normalized_input__int_diagnosis_code_normalize'
[0m04:25:09.864173 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_procedure_date_normalize: Close
[0m04:25:09.865302 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_present_on_admit_normalize: Close
[0m04:25:09.865836 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_procedure_code_normalize: Close
[0m04:25:09.866340 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_diagnosis_code_normalize: Close
[0m04:25:09.921999 [debug] [Thread-3 (]: Runtime Error in model normalized_input__int_procedure_date_normalize (models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_procedure_date_normalize.sql)
  Out of Memory Error: could not allocate block of size 262KB (53.8GB/53.8GB used)
[0m04:25:11.017314 [debug] [Thread-2 (]: Runtime Error in model normalized_input__int_procedure_code_normalize (models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_procedure_code_normalize.sql)
  Out of Memory Error: failed to pin block of size 262KB (53.8GB/53.8GB used)
[0m04:25:11.019046 [debug] [Thread-4 (]: Runtime Error in model normalized_input__int_diagnosis_code_normalize (models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_diagnosis_code_normalize.sql)
  Out of Memory Error: failed to pin block of size 262KB (53.8GB/53.8GB used)
[0m04:25:11.020788 [debug] [Thread-1 (]: Runtime Error in model normalized_input__int_present_on_admit_normalize (models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_present_on_admit_normalize.sql)
  Out of Memory Error: could not allocate block of size 262KB (53.8GB/53.8GB used)
[0m04:25:11.044846 [debug] [Thread-3 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7f7a8310>]}
[0m04:25:11.046202 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff801448d0>]}
[0m04:25:11.049054 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7f7a9b50>]}
[0m04:25:11.051881 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7fa50890>]}
[0m04:25:11.073586 [error] [Thread-3 (]: 44 of 307 ERROR creating sql table model claims_preprocessing._int_normalized_input_procedure_date_normalize  [[31mERROR[0m in 1931.13s]
[0m04:25:11.076131 [error] [Thread-2 (]: 43 of 307 ERROR creating sql table model claims_preprocessing._int_normalized_input_procedure_code_normalize  [[31mERROR[0m in 1931.16s]
[0m04:25:11.076723 [error] [Thread-4 (]: 36 of 307 ERROR creating sql table model claims_preprocessing._int_normalized_input_diagnosis_code_normalize  [[31mERROR[0m in 2036.47s]
[0m04:25:11.077561 [error] [Thread-1 (]: 42 of 307 ERROR creating sql table model claims_preprocessing._int_normalized_input_present_on_admit_normalize  [[31mERROR[0m in 1961.80s]
[0m04:25:11.081870 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.normalized_input__int_procedure_date_normalize
[0m04:25:11.083071 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.normalized_input__int_procedure_code_normalize
[0m04:25:11.083677 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.normalized_input__int_diagnosis_code_normalize
[0m04:25:11.084982 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.normalized_input__int_present_on_admit_normalize
[0m04:25:11.090077 [debug] [Thread-3 (]: Began running node model.the_tuva_project.normalized_input__int_revenue_center_normalize
[0m04:25:11.105901 [debug] [Thread-2 (]: Began running node model.the_tuva_project.normalized_input__int_undetermined_claim_type
[0m04:25:11.133400 [debug] [Thread-4 (]: Began running node model.the_tuva_project.normalized_input__eligibility
[0m04:25:11.146738 [debug] [Thread-1 (]: Began running node model.the_tuva_project.quality_measures__stg_core__lab_result
[0m04:25:11.148781 [info ] [Thread-3 (]: 45 of 307 START sql table model claims_preprocessing._int_normalized_input_revenue_center_normalize  [RUN]
[0m04:25:11.149280 [info ] [Thread-2 (]: 46 of 307 START sql table model claims_preprocessing._int_normalized_input_undetermined_claim_type  [RUN]
[0m04:25:11.149779 [info ] [Thread-4 (]: 47 of 307 START sql table model claims_preprocessing.normalized_input_eligibility  [RUN]
[0m04:25:11.152688 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_present_on_admit_normalize, now model.the_tuva_project.quality_measures__stg_core__lab_result)
[0m04:25:11.153956 [debug] [Thread-3 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_procedure_date_normalize, now model.the_tuva_project.normalized_input__int_revenue_center_normalize)
[0m04:25:11.154852 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_procedure_code_normalize, now model.the_tuva_project.normalized_input__int_undetermined_claim_type)
[0m04:25:11.155969 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_diagnosis_code_normalize, now model.the_tuva_project.normalized_input__eligibility)
[0m04:25:11.157022 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.quality_measures__stg_core__lab_result
[0m04:25:11.157464 [debug] [Thread-3 (]: Began compiling node model.the_tuva_project.normalized_input__int_revenue_center_normalize
[0m04:25:11.158177 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.normalized_input__int_undetermined_claim_type
[0m04:25:11.158558 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.normalized_input__eligibility
[0m04:25:11.289875 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.quality_measures__stg_core__lab_result"
[0m04:25:11.320179 [debug] [Thread-3 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_revenue_center_normalize"
[0m04:25:11.338679 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__eligibility"
[0m04:25:11.352625 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_undetermined_claim_type"
[0m04:25:11.354344 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.quality_measures__stg_core__lab_result (compile): 04:25:11.158903 => 04:25:11.354148
[0m04:25:11.356672 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.quality_measures__stg_core__lab_result
[0m04:25:11.357069 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.normalized_input__int_revenue_center_normalize (compile): 04:25:11.192476 => 04:25:11.356900
[0m04:25:11.358561 [debug] [Thread-1 (]: Began running node model.the_tuva_project.quality_measures__stg_core__observation
[0m04:25:11.359599 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__int_undetermined_claim_type (compile): 04:25:11.221847 => 04:25:11.359435
[0m04:25:11.359916 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.normalized_input__eligibility (compile): 04:25:11.265278 => 04:25:11.359771
[0m04:25:11.360318 [debug] [Thread-3 (]: Began executing node model.the_tuva_project.normalized_input__int_revenue_center_normalize
[0m04:25:11.360969 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.quality_measures__stg_core__lab_result, now model.the_tuva_project.quality_measures__stg_core__observation)
[0m04:25:11.361429 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.normalized_input__int_undetermined_claim_type
[0m04:25:11.361817 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.normalized_input__eligibility
[0m04:25:11.382301 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.quality_measures__stg_core__observation
[0m04:25:11.391176 [debug] [Thread-3 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_revenue_center_normalize"
[0m04:25:11.397218 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_undetermined_claim_type"
[0m04:25:11.400731 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__eligibility"
[0m04:25:11.407515 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.quality_measures__stg_core__observation"
[0m04:25:11.411289 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__eligibility"
[0m04:25:11.411774 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_revenue_center_normalize"
[0m04:25:11.412148 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_undetermined_claim_type"
[0m04:25:11.412488 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.quality_measures__stg_core__observation (compile): 04:25:11.401106 => 04:25:11.412326
[0m04:25:11.412781 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__eligibility: BEGIN
[0m04:25:11.413191 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_revenue_center_normalize: BEGIN
[0m04:25:11.413903 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_undetermined_claim_type: BEGIN
[0m04:25:11.414672 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.quality_measures__stg_core__observation
[0m04:25:11.416165 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m04:25:11.416870 [debug] [Thread-3 (]: Opening a new connection, currently in state closed
[0m04:25:11.417266 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m04:25:11.418503 [debug] [Thread-1 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates
[0m04:25:11.527841 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.528361 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.528709 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.529188 [info ] [Thread-1 (]: 48 of 307 START sql table model data_quality._int_claims_preprocessing_pharmacy_claim_duplicates  [RUN]
[0m04:25:11.529702 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__eligibility"
[0m04:25:11.530103 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_revenue_center_normalize"
[0m04:25:11.530511 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_undetermined_claim_type"
[0m04:25:11.531206 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.quality_measures__stg_core__observation, now model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates)
[0m04:25:11.531667 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__eligibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__eligibility"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."normalized_input_eligibility__dbt_tmp"
  
    as (
      


with __dbt__cte__normalized_input__stg_eligibility as (



select
      patient_id
    , patient_id||data_source||payer||plan||enrollment_start_date||enrollment_end_date as patient_id_key
    , member_id
    , gender
    , race
    , birth_date
    , death_date
    , death_flag
    , enrollment_start_date
    , enrollment_end_date
    , payer
    , payer_type
    , plan
    , original_reason_entitlement_code
    , dual_status_code
    , medicare_status_code
    , first_name
    , last_name
    , address
    , city
    , state
    , zip_code
    , phone
    , data_source
from "synthea"."tuva_input"."eligibility"
) select
    cast(elig.patient_id as TEXT ) as patient_id
    , cast(elig.member_id as TEXT ) as member_id
    , cast(elig.gender as TEXT ) as gender
    , cast(elig.race as TEXT ) as race
    , cast(date_norm.normalized_birth_date as date ) as birth_date
    , cast(date_norm.normalized_death_date as date ) as death_date
    , cast(elig.death_flag as int ) as death_flag
    , cast(date_norm.normalized_enrollment_start_date as date ) as enrollment_start_date
    , cast(date_norm.normalized_enrollment_end_date as date ) as enrollment_end_date
    , cast(elig.payer as TEXT ) as payer
    , cast(elig.payer_type as TEXT ) as payer_type
    , cast(elig.plan as TEXT ) as plan
    , cast(elig.original_reason_entitlement_code as TEXT ) as original_reason_entitlement_code
    , cast(elig.dual_status_code as TEXT ) as dual_status_code
    , cast(elig.medicare_status_code as TEXT ) as medicare_status_code
    , cast(elig.first_name as TEXT ) as first_name
    , cast(elig.last_name as TEXT ) as last_name
    , cast(elig.address as TEXT ) as address
    , cast(elig.city as TEXT ) as city
    , cast(elig.state as TEXT ) as state
    , cast(elig.zip_code as TEXT ) as zip_code
    , cast(elig.phone as TEXT ) as phone
    , cast(elig.data_source as TEXT ) as data_source
    , cast('2024-02-21 03:41:53.543436+00:00'  as TEXT ) as tuva_last_run
from __dbt__cte__normalized_input__stg_eligibility elig
left join "synthea"."claims_preprocessing"."_int_normalized_input_eligibility_dates_normalize" date_norm
    on elig.patient_id_key = date_norm.patient_id_key
    );
  
  
[0m04:25:11.532207 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_revenue_center_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_revenue_center_normalize"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_revenue_center_normalize__dbt_tmp"
  
    as (
      


with __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
) select
    claim_id
    , claim_line_number
    , data_source
    , rev.revenue_center_code as normalized_code
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from __dbt__cte__normalized_input__stg_medical_claim med
left join "synthea"."terminology"."revenue_center" rev
    on lpad(med.revenue_center_code, 4, '0') = rev.revenue_center_code
where claim_type = 'institutional'
    );
  
  
[0m04:25:11.533131 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_undetermined_claim_type: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_undetermined_claim_type"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_undetermined_claim_type__dbt_tmp"
  
    as (
      


with __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
) select
    claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from __dbt__cte__normalized_input__stg_medical_claim
where claim_type in ('undetermined')
    );
  
  
[0m04:25:11.533654 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates
[0m04:25:11.542498 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates"
[0m04:25:11.544414 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates (compile): 04:25:11.534904 => 04:25:11.544176
[0m04:25:11.544914 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates
[0m04:25:11.549600 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates"
[0m04:25:11.551361 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates"
[0m04:25:11.551912 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates: BEGIN
[0m04:25:11.552400 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m04:25:11.553469 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.553951 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates"
[0m04:25:11.554493 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates"} */

  
    
    

    create  table
      "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_duplicates__dbt_tmp"
  
    as (
      

with test_catalog as (

    select
          source_table
        , test_category
        , test_name
        , pipeline_test
    from "synthea"."data_quality"."_value_set_test_catalog"

)

select distinct
      test_catalog.source_table
    , 'all' as claim_type
    , 'claim_id' as grain
    , claim_id
    , data_source
    , test_catalog.test_category
    , test_catalog.test_name
    , test_catalog.pipeline_test
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
     left join test_catalog
       on test_catalog.test_name = 'duplicate pharmacy claims'
       and test_catalog.source_table = 'normalized_input__pharmacy_claim'
group by
      claim_id
    , claim_line_number
    , data_source
    , test_catalog.source_table
    , test_catalog.test_category
    , test_catalog.test_name
    , test_catalog.pipeline_test
having count(*) > 1
    );
  
  
[0m04:25:11.581148 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.612482 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates"
[0m04:25:11.613224 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_duplicates" rename to "_int_claims_preprocessing_pharmacy_claim_duplicates__dbt_backup"
[0m04:25:11.614177 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.619286 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates"
[0m04:25:11.620731 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_duplicates__dbt_tmp" rename to "_int_claims_preprocessing_pharmacy_claim_duplicates"
[0m04:25:11.621531 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.625523 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates: COMMIT
[0m04:25:11.626217 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates"
[0m04:25:11.626776 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates: COMMIT
[0m04:25:11.627875 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.632533 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates"
[0m04:25:11.633176 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates"} */
drop table if exists "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_duplicates__dbt_backup" cascade
[0m04:25:11.634384 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.636309 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates (execute): 04:25:11.545249 => 04:25:11.636066
[0m04:25:11.636905 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates: Close
[0m04:25:11.637931 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7da81650>]}
[0m04:25:11.638684 [info ] [Thread-1 (]: 48 of 307 OK created sql table model data_quality._int_claims_preprocessing_pharmacy_claim_duplicates  [[32mOK[0m in 0.11s]
[0m04:25:11.640044 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates
[0m04:25:11.641142 [debug] [Thread-1 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers
[0m04:25:11.642927 [info ] [Thread-1 (]: 49 of 307 START sql table model data_quality._int_claims_preprocessing_pharmacy_claim_line_numbers  [RUN]
[0m04:25:11.643902 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates, now model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers)
[0m04:25:11.644509 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers
[0m04:25:11.651548 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers"
[0m04:25:11.653134 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers (compile): 04:25:11.644854 => 04:25:11.652840
[0m04:25:11.653787 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers
[0m04:25:11.658901 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers"
[0m04:25:11.660622 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers"
[0m04:25:11.661329 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers: BEGIN
[0m04:25:11.661929 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m04:25:11.663319 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.663962 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers"
[0m04:25:11.664608 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers"} */

  
    
    

    create  table
      "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_line_numbers__dbt_tmp"
  
    as (
      

with pharmacy_claim as (

    select
          claim_id
        , claim_line_number
        , data_source
    from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"

)

, test_catalog as (

    select
          source_table
        , test_category
        , test_name
        , pipeline_test
    from "synthea"."data_quality"."_value_set_test_catalog"

)

, add_row_num as (

    select
          claim_id
        , data_source
        , claim_line_number
        , row_number() over (
            partition by claim_id, data_source
            order by claim_line_number
          ) as expected_line_number
    from pharmacy_claim

)

, line_num_check as (

    select
          add_row_num.claim_id
        , add_row_num.data_source
        , add_row_num.claim_line_number
        , add_row_num.expected_line_number
    from add_row_num
         left join pharmacy_claim
           on add_row_num.claim_id = pharmacy_claim.claim_id
           and add_row_num.data_source = pharmacy_claim.data_source
           and add_row_num.expected_line_number = pharmacy_claim.claim_line_number
    where pharmacy_claim.claim_line_number is null

)

select
      test_catalog.source_table
    , 'all' as claim_type
    , 'claim_id' as grain
    , line_num_check.claim_id
    , line_num_check.data_source
    , test_catalog.test_category
    , test_catalog.test_name
    , test_catalog.pipeline_test
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from line_num_check
     left join test_catalog
       on test_catalog.test_name = 'claim_line_number non-sequential'
       and test_catalog.source_table = 'normalized_input__pharmacy_claim'
group by
      line_num_check.claim_id
    , line_num_check.data_source
    , test_catalog.source_table
    , test_catalog.test_category
    , test_catalog.test_name
    , test_catalog.pipeline_test
    );
  
  
[0m04:25:11.678802 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.684295 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers"
[0m04:25:11.684934 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_line_numbers" rename to "_int_claims_preprocessing_pharmacy_claim_line_numbers__dbt_backup"
[0m04:25:11.685810 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.688767 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers"
[0m04:25:11.689431 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_line_numbers__dbt_tmp" rename to "_int_claims_preprocessing_pharmacy_claim_line_numbers"
[0m04:25:11.690290 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.692303 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers: COMMIT
[0m04:25:11.692914 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers"
[0m04:25:11.693394 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers: COMMIT
[0m04:25:11.694551 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.697504 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers"
[0m04:25:11.698130 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers"} */
drop table if exists "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_line_numbers__dbt_backup" cascade
[0m04:25:11.699434 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.701388 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers (execute): 04:25:11.654178 => 04:25:11.701190
[0m04:25:11.701917 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers: Close
[0m04:25:11.702854 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7fa1a3d0>]}
[0m04:25:11.703578 [info ] [Thread-1 (]: 49 of 307 OK created sql table model data_quality._int_claims_preprocessing_pharmacy_claim_line_numbers  [[32mOK[0m in 0.06s]
[0m04:25:11.704326 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers
[0m04:25:11.705354 [debug] [Thread-1 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values
[0m04:25:11.705969 [info ] [Thread-1 (]: 50 of 307 START sql table model data_quality._int_claims_preprocessing_pharmacy_claim_missing_values  [RUN]
[0m04:25:11.706723 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers, now model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values)
[0m04:25:11.707254 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values
[0m04:25:11.720968 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values"
[0m04:25:11.722734 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values (compile): 04:25:11.707666 => 04:25:11.722448
[0m04:25:11.723486 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values
[0m04:25:11.727603 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values"
[0m04:25:11.729179 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values"
[0m04:25:11.729761 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values: BEGIN
[0m04:25:11.730378 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m04:25:11.731217 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.731712 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values"
[0m04:25:11.732389 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values"} */

  
    
    

    create  table
      "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_missing_values__dbt_tmp"
  
    as (
      

with pharmacy_claim_missing as (

 
        select
              claim_id
            , data_source
            , 'claim_id' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where claim_id is null
        union all
        select
              claim_id
            , data_source
            , 'claim_line_number' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where claim_line_number is null
        union all
        select
              claim_id
            , data_source
            , 'patient_id' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where patient_id is null
        union all
        select
              claim_id
            , data_source
            , 'member_id' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where member_id is null
        union all
        select
              claim_id
            , data_source
            , 'payer' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where payer is null
        union all
        select
              claim_id
            , data_source
            , 'plan' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where plan is null
        union all
        select
              claim_id
            , data_source
            , 'prescribing_provider_npi' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where prescribing_provider_npi is null
        union all
        select
              claim_id
            , data_source
            , 'dispensing_provider_npi' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where dispensing_provider_npi is null
        union all
        select
              claim_id
            , data_source
            , 'dispensing_date' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where dispensing_date is null
        union all
        select
              claim_id
            , data_source
            , 'ndc_code' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where ndc_code is null
        union all
        select
              claim_id
            , data_source
            , 'quantity' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where quantity is null
        union all
        select
              claim_id
            , data_source
            , 'days_supply' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where days_supply is null
        union all
        select
              claim_id
            , data_source
            , 'refills' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where refills is null
        union all
        select
              claim_id
            , data_source
            , 'paid_date' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where paid_date is null
        union all
        select
              claim_id
            , data_source
            , 'paid_amount' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where paid_amount is null
        union all
        select
              claim_id
            , data_source
            , 'allowed_amount' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where allowed_amount is null
        union all
        select
              claim_id
            , data_source
            , 'data_source' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where data_source is null
        

)

, test_catalog as (

    select
          source_table
        , test_category
        , test_name
        , pipeline_test
    from "synthea"."data_quality"."_value_set_test_catalog"

)

select
      test_catalog.source_table
    , 'all' as claim_type
    , 'claim_id' as grain
    , pharmacy_claim_missing.claim_id
    , pharmacy_claim_missing.data_source
    , test_catalog.test_category
    , test_catalog.test_name
    , test_catalog.pipeline_test
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from pharmacy_claim_missing
     left join test_catalog
       on test_catalog.test_name = pharmacy_claim_missing.column_checked||' missing'
       and test_catalog.source_table = 'normalized_input__pharmacy_claim'
group by
      pharmacy_claim_missing.claim_id
    , pharmacy_claim_missing.data_source
    , test_catalog.source_table
    , test_catalog.test_category
    , test_catalog.test_name
    , test_catalog.pipeline_test
    );
  
  
[0m04:25:11.750334 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.753695 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values"
[0m04:25:11.754415 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_missing_values" rename to "_int_claims_preprocessing_pharmacy_claim_missing_values__dbt_backup"
[0m04:25:11.755255 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.757994 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values"
[0m04:25:11.758644 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_missing_values__dbt_tmp" rename to "_int_claims_preprocessing_pharmacy_claim_missing_values"
[0m04:25:11.759508 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.761391 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values: COMMIT
[0m04:25:11.762198 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values"
[0m04:25:11.762980 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values: COMMIT
[0m04:25:11.773864 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.777199 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values"
[0m04:25:11.777772 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values"} */
drop table if exists "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_missing_values__dbt_backup" cascade
[0m04:25:11.779008 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.780596 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values (execute): 04:25:11.723989 => 04:25:11.780364
[0m04:25:11.781343 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values: Close
[0m04:25:11.782492 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7cf6ddd0>]}
[0m04:25:11.783307 [info ] [Thread-1 (]: 50 of 307 OK created sql table model data_quality._int_claims_preprocessing_pharmacy_claim_missing_values  [[32mOK[0m in 0.08s]
[0m04:25:11.784240 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values
[0m04:25:11.785650 [debug] [Thread-1 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details
[0m04:25:11.786511 [info ] [Thread-1 (]: 51 of 307 START sql table model data_quality._int_claims_preprocessing_pharmacy_header_fail_details  [RUN]
[0m04:25:11.787539 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values, now model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details)
[0m04:25:11.788013 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details
[0m04:25:11.797089 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details"
[0m04:25:11.799051 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details (compile): 04:25:11.788412 => 04:25:11.798729
[0m04:25:11.799617 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details
[0m04:25:11.803707 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details"
[0m04:25:11.805642 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details"
[0m04:25:11.806266 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details: BEGIN
[0m04:25:11.806905 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m04:25:11.807818 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.808398 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details"
[0m04:25:11.809038 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details"} */

  
    
    

    create  table
      "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_header_fail_details__dbt_tmp"
  
    as (
      

with pharmacy_header_duplicates as (

 
        select
              claim_id
            , data_source
            , 'claim_id' as column_checked
            , count(distinct claim_id) as duplicate_count
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        group by claim_id, data_source
        having count(distinct claim_id) > 1
        union all
        select
              claim_id
            , data_source
            , 'patient_id' as column_checked
            , count(distinct patient_id) as duplicate_count
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        group by claim_id, data_source
        having count(distinct patient_id) > 1
        union all
        select
              claim_id
            , data_source
            , 'member_id' as column_checked
            , count(distinct member_id) as duplicate_count
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        group by claim_id, data_source
        having count(distinct member_id) > 1
        union all
        select
              claim_id
            , data_source
            , 'payer' as column_checked
            , count(distinct payer) as duplicate_count
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        group by claim_id, data_source
        having count(distinct payer) > 1
        union all
        select
              claim_id
            , data_source
            , 'plan' as column_checked
            , count(distinct plan) as duplicate_count
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        group by claim_id, data_source
        having count(distinct plan) > 1
        union all
        select
              claim_id
            , data_source
            , 'data_source' as column_checked
            , count(distinct data_source) as duplicate_count
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        group by claim_id, data_source
        having count(distinct data_source) > 1
        

)

, test_catalog as (

    select
          source_table
        , test_category
        , test_name
        , pipeline_test
        , claim_type
    from "synthea"."data_quality"."_value_set_test_catalog"

)

select
      test_catalog.source_table
    , 'all' as claim_type
    , 'claim_id' as grain
    , pharmacy_header_duplicates.claim_id
    , pharmacy_header_duplicates.data_source
    , test_catalog.test_category
    , test_catalog.test_name
    , test_catalog.pipeline_test
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from pharmacy_header_duplicates
     left join test_catalog
       on test_catalog.test_name = pharmacy_header_duplicates.column_checked||' non-unique'
       and test_catalog.source_table = 'normalized_input__pharmacy_claim'
group by 
      pharmacy_header_duplicates.claim_id
    , pharmacy_header_duplicates.data_source
    , test_catalog.source_table
    , test_catalog.test_category
    , test_catalog.test_name
    , test_catalog.pipeline_test
    );
  
  
[0m04:25:11.847050 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.853138 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details"
[0m04:25:11.853788 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_header_fail_details" rename to "_int_claims_preprocessing_pharmacy_header_fail_details__dbt_backup"
[0m04:25:11.854643 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.857181 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details"
[0m04:25:11.857775 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_header_fail_details__dbt_tmp" rename to "_int_claims_preprocessing_pharmacy_header_fail_details"
[0m04:25:11.858552 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.860244 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details: COMMIT
[0m04:25:11.860800 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details"
[0m04:25:11.861271 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details: COMMIT
[0m04:25:11.862440 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.864681 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details"
[0m04:25:11.865161 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details"} */
drop table if exists "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_header_fail_details__dbt_backup" cascade
[0m04:25:11.866219 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.867529 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details (execute): 04:25:11.800064 => 04:25:11.867371
[0m04:25:11.868067 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details: Close
[0m04:25:11.868848 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff801f9290>]}
[0m04:25:11.869447 [info ] [Thread-1 (]: 51 of 307 OK created sql table model data_quality._int_claims_preprocessing_pharmacy_header_fail_details  [[32mOK[0m in 0.08s]
[0m04:25:11.870178 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details
[0m04:25:11.870773 [debug] [Thread-1 (]: Began running node model.the_tuva_project.normalized_input__int_admit_type_final
[0m04:25:11.871932 [info ] [Thread-1 (]: 52 of 307 START sql table model claims_preprocessing._int_normalized_input_admit_type_final  [RUN]
[0m04:25:11.873354 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details, now model.the_tuva_project.normalized_input__int_admit_type_final)
[0m04:25:11.873998 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.normalized_input__int_admit_type_final
[0m04:25:11.879068 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_admit_type_final"
[0m04:25:11.881498 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__int_admit_type_final (compile): 04:25:11.874398 => 04:25:11.881190
[0m04:25:11.882146 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.normalized_input__int_admit_type_final
[0m04:25:11.886932 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_admit_type_final"
[0m04:25:11.888590 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_type_final"
[0m04:25:11.889340 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_type_final: BEGIN
[0m04:25:11.889900 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m04:25:11.890753 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.891271 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_type_final"
[0m04:25:11.891766 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_type_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_type_final"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_admit_type_final__dbt_tmp"
  
    as (
      


select
    claim_id
    , data_source
    , column_name
    , normalized_code
    , occurrence_count
    , next_occurrence_count
    , occurrence_row_count
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from "synthea"."claims_preprocessing"."_int_normalized_input_admit_type_normalize_voting"
where (occurrence_row_count = 1
        and occurrence_count > next_occurrence_count)
    );
  
  
[0m04:25:11.892881 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.896052 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_type_final"
[0m04:25:11.896668 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_type_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_type_final"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_admit_type_final" rename to "_int_normalized_input_admit_type_final__dbt_backup"
[0m04:25:11.897384 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.899914 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_type_final"
[0m04:25:11.900344 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_type_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_type_final"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_admit_type_final__dbt_tmp" rename to "_int_normalized_input_admit_type_final"
[0m04:25:11.900981 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.902639 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_type_final: COMMIT
[0m04:25:11.903239 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_type_final"
[0m04:25:11.903696 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_type_final: COMMIT
[0m04:25:11.904843 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.907716 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_type_final"
[0m04:25:11.908310 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_type_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_type_final"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_admit_type_final__dbt_backup" cascade
[0m04:25:11.909910 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.911486 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__int_admit_type_final (execute): 04:25:11.882589 => 04:25:11.911315
[0m04:25:11.911988 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_type_final: Close
[0m04:25:11.912817 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8009df50>]}
[0m04:25:11.913514 [info ] [Thread-1 (]: 52 of 307 OK created sql table model claims_preprocessing._int_normalized_input_admit_type_final  [[32mOK[0m in 0.04s]
[0m04:25:11.914120 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.normalized_input__int_admit_type_final
[0m04:25:11.915122 [debug] [Thread-1 (]: Began running node model.the_tuva_project.quality_measures__stg_core__medication
[0m04:25:11.916205 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_admit_type_final, now model.the_tuva_project.quality_measures__stg_core__medication)
[0m04:25:11.916824 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.quality_measures__stg_core__medication
[0m04:25:11.926324 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.quality_measures__stg_core__medication"
[0m04:25:11.928045 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.quality_measures__stg_core__medication (compile): 04:25:11.917220 => 04:25:11.927736
[0m04:25:11.929064 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.quality_measures__stg_core__medication
[0m04:25:11.930511 [debug] [Thread-1 (]: Began running node model.the_tuva_project.normalized_input__int_bill_type_final
[0m04:25:11.931801 [info ] [Thread-1 (]: 53 of 307 START sql table model claims_preprocessing._int_normalized_input_bill_type_final  [RUN]
[0m04:25:11.932984 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.quality_measures__stg_core__medication, now model.the_tuva_project.normalized_input__int_bill_type_final)
[0m04:25:11.933667 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.normalized_input__int_bill_type_final
[0m04:25:11.940645 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_bill_type_final"
[0m04:25:11.942802 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__int_bill_type_final (compile): 04:25:11.934090 => 04:25:11.942447
[0m04:25:11.943399 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.normalized_input__int_bill_type_final
[0m04:25:11.950628 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_bill_type_final"
[0m04:25:11.952422 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_bill_type_final"
[0m04:25:11.953130 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_bill_type_final: BEGIN
[0m04:25:11.953646 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m04:25:11.955087 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.955841 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_bill_type_final"
[0m04:25:11.956459 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_bill_type_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_bill_type_final"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_bill_type_final__dbt_tmp"
  
    as (
      


select
    claim_id
    , data_source
    , column_name
    , normalized_code
    , occurrence_count
    , next_occurrence_count
    , occurrence_row_count
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from "synthea"."claims_preprocessing"."_int_normalized_input_bill_type_voting"
where (occurrence_row_count = 1
        and occurrence_count > next_occurrence_count)
    );
  
  
[0m04:25:11.959354 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.962699 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_bill_type_final"
[0m04:25:11.963410 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_bill_type_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_bill_type_final"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_bill_type_final" rename to "_int_normalized_input_bill_type_final__dbt_backup"
[0m04:25:11.964391 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.967447 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_bill_type_final"
[0m04:25:11.968077 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_bill_type_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_bill_type_final"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_bill_type_final__dbt_tmp" rename to "_int_normalized_input_bill_type_final"
[0m04:25:11.968891 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.971212 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_bill_type_final: COMMIT
[0m04:25:11.971915 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_bill_type_final"
[0m04:25:11.972515 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_bill_type_final: COMMIT
[0m04:25:11.974188 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.977254 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_bill_type_final"
[0m04:25:11.977882 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_bill_type_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_bill_type_final"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_bill_type_final__dbt_backup" cascade
[0m04:25:11.979076 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:11.980533 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__int_bill_type_final (execute): 04:25:11.943825 => 04:25:11.980356
[0m04:25:11.981059 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_bill_type_final: Close
[0m04:25:11.981902 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7fa18fd0>]}
[0m04:25:11.982627 [info ] [Thread-1 (]: 53 of 307 OK created sql table model claims_preprocessing._int_normalized_input_bill_type_final  [[32mOK[0m in 0.05s]
[0m04:25:11.983547 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.normalized_input__int_bill_type_final
[0m04:25:11.984189 [debug] [Thread-1 (]: Began running node model.the_tuva_project.normalized_input__int_apr_drg_final
[0m04:25:11.985443 [info ] [Thread-1 (]: 54 of 307 START sql table model claims_preprocessing._int_normalized_input_apr_drg_final  [RUN]
[0m04:25:11.986428 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_bill_type_final, now model.the_tuva_project.normalized_input__int_apr_drg_final)
[0m04:25:11.987019 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.normalized_input__int_apr_drg_final
[0m04:25:11.998865 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_apr_drg_final"
[0m04:25:12.000509 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__int_apr_drg_final (compile): 04:25:11.987369 => 04:25:12.000197
[0m04:25:12.001094 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.normalized_input__int_apr_drg_final
[0m04:25:12.005672 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_apr_drg_final"
[0m04:25:12.007003 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_apr_drg_final"
[0m04:25:12.007632 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_apr_drg_final: BEGIN
[0m04:25:12.008176 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m04:25:12.009146 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.010469 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_apr_drg_final"
[0m04:25:12.011281 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_apr_drg_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_apr_drg_final"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_apr_drg_final__dbt_tmp"
  
    as (
      


select
    claim_id
    , data_source
    , column_name
    , normalized_code
    , occurrence_count
    , next_occurrence_count
    , occurrence_row_count
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from "synthea"."claims_preprocessing"."_int_normalized_input_apr_drg_voting"
where (occurrence_row_count = 1
        and occurrence_count > next_occurrence_count)
    );
  
  
[0m04:25:12.021738 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.025266 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_apr_drg_final"
[0m04:25:12.026233 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.026585 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_apr_drg_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_apr_drg_final"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_apr_drg_final" rename to "_int_normalized_input_apr_drg_final__dbt_backup"
[0m04:25:12.029490 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__eligibility"
[0m04:25:12.030451 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.030901 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__eligibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__eligibility"} */
alter table "synthea"."claims_preprocessing"."normalized_input_eligibility" rename to "normalized_input_eligibility__dbt_backup"
[0m04:25:12.033493 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_apr_drg_final"
[0m04:25:12.034205 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.034659 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_apr_drg_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_apr_drg_final"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_apr_drg_final__dbt_tmp" rename to "_int_normalized_input_apr_drg_final"
[0m04:25:12.037156 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__eligibility"
[0m04:25:12.037921 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.038288 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__eligibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__eligibility"} */
alter table "synthea"."claims_preprocessing"."normalized_input_eligibility__dbt_tmp" rename to "normalized_input_eligibility"
[0m04:25:12.039999 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_apr_drg_final: COMMIT
[0m04:25:12.040741 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.041081 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_apr_drg_final"
[0m04:25:12.042575 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__eligibility: COMMIT
[0m04:25:12.043139 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_apr_drg_final: COMMIT
[0m04:25:12.043675 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__eligibility"
[0m04:25:12.044428 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__eligibility: COMMIT
[0m04:25:12.044792 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.049014 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_apr_drg_final"
[0m04:25:12.049392 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.049870 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_apr_drg_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_apr_drg_final"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_apr_drg_final__dbt_backup" cascade
[0m04:25:12.052002 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__eligibility"
[0m04:25:12.053047 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__eligibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__eligibility"} */
drop table if exists "synthea"."claims_preprocessing"."normalized_input_eligibility__dbt_backup" cascade
[0m04:25:12.053431 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.054927 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__int_apr_drg_final (execute): 04:25:12.001502 => 04:25:12.054746
[0m04:25:12.055270 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.055593 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_apr_drg_final: Close
[0m04:25:12.056840 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.normalized_input__eligibility (execute): 04:25:11.397569 => 04:25:12.056653
[0m04:25:12.057689 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7f80f690>]}
[0m04:25:12.058352 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__eligibility: Close
[0m04:25:12.059097 [info ] [Thread-1 (]: 54 of 307 OK created sql table model claims_preprocessing._int_normalized_input_apr_drg_final  [[32mOK[0m in 0.07s]
[0m04:25:12.060049 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7fce4e90>]}
[0m04:25:12.060762 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.normalized_input__int_apr_drg_final
[0m04:25:12.061430 [info ] [Thread-4 (]: 47 of 307 OK created sql table model claims_preprocessing.normalized_input_eligibility  [[32mOK[0m in 0.90s]
[0m04:25:12.062066 [debug] [Thread-1 (]: Began running node model.the_tuva_project.normalized_input__int_admit_source_final
[0m04:25:12.062974 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.normalized_input__eligibility
[0m04:25:12.063537 [info ] [Thread-1 (]: 55 of 307 START sql table model claims_preprocessing._int_normalized_input_admit_source_final  [RUN]
[0m04:25:12.064142 [debug] [Thread-4 (]: Began running node model.the_tuva_project.normalized_input__int_discharge_disposition_final
[0m04:25:12.065673 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_apr_drg_final, now model.the_tuva_project.normalized_input__int_admit_source_final)
[0m04:25:12.067922 [info ] [Thread-4 (]: 56 of 307 START sql table model claims_preprocessing._int_normalized_input_discharge_disposition_final  [RUN]
[0m04:25:12.068522 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.normalized_input__int_admit_source_final
[0m04:25:12.069202 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__eligibility, now model.the_tuva_project.normalized_input__int_discharge_disposition_final)
[0m04:25:12.073218 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_admit_source_final"
[0m04:25:12.073831 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.normalized_input__int_discharge_disposition_final
[0m04:25:12.078947 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_discharge_disposition_final"
[0m04:25:12.079874 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__int_admit_source_final (compile): 04:25:12.069526 => 04:25:12.079621
[0m04:25:12.080495 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.normalized_input__int_admit_source_final
[0m04:25:12.081239 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.normalized_input__int_discharge_disposition_final (compile): 04:25:12.074698 => 04:25:12.081028
[0m04:25:12.085470 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_admit_source_final"
[0m04:25:12.086095 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.normalized_input__int_discharge_disposition_final
[0m04:25:12.091085 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_discharge_disposition_final"
[0m04:25:12.091989 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_source_final"
[0m04:25:12.092655 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_source_final: BEGIN
[0m04:25:12.093163 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_discharge_disposition_final"
[0m04:25:12.093483 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m04:25:12.093917 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_final: BEGIN
[0m04:25:12.094858 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.095196 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m04:25:12.095726 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_source_final"
[0m04:25:12.096965 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.097444 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_source_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_source_final"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_admit_source_final__dbt_tmp"
  
    as (
      


select
    claim_id
    , data_source
    , column_name
    , normalized_code
    , occurrence_count
    , next_occurrence_count
    , occurrence_row_count
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from "synthea"."claims_preprocessing"."_int_normalized_input_admit_source_voting"
where (occurrence_row_count = 1
        and occurrence_count > next_occurrence_count)
    );
  
  
[0m04:25:12.097996 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_discharge_disposition_final"
[0m04:25:12.098788 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_discharge_disposition_final"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_discharge_disposition_final__dbt_tmp"
  
    as (
      


select
    claim_id
    , data_source
    , column_name
    , normalized_code
    , occurrence_count
    , next_occurrence_count
    , occurrence_row_count
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from "synthea"."claims_preprocessing"."_int_normalized_input_discharge_disposition_voting"
where (occurrence_row_count = 1
        and occurrence_count > next_occurrence_count)
    );
  
  
[0m04:25:12.100520 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.101048 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.104059 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_source_final"
[0m04:25:12.106709 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_discharge_disposition_final"
[0m04:25:12.107241 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_source_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_source_final"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_admit_source_final" rename to "_int_normalized_input_admit_source_final__dbt_backup"
[0m04:25:12.107740 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_discharge_disposition_final"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_discharge_disposition_final" rename to "_int_normalized_input_discharge_disposition_final__dbt_backup"
[0m04:25:12.108450 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.108991 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.111597 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_source_final"
[0m04:25:12.114945 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_discharge_disposition_final"
[0m04:25:12.115619 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_source_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_source_final"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_admit_source_final__dbt_tmp" rename to "_int_normalized_input_admit_source_final"
[0m04:25:12.116149 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_discharge_disposition_final"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_discharge_disposition_final__dbt_tmp" rename to "_int_normalized_input_discharge_disposition_final"
[0m04:25:12.116907 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.117550 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.119678 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_source_final: COMMIT
[0m04:25:12.121518 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_final: COMMIT
[0m04:25:12.122157 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_source_final"
[0m04:25:12.122698 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_discharge_disposition_final"
[0m04:25:12.123235 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_source_final: COMMIT
[0m04:25:12.123699 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_final: COMMIT
[0m04:25:12.125187 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.129200 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_source_final"
[0m04:25:12.129679 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.130065 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_source_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_source_final"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_admit_source_final__dbt_backup" cascade
[0m04:25:12.132351 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_discharge_disposition_final"
[0m04:25:12.133213 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_discharge_disposition_final"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_discharge_disposition_final__dbt_backup" cascade
[0m04:25:12.133693 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.135074 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__int_admit_source_final (execute): 04:25:12.081473 => 04:25:12.134906
[0m04:25:12.135656 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_source_final: Close
[0m04:25:12.136009 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.136779 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7db4a990>]}
[0m04:25:12.138388 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.normalized_input__int_discharge_disposition_final (execute): 04:25:12.086995 => 04:25:12.138141
[0m04:25:12.139227 [info ] [Thread-1 (]: 55 of 307 OK created sql table model claims_preprocessing._int_normalized_input_admit_source_final  [[32mOK[0m in 0.07s]
[0m04:25:12.139944 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_final: Close
[0m04:25:12.140681 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.normalized_input__int_admit_source_final
[0m04:25:12.141620 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7db48690>]}
[0m04:25:12.142418 [debug] [Thread-1 (]: Began running node model.the_tuva_project.normalized_input__int_medical_date_aggregation
[0m04:25:12.165068 [info ] [Thread-1 (]: 57 of 307 START sql table model claims_preprocessing._int_normalized_input_medical_date_aggregation  [RUN]
[0m04:25:12.178469 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_admit_source_final, now model.the_tuva_project.normalized_input__int_medical_date_aggregation)
[0m04:25:12.179198 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.normalized_input__int_medical_date_aggregation
[0m04:25:12.189465 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_medical_date_aggregation"
[0m04:25:12.191017 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__int_medical_date_aggregation (compile): 04:25:12.179604 => 04:25:12.190772
[0m04:25:12.191540 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.normalized_input__int_medical_date_aggregation
[0m04:25:12.196068 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_medical_date_aggregation"
[0m04:25:12.197548 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_date_aggregation"
[0m04:25:12.198023 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_medical_date_aggregation: BEGIN
[0m04:25:12.198420 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m04:25:12.199096 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.199551 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_date_aggregation"
[0m04:25:12.200181 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_medical_date_aggregation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_medical_date_aggregation"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_medical_date_aggregation__dbt_tmp"
  
    as (
      


select
    claim_id
    , data_source
    , min(normalized_claim_start_date) as minimum_claim_start_date
    , max(normalized_claim_end_date) as maximum_claim_end_date
    , min(normalized_admission_date) as minimum_admission_date
    , max(normalized_discharge_date) as maximum_discharge_date
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from "synthea"."claims_preprocessing"."_int_normalized_input_medical_claim_date_normalize"
where claim_type = 'institutional'
group by
    claim_id
    , data_source

union all

select
    claim_id
    , data_source
    , min(normalized_claim_start_date) as minimum_claim_start_date
    , max(normalized_claim_end_date) as maximum_claim_end_date
    , null as minimum_admission_date
    , null as maximum_discharge_date
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from "synthea"."claims_preprocessing"."_int_normalized_input_medical_claim_date_normalize"
where claim_type = 'professional'
group by
    claim_id
    , data_source
    );
  
  
[0m04:25:12.209073 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.212386 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_date_aggregation"
[0m04:25:12.212984 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_medical_date_aggregation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_medical_date_aggregation"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_medical_date_aggregation" rename to "_int_normalized_input_medical_date_aggregation__dbt_backup"
[0m04:25:12.213785 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.216672 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_date_aggregation"
[0m04:25:12.217250 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_medical_date_aggregation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_medical_date_aggregation"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_medical_date_aggregation__dbt_tmp" rename to "_int_normalized_input_medical_date_aggregation"
[0m04:25:12.217953 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.219543 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_medical_date_aggregation: COMMIT
[0m04:25:12.219991 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_date_aggregation"
[0m04:25:12.220387 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_medical_date_aggregation: COMMIT
[0m04:25:12.222652 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.224716 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_date_aggregation"
[0m04:25:12.225156 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_medical_date_aggregation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_medical_date_aggregation"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_medical_date_aggregation__dbt_backup" cascade
[0m04:25:12.225886 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.227026 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__int_medical_date_aggregation (execute): 04:25:12.191875 => 04:25:12.226867
[0m04:25:12.227479 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_medical_date_aggregation: Close
[0m04:25:12.228166 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8006a890>]}
[0m04:25:12.399104 [info ] [Thread-4 (]: 56 of 307 OK created sql table model claims_preprocessing._int_normalized_input_discharge_disposition_final  [[32mOK[0m in 0.07s]
[0m04:25:12.399754 [info ] [Thread-1 (]: 57 of 307 OK created sql table model claims_preprocessing._int_normalized_input_medical_date_aggregation  [[32mOK[0m in 0.05s]
[0m04:25:12.400811 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.normalized_input__int_discharge_disposition_final
[0m04:25:12.401534 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.normalized_input__int_medical_date_aggregation
[0m04:25:12.402770 [debug] [Thread-4 (]: Began running node model.the_tuva_project.normalized_input__int_ms_drg_final
[0m04:25:12.403381 [debug] [Thread-1 (]: Began running node model.the_tuva_project.normalized_input__int_diagnosis_code_voting
[0m04:25:12.403929 [info ] [Thread-4 (]: 58 of 307 START sql table model claims_preprocessing._int_normalized_input_ms_drg_final  [RUN]
[0m04:25:12.405012 [info ] [Thread-1 (]: 59 of 307 SKIP relation claims_preprocessing.normalized_input__int_diagnosis_code_voting  [[33mSKIP[0m]
[0m04:25:12.405964 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_discharge_disposition_final, now model.the_tuva_project.normalized_input__int_ms_drg_final)
[0m04:25:12.407399 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.normalized_input__int_diagnosis_code_voting
[0m04:25:12.407988 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.normalized_input__int_ms_drg_final
[0m04:25:12.408835 [debug] [Thread-1 (]: Began running node model.the_tuva_project.normalized_input__int_procedure_code_voting
[0m04:25:12.413339 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_ms_drg_final"
[0m04:25:12.414059 [info ] [Thread-1 (]: 60 of 307 SKIP relation claims_preprocessing.normalized_input__int_procedure_code_voting  [[33mSKIP[0m]
[0m04:25:12.414946 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.normalized_input__int_procedure_code_voting
[0m04:25:12.427017 [debug] [Thread-1 (]: Began running node model.the_tuva_project.normalized_input__int_procedure_date_voting
[0m04:25:12.429137 [info ] [Thread-1 (]: 61 of 307 SKIP relation claims_preprocessing.normalized_input__int_procedure_date_voting  [[33mSKIP[0m]
[0m04:25:12.430152 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.normalized_input__int_procedure_date_voting
[0m04:25:12.430700 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.normalized_input__int_ms_drg_final (compile): 04:25:12.409312 => 04:25:12.430437
[0m04:25:12.431871 [debug] [Thread-1 (]: Began running node model.the_tuva_project.normalized_input__int_present_on_admit_voting
[0m04:25:12.433366 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.normalized_input__int_ms_drg_final
[0m04:25:12.433966 [info ] [Thread-1 (]: 62 of 307 SKIP relation claims_preprocessing.normalized_input__int_present_on_admit_voting  [[33mSKIP[0m]
[0m04:25:12.443434 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_ms_drg_final"
[0m04:25:12.444880 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.normalized_input__int_present_on_admit_voting
[0m04:25:12.450737 [debug] [Thread-1 (]: Began running node test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e
[0m04:25:12.453956 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_ms_drg_final"
[0m04:25:12.455821 [info ] [Thread-1 (]: 63 of 307 START test not_null_quality_measures__stg_core__observation_patient_id  [RUN]
[0m04:25:12.456828 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_ms_drg_final: BEGIN
[0m04:25:12.459286 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m04:25:12.457949 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_medical_date_aggregation, now test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e)
[0m04:25:12.460489 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.460958 [debug] [Thread-1 (]: Began compiling node test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e
[0m04:25:12.461637 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_ms_drg_final"
[0m04:25:12.477187 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_ms_drg_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_ms_drg_final"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_ms_drg_final__dbt_tmp"
  
    as (
      


select
    claim_id
    , data_source
    , column_name
    , normalized_code
    , occurrence_count
    , next_occurrence_count
    , occurrence_row_count
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from "synthea"."claims_preprocessing"."_int_normalized_input_ms_drg_voting"
where (occurrence_row_count = 1
        and occurrence_count > next_occurrence_count)
    );
  
  
[0m04:25:12.504918 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.515322 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_ms_drg_final"
[0m04:25:12.522728 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_ms_drg_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_ms_drg_final"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_ms_drg_final" rename to "_int_normalized_input_ms_drg_final__dbt_backup"
[0m04:25:12.547588 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.585381 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_ms_drg_final"
[0m04:25:12.592790 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_ms_drg_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_ms_drg_final"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_ms_drg_final__dbt_tmp" rename to "_int_normalized_input_ms_drg_final"
[0m04:25:12.622130 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.649775 [debug] [Thread-1 (]: Writing injected SQL for node "test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e"
[0m04:25:12.652702 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_ms_drg_final: COMMIT
[0m04:25:12.653752 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_ms_drg_final"
[0m04:25:12.655537 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_ms_drg_final: COMMIT
[0m04:25:12.656859 [debug] [Thread-1 (]: Timing info for test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e (compile): 04:25:12.462213 => 04:25:12.656398
[0m04:25:12.657635 [debug] [Thread-1 (]: Began executing node test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e
[0m04:25:12.658169 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.681091 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_ms_drg_final"
[0m04:25:12.717851 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_ms_drg_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_ms_drg_final"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_ms_drg_final__dbt_backup" cascade
[0m04:25:12.719266 [debug] [Thread-1 (]: Writing runtime sql for node "test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e"
[0m04:25:12.723098 [debug] [Thread-1 (]: Using duckdb connection "test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e"
[0m04:25:12.723892 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.724578 [debug] [Thread-1 (]: On test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e: BEGIN
[0m04:25:12.727620 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.normalized_input__int_ms_drg_final (execute): 04:25:12.434414 => 04:25:12.727251
[0m04:25:12.728632 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m04:25:12.729633 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_ms_drg_final: Close
[0m04:25:12.730931 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.732034 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7f875290>]}
[0m04:25:12.732826 [debug] [Thread-1 (]: Using duckdb connection "test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e"
[0m04:25:12.734033 [info ] [Thread-4 (]: 58 of 307 OK created sql table model claims_preprocessing._int_normalized_input_ms_drg_final  [[32mOK[0m in 0.33s]
[0m04:25:12.735370 [debug] [Thread-1 (]: On test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e"} */
select
      count(*) as failures,
      count(*) != 0 as should_warn,
      count(*) != 0 as should_error
    from (
      
    
    



with __dbt__cte__quality_measures__stg_core__observation as (


select
      patient_id
    , observation_date
    , source_code_type
    , source_code
    , normalized_code_type
    , normalized_code
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from "synthea"."core"."observation"


) select patient_id
from __dbt__cte__quality_measures__stg_core__observation
where patient_id is null



      
    ) dbt_internal_test
[0m04:25:12.736566 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.normalized_input__int_ms_drg_final
[0m04:25:12.742736 [debug] [Thread-4 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim
[0m04:25:12.748104 [info ] [Thread-4 (]: 64 of 307 START sql table model data_quality._int_claims_preprocessing_test_detail_stage_pharmacy_claim  [RUN]
[0m04:25:12.748579 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:12.749783 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_ms_drg_final, now model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim)
[0m04:25:12.762337 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim
[0m04:25:12.772638 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"
[0m04:25:12.833868 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim (compile): 04:25:12.763061 => 04:25:12.833286
[0m04:25:12.850501 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim
[0m04:25:12.878040 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"
[0m04:25:13.015588 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"
[0m04:25:13.021962 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim: BEGIN
[0m04:25:13.039213 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m04:25:13.041181 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.041951 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"
[0m04:25:13.042599 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"} */

  
    
    

    create  table
      "synthea"."data_quality"."_int_claims_preprocessing_test_detail_stage_pharmacy_claim__dbt_tmp"
  
    as (
      

select distinct
    source_table
    , claim_type
    , grain
    , claim_id as foreign_key
    , data_source
    , test_category
    , test_name
    , pipeline_test
from "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_duplicates"
union all
select distinct
    source_table
    , claim_type
    , grain
    , claim_id as foreign_key
    , data_source
    , test_category
    , test_name
    , pipeline_test
from "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_missing_values"
union all
select distinct
    source_table
    , claim_type
    , grain
    , claim_id as foreign_key
    , data_source
    , test_category
    , test_name
    , pipeline_test
from "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_header_fail_details"
union all
select distinct
    source_table
    , claim_type
    , grain
    , claim_id as foreign_key
    , data_source
    , test_category
    , test_name
    , pipeline_test
from "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_line_numbers"
    );
  
  
[0m04:25:13.131878 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.152295 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"
[0m04:25:13.158627 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_test_detail_stage_pharmacy_claim" rename to "_int_claims_preprocessing_test_detail_stage_pharmacy_claim__dbt_backup"
[0m04:25:13.190659 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.199689 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"
[0m04:25:13.201797 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_test_detail_stage_pharmacy_claim__dbt_tmp" rename to "_int_claims_preprocessing_test_detail_stage_pharmacy_claim"
[0m04:25:13.202837 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.201450 [debug] [Thread-1 (]: Timing info for test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e (execute): 04:25:12.658460 => 04:25:13.200077
[0m04:25:13.205683 [debug] [Thread-1 (]: On test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e: ROLLBACK
[0m04:25:13.204873 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim: COMMIT
[0m04:25:13.206726 [debug] [Thread-1 (]: Failed to rollback 'test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e'
[0m04:25:13.207829 [debug] [Thread-1 (]: On test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e: Close
[0m04:25:13.207234 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"
[0m04:25:13.219826 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim: COMMIT
[0m04:25:13.219276 [info ] [Thread-1 (]: 63 of 307 PASS not_null_quality_measures__stg_core__observation_patient_id ..... [[32mPASS[0m in 0.75s]
[0m04:25:13.221747 [debug] [Thread-1 (]: Finished running node test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e
[0m04:25:13.222883 [debug] [Thread-1 (]: Began running node test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652
[0m04:25:13.227134 [info ] [Thread-1 (]: 65 of 307 START test not_null_quality_measures__stg_core__medication_patient_id  [RUN]
[0m04:25:13.228060 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e, now test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652)
[0m04:25:13.230525 [debug] [Thread-1 (]: Began compiling node test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652
[0m04:25:13.233553 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.259937 [debug] [Thread-1 (]: Writing injected SQL for node "test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652"
[0m04:25:13.261479 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"
[0m04:25:13.271153 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"} */
drop table if exists "synthea"."data_quality"."_int_claims_preprocessing_test_detail_stage_pharmacy_claim__dbt_backup" cascade
[0m04:25:13.274470 [debug] [Thread-1 (]: Timing info for test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652 (compile): 04:25:13.236554 => 04:25:13.273069
[0m04:25:13.276061 [debug] [Thread-1 (]: Began executing node test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652
[0m04:25:13.282651 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.285629 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim (execute): 04:25:12.865515 => 04:25:13.285396
[0m04:25:13.291422 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim: Close
[0m04:25:13.292136 [debug] [Thread-1 (]: Writing runtime sql for node "test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652"
[0m04:25:13.293488 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff80161650>]}
[0m04:25:13.295516 [info ] [Thread-4 (]: 64 of 307 OK created sql table model data_quality._int_claims_preprocessing_test_detail_stage_pharmacy_claim  [[32mOK[0m in 0.54s]
[0m04:25:13.298659 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim
[0m04:25:13.300599 [debug] [Thread-1 (]: Using duckdb connection "test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652"
[0m04:25:13.304775 [debug] [Thread-1 (]: On test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652: BEGIN
[0m04:25:13.303708 [debug] [Thread-4 (]: Began running node model.the_tuva_project.acute_inpatient__stg_eligibility
[0m04:25:13.308244 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim, now model.the_tuva_project.acute_inpatient__stg_eligibility)
[0m04:25:13.305784 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m04:25:13.313030 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.acute_inpatient__stg_eligibility
[0m04:25:13.314292 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.322873 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.acute_inpatient__stg_eligibility"
[0m04:25:13.323455 [debug] [Thread-1 (]: Using duckdb connection "test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652"
[0m04:25:13.325622 [debug] [Thread-1 (]: On test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652"} */
select
      count(*) as failures,
      count(*) != 0 as should_warn,
      count(*) != 0 as should_error
    from (
      
    
    



with __dbt__cte__quality_measures__stg_core__medication as (


select
      patient_id
    , dispensing_date
    , source_code_type
    , source_code
    , ndc_code
    , rxnorm_code
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from "synthea"."core"."medication"


) select patient_id
from __dbt__cte__quality_measures__stg_core__medication
where patient_id is null



      
    ) dbt_internal_test
[0m04:25:13.328552 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.332986 [debug] [Thread-1 (]: Timing info for test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652 (execute): 04:25:13.277299 => 04:25:13.332616
[0m04:25:13.334249 [debug] [Thread-1 (]: On test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652: ROLLBACK
[0m04:25:13.335500 [debug] [Thread-1 (]: Failed to rollback 'test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652'
[0m04:25:13.337099 [debug] [Thread-1 (]: On test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652: Close
[0m04:25:13.338431 [info ] [Thread-1 (]: 65 of 307 PASS not_null_quality_measures__stg_core__medication_patient_id ...... [[32mPASS[0m in 0.11s]
[0m04:25:13.340304 [debug] [Thread-1 (]: Finished running node test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652
[0m04:25:13.341730 [debug] [Thread-1 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators
[0m04:25:13.346043 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.acute_inpatient__stg_eligibility (compile): 04:25:13.314802 => 04:25:13.345650
[0m04:25:13.347102 [info ] [Thread-1 (]: 66 of 307 START sql table model data_quality._int_claims_preprocessing_eligibility_denominators  [RUN]
[0m04:25:13.351308 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652, now model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators)
[0m04:25:13.352385 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators
[0m04:25:13.349246 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.acute_inpatient__stg_eligibility
[0m04:25:13.364952 [debug] [Thread-4 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates
[0m04:25:13.365761 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"
[0m04:25:13.367232 [info ] [Thread-4 (]: 67 of 307 START sql table model data_quality._int_claims_preprocessing_eligibility_duplicates  [RUN]
[0m04:25:13.373556 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"} */

    select test_field
    from "synthea"."data_quality"."_value_set_test_catalog"
    where source_table = 'normalized_input__eligibility'
    and test_category = 'invalid_values'
  
[0m04:25:13.377079 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.acute_inpatient__stg_eligibility, now model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates)
[0m04:25:13.388038 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m04:25:13.389449 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates
[0m04:25:13.397371 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates"
[0m04:25:13.398781 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.410046 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"
[0m04:25:13.413536 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates (compile): 04:25:13.392249 => 04:25:13.413174
[0m04:25:13.417935 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates
[0m04:25:13.423683 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates"
[0m04:25:13.424943 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators (compile): 04:25:13.353209 => 04:25:13.424468
[0m04:25:13.432538 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators
[0m04:25:13.441018 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"
[0m04:25:13.443252 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates"
[0m04:25:13.447010 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates: BEGIN
[0m04:25:13.449026 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m04:25:13.451169 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.455280 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates"
[0m04:25:13.458186 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates"} */

  
    
    

    create  table
      "synthea"."data_quality"."_int_claims_preprocessing_eligibility_duplicates__dbt_tmp"
  
    as (
      

with eligibility as (

    select
          patient_id
        , member_id
        , payer
        , plan
        , enrollment_start_date
        , enrollment_end_date
        , data_source
    from "synthea"."claims_preprocessing"."normalized_input_eligibility"

)

, test_catalog as (

    select
          source_table
        , test_category
        , test_name
        , pipeline_test
    from "synthea"."data_quality"."_value_set_test_catalog"

)

select distinct
      test_catalog.source_table
    , 'all' as claim_type
    , 'patient_id' as grain
    , patient_id
    , data_source
    , test_catalog.test_category
    , test_catalog.test_name
    , test_catalog.pipeline_test
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from eligibility
     left join test_catalog
       on test_catalog.test_name = 'duplicate eligibility'
       and test_catalog.source_table = 'normalized_input__eligibility'
group by
      eligibility.patient_id
    , eligibility.member_id
    , eligibility.payer
    , eligibility.plan
    , eligibility.enrollment_start_date
    , eligibility.enrollment_end_date
    , eligibility.data_source
    , test_catalog.source_table
    , test_catalog.test_category
    , test_catalog.test_name
    , test_catalog.pipeline_test
having count(*) > 1
    );
  
  
[0m04:25:13.452092 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"
[0m04:25:13.462023 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators: BEGIN
[0m04:25:13.464013 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.465864 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"
[0m04:25:13.471138 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"} */

  
    
    

    create  table
      "synthea"."data_quality"."_int_claims_preprocessing_eligibility_denominators__dbt_tmp"
  
    as (
      
/*
    Denominator logic for invalid value tests is dependent on whether that
    specific field is populated or not. We created a macro to automatically
    generate the CTE. All invalid value tests must have a
    test_category = 'invalid_values' in the catalog seed.
*/
with all_denominator as (

    select
        cast('all' as TEXT ) as test_denominator_name
        , count(distinct patient_id) as denominator
        , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
    from "synthea"."claims_preprocessing"."normalized_input_eligibility"

)

, invalid_value_denominators as (

    select
          cat.test_name
        , count(distinct rel.patient_id) as denominator
        , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
    from "synthea"."claims_preprocessing"."normalized_input_eligibility" as rel
         left join "synthea"."data_quality"."_value_set_test_catalog" as cat
           on cat.test_category = 'invalid_values'
           and cat.source_table = 'normalized_input__eligibility'
           and cat.test_field = 'dual_status_code'
    where rel.dual_status_code is not null
    group by cat.test_name
    union all
    select
          cat.test_name
        , count(distinct rel.patient_id) as denominator
        , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
    from "synthea"."claims_preprocessing"."normalized_input_eligibility" as rel
         left join "synthea"."data_quality"."_value_set_test_catalog" as cat
           on cat.test_category = 'invalid_values'
           and cat.source_table = 'normalized_input__eligibility'
           and cat.test_field = 'gender'
    where rel.gender is not null
    group by cat.test_name
    union all
    select
          cat.test_name
        , count(distinct rel.patient_id) as denominator
        , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
    from "synthea"."claims_preprocessing"."normalized_input_eligibility" as rel
         left join "synthea"."data_quality"."_value_set_test_catalog" as cat
           on cat.test_category = 'invalid_values'
           and cat.source_table = 'normalized_input__eligibility'
           and cat.test_field = 'medicare_status_code'
    where rel.medicare_status_code is not null
    group by cat.test_name
    union all
    select
          cat.test_name
        , count(distinct rel.patient_id) as denominator
        , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
    from "synthea"."claims_preprocessing"."normalized_input_eligibility" as rel
         left join "synthea"."data_quality"."_value_set_test_catalog" as cat
           on cat.test_category = 'invalid_values'
           and cat.source_table = 'normalized_input__eligibility'
           and cat.test_field = 'original_reason_entitlement_code'
    where rel.original_reason_entitlement_code is not null
    group by cat.test_name
    union all
    select
          cat.test_name
        , count(distinct rel.patient_id) as denominator
        , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
    from "synthea"."claims_preprocessing"."normalized_input_eligibility" as rel
         left join "synthea"."data_quality"."_value_set_test_catalog" as cat
           on cat.test_category = 'invalid_values'
           and cat.source_table = 'normalized_input__eligibility'
           and cat.test_field = 'payer_type'
    where rel.payer_type is not null
    group by cat.test_name
    union all
    select
          cat.test_name
        , count(distinct rel.patient_id) as denominator
        , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
    from "synthea"."claims_preprocessing"."normalized_input_eligibility" as rel
         left join "synthea"."data_quality"."_value_set_test_catalog" as cat
           on cat.test_category = 'invalid_values'
           and cat.source_table = 'normalized_input__eligibility'
           and cat.test_field = 'race'
    where rel.race is not null
    group by cat.test_name
    

)

select * from all_denominator
union all
select * from invalid_value_denominators
    );
  
  
[0m04:25:13.470557 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.482976 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates"
[0m04:25:13.485437 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_eligibility_duplicates" rename to "_int_claims_preprocessing_eligibility_duplicates__dbt_backup"
[0m04:25:13.486768 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.491578 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates"
[0m04:25:13.495043 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_eligibility_duplicates__dbt_tmp" rename to "_int_claims_preprocessing_eligibility_duplicates"
[0m04:25:13.496812 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.499647 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates: COMMIT
[0m04:25:13.502301 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates"
[0m04:25:13.504484 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.506175 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates: COMMIT
[0m04:25:13.518812 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"
[0m04:25:13.526760 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_eligibility_denominators" rename to "_int_claims_preprocessing_eligibility_denominators__dbt_backup"
[0m04:25:13.527345 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.534319 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates"
[0m04:25:13.538063 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates"} */
drop table if exists "synthea"."data_quality"."_int_claims_preprocessing_eligibility_duplicates__dbt_backup" cascade
[0m04:25:13.530344 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.545833 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.556616 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates (execute): 04:25:13.419832 => 04:25:13.556375
[0m04:25:13.557204 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates: Close
[0m04:25:13.553362 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"
[0m04:25:13.558251 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8054c5d0>]}
[0m04:25:13.559321 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_eligibility_denominators__dbt_tmp" rename to "_int_claims_preprocessing_eligibility_denominators"
[0m04:25:13.560354 [info ] [Thread-4 (]: 67 of 307 OK created sql table model data_quality._int_claims_preprocessing_eligibility_duplicates  [[32mOK[0m in 0.18s]
[0m04:25:13.562788 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates
[0m04:25:13.564250 [debug] [Thread-4 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values
[0m04:25:13.566224 [info ] [Thread-4 (]: 68 of 307 START sql table model data_quality._int_claims_preprocessing_eligibility_invalid_values  [RUN]
[0m04:25:13.569728 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates, now model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values)
[0m04:25:13.563581 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.572392 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values
[0m04:25:13.580432 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators: COMMIT
[0m04:25:13.602749 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"
[0m04:25:13.605664 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"
[0m04:25:13.607558 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators: COMMIT
[0m04:25:13.612138 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.616364 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"
[0m04:25:13.618430 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"} */
drop table if exists "synthea"."data_quality"."_int_claims_preprocessing_eligibility_denominators__dbt_backup" cascade
[0m04:25:13.617974 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values (compile): 04:25:13.581652 => 04:25:13.617592
[0m04:25:13.623923 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values
[0m04:25:13.625429 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.637776 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators (execute): 04:25:13.434635 => 04:25:13.637553
[0m04:25:13.638753 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators: Close
[0m04:25:13.640613 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7cfe53d0>]}
[0m04:25:13.642973 [info ] [Thread-1 (]: 66 of 307 OK created sql table model data_quality._int_claims_preprocessing_eligibility_denominators  [[32mOK[0m in 0.29s]
[0m04:25:13.645544 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators
[0m04:25:13.634051 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"
[0m04:25:13.647534 [debug] [Thread-1 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values
[0m04:25:13.649695 [info ] [Thread-1 (]: 69 of 307 START sql table model data_quality._int_claims_preprocessing_eligibility_missing_values  [RUN]
[0m04:25:13.652713 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators, now model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values)
[0m04:25:13.654464 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values
[0m04:25:13.655856 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"
[0m04:25:13.671253 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values: BEGIN
[0m04:25:13.675932 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m04:25:13.679055 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.680686 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"
[0m04:25:13.682134 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"} */

  
    
    

    create  table
      "synthea"."data_quality"."_int_claims_preprocessing_eligibility_invalid_values__dbt_tmp"
  
    as (
      

with eligiblity as (

    select *
    from "synthea"."claims_preprocessing"."normalized_input_eligibility"

)

, test_catalog as (

    select
          source_table
        , test_category
        , test_name
        , pipeline_test
    from "synthea"."data_quality"."_value_set_test_catalog"

)

, valid_gender as (

    select
          test_catalog.test_name
        , test_catalog.pipeline_test
        , test_catalog.source_table
        , 'all' as claim_type
        , test_catalog.test_category
        , 'patient_id' as grain
        , eligiblity.patient_id
        , eligiblity.data_source
        , eligiblity.gender
        , count(eligiblity.gender) as filled_row_count
        , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
    from eligiblity
         left join "synthea"."terminology"."gender" gender
           on eligiblity.gender = gender.gender
         left join test_catalog
           on test_catalog.test_name = 'gender invalid'
           and test_catalog.source_table = 'normalized_input__eligibility'
    where gender.gender is null
    and eligiblity.gender is not null
    group by
          eligiblity.patient_id
        , eligiblity.data_source
        , eligiblity.gender
        , test_catalog.source_table
        , test_catalog.test_category
        , test_catalog.test_name
        , test_catalog.pipeline_test

)

, valid_race as (

    select
          test_catalog.test_name
        , test_catalog.pipeline_test
        , test_catalog.source_table
        , 'all' as claim_type
        , test_catalog.test_category
        , 'patient_id' as grain
        , eligiblity.patient_id
        , eligiblity.data_source
        , eligiblity.race
        , count(eligiblity.race) as filled_row_count
        , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
    from eligiblity
         left join "synthea"."terminology"."race" race
           on eligiblity.race = race.description
         left join test_catalog
           on test_catalog.test_name = 'race invalid'
           and test_catalog.source_table = 'normalized_input__eligibility'
    where race.description is null
    and eligiblity.race is not null
    group by
          eligiblity.patient_id
        , eligiblity.data_source
        , eligiblity.race
        , test_catalog.source_table
        , test_catalog.test_category
        , test_catalog.test_name
        , test_catalog.pipeline_test

)

, valid_payer_type as (

    select
          test_catalog.test_name
        , test_catalog.pipeline_test
        , test_catalog.source_table
        , 'all' as claim_type
        , test_catalog.test_category
        , 'patient_id' as grain
        , eligiblity.patient_id
        , eligiblity.data_source
        , eligiblity.payer_type
        , count(eligiblity.payer_type) as filled_row_count
        , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
    from eligiblity
         left join "synthea"."terminology"."payer_type" payer
           on eligiblity.payer_type = payer.payer_type
         left join test_catalog
           on test_catalog.test_name = 'payer_type invalid'
           and test_catalog.source_table = 'normalized_input__eligibility'
    where payer.payer_type is null
    and eligiblity.payer_type is not null
    group by
          eligiblity.patient_id
        , eligiblity.data_source
        , eligiblity.payer_type
        , test_catalog.source_table
        , test_catalog.test_category
        , test_catalog.test_name
        , test_catalog.pipeline_test

)

, valid_orec as (

    select
          test_catalog.test_name
        , test_catalog.pipeline_test
        , test_catalog.source_table
        , 'all' as claim_type
        , test_catalog.test_category
        , 'patient_id' as grain
        , eligiblity.patient_id
        , eligiblity.data_source
        , eligiblity.original_reason_entitlement_code
        , count(eligiblity.original_reason_entitlement_code) as filled_row_count
        , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
    from eligiblity
         left join "synthea"."terminology"."medicare_orec" orec
           on eligiblity.original_reason_entitlement_code = orec.original_reason_entitlement_code
         left join test_catalog
           on test_catalog.test_name = 'original_reason_entitlement_code invalid'
           and test_catalog.source_table = 'normalized_input__eligibility'
    where orec.original_reason_entitlement_code is null
    and eligiblity.original_reason_entitlement_code is not null
    group by
          eligiblity.patient_id
        , eligiblity.data_source
        , eligiblity.original_reason_entitlement_code
        , test_catalog.source_table
        , test_catalog.test_category
        , test_catalog.test_name
        , test_catalog.pipeline_test

)

, valid_dual_status_code as (

    select
          test_catalog.test_name
        , test_catalog.pipeline_test
        , test_catalog.source_table
        , 'all' as claim_type
        , test_catalog.test_category
        , 'patient_id' as grain
        , eligiblity.patient_id
        , eligiblity.data_source
        , eligiblity.dual_status_code
        , count(eligiblity.dual_status_code) as filled_row_count
        , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
    from eligiblity
         left join "synthea"."terminology"."medicare_dual_eligibility" dual
           on eligiblity.dual_status_code = dual.dual_status_code
         left join test_catalog
           on test_catalog.test_name = 'dual_status_code invalid'
           and test_catalog.source_table = 'normalized_input__eligibility'
    where dual.dual_status_code is null
    and eligiblity.dual_status_code is not null
    group by
          eligiblity.patient_id
        , eligiblity.data_source
        , eligiblity.dual_status_code
        , test_catalog.source_table
        , test_catalog.test_category
        , test_catalog.test_name
        , test_catalog.pipeline_test

)

, valid_medicare_status_code as (

    select
          test_catalog.test_name
        , test_catalog.pipeline_test
        , test_catalog.source_table
        , 'all' as claim_type
        , test_catalog.test_category
        , 'patient_id' as grain
        , eligiblity.patient_id
        , eligiblity.data_source
        , eligiblity.medicare_status_code
        , count(eligiblity.medicare_status_code) as filled_row_count
        , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
    from eligiblity
         left join "synthea"."terminology"."medicare_status" status
           on eligiblity.medicare_status_code = status.medicare_status_code
         left join test_catalog
           on test_catalog.test_name = 'medicare_status_code invalid'
           and test_catalog.source_table = 'normalized_input__eligibility'
    where status.medicare_status_code is null
    and eligiblity.medicare_status_code is not null
    group by
          eligiblity.patient_id
        , eligiblity.data_source
        , eligiblity.medicare_status_code
        , test_catalog.source_table
        , test_catalog.test_category
        , test_catalog.test_name
        , test_catalog.pipeline_test

)

select * from valid_gender
union all
select * from valid_race
union all
select * from valid_payer_type
union all
select * from valid_orec
union all
select * from valid_dual_status_code
union all
select * from valid_medicare_status_code
    );
  
  
[0m04:25:13.675483 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values"
[0m04:25:13.691216 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values (compile): 04:25:13.656382 => 04:25:13.690627
[0m04:25:13.692201 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values
[0m04:25:13.698792 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values"
[0m04:25:13.703405 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values"
[0m04:25:13.704482 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values: BEGIN
[0m04:25:13.705959 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m04:25:13.707426 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.708898 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values"
[0m04:25:13.709989 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values"} */

  
    
    

    create  table
      "synthea"."data_quality"."_int_claims_preprocessing_eligibility_missing_values__dbt_tmp"
  
    as (
      

with eligibility_missing as (

 
        select
              patient_id
            , data_source
            , 'patient_id' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where patient_id is null
        union all
        select
              patient_id
            , data_source
            , 'member_id' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where member_id is null
        union all
        select
              patient_id
            , data_source
            , 'gender' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where gender is null
        union all
        select
              patient_id
            , data_source
            , 'race' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where race is null
        union all
        select
              patient_id
            , data_source
            , 'birth_date' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where birth_date is null
        union all
        select
              patient_id
            , data_source
            , 'death_date' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where death_date is null
        union all
        select
              patient_id
            , data_source
            , 'death_flag' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where death_flag is null
        union all
        select
              patient_id
            , data_source
            , 'enrollment_start_date' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where enrollment_start_date is null
        union all
        select
              patient_id
            , data_source
            , 'enrollment_end_date' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where enrollment_end_date is null
        union all
        select
              patient_id
            , data_source
            , 'payer' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where payer is null
        union all
        select
              patient_id
            , data_source
            , 'payer_type' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where payer_type is null
        union all
        select
              patient_id
            , data_source
            , 'dual_status_code' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where dual_status_code is null
        union all
        select
              patient_id
            , data_source
            , 'medicare_status_code' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where medicare_status_code is null
        union all
        select
              patient_id
            , data_source
            , 'first_name' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where first_name is null
        union all
        select
              patient_id
            , data_source
            , 'last_name' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where last_name is null
        union all
        select
              patient_id
            , data_source
            , 'address' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where address is null
        union all
        select
              patient_id
            , data_source
            , 'city' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where city is null
        union all
        select
              patient_id
            , data_source
            , 'state' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where state is null
        union all
        select
              patient_id
            , data_source
            , 'zip_code' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where zip_code is null
        union all
        select
              patient_id
            , data_source
            , 'phone' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where phone is null
        union all
        select
              patient_id
            , data_source
            , 'data_source' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where data_source is null
        

)

, test_catalog as (

    select
          source_table
        , test_category
        , test_name
        , pipeline_test
    from "synthea"."data_quality"."_value_set_test_catalog"

)

select
      test_catalog.source_table
    , 'all' as claim_type
    , 'patient_id' as grain
    , eligibility_missing.patient_id
    , eligibility_missing.data_source
    , test_catalog.test_category
    , test_catalog.test_name
    , test_catalog.pipeline_test
    , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
from eligibility_missing
     left join test_catalog
       on test_catalog.test_name = eligibility_missing.column_checked||' missing'
       and test_catalog.source_table = 'normalized_input__eligibility'
group by
      eligibility_missing.patient_id
    , eligibility_missing.data_source
    , test_catalog.source_table
    , test_catalog.test_category
    , test_catalog.test_name
    , test_catalog.pipeline_test
    );
  
  
[0m04:25:13.720255 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.724236 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"
[0m04:25:13.725726 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.726746 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_eligibility_invalid_values" rename to "_int_claims_preprocessing_eligibility_invalid_values__dbt_backup"
[0m04:25:13.730619 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values"
[0m04:25:13.732216 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.733337 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_eligibility_missing_values" rename to "_int_claims_preprocessing_eligibility_missing_values__dbt_backup"
[0m04:25:13.737517 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"
[0m04:25:13.739020 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.739504 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_eligibility_invalid_values__dbt_tmp" rename to "_int_claims_preprocessing_eligibility_invalid_values"
[0m04:25:13.742688 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values"
[0m04:25:13.744602 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.745219 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_eligibility_missing_values__dbt_tmp" rename to "_int_claims_preprocessing_eligibility_missing_values"
[0m04:25:13.750401 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values: COMMIT
[0m04:25:13.752466 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"
[0m04:25:13.753086 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.753580 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values: COMMIT
[0m04:25:13.755641 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values: COMMIT
[0m04:25:13.756583 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values"
[0m04:25:13.757412 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values: COMMIT
[0m04:25:13.758977 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.762087 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"
[0m04:25:13.762521 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.763085 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"} */
drop table if exists "synthea"."data_quality"."_int_claims_preprocessing_eligibility_invalid_values__dbt_backup" cascade
[0m04:25:13.765734 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values"
[0m04:25:13.767832 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values"} */
drop table if exists "synthea"."data_quality"."_int_claims_preprocessing_eligibility_missing_values__dbt_backup" cascade
[0m04:25:13.768630 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.771571 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values (execute): 04:25:13.628745 => 04:25:13.771231
[0m04:25:13.773942 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values: Close
[0m04:25:13.772884 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.776099 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7f7c9990>]}
[0m04:25:13.778300 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values (execute): 04:25:13.693735 => 04:25:13.778002
[0m04:25:13.779724 [info ] [Thread-4 (]: 68 of 307 OK created sql table model data_quality._int_claims_preprocessing_eligibility_invalid_values  [[32mOK[0m in 0.21s]
[0m04:25:13.780517 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values: Close
[0m04:25:13.781659 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values
[0m04:25:13.783034 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff80101a50>]}
[0m04:25:13.784144 [debug] [Thread-4 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility
[0m04:25:13.785445 [info ] [Thread-1 (]: 69 of 307 OK created sql table model data_quality._int_claims_preprocessing_eligibility_missing_values  [[32mOK[0m in 0.13s]
[0m04:25:13.786467 [info ] [Thread-4 (]: 70 of 307 START sql table model data_quality._int_claims_preprocessing_eligibility_plausibility  [RUN]
[0m04:25:13.788293 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values
[0m04:25:13.789729 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values, now model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility)
[0m04:25:13.790611 [debug] [Thread-1 (]: Began running node model.the_tuva_project.emergency_department__stg_eligibility
[0m04:25:13.791917 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility
[0m04:25:13.793318 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values, now model.the_tuva_project.emergency_department__stg_eligibility)
[0m04:25:13.806214 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility"
[0m04:25:13.806863 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.emergency_department__stg_eligibility
[0m04:25:13.814233 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.emergency_department__stg_eligibility"
[0m04:25:13.815764 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility (compile): 04:25:13.793973 => 04:25:13.815415
[0m04:25:13.817632 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility
[0m04:25:13.823148 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility"
[0m04:25:13.823968 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.emergency_department__stg_eligibility (compile): 04:25:13.808124 => 04:25:13.823559
[0m04:25:13.825936 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.emergency_department__stg_eligibility
[0m04:25:13.828055 [debug] [Thread-1 (]: Began running node model.the_tuva_project.normalized_input__int_diagnosis_code_final
[0m04:25:13.829706 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility"
[0m04:25:13.830370 [info ] [Thread-1 (]: 71 of 307 SKIP relation claims_preprocessing.normalized_input__int_diagnosis_code_final  [[33mSKIP[0m]
[0m04:25:13.832489 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility: BEGIN
[0m04:25:13.842685 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.normalized_input__int_diagnosis_code_final
[0m04:25:13.843596 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m04:25:13.847338 [debug] [Thread-1 (]: Began running node model.the_tuva_project.normalized_input__int_procedure_code_final
[0m04:25:13.848772 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.849506 [info ] [Thread-1 (]: 72 of 307 SKIP relation claims_preprocessing.normalized_input__int_procedure_code_final  [[33mSKIP[0m]
[0m04:25:13.850570 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility"
[0m04:25:13.851478 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.normalized_input__int_procedure_code_final
[0m04:25:13.852335 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility"} */

  
    
    

    create  table
      "synthea"."data_quality"."_int_claims_preprocessing_eligibility_plausibility__dbt_tmp"
  
    as (
      

with eligiblity as (

    select *
    from "synthea"."claims_preprocessing"."normalized_input_eligibility"

)

, test_catalog as (

    select
          source_table
        , test_category
        , test_name
        , pipeline_test
    from "synthea"."data_quality"."_value_set_test_catalog"

)

, multiple_genders_test as (

    select
          test_catalog.test_name
        , test_catalog.pipeline_test
        , test_catalog.source_table
        , 'all' as claim_type
        , test_catalog.test_category
        , 'patient_id' as grain
        , eligiblity.patient_id
        , eligiblity.data_source
        , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
    from eligiblity
         left join test_catalog
           on test_catalog.test_name = 'multiple genders'
           and test_catalog.source_table = 'normalized_input__eligibility'
    group by
          eligiblity.patient_id
        , eligiblity.data_source
        , test_catalog.source_table
        , test_catalog.test_category
        , test_catalog.test_name
        , test_catalog.pipeline_test
    having count(distinct eligiblity.gender) > 1

)

, multiple_races_test as(

    select
          test_catalog.test_name
        , test_catalog.pipeline_test
        , test_catalog.source_table
        , 'all' as claim_type
        , test_catalog.test_category
        , 'patient_id' as grain
        , eligiblity.patient_id
        , eligiblity.data_source
        , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
    from eligiblity
         left join test_catalog
           on test_catalog.test_name = 'multiple races'
           and test_catalog.source_table = 'normalized_input__eligibility'
    group by
          eligiblity.patient_id
        , eligiblity.data_source
        , test_catalog.source_table
        , test_catalog.test_category
        , test_catalog.test_name
        , test_catalog.pipeline_test
    having count(distinct eligiblity.race) > 1

)

, multiple_birth_dates_test as(

    select
          test_catalog.test_name
        , test_catalog.pipeline_test
        , test_catalog.source_table
        , 'all' as claim_type
        , test_catalog.test_category
        , 'patient_id' as grain
        , eligiblity.patient_id
        , eligiblity.data_source
        , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
    from eligiblity
         left join test_catalog
           on test_catalog.test_name = 'multiple birth dates'
           and test_catalog.source_table = 'normalized_input__eligibility'
    group by
          eligiblity.patient_id
        , eligiblity.data_source
        , test_catalog.source_table
        , test_catalog.test_category
        , test_catalog.test_name
        , test_catalog.pipeline_test
    having count(distinct eligiblity.birth_date) > 1

)

, multiple_death_dates_test as(

    select
          test_catalog.test_name
        , test_catalog.pipeline_test
        , test_catalog.source_table
        , 'all' as claim_type
        , test_catalog.test_category
        , 'patient_id' as grain
        , eligiblity.patient_id
        , eligiblity.data_source
        , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
    from eligiblity
         left join test_catalog
           on test_catalog.test_name = 'multiple death dates'
           and test_catalog.source_table = 'normalized_input__eligibility'
    group by
          eligiblity.patient_id
        , eligiblity.data_source
        , test_catalog.source_table
        , test_catalog.test_category
        , test_catalog.test_name
        , test_catalog.pipeline_test
    having count(distinct eligiblity.death_date) > 1

)

, birth_date_after_death_date as(

    select
          test_catalog.test_name
        , test_catalog.pipeline_test
        , test_catalog.source_table
        , 'all' as claim_type
        , test_catalog.test_category
        , 'patient_id' as grain
        , eligiblity.patient_id
        , eligiblity.data_source
        , '2024-02-21 03:41:53.543436+00:00' as tuva_last_run
    from eligiblity
         left join test_catalog
           on test_catalog.test_name = 'birth date after death date'
           and test_catalog.source_table = 'normalized_input__eligibility'
    where eligiblity.birth_date > eligiblity.death_date
    group by
          eligiblity.patient_id
        , eligiblity.data_source
        , test_catalog.source_table
        , test_catalog.test_category
        , test_catalog.test_name
        , test_catalog.pipeline_test

)

select * from multiple_genders_test
union all
select * from multiple_races_test
union all
select * from multiple_birth_dates_test
union all
select * from multiple_death_dates_test
union all
select * from birth_date_after_death_date
    );
  
  
[0m04:25:13.856090 [debug] [Thread-1 (]: Began running node model.the_tuva_project.normalized_input__int_procedure_date_final
[0m04:25:13.858057 [info ] [Thread-1 (]: 73 of 307 SKIP relation claims_preprocessing.normalized_input__int_procedure_date_final  [[33mSKIP[0m]
[0m04:25:13.859520 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.normalized_input__int_procedure_date_final
[0m04:25:13.868244 [debug] [Thread-1 (]: Began running node model.the_tuva_project.normalized_input__int_present_on_admit_final
[0m04:25:13.869541 [info ] [Thread-1 (]: 74 of 307 SKIP relation claims_preprocessing.normalized_input__int_present_on_admit_final  [[33mSKIP[0m]
[0m04:25:13.870338 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.normalized_input__int_present_on_admit_final
[0m04:25:13.874268 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.884247 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility"
[0m04:25:13.887298 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_eligibility_plausibility" rename to "_int_claims_preprocessing_eligibility_plausibility__dbt_backup"
[0m04:25:13.888792 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.892587 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility"
[0m04:25:13.893609 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_eligibility_plausibility__dbt_tmp" rename to "_int_claims_preprocessing_eligibility_plausibility"
[0m04:25:13.895980 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.898354 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility: COMMIT
[0m04:25:13.899794 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility"
[0m04:25:13.901549 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility: COMMIT
[0m04:25:13.903811 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.907455 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility"
[0m04:25:13.909724 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility"} */
drop table if exists "synthea"."data_quality"."_int_claims_preprocessing_eligibility_plausibility__dbt_backup" cascade
[0m04:25:13.912243 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.915063 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility (execute): 04:25:13.818560 => 04:25:13.914825
[0m04:25:13.916046 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility: Close
[0m04:25:13.917536 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7fc89650>]}
[0m04:25:13.918530 [info ] [Thread-4 (]: 70 of 307 OK created sql table model data_quality._int_claims_preprocessing_eligibility_plausibility  [[32mOK[0m in 0.13s]
[0m04:25:13.920040 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility
[0m04:25:13.925819 [debug] [Thread-1 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility
[0m04:25:13.926851 [info ] [Thread-1 (]: 75 of 307 START sql table model data_quality._int_claims_preprocessing_test_detail_stage_eligibility  [RUN]
[0m04:25:13.928737 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.emergency_department__stg_eligibility, now model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility)
[0m04:25:13.929468 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility
[0m04:25:13.936035 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility"
[0m04:25:13.938891 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility (compile): 04:25:13.930084 => 04:25:13.938529
[0m04:25:13.940139 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility
[0m04:25:13.946577 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility"
[0m04:25:13.950878 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility"
[0m04:25:13.951751 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility: BEGIN
[0m04:25:13.953147 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m04:25:13.954428 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.955015 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility"
[0m04:25:13.955829 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility"} */

  
    
    

    create  table
      "synthea"."data_quality"."_int_claims_preprocessing_test_detail_stage_eligibility__dbt_tmp"
  
    as (
      


select distinct
    source_table
    , claim_type
    , grain
    , patient_id as foreign_key
    , data_source
    , test_category
    , test_name
    , pipeline_test
from "synthea"."data_quality"."_int_claims_preprocessing_eligibility_duplicates"
union all
select distinct
    source_table
    , claim_type
    , grain
    , patient_id as foreign_key
    , data_source
    , test_category
    , test_name
    , pipeline_test
from "synthea"."data_quality"."_int_claims_preprocessing_eligibility_missing_values"
union all
select distinct
    source_table
    , claim_type
    , grain
    , patient_id as foreign_key
    , data_source
    , test_category
    , test_name
    , pipeline_test
from "synthea"."data_quality"."_int_claims_preprocessing_eligibility_invalid_values"
union all
select distinct
    source_table
    , claim_type
    , grain
    , patient_id as foreign_key
    , data_source
    , test_category
    , test_name
    , pipeline_test
from "synthea"."data_quality"."_int_claims_preprocessing_eligibility_plausibility"
    );
  
  
[0m04:25:13.963341 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.967353 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility"
[0m04:25:13.968626 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_test_detail_stage_eligibility" rename to "_int_claims_preprocessing_test_detail_stage_eligibility__dbt_backup"
[0m04:25:13.969960 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.974001 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility"
[0m04:25:13.975183 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_test_detail_stage_eligibility__dbt_tmp" rename to "_int_claims_preprocessing_test_detail_stage_eligibility"
[0m04:25:13.976501 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.979073 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility: COMMIT
[0m04:25:13.980200 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility"
[0m04:25:13.981042 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility: COMMIT
[0m04:25:13.984920 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.988832 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility"
[0m04:25:13.989985 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility"} */
drop table if exists "synthea"."data_quality"."_int_claims_preprocessing_test_detail_stage_eligibility__dbt_backup" cascade
[0m04:25:13.991632 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m04:25:13.994080 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility (execute): 04:25:13.940763 => 04:25:13.993791
[0m04:25:13.995395 [debug] [Thread-1 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility: Close
[0m04:25:13.996789 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff805fd410>]}
[0m04:25:13.997809 [info ] [Thread-1 (]: 75 of 307 OK created sql table model data_quality._int_claims_preprocessing_test_detail_stage_eligibility  [[32mOK[0m in 0.07s]
[0m04:25:13.999194 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility
[0m04:25:29.507091 [debug] [Thread-2 (]: SQL status: OK in 18.0 seconds
[0m04:25:29.519085 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_undetermined_claim_type"
[0m04:25:31.108464 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_undetermined_claim_type: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_undetermined_claim_type"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_undetermined_claim_type" rename to "_int_normalized_input_undetermined_claim_type__dbt_backup"
[0m04:25:31.110818 [debug] [Thread-3 (]: SQL status: OK in 20.0 seconds
[0m04:25:31.114641 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_revenue_center_normalize"
[0m04:25:31.115218 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_revenue_center_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_revenue_center_normalize"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_revenue_center_normalize" rename to "_int_normalized_input_revenue_center_normalize__dbt_backup"
[0m04:25:31.115687 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m04:25:31.118879 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_undetermined_claim_type"
[0m04:25:31.119260 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m04:25:31.119601 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_undetermined_claim_type: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_undetermined_claim_type"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_undetermined_claim_type__dbt_tmp" rename to "_int_normalized_input_undetermined_claim_type"
[0m04:25:31.122000 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_revenue_center_normalize"
[0m04:25:31.122817 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_revenue_center_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_revenue_center_normalize"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_revenue_center_normalize__dbt_tmp" rename to "_int_normalized_input_revenue_center_normalize"
[0m04:25:31.123172 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m04:25:31.123644 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m04:25:31.125647 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_undetermined_claim_type: COMMIT
[0m04:25:31.127198 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_revenue_center_normalize: COMMIT
[0m04:25:31.127663 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_undetermined_claim_type"
[0m04:25:31.128086 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_revenue_center_normalize"
[0m04:25:31.128516 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_undetermined_claim_type: COMMIT
[0m04:25:31.128928 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_revenue_center_normalize: COMMIT
[0m04:25:31.131364 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m04:25:31.135148 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_undetermined_claim_type"
[0m04:25:31.135589 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m04:25:31.135922 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_undetermined_claim_type: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_undetermined_claim_type"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_undetermined_claim_type__dbt_backup" cascade
[0m04:25:31.138712 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_revenue_center_normalize"
[0m04:25:31.139515 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_revenue_center_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_revenue_center_normalize"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_revenue_center_normalize__dbt_backup" cascade
[0m04:25:31.140645 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m04:25:31.142455 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__int_undetermined_claim_type (execute): 04:25:11.391818 => 04:25:31.142113
[0m04:25:31.142847 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m04:25:31.143244 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_undetermined_claim_type: Close
[0m04:25:31.144430 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.normalized_input__int_revenue_center_normalize (execute): 04:25:11.362094 => 04:25:31.144263
[0m04:25:31.145695 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7f809310>]}
[0m04:25:31.146176 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_revenue_center_normalize: Close
[0m04:25:31.147178 [info ] [Thread-2 (]: 46 of 307 OK created sql table model claims_preprocessing._int_normalized_input_undetermined_claim_type  [[32mOK[0m in 19.99s]
[0m04:25:31.674776 [debug] [Thread-3 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': '8548c01c-e2ce-4395-a4c0-301a885e77a2', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7dabec90>]}
[0m04:25:31.675832 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.normalized_input__int_undetermined_claim_type
[0m04:25:31.676546 [info ] [Thread-3 (]: 45 of 307 OK created sql table model claims_preprocessing._int_normalized_input_revenue_center_normalize  [[32mOK[0m in 20.52s]
[0m04:25:31.677756 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.normalized_input__int_revenue_center_normalize
[0m04:25:31.690076 [debug] [Thread-4 (]: Began running node model.the_tuva_project.normalized_input__medical_claim
[0m04:25:31.690623 [info ] [Thread-4 (]: 76 of 307 SKIP relation claims_preprocessing.normalized_input__medical_claim ... [[33mSKIP[0m]
[0m04:25:31.691098 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.normalized_input__medical_claim
[0m04:25:31.692741 [debug] [Thread-2 (]: Began running node test.the_tuva_project.unique_normalized_input__medical_claim__claim_id_claim_line_number_.7102b4fe4f
[0m04:25:31.693197 [info ] [Thread-2 (]: 77 of 307 SKIP test unique_normalized_input__medical_claim__claim_id_claim_line_number_  [[33mSKIP[0m]
[0m04:25:31.693609 [debug] [Thread-2 (]: Finished running node test.the_tuva_project.unique_normalized_input__medical_claim__claim_id_claim_line_number_.7102b4fe4f
[0m04:25:31.698848 [debug] [Thread-1 (]: Began running node model.the_tuva_project.acute_inpatient__stg_medical_claim
[0m04:25:31.699324 [debug] [Thread-4 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_claim_type_mapping_failures
[0m04:25:31.699674 [debug] [Thread-3 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_claim_type_unmapped
[0m04:25:31.699992 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.acute_inpatient__stg_medical_claim
[0m04:25:31.700302 [debug] [Thread-2 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_institutional_header_fail_details
[0m04:25:31.700726 [info ] [Thread-4 (]: 78 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_claim_type_mapping_failures  [[33mSKIP[0m]
[0m04:25:31.701196 [info ] [Thread-3 (]: 79 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_claim_type_unmapped  [[33mSKIP[0m]
[0m04:25:31.701658 [debug] [Thread-1 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates
[0m04:25:31.702079 [info ] [Thread-2 (]: 80 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_institutional_header_fail_details  [[33mSKIP[0m]
[0m04:25:31.702531 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_claim_type_mapping_failures
[0m04:25:31.702964 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_claim_type_unmapped
[0m04:25:31.703377 [info ] [Thread-1 (]: 81 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_medical_claim_dates  [[33mSKIP[0m]
[0m04:25:31.703809 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_institutional_header_fail_details
[0m04:25:31.704260 [debug] [Thread-4 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates_inst
[0m04:25:31.704948 [debug] [Thread-3 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_denominators
[0m04:25:31.705368 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates
[0m04:25:31.705791 [debug] [Thread-2 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_duplicates
[0m04:25:31.706214 [info ] [Thread-4 (]: 82 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_medical_claim_dates_inst  [[33mSKIP[0m]
[0m04:25:31.706703 [info ] [Thread-3 (]: 83 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_medical_claim_denominators  [[33mSKIP[0m]
[0m04:25:31.707180 [debug] [Thread-1 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_inst_missing_values
[0m04:25:31.707635 [info ] [Thread-2 (]: 84 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_medical_claim_duplicates  [[33mSKIP[0m]
[0m04:25:31.708072 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates_inst
[0m04:25:31.708631 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_denominators
[0m04:25:31.709055 [info ] [Thread-1 (]: 85 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_medical_claim_inst_missing_values  [[33mSKIP[0m]
[0m04:25:31.709519 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_duplicates
[0m04:25:31.709955 [debug] [Thread-4 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_npi
[0m04:25:31.710374 [debug] [Thread-3 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_values
[0m04:25:31.710774 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_inst_missing_values
[0m04:25:31.711208 [debug] [Thread-2 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_line_numbers
[0m04:25:31.711617 [info ] [Thread-4 (]: 86 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_medical_claim_invalid_npi  [[33mSKIP[0m]
[0m04:25:31.712057 [info ] [Thread-3 (]: 87 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_medical_claim_invalid_values  [[33mSKIP[0m]
[0m04:25:31.712528 [debug] [Thread-1 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_plausibility
[0m04:25:31.712995 [info ] [Thread-2 (]: 88 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_medical_claim_line_numbers  [[33mSKIP[0m]
[0m04:25:31.713442 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_npi
[0m04:25:31.713964 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_values
[0m04:25:31.714397 [info ] [Thread-1 (]: 89 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_medical_claim_plausibility  [[33mSKIP[0m]
[0m04:25:31.714848 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_line_numbers
[0m04:25:31.715316 [debug] [Thread-4 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_prof_missing_values
[0m04:25:31.715748 [debug] [Thread-3 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_professional_header_fail_details
[0m04:25:31.716157 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_plausibility
[0m04:25:31.716833 [debug] [Thread-2 (]: Began running node model.the_tuva_project.emergency_department__stg_medical_claim
[0m04:25:31.717255 [info ] [Thread-4 (]: 90 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_medical_claim_prof_missing_values  [[33mSKIP[0m]
[0m04:25:31.717705 [info ] [Thread-3 (]: 91 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_professional_header_fail_details  [[33mSKIP[0m]
[0m04:25:31.718156 [debug] [Thread-1 (]: Began running node model.the_tuva_project.service_category__stg_medical_claim
[0m04:25:31.718574 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.emergency_department__stg_medical_claim
[0m04:25:31.718976 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_prof_missing_values
[0m04:25:31.719411 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_professional_header_fail_details
[0m04:25:31.719817 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.service_category__stg_medical_claim
[0m04:25:31.720828 [debug] [Thread-2 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_medical_claim
[0m04:25:31.722439 [debug] [Thread-3 (]: Began running node model.the_tuva_project.service_category__acute_inpatient_institutional
[0m04:25:31.722774 [debug] [Thread-4 (]: Began running node model.the_tuva_project.service_category__acute_inpatient_professional
[0m04:25:31.723076 [info ] [Thread-2 (]: 92 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_test_detail_stage_medical_claim  [[33mSKIP[0m]
[0m04:25:31.723513 [debug] [Thread-1 (]: Began running node model.the_tuva_project.service_category__ambulance_professional
[0m04:25:31.723830 [info ] [Thread-3 (]: 93 of 307 SKIP relation claims_preprocessing.service_category__acute_inpatient_institutional  [[33mSKIP[0m]
[0m04:25:31.724233 [info ] [Thread-4 (]: 94 of 307 SKIP relation claims_preprocessing.service_category__acute_inpatient_professional  [[33mSKIP[0m]
[0m04:25:31.724689 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_medical_claim
[0m04:25:31.725076 [info ] [Thread-1 (]: 95 of 307 SKIP relation claims_preprocessing.service_category__ambulance_professional  [[33mSKIP[0m]
[0m04:25:31.725514 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.service_category__acute_inpatient_institutional
[0m04:25:31.725906 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.service_category__acute_inpatient_professional
[0m04:25:31.726324 [debug] [Thread-2 (]: Began running node model.the_tuva_project.service_category__dialysis_institutional
[0m04:25:31.726907 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.service_category__ambulance_professional
[0m04:25:31.727327 [debug] [Thread-3 (]: Began running node model.the_tuva_project.service_category__dialysis_professional
[0m04:25:31.727993 [debug] [Thread-4 (]: Began running node model.the_tuva_project.service_category__dme_professional
[0m04:25:31.728412 [info ] [Thread-2 (]: 96 of 307 SKIP relation claims_preprocessing.service_category__dialysis_institutional  [[33mSKIP[0m]
[0m04:25:31.728855 [debug] [Thread-1 (]: Began running node model.the_tuva_project.service_category__dq_input_layer_tests
[0m04:25:31.729277 [info ] [Thread-3 (]: 97 of 307 SKIP relation claims_preprocessing.service_category__dialysis_professional  [[33mSKIP[0m]
[0m04:25:31.729721 [info ] [Thread-4 (]: 98 of 307 SKIP relation claims_preprocessing.service_category__dme_professional  [[33mSKIP[0m]
[0m04:25:31.730223 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.service_category__dialysis_institutional
[0m04:25:31.730707 [info ] [Thread-1 (]: 99 of 307 SKIP relation claims_preprocessing.service_category__dq_input_layer_tests  [[33mSKIP[0m]
[0m04:25:31.731177 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.service_category__dialysis_professional
[0m04:25:31.731610 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.service_category__dme_professional
[0m04:25:31.732038 [debug] [Thread-2 (]: Began running node model.the_tuva_project.service_category__duplicate_bill_types
[0m04:25:31.732450 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.service_category__dq_input_layer_tests
[0m04:25:31.732880 [debug] [Thread-3 (]: Began running node model.the_tuva_project.service_category__emergency_department_professional
[0m04:25:31.733341 [debug] [Thread-4 (]: Began running node model.the_tuva_project.service_category__home_health_institutional
[0m04:25:31.733819 [info ] [Thread-2 (]: 100 of 307 SKIP relation claims_preprocessing.service_category__duplicate_bill_types  [[33mSKIP[0m]
[0m04:25:31.734255 [debug] [Thread-1 (]: Began running node model.the_tuva_project.service_category__hospice_institutional
[0m04:25:31.734662 [info ] [Thread-3 (]: 101 of 307 SKIP relation claims_preprocessing.service_category__emergency_department_professional  [[33mSKIP[0m]
[0m04:25:31.735096 [info ] [Thread-4 (]: 102 of 307 SKIP relation claims_preprocessing.service_category__home_health_institutional  [[33mSKIP[0m]
[0m04:25:31.735602 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.service_category__duplicate_bill_types
[0m04:25:31.736016 [info ] [Thread-1 (]: 103 of 307 SKIP relation claims_preprocessing.service_category__hospice_institutional  [[33mSKIP[0m]
[0m04:25:31.736464 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.service_category__emergency_department_professional
[0m04:25:31.736972 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.service_category__home_health_institutional
[0m04:25:31.737429 [debug] [Thread-2 (]: Began running node model.the_tuva_project.service_category__hospice_professional
[0m04:25:31.737831 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.service_category__hospice_institutional
[0m04:25:31.738299 [debug] [Thread-3 (]: Began running node model.the_tuva_project.service_category__inpatient_psychiatric_professional
[0m04:25:31.738734 [debug] [Thread-4 (]: Began running node model.the_tuva_project.service_category__inpatient_rehab_professional
[0m04:25:31.739152 [info ] [Thread-2 (]: 104 of 307 SKIP relation claims_preprocessing.service_category__hospice_professional  [[33mSKIP[0m]
[0m04:25:31.739602 [debug] [Thread-1 (]: Began running node model.the_tuva_project.service_category__lab_institutional
[0m04:25:31.740008 [info ] [Thread-3 (]: 105 of 307 SKIP relation claims_preprocessing.service_category__inpatient_psychiatric_professional  [[33mSKIP[0m]
[0m04:25:31.740452 [info ] [Thread-4 (]: 106 of 307 SKIP relation claims_preprocessing.service_category__inpatient_rehab_professional  [[33mSKIP[0m]
[0m04:25:31.740896 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.service_category__hospice_professional
[0m04:25:31.741275 [info ] [Thread-1 (]: 107 of 307 SKIP relation claims_preprocessing.service_category__lab_institutional  [[33mSKIP[0m]
[0m04:25:31.741702 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.service_category__inpatient_psychiatric_professional
[0m04:25:31.742131 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.service_category__inpatient_rehab_professional
[0m04:25:31.742546 [debug] [Thread-2 (]: Began running node model.the_tuva_project.service_category__lab_professional
[0m04:25:31.742953 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.service_category__lab_institutional
[0m04:25:31.743367 [debug] [Thread-3 (]: Began running node model.the_tuva_project.service_category__office_visit_professional
[0m04:25:31.743811 [debug] [Thread-4 (]: Began running node model.the_tuva_project.service_category__outpatient_hospital_or_clinic_professional
[0m04:25:31.744224 [info ] [Thread-2 (]: 108 of 307 SKIP relation claims_preprocessing.service_category__lab_professional  [[33mSKIP[0m]
[0m04:25:31.744652 [debug] [Thread-1 (]: Began running node model.the_tuva_project.service_category__outpatient_psychiatric_institutional
[0m04:25:31.745057 [info ] [Thread-3 (]: 109 of 307 SKIP relation claims_preprocessing.service_category__office_visit_professional  [[33mSKIP[0m]
[0m04:25:31.745547 [info ] [Thread-4 (]: 110 of 307 SKIP relation claims_preprocessing.service_category__outpatient_hospital_or_clinic_professional  [[33mSKIP[0m]
[0m04:25:31.745985 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.service_category__lab_professional
[0m04:25:31.746402 [info ] [Thread-1 (]: 111 of 307 SKIP relation claims_preprocessing.service_category__outpatient_psychiatric_institutional  [[33mSKIP[0m]
[0m04:25:31.746876 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.service_category__office_visit_professional
[0m04:25:31.747332 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.service_category__outpatient_hospital_or_clinic_professional
[0m04:25:31.747751 [debug] [Thread-2 (]: Began running node model.the_tuva_project.service_category__outpatient_psychiatric_professional
[0m04:25:31.748199 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.service_category__outpatient_psychiatric_institutional
[0m04:25:31.748668 [debug] [Thread-3 (]: Began running node model.the_tuva_project.service_category__outpatient_rehab_professional
[0m04:25:31.749093 [debug] [Thread-4 (]: Began running node model.the_tuva_project.service_category__skilled_nursing_institutional
[0m04:25:31.749562 [info ] [Thread-2 (]: 112 of 307 SKIP relation claims_preprocessing.service_category__outpatient_psychiatric_professional  [[33mSKIP[0m]
[0m04:25:31.750047 [debug] [Thread-1 (]: Began running node model.the_tuva_project.service_category__urgent_care_professional
[0m04:25:31.750543 [info ] [Thread-3 (]: 113 of 307 SKIP relation claims_preprocessing.service_category__outpatient_rehab_professional  [[33mSKIP[0m]
[0m04:25:31.750993 [info ] [Thread-4 (]: 114 of 307 SKIP relation claims_preprocessing.service_category__skilled_nursing_institutional  [[33mSKIP[0m]
[0m04:25:31.751458 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.service_category__outpatient_psychiatric_professional
[0m04:25:31.751898 [info ] [Thread-1 (]: 115 of 307 SKIP relation claims_preprocessing.service_category__urgent_care_professional  [[33mSKIP[0m]
[0m04:25:31.752320 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.service_category__outpatient_rehab_professional
[0m04:25:31.752761 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.service_category__skilled_nursing_institutional
[0m04:25:31.753249 [debug] [Thread-2 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_test_detail
[0m04:25:31.753658 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.service_category__urgent_care_professional
[0m04:25:31.754064 [debug] [Thread-3 (]: Began running node model.the_tuva_project.service_category__emergency_department_institutional
[0m04:25:31.754497 [debug] [Thread-4 (]: Began running node model.the_tuva_project.service_category__ambulatory_surgery_professional
[0m04:25:31.754900 [info ] [Thread-2 (]: 116 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_test_detail  [[33mSKIP[0m]
[0m04:25:31.755365 [debug] [Thread-1 (]: Began running node model.the_tuva_project.service_category__home_health_professional
[0m04:25:31.755771 [info ] [Thread-3 (]: 117 of 307 SKIP relation claims_preprocessing.service_category__emergency_department_institutional  [[33mSKIP[0m]
[0m04:25:31.756207 [info ] [Thread-4 (]: 118 of 307 SKIP relation claims_preprocessing.service_category__ambulatory_surgery_professional  [[33mSKIP[0m]
[0m04:25:31.756646 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_test_detail
[0m04:25:31.757039 [info ] [Thread-1 (]: 119 of 307 SKIP relation claims_preprocessing.service_category__home_health_professional  [[33mSKIP[0m]
[0m04:25:31.757477 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.service_category__emergency_department_institutional
[0m04:25:31.757911 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.service_category__ambulatory_surgery_professional
[0m04:25:31.758430 [debug] [Thread-2 (]: Began running node model.the_tuva_project.service_category__skilled_nursing_professional
[0m04:25:31.759333 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.service_category__home_health_professional
[0m04:25:31.759987 [debug] [Thread-3 (]: Began running node model.the_tuva_project.service_category__dq_input_layer_results
[0m04:25:31.760484 [debug] [Thread-4 (]: Began running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_source_table.cf991d30ab
[0m04:25:31.760900 [info ] [Thread-2 (]: 120 of 307 SKIP relation claims_preprocessing.service_category__skilled_nursing_professional  [[33mSKIP[0m]
[0m04:25:31.761357 [debug] [Thread-1 (]: Began running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_test_category.ced96217c6
[0m04:25:31.761759 [info ] [Thread-3 (]: 121 of 307 SKIP relation claims_preprocessing.service_category__dq_input_layer_results  [[33mSKIP[0m]
[0m04:25:31.762255 [info ] [Thread-4 (]: 122 of 307 SKIP test not_null_data_quality__claims_preprocessing_test_detail_source_table  [[33mSKIP[0m]
[0m04:25:31.762706 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.service_category__skilled_nursing_professional
[0m04:25:31.763127 [info ] [Thread-1 (]: 123 of 307 SKIP test not_null_data_quality__claims_preprocessing_test_detail_test_category  [[33mSKIP[0m]
[0m04:25:31.763558 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.service_category__dq_input_layer_results
[0m04:25:31.764062 [debug] [Thread-4 (]: Finished running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_source_table.cf991d30ab
[0m04:25:31.764775 [debug] [Thread-2 (]: Began running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_test_name.dba1927ba6
[0m04:25:31.765231 [debug] [Thread-1 (]: Finished running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_test_category.ced96217c6
[0m04:25:31.765664 [debug] [Thread-3 (]: Began running node model.the_tuva_project.service_category__urgent_care_institutional
[0m04:25:31.766088 [debug] [Thread-4 (]: Began running node model.the_tuva_project.service_category__combined_professional
[0m04:25:31.767184 [info ] [Thread-2 (]: 124 of 307 SKIP test not_null_data_quality__claims_preprocessing_test_detail_test_name  [[33mSKIP[0m]
[0m04:25:31.768158 [info ] [Thread-3 (]: 125 of 307 SKIP relation claims_preprocessing.service_category__urgent_care_institutional  [[33mSKIP[0m]
[0m04:25:31.768610 [info ] [Thread-4 (]: 126 of 307 SKIP relation claims_preprocessing.service_category__combined_professional  [[33mSKIP[0m]
[0m04:25:31.769042 [debug] [Thread-2 (]: Finished running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_test_name.dba1927ba6
[0m04:25:31.769450 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.service_category__urgent_care_institutional
[0m04:25:31.769838 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.service_category__combined_professional
[0m04:25:31.771370 [debug] [Thread-1 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_summary
[0m04:25:31.771692 [debug] [Thread-2 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_eligibility
[0m04:25:31.772009 [debug] [Thread-4 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_medical_claim
[0m04:25:31.772302 [debug] [Thread-3 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_pharmacy_claim
[0m04:25:31.772730 [info ] [Thread-1 (]: 127 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_summary  [[33mSKIP[0m]
[0m04:25:31.773193 [info ] [Thread-2 (]: 128 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_test_result_stage_eligibility  [[33mSKIP[0m]
[0m04:25:31.773632 [info ] [Thread-4 (]: 129 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_test_result_stage_medical_claim  [[33mSKIP[0m]
[0m04:25:31.774053 [info ] [Thread-3 (]: 130 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_test_result_stage_pharmacy_claim  [[33mSKIP[0m]
[0m04:25:31.774515 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_summary
[0m04:25:31.775035 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_eligibility
[0m04:25:31.775485 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_medical_claim
[0m04:25:31.775885 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_pharmacy_claim
[0m04:25:31.776314 [debug] [Thread-1 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_use_case
[0m04:25:31.776872 [debug] [Thread-2 (]: Began running node model.the_tuva_project.service_category__outpatient_hospital_or_clinic_institutional
[0m04:25:31.777342 [debug] [Thread-4 (]: Began running node model.the_tuva_project.service_category__dq_multiple_service_categories_professional
[0m04:25:31.777780 [debug] [Thread-3 (]: Began running node test.the_tuva_project.claims_preprocessing_pipeline_checks_data_quality__claims_preprocessing_summary_.b6e0d43468
[0m04:25:31.778212 [info ] [Thread-1 (]: 131 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_use_case  [[33mSKIP[0m]
[0m04:25:31.778671 [info ] [Thread-2 (]: 132 of 307 SKIP relation claims_preprocessing.service_category__outpatient_hospital_or_clinic_institutional  [[33mSKIP[0m]
[0m04:25:31.779118 [info ] [Thread-4 (]: 133 of 307 SKIP relation claims_preprocessing.service_category__dq_multiple_service_categories_professional  [[33mSKIP[0m]
[0m04:25:31.779551 [info ] [Thread-3 (]: 134 of 307 SKIP test claims_preprocessing_pipeline_checks_data_quality__claims_preprocessing_summary_  [[33mSKIP[0m]
[0m04:25:31.780072 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_use_case
[0m04:25:31.780522 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.service_category__outpatient_hospital_or_clinic_institutional
[0m04:25:31.780940 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.service_category__dq_multiple_service_categories_professional
[0m04:25:31.781350 [debug] [Thread-3 (]: Finished running node test.the_tuva_project.claims_preprocessing_pipeline_checks_data_quality__claims_preprocessing_summary_.b6e0d43468
[0m04:25:31.781769 [debug] [Thread-1 (]: Began running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_summary_source_table.69a94b9930
[0m04:25:31.782832 [debug] [Thread-2 (]: Began running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_summary_test_category.096fbc6a15
[0m04:25:31.783351 [debug] [Thread-4 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_test_result
[0m04:25:31.783781 [debug] [Thread-3 (]: Began running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_source_table.aa47c26a47
[0m04:25:31.785392 [info ] [Thread-1 (]: 135 of 307 SKIP test not_null_data_quality__claims_preprocessing_summary_source_table  [[33mSKIP[0m]
[0m04:25:31.785842 [info ] [Thread-2 (]: 136 of 307 SKIP test not_null_data_quality__claims_preprocessing_summary_test_category  [[33mSKIP[0m]
[0m04:25:31.786329 [info ] [Thread-4 (]: 137 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_test_result  [[33mSKIP[0m]
[0m04:25:31.786755 [info ] [Thread-3 (]: 138 of 307 SKIP test not_null_data_quality__claims_preprocessing_use_case_source_table  [[33mSKIP[0m]
[0m04:25:31.787202 [debug] [Thread-1 (]: Finished running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_summary_source_table.69a94b9930
[0m04:25:31.787605 [debug] [Thread-2 (]: Finished running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_summary_test_category.096fbc6a15
[0m04:25:31.788008 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_test_result
[0m04:25:31.788410 [debug] [Thread-3 (]: Finished running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_source_table.aa47c26a47
[0m04:25:31.788832 [debug] [Thread-1 (]: Began running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_test_name.d9661e41fa
[0m04:25:31.789505 [debug] [Thread-2 (]: Began running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_use_case.50708d3a7d
[0m04:25:31.790771 [debug] [Thread-4 (]: Began running node model.the_tuva_project.service_category__combined_institutional
[0m04:25:31.791410 [debug] [Thread-3 (]: Began running node model.the_tuva_project.core__stg_claims_eligibility
[0m04:25:31.791911 [info ] [Thread-1 (]: 139 of 307 SKIP test not_null_data_quality__claims_preprocessing_use_case_test_name  [[33mSKIP[0m]
[0m04:25:31.792352 [info ] [Thread-2 (]: 140 of 307 SKIP test not_null_data_quality__claims_preprocessing_use_case_use_case  [[33mSKIP[0m]
[0m04:25:31.792865 [info ] [Thread-4 (]: 141 of 307 SKIP relation claims_preprocessing.service_category__combined_institutional  [[33mSKIP[0m]
[0m04:25:31.793315 [info ] [Thread-3 (]: 142 of 307 SKIP relation core.core__stg_claims_eligibility ..................... [[33mSKIP[0m]
[0m04:25:31.793748 [debug] [Thread-1 (]: Finished running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_test_name.d9661e41fa
[0m04:25:31.794161 [debug] [Thread-2 (]: Finished running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_use_case.50708d3a7d
[0m04:25:31.794560 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.service_category__combined_institutional
[0m04:25:31.794964 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.core__stg_claims_eligibility
[0m04:25:31.795660 [debug] [Thread-1 (]: Began running node model.the_tuva_project.core__stg_claims_patient
[0m04:25:31.796172 [debug] [Thread-2 (]: Began running node model.the_tuva_project.core__stg_claims_pharmacy_claim
[0m04:25:31.796610 [debug] [Thread-4 (]: Began running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_source_table.6995ae2e57
[0m04:25:31.797075 [debug] [Thread-3 (]: Began running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_test_category.70042a7a27
[0m04:25:31.797606 [info ] [Thread-1 (]: 143 of 307 SKIP relation core.core__stg_claims_patient ......................... [[33mSKIP[0m]
[0m04:25:31.798024 [info ] [Thread-2 (]: 144 of 307 SKIP relation core.core__stg_claims_pharmacy_claim .................. [[33mSKIP[0m]
[0m04:25:31.798648 [info ] [Thread-4 (]: 145 of 307 SKIP test not_null_data_quality__claims_preprocessing_test_result_source_table  [[33mSKIP[0m]
[0m04:25:31.799211 [info ] [Thread-3 (]: 146 of 307 SKIP test not_null_data_quality__claims_preprocessing_test_result_test_category  [[33mSKIP[0m]
[0m04:25:31.799670 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.core__stg_claims_patient
[0m04:25:31.800090 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.core__stg_claims_pharmacy_claim
[0m04:25:31.800514 [debug] [Thread-4 (]: Finished running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_source_table.6995ae2e57
[0m04:25:31.800917 [debug] [Thread-3 (]: Finished running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_test_category.70042a7a27
[0m04:25:31.801572 [debug] [Thread-1 (]: Began running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_test_name.745065a5e9
[0m04:25:31.802010 [debug] [Thread-2 (]: Began running node model.the_tuva_project.service_category__dq_multiple_service_categories_institutional
[0m04:25:31.802484 [debug] [Thread-4 (]: Began running node model.the_tuva_project.service_category__service_category_grouper
[0m04:25:31.802911 [debug] [Thread-3 (]: Began running node model.the_tuva_project.core__eligibility
[0m04:25:31.803313 [info ] [Thread-1 (]: 147 of 307 SKIP test not_null_data_quality__claims_preprocessing_test_result_test_name  [[33mSKIP[0m]
[0m04:25:31.804003 [info ] [Thread-2 (]: 148 of 307 SKIP relation claims_preprocessing.service_category__dq_multiple_service_categories_institutional  [[33mSKIP[0m]
[0m04:25:31.804744 [info ] [Thread-4 (]: 149 of 307 SKIP relation claims_preprocessing.service_category__service_category_grouper  [[33mSKIP[0m]
[0m04:25:31.805243 [info ] [Thread-3 (]: 150 of 307 SKIP relation core.core__eligibility ................................ [[33mSKIP[0m]
[0m04:25:31.805744 [debug] [Thread-1 (]: Finished running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_test_name.745065a5e9
[0m04:25:31.806285 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.service_category__dq_multiple_service_categories_institutional
[0m04:25:31.806765 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.service_category__service_category_grouper
[0m04:25:31.807295 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.core__eligibility
[0m04:25:31.807821 [debug] [Thread-1 (]: Began running node model.the_tuva_project.core__patient
[0m04:25:31.808312 [debug] [Thread-2 (]: Began running node model.the_tuva_project.core__pharmacy_claim
[0m04:25:31.809137 [debug] [Thread-4 (]: Began running node model.the_tuva_project.acute_inpatient__stg_service_category
[0m04:25:31.809585 [debug] [Thread-3 (]: Began running node model.the_tuva_project.emergency_department__stg_service_category
[0m04:25:31.810612 [info ] [Thread-1 (]: 151 of 307 SKIP relation core.core__patient .................................... [[33mSKIP[0m]
[0m04:25:31.811156 [info ] [Thread-2 (]: 152 of 307 SKIP relation core.core__pharmacy_claim ............................. [[33mSKIP[0m]
[0m04:25:31.811649 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.acute_inpatient__stg_service_category
[0m04:25:31.812088 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.emergency_department__stg_service_category
[0m04:25:31.812534 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.core__patient
[0m04:25:31.812942 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.core__pharmacy_claim
[0m04:25:31.813390 [debug] [Thread-4 (]: Began running node model.the_tuva_project.cms_hcc__stg_core__eligibility
[0m04:25:31.813816 [debug] [Thread-3 (]: Began running node model.the_tuva_project.financial_pmpm__stg_eligibility
[0m04:25:31.814269 [debug] [Thread-1 (]: Began running node model.the_tuva_project.acute_inpatient__institutional_claims
[0m04:25:31.815351 [debug] [Thread-2 (]: Began running node model.the_tuva_project.emergency_department__int_institutional_claims
[0m04:25:31.815842 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.cms_hcc__stg_core__eligibility
[0m04:25:31.816251 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.financial_pmpm__stg_eligibility
[0m04:25:31.816662 [info ] [Thread-1 (]: 153 of 307 SKIP relation claims_preprocessing.acute_inpatient__institutional_claims  [[33mSKIP[0m]
[0m04:25:31.817117 [info ] [Thread-2 (]: 154 of 307 SKIP relation claims_preprocessing.emergency_department__int_institutional_claims  [[33mSKIP[0m]
[0m04:25:31.817565 [debug] [Thread-4 (]: Began running node model.the_tuva_project.cms_chronic_conditions__stg_core__patient
[0m04:25:31.818015 [debug] [Thread-3 (]: Began running node model.the_tuva_project.cms_hcc__stg_core__patient
[0m04:25:31.818654 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.acute_inpatient__institutional_claims
[0m04:25:31.819084 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.emergency_department__int_institutional_claims
[0m04:25:31.819524 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.cms_chronic_conditions__stg_core__patient
[0m04:25:31.819933 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.cms_hcc__stg_core__patient
[0m04:25:31.820591 [debug] [Thread-1 (]: Began running node model.the_tuva_project.ed_classification__stg_patient
[0m04:25:31.821023 [debug] [Thread-2 (]: Began running node model.the_tuva_project.hcc_suspecting__stg_core__patient
[0m04:25:31.821570 [debug] [Thread-4 (]: Began running node model.the_tuva_project.quality_measures__stg_core__patient
[0m04:25:31.822006 [debug] [Thread-3 (]: Began running node model.the_tuva_project.tuva_chronic_conditions__stg_core__patient
[0m04:25:31.822661 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.ed_classification__stg_patient
[0m04:25:31.823125 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.hcc_suspecting__stg_core__patient
[0m04:25:31.823606 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.quality_measures__stg_core__patient
[0m04:25:31.824079 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.tuva_chronic_conditions__stg_core__patient
[0m04:25:31.824594 [debug] [Thread-1 (]: Began running node model.the_tuva_project.financial_pmpm__stg_pharmacy_claim
[0m04:25:31.825728 [debug] [Thread-2 (]: Began running node model.the_tuva_project.quality_measures__stg_pharmacy_claim
[0m04:25:31.827028 [debug] [Thread-4 (]: Began running node model.the_tuva_project.financial_pmpm__member_months
[0m04:25:31.828614 [debug] [Thread-3 (]: Began running node model.the_tuva_project.acute_inpatient__data_quality_summary
[0m04:25:31.830030 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.financial_pmpm__stg_pharmacy_claim
[0m04:25:31.830956 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.quality_measures__stg_pharmacy_claim
[0m04:25:31.831516 [info ] [Thread-4 (]: 155 of 307 SKIP relation financial_pmpm.financial_pmpm__member_months .......... [[33mSKIP[0m]
[0m04:25:31.832062 [info ] [Thread-3 (]: 156 of 307 SKIP relation claims_preprocessing.acute_inpatient__data_quality_summary  [[33mSKIP[0m]
[0m04:25:31.833093 [debug] [Thread-1 (]: Began running node model.the_tuva_project.acute_inpatient__institutional_encounter_id
[0m04:25:31.833674 [debug] [Thread-2 (]: Began running node model.the_tuva_project.emergency_department__int_institutional_encounter_id
[0m04:25:31.834168 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.financial_pmpm__member_months
[0m04:25:31.834593 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.acute_inpatient__data_quality_summary
[0m04:25:31.835025 [info ] [Thread-1 (]: 157 of 307 SKIP relation claims_preprocessing.acute_inpatient__institutional_encounter_id  [[33mSKIP[0m]
[0m04:25:31.835784 [info ] [Thread-2 (]: 158 of 307 SKIP relation claims_preprocessing.emergency_department__int_institutional_encounter_id  [[33mSKIP[0m]
[0m04:25:31.837213 [debug] [Thread-4 (]: Began running node model.the_tuva_project.cms_hcc__int_members
[0m04:25:31.837832 [debug] [Thread-3 (]: Began running node test.the_tuva_project.accepted_values_quality_measures__stg_core__patient_sex__female__male__unknown.e6adc9ce2b
[0m04:25:31.838400 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.acute_inpatient__institutional_encounter_id
[0m04:25:31.838922 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.emergency_department__int_institutional_encounter_id
[0m04:25:31.839627 [info ] [Thread-4 (]: 159 of 307 SKIP relation cms_hcc.cms_hcc__int_members .......................... [[33mSKIP[0m]
[0m04:25:31.840683 [info ] [Thread-3 (]: 160 of 307 SKIP test accepted_values_quality_measures__stg_core__patient_sex__female__male__unknown  [[33mSKIP[0m]
[0m04:25:31.841816 [debug] [Thread-1 (]: Began running node test.the_tuva_project.not_null_quality_measures__stg_core__patient_birth_date.4b3a2e74e6
[0m04:25:31.842418 [debug] [Thread-2 (]: Began running node test.the_tuva_project.not_null_quality_measures__stg_core__patient_patient_id.5510e1a0fd
[0m04:25:31.843102 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.cms_hcc__int_members
[0m04:25:31.844298 [debug] [Thread-3 (]: Finished running node test.the_tuva_project.accepted_values_quality_measures__stg_core__patient_sex__female__male__unknown.e6adc9ce2b
[0m04:25:31.844888 [info ] [Thread-1 (]: 161 of 307 SKIP test not_null_quality_measures__stg_core__patient_birth_date ... [[33mSKIP[0m]
[0m04:25:31.845423 [info ] [Thread-2 (]: 162 of 307 SKIP test not_null_quality_measures__stg_core__patient_patient_id ... [[33mSKIP[0m]
[0m04:25:31.846343 [debug] [Thread-4 (]: Began running node test.the_tuva_project.not_null_quality_measures__stg_core__patient_sex.e2f34cab69
[0m04:25:31.847628 [debug] [Thread-3 (]: Began running node model.the_tuva_project.acute_inpatient__encounter_start_and_end_dates
[0m04:25:31.848251 [debug] [Thread-1 (]: Finished running node test.the_tuva_project.not_null_quality_measures__stg_core__patient_birth_date.4b3a2e74e6
[0m04:25:31.849311 [debug] [Thread-2 (]: Finished running node test.the_tuva_project.not_null_quality_measures__stg_core__patient_patient_id.5510e1a0fd
[0m04:25:31.850275 [info ] [Thread-4 (]: 163 of 307 SKIP test not_null_quality_measures__stg_core__patient_sex .......... [[33mSKIP[0m]
[0m04:25:31.851202 [info ] [Thread-3 (]: 164 of 307 SKIP relation claims_preprocessing.acute_inpatient__encounter_start_and_end_dates  [[33mSKIP[0m]
[0m04:25:31.851829 [debug] [Thread-1 (]: Began running node model.the_tuva_project.emergency_department__int_encounter_start_and_end_dates
[0m04:25:31.853000 [debug] [Thread-2 (]: Began running node test.the_tuva_project.not_null_cms_hcc__int_members_patient_id.75e528329b
[0m04:25:31.853491 [debug] [Thread-4 (]: Finished running node test.the_tuva_project.not_null_quality_measures__stg_core__patient_sex.e2f34cab69
[0m04:25:31.853916 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.acute_inpatient__encounter_start_and_end_dates
[0m04:25:31.854347 [info ] [Thread-1 (]: 165 of 307 SKIP relation claims_preprocessing.emergency_department__int_encounter_start_and_end_dates  [[33mSKIP[0m]
[0m04:25:31.854797 [info ] [Thread-2 (]: 166 of 307 SKIP test not_null_cms_hcc__int_members_patient_id .................. [[33mSKIP[0m]
[0m04:25:31.855262 [debug] [Thread-4 (]: Began running node test.the_tuva_project.unique_cms_hcc__int_members_patient_id.4d202f2bbb
[0m04:25:31.856209 [debug] [Thread-3 (]: Began running node model.the_tuva_project.acute_inpatient__professional_encounter_id
[0m04:25:31.856616 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.emergency_department__int_encounter_start_and_end_dates
[0m04:25:31.857015 [debug] [Thread-2 (]: Finished running node test.the_tuva_project.not_null_cms_hcc__int_members_patient_id.75e528329b
[0m04:25:31.857426 [info ] [Thread-4 (]: 167 of 307 SKIP test unique_cms_hcc__int_members_patient_id .................... [[33mSKIP[0m]
[0m04:25:31.857879 [info ] [Thread-3 (]: 168 of 307 SKIP relation claims_preprocessing.acute_inpatient__professional_encounter_id  [[33mSKIP[0m]
[0m04:25:31.858742 [debug] [Thread-1 (]: Began running node model.the_tuva_project.emergency_department__int_professional_encounter_id
[0m04:25:31.859637 [debug] [Thread-4 (]: Finished running node test.the_tuva_project.unique_cms_hcc__int_members_patient_id.4d202f2bbb
[0m04:25:31.860078 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.acute_inpatient__professional_encounter_id
[0m04:25:31.860516 [info ] [Thread-1 (]: 169 of 307 SKIP relation claims_preprocessing.emergency_department__int_professional_encounter_id  [[33mSKIP[0m]
[0m04:25:31.861417 [debug] [Thread-2 (]: Began running node model.the_tuva_project.cms_hcc__int_demographic_factors
[0m04:25:31.862229 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.emergency_department__int_professional_encounter_id
[0m04:25:31.862563 [debug] [Thread-4 (]: Began running node model.the_tuva_project.acute_inpatient__encounter_id
[0m04:25:31.862969 [info ] [Thread-2 (]: 170 of 307 SKIP relation cms_hcc.cms_hcc__int_demographic_factors .............. [[33mSKIP[0m]
[0m04:25:31.863532 [debug] [Thread-3 (]: Began running node model.the_tuva_project.emergency_department__int_encounter_id
[0m04:25:31.863940 [info ] [Thread-4 (]: 171 of 307 SKIP relation claims_preprocessing.acute_inpatient__encounter_id .... [[33mSKIP[0m]
[0m04:25:31.864396 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.cms_hcc__int_demographic_factors
[0m04:25:31.864906 [info ] [Thread-3 (]: 172 of 307 SKIP relation claims_preprocessing.emergency_department__int_encounter_id  [[33mSKIP[0m]
[0m04:25:31.865351 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.acute_inpatient__encounter_id
[0m04:25:31.866428 [debug] [Thread-1 (]: Began running node test.the_tuva_project.unique_cms_hcc__int_demographic_factors__patient_id_model_version_.21c6216400
[0m04:25:31.866815 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.emergency_department__int_encounter_id
[0m04:25:31.867467 [debug] [Thread-2 (]: Began running node model.the_tuva_project.acute_inpatient__claims_with_encounter_data
[0m04:25:31.867762 [debug] [Thread-4 (]: Began running node model.the_tuva_project.acute_inpatient__first_claim_values
[0m04:25:31.868072 [info ] [Thread-1 (]: 173 of 307 SKIP test unique_cms_hcc__int_demographic_factors__patient_id_model_version_  [[33mSKIP[0m]
[0m04:25:31.868543 [debug] [Thread-3 (]: Began running node model.the_tuva_project.acute_inpatient__last_claim_values
[0m04:25:31.869498 [info ] [Thread-2 (]: 174 of 307 SKIP relation claims_preprocessing.acute_inpatient__claims_with_encounter_data  [[33mSKIP[0m]
[0m04:25:31.869958 [info ] [Thread-4 (]: 175 of 307 SKIP relation claims_preprocessing.acute_inpatient__first_claim_values  [[33mSKIP[0m]
[0m04:25:31.870447 [debug] [Thread-1 (]: Finished running node test.the_tuva_project.unique_cms_hcc__int_demographic_factors__patient_id_model_version_.21c6216400
[0m04:25:31.870848 [info ] [Thread-3 (]: 176 of 307 SKIP relation claims_preprocessing.acute_inpatient__last_claim_values  [[33mSKIP[0m]
[0m04:25:31.871279 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.acute_inpatient__claims_with_encounter_data
[0m04:25:31.871685 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.acute_inpatient__first_claim_values
[0m04:25:31.872123 [debug] [Thread-1 (]: Began running node model.the_tuva_project.core__stg_claims_condition
[0m04:25:31.873013 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.acute_inpatient__last_claim_values
[0m04:25:31.873444 [debug] [Thread-2 (]: Began running node model.the_tuva_project.core__stg_claims_medical_claim
[0m04:25:31.874250 [debug] [Thread-4 (]: Began running node model.the_tuva_project.core__stg_claims_procedure
[0m04:25:31.874651 [info ] [Thread-1 (]: 177 of 307 SKIP relation core.core__stg_claims_condition ....................... [[33mSKIP[0m]
[0m04:25:31.875135 [debug] [Thread-3 (]: Began running node model.the_tuva_project.emergency_department__int_first_claim_values
[0m04:25:31.875563 [info ] [Thread-2 (]: 178 of 307 SKIP relation core.core__stg_claims_medical_claim ................... [[33mSKIP[0m]
[0m04:25:31.876016 [info ] [Thread-4 (]: 179 of 307 SKIP relation core.core__stg_claims_procedure ....................... [[33mSKIP[0m]
[0m04:25:31.876575 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.core__stg_claims_condition
[0m04:25:31.876985 [info ] [Thread-3 (]: 180 of 307 SKIP relation claims_preprocessing.emergency_department__int_first_claim_values  [[33mSKIP[0m]
[0m04:25:31.877364 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.core__stg_claims_medical_claim
[0m04:25:31.877767 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.core__stg_claims_procedure
[0m04:25:31.878216 [debug] [Thread-1 (]: Began running node model.the_tuva_project.emergency_department__int_last_claim_values
[0m04:25:31.878799 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.emergency_department__int_first_claim_values
[0m04:25:31.879460 [debug] [Thread-2 (]: Began running node model.the_tuva_project.cms_hcc__int_enrollment_interaction_factors
[0m04:25:31.880191 [debug] [Thread-4 (]: Began running node model.the_tuva_project.acute_inpatient__encounter_data_for_medical_claims
[0m04:25:31.880695 [info ] [Thread-1 (]: 181 of 307 SKIP relation claims_preprocessing.emergency_department__int_last_claim_values  [[33mSKIP[0m]
[0m04:25:31.881175 [debug] [Thread-3 (]: Began running node model.the_tuva_project.acute_inpatient__summary
[0m04:25:31.881590 [info ] [Thread-2 (]: 182 of 307 SKIP relation cms_hcc.cms_hcc__int_enrollment_interaction_factors ... [[33mSKIP[0m]
[0m04:25:31.882025 [info ] [Thread-4 (]: 183 of 307 SKIP relation claims_preprocessing.acute_inpatient__encounter_data_for_medical_claims  [[33mSKIP[0m]
[0m04:25:31.882604 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.emergency_department__int_last_claim_values
[0m04:25:31.883015 [info ] [Thread-3 (]: 184 of 307 SKIP relation claims_preprocessing.acute_inpatient__summary ......... [[33mSKIP[0m]
[0m04:25:31.883466 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.cms_hcc__int_enrollment_interaction_factors
[0m04:25:31.883868 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.acute_inpatient__encounter_data_for_medical_claims
[0m04:25:31.884270 [debug] [Thread-1 (]: Began running node model.the_tuva_project.core__condition
[0m04:25:31.884687 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.acute_inpatient__summary
[0m04:25:31.885137 [debug] [Thread-2 (]: Began running node model.the_tuva_project.core__medical_claim
[0m04:25:31.885579 [debug] [Thread-4 (]: Began running node model.the_tuva_project.core__stg_claims_location
[0m04:25:31.885979 [info ] [Thread-1 (]: 185 of 307 SKIP relation core.core__condition .................................. [[33mSKIP[0m]
[0m04:25:31.886439 [debug] [Thread-3 (]: Began running node model.the_tuva_project.core__stg_claims_practitioner
[0m04:25:31.886849 [info ] [Thread-2 (]: 186 of 307 SKIP relation core.core__medical_claim .............................. [[33mSKIP[0m]
[0m04:25:31.887268 [info ] [Thread-4 (]: 187 of 307 SKIP relation core.core__stg_claims_location ........................ [[33mSKIP[0m]
[0m04:25:31.887848 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.core__condition
[0m04:25:31.888252 [info ] [Thread-3 (]: 188 of 307 SKIP relation core.core__stg_claims_practitioner .................... [[33mSKIP[0m]
[0m04:25:31.888679 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.core__medical_claim
[0m04:25:31.889072 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.core__stg_claims_location
[0m04:25:31.889509 [debug] [Thread-1 (]: Began running node model.the_tuva_project.core__procedure
[0m04:25:31.889929 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.core__stg_claims_practitioner
[0m04:25:31.890344 [debug] [Thread-2 (]: Began running node model.the_tuva_project.emergency_department__summary
[0m04:25:31.890809 [debug] [Thread-4 (]: Began running node test.the_tuva_project.unique_core__condition_condition_id.ef1067e2f0
[0m04:25:31.891381 [info ] [Thread-1 (]: 189 of 307 SKIP relation core.core__procedure .................................. [[33mSKIP[0m]
[0m04:25:31.891987 [debug] [Thread-3 (]: Began running node test.the_tuva_project.unique_core__medical_claim__claim_id_claim_line_number_.b9ab42f1f0
[0m04:25:31.892505 [info ] [Thread-2 (]: 190 of 307 SKIP relation claims_preprocessing.emergency_department__summary .... [[33mSKIP[0m]
[0m04:25:31.893042 [info ] [Thread-4 (]: 191 of 307 SKIP test unique_core__condition_condition_id ....................... [[33mSKIP[0m]
[0m04:25:31.893588 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.core__procedure
[0m04:25:31.894082 [info ] [Thread-3 (]: 192 of 307 SKIP test unique_core__medical_claim__claim_id_claim_line_number_ ... [[33mSKIP[0m]
[0m04:25:31.894588 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.emergency_department__summary
[0m04:25:31.895056 [debug] [Thread-4 (]: Finished running node test.the_tuva_project.unique_core__condition_condition_id.ef1067e2f0
[0m04:25:31.895556 [debug] [Thread-1 (]: Began running node model.the_tuva_project.core__location
[0m04:25:31.896160 [debug] [Thread-3 (]: Finished running node test.the_tuva_project.unique_core__medical_claim__claim_id_claim_line_number_.b9ab42f1f0
[0m04:25:31.896646 [debug] [Thread-2 (]: Began running node model.the_tuva_project.core__practitioner
[0m04:25:31.897493 [debug] [Thread-4 (]: Began running node test.the_tuva_project.unique_core__procedure_procedure_id.feb1b6b4d5
[0m04:25:31.898720 [info ] [Thread-1 (]: 193 of 307 SKIP relation core.core__location ................................... [[33mSKIP[0m]
[0m04:25:31.901211 [debug] [Thread-3 (]: Began running node model.the_tuva_project.core__stg_claims_encounter
[0m04:25:31.901892 [info ] [Thread-2 (]: 194 of 307 SKIP relation core.core__practitioner ............................... [[33mSKIP[0m]
[0m04:25:31.904607 [info ] [Thread-4 (]: 195 of 307 SKIP test unique_core__procedure_procedure_id ....................... [[33mSKIP[0m]
[0m04:25:31.905204 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.core__location
[0m04:25:31.905704 [info ] [Thread-3 (]: 196 of 307 SKIP relation core.core__stg_claims_encounter ....................... [[33mSKIP[0m]
[0m04:25:31.906227 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.core__practitioner
[0m04:25:31.906649 [debug] [Thread-4 (]: Finished running node test.the_tuva_project.unique_core__procedure_procedure_id.feb1b6b4d5
[0m04:25:31.907099 [debug] [Thread-1 (]: Began running node model.the_tuva_project.ccsr__stg_core__condition
[0m04:25:31.907539 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.core__stg_claims_encounter
[0m04:25:31.907993 [debug] [Thread-2 (]: Began running node model.the_tuva_project.cms_chronic_conditions__stg_core__condition
[0m04:25:31.908451 [debug] [Thread-4 (]: Began running node model.the_tuva_project.cms_hcc__stg_core__condition
[0m04:25:31.909299 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.ccsr__stg_core__condition
[0m04:25:31.909796 [debug] [Thread-3 (]: Began running node model.the_tuva_project.hcc_suspecting__stg_core__condition
[0m04:25:31.910484 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.cms_chronic_conditions__stg_core__condition
[0m04:25:31.910922 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.cms_hcc__stg_core__condition
[0m04:25:31.911405 [debug] [Thread-1 (]: Began running node model.the_tuva_project.quality_measures__stg_core__condition
[0m04:25:31.912301 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.hcc_suspecting__stg_core__condition
[0m04:25:31.912768 [debug] [Thread-2 (]: Began running node model.the_tuva_project.readmissions__stg_core__condition
[0m04:25:31.913352 [debug] [Thread-4 (]: Began running node model.the_tuva_project.tuva_chronic_conditions__stg_core__condition
[0m04:25:31.913883 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.quality_measures__stg_core__condition
[0m04:25:31.914324 [debug] [Thread-3 (]: Began running node model.the_tuva_project.cms_hcc__stg_core__medical_claim
[0m04:25:31.914857 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.readmissions__stg_core__condition
[0m04:25:31.915358 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.tuva_chronic_conditions__stg_core__condition
[0m04:25:31.915831 [debug] [Thread-1 (]: Began running node model.the_tuva_project.financial_pmpm__stg_medical_claim
[0m04:25:31.916308 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.cms_hcc__stg_core__medical_claim
[0m04:25:31.916900 [debug] [Thread-2 (]: Began running node model.the_tuva_project.insights__count_claim_by_claim_type
[0m04:25:31.917395 [debug] [Thread-4 (]: Began running node model.the_tuva_project.insights__count_claim_by_date_column
[0m04:25:31.917837 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.financial_pmpm__stg_medical_claim
[0m04:25:31.918364 [debug] [Thread-3 (]: Began running node model.the_tuva_project.insights__count_claim_by_service_category
[0m04:25:31.918831 [info ] [Thread-2 (]: 197 of 307 SKIP relation insights.insights__count_claim_by_claim_type .......... [[33mSKIP[0m]
[0m04:25:31.919308 [info ] [Thread-4 (]: 198 of 307 SKIP relation insights.insights__count_claim_by_date_column ......... [[33mSKIP[0m]
[0m04:25:31.919806 [debug] [Thread-1 (]: Began running node model.the_tuva_project.insights__orphan_claim_by_claim_type
[0m04:25:31.920259 [info ] [Thread-3 (]: 199 of 307 SKIP relation insights.insights__count_claim_by_service_category .... [[33mSKIP[0m]
[0m04:25:31.920722 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.insights__count_claim_by_claim_type
[0m04:25:31.921196 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.insights__count_claim_by_date_column
[0m04:25:31.921609 [info ] [Thread-1 (]: 200 of 307 SKIP relation insights.insights__orphan_claim_by_claim_type ......... [[33mSKIP[0m]
[0m04:25:31.922052 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.insights__count_claim_by_service_category
[0m04:25:31.922523 [debug] [Thread-2 (]: Began running node model.the_tuva_project.insights__sum_amount_by_claim_type
[0m04:25:31.922980 [debug] [Thread-4 (]: Began running node model.the_tuva_project.insights__sum_amount_by_service_category
[0m04:25:31.923424 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.insights__orphan_claim_by_claim_type
[0m04:25:31.923848 [debug] [Thread-3 (]: Began running node model.the_tuva_project.insights__trend_count_claim_by_claim_type
[0m04:25:31.924279 [info ] [Thread-2 (]: 201 of 307 SKIP relation insights.insights__sum_amount_by_claim_type ........... [[33mSKIP[0m]
[0m04:25:31.924706 [info ] [Thread-4 (]: 202 of 307 SKIP relation insights.insights__sum_amount_by_service_category ..... [[33mSKIP[0m]
[0m04:25:31.925185 [debug] [Thread-1 (]: Began running node model.the_tuva_project.insights__trend_count_claim_by_service_category
[0m04:25:31.925612 [info ] [Thread-3 (]: 203 of 307 SKIP relation insights.insights__trend_count_claim_by_claim_type .... [[33mSKIP[0m]
[0m04:25:31.926094 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.insights__sum_amount_by_claim_type
[0m04:25:31.926544 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.insights__sum_amount_by_service_category
[0m04:25:31.926972 [info ] [Thread-1 (]: 204 of 307 SKIP relation insights.insights__trend_count_claim_by_service_category  [[33mSKIP[0m]
[0m04:25:31.927422 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.insights__trend_count_claim_by_claim_type
[0m04:25:31.927867 [debug] [Thread-2 (]: Began running node model.the_tuva_project.insights__trend_sum_amount_by_claim_type
[0m04:25:31.928318 [debug] [Thread-4 (]: Began running node model.the_tuva_project.insights__trend_sum_amount_by_service_category
[0m04:25:31.928729 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.insights__trend_count_claim_by_service_category
[0m04:25:31.929190 [debug] [Thread-3 (]: Began running node model.the_tuva_project.quality_measures__stg_medical_claim
[0m04:25:31.929626 [info ] [Thread-2 (]: 205 of 307 SKIP relation insights.insights__trend_sum_amount_by_claim_type ..... [[33mSKIP[0m]
[0m04:25:31.930080 [info ] [Thread-4 (]: 206 of 307 SKIP relation insights.insights__trend_sum_amount_by_service_category  [[33mSKIP[0m]
[0m04:25:31.930551 [debug] [Thread-1 (]: Began running node model.the_tuva_project.ccsr__stg_core__procedure
[0m04:25:31.930976 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.quality_measures__stg_medical_claim
[0m04:25:31.931424 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.insights__trend_sum_amount_by_claim_type
[0m04:25:31.931850 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.insights__trend_sum_amount_by_service_category
[0m04:25:31.932261 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.ccsr__stg_core__procedure
[0m04:25:31.932685 [debug] [Thread-3 (]: Began running node model.the_tuva_project.cms_chronic_conditions__stg_core__procedure
[0m04:25:31.933179 [debug] [Thread-2 (]: Began running node model.the_tuva_project.quality_measures__stg_core__procedure
[0m04:25:31.933670 [debug] [Thread-4 (]: Began running node model.the_tuva_project.readmissions__stg_core__procedure
[0m04:25:31.934187 [debug] [Thread-1 (]: Began running node model.the_tuva_project.core__encounter
[0m04:25:31.935062 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.cms_chronic_conditions__stg_core__procedure
[0m04:25:31.935577 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.quality_measures__stg_core__procedure
[0m04:25:31.936000 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.readmissions__stg_core__procedure
[0m04:25:31.936444 [info ] [Thread-1 (]: 207 of 307 SKIP relation core.core__encounter .................................. [[33mSKIP[0m]
[0m04:25:31.936951 [debug] [Thread-3 (]: Began running node model.the_tuva_project.ccsr__long_condition_category
[0m04:25:31.937524 [debug] [Thread-2 (]: Began running node model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids
[0m04:25:31.939074 [debug] [Thread-4 (]: Began running node model.the_tuva_project.hcc_suspecting__int_prep_conditions
[0m04:25:31.939659 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.core__encounter
[0m04:25:31.940097 [info ] [Thread-3 (]: 208 of 307 SKIP relation ccsr.ccsr__long_condition_category .................... [[33mSKIP[0m]
[0m04:25:31.940571 [info ] [Thread-2 (]: 209 of 307 SKIP relation chronic_conditions.chronic_conditions__cms_chronic_conditions_hiv_aids  [[33mSKIP[0m]
[0m04:25:31.941020 [info ] [Thread-4 (]: 210 of 307 SKIP relation hcc_suspecting.hcc_suspecting__int_prep_conditions .... [[33mSKIP[0m]
[0m04:25:31.941506 [debug] [Thread-1 (]: Began running node test.the_tuva_project.not_null_quality_measures__stg_core__condition_patient_id.1f1222e348
[0m04:25:31.942603 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.ccsr__long_condition_category
[0m04:25:31.943051 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids
[0m04:25:31.943488 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.hcc_suspecting__int_prep_conditions
[0m04:25:31.943903 [info ] [Thread-1 (]: 211 of 307 SKIP test not_null_quality_measures__stg_core__condition_patient_id . [[33mSKIP[0m]
[0m04:25:31.944761 [debug] [Thread-3 (]: Began running node model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_long
[0m04:25:31.945283 [debug] [Thread-2 (]: Began running node model.the_tuva_project.cms_hcc__int_eligible_conditions
[0m04:25:31.946489 [debug] [Thread-4 (]: Began running node model.the_tuva_project.financial_pmpm__patient_spend_with_service_categories
[0m04:25:31.947143 [debug] [Thread-1 (]: Finished running node test.the_tuva_project.not_null_quality_measures__stg_core__condition_patient_id.1f1222e348
[0m04:25:31.947670 [info ] [Thread-3 (]: 212 of 307 SKIP relation chronic_conditions.chronic_conditions__tuva_chronic_conditions_long  [[33mSKIP[0m]
[0m04:25:31.948158 [info ] [Thread-2 (]: 213 of 307 SKIP relation cms_hcc.cms_hcc__int_eligible_conditions .............. [[33mSKIP[0m]
[0m04:25:31.948628 [info ] [Thread-4 (]: 214 of 307 SKIP relation financial_pmpm.financial_pmpm__patient_spend_with_service_categories  [[33mSKIP[0m]
[0m04:25:31.949138 [debug] [Thread-1 (]: Began running node model.the_tuva_project.ccsr__long_procedure_category
[0m04:25:31.949580 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_long
[0m04:25:31.950001 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.cms_hcc__int_eligible_conditions
[0m04:25:31.950416 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.financial_pmpm__patient_spend_with_service_categories
[0m04:25:31.950811 [info ] [Thread-1 (]: 215 of 307 SKIP relation ccsr.ccsr__long_procedure_category .................... [[33mSKIP[0m]
[0m04:25:31.951280 [debug] [Thread-3 (]: Began running node model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all
[0m04:25:31.951713 [debug] [Thread-2 (]: Began running node test.the_tuva_project.not_null_quality_measures__stg_core__procedure_patient_id.0b52ff75d9
[0m04:25:31.952261 [debug] [Thread-4 (]: Began running node model.the_tuva_project.readmissions__procedure_ccs
[0m04:25:31.952744 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.ccsr__long_procedure_category
[0m04:25:31.953227 [info ] [Thread-3 (]: 216 of 307 SKIP relation chronic_conditions.chronic_conditions__cms_chronic_conditions_all  [[33mSKIP[0m]
[0m04:25:31.953676 [info ] [Thread-2 (]: 217 of 307 SKIP test not_null_quality_measures__stg_core__procedure_patient_id . [[33mSKIP[0m]
[0m04:25:31.954115 [info ] [Thread-4 (]: 218 of 307 SKIP relation readmissions.readmissions__procedure_ccs .............. [[33mSKIP[0m]
[0m04:25:31.954865 [debug] [Thread-1 (]: Began running node model.the_tuva_project.ed_classification__stg_encounter
[0m04:25:31.955306 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all
[0m04:25:31.955729 [debug] [Thread-2 (]: Finished running node test.the_tuva_project.not_null_quality_measures__stg_core__procedure_patient_id.0b52ff75d9
[0m04:25:31.956154 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.readmissions__procedure_ccs
[0m04:25:31.956558 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.ed_classification__stg_encounter
[0m04:25:31.956968 [debug] [Thread-3 (]: Began running node model.the_tuva_project.quality_measures__stg_core__encounter
[0m04:25:31.957434 [debug] [Thread-2 (]: Began running node model.the_tuva_project.readmissions__stg_core__encounter
[0m04:25:31.958497 [debug] [Thread-4 (]: Began running node model.the_tuva_project.ccsr__singular_condition_category
[0m04:25:31.958992 [debug] [Thread-1 (]: Began running node test.the_tuva_project.accepted_values_chronic_conditions__cms_chronic_conditions_hiv_aids_condition__Human_Immunodeficiency_Virus_and_or_Acquired_Immunodeficiency_Syndrome_HIV_AIDS_.c54d45a2c6
[0m04:25:31.959853 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.quality_measures__stg_core__encounter
[0m04:25:31.960347 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.readmissions__stg_core__encounter
[0m04:25:31.960770 [info ] [Thread-4 (]: 219 of 307 SKIP relation ccsr.ccsr__singular_condition_category ................ [[33mSKIP[0m]
[0m04:25:31.961231 [info ] [Thread-1 (]: 220 of 307 SKIP test accepted_values_chronic_conditions__cms_chronic_conditions_hiv_aids_condition__Human_Immunodeficiency_Virus_and_or_Acquired_Immunodeficiency_Syndrome_HIV_AIDS_  [[33mSKIP[0m]
[0m04:25:31.961703 [debug] [Thread-3 (]: Began running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_claim_id.9baa48027d
[0m04:25:31.962154 [debug] [Thread-2 (]: Began running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_condition.da32954f00
[0m04:25:31.962824 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.ccsr__singular_condition_category
[0m04:25:31.963239 [debug] [Thread-1 (]: Finished running node test.the_tuva_project.accepted_values_chronic_conditions__cms_chronic_conditions_hiv_aids_condition__Human_Immunodeficiency_Virus_and_or_Acquired_Immunodeficiency_Syndrome_HIV_AIDS_.c54d45a2c6
[0m04:25:31.963636 [info ] [Thread-3 (]: 221 of 307 SKIP test not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_claim_id  [[33mSKIP[0m]
[0m04:25:31.964062 [info ] [Thread-2 (]: 222 of 307 SKIP test not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_condition  [[33mSKIP[0m]
[0m04:25:31.964520 [debug] [Thread-4 (]: Began running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_patient_id.b6c58add4b
[0m04:25:31.965037 [debug] [Thread-1 (]: Began running node model.the_tuva_project.hcc_suspecting__int_all_conditions
[0m04:25:31.965478 [debug] [Thread-3 (]: Finished running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_claim_id.9baa48027d
[0m04:25:31.965885 [debug] [Thread-2 (]: Finished running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_condition.da32954f00
[0m04:25:31.966443 [info ] [Thread-4 (]: 223 of 307 SKIP test not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_patient_id  [[33mSKIP[0m]
[0m04:25:31.966995 [info ] [Thread-1 (]: 224 of 307 SKIP relation hcc_suspecting.hcc_suspecting__int_all_conditions ..... [[33mSKIP[0m]
[0m04:25:31.967703 [debug] [Thread-3 (]: Began running node test.the_tuva_project.unique_chronic_conditions__tuva_chronic_conditions_long__patient_id___condition_.c9509bb46f
[0m04:25:31.968256 [debug] [Thread-2 (]: Began running node test.the_tuva_project.not_null_cms_hcc__int_eligible_conditions_condition_code.e811a078bc
[0m04:25:31.968742 [debug] [Thread-4 (]: Finished running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_patient_id.b6c58add4b
[0m04:25:31.969173 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.hcc_suspecting__int_all_conditions
[0m04:25:31.969602 [info ] [Thread-3 (]: 225 of 307 SKIP test unique_chronic_conditions__tuva_chronic_conditions_long__patient_id___condition_  [[33mSKIP[0m]
[0m04:25:31.970035 [info ] [Thread-2 (]: 226 of 307 SKIP test not_null_cms_hcc__int_eligible_conditions_condition_code .. [[33mSKIP[0m]
[0m04:25:31.970487 [debug] [Thread-4 (]: Began running node model.the_tuva_project.financial_pmpm__service_category_1_allowed_pivot
[0m04:25:31.970925 [debug] [Thread-1 (]: Began running node model.the_tuva_project.financial_pmpm__service_category_1_paid_pivot
[0m04:25:31.971361 [debug] [Thread-3 (]: Finished running node test.the_tuva_project.unique_chronic_conditions__tuva_chronic_conditions_long__patient_id___condition_.c9509bb46f
[0m04:25:31.971822 [debug] [Thread-2 (]: Finished running node test.the_tuva_project.not_null_cms_hcc__int_eligible_conditions_condition_code.e811a078bc
[0m04:25:31.972250 [info ] [Thread-4 (]: 227 of 307 SKIP relation financial_pmpm.financial_pmpm__service_category_1_allowed_pivot  [[33mSKIP[0m]
[0m04:25:31.972700 [info ] [Thread-1 (]: 228 of 307 SKIP relation financial_pmpm.financial_pmpm__service_category_1_paid_pivot  [[33mSKIP[0m]
[0m04:25:31.973213 [debug] [Thread-3 (]: Began running node model.the_tuva_project.financial_pmpm__service_category_2_allowed_pivot
[0m04:25:31.973651 [debug] [Thread-2 (]: Began running node model.the_tuva_project.financial_pmpm__service_category_2_paid_pivot
[0m04:25:31.974354 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.financial_pmpm__service_category_1_allowed_pivot
[0m04:25:31.974753 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.financial_pmpm__service_category_1_paid_pivot
[0m04:25:31.975164 [info ] [Thread-3 (]: 229 of 307 SKIP relation financial_pmpm.financial_pmpm__service_category_2_allowed_pivot  [[33mSKIP[0m]
[0m04:25:31.975602 [info ] [Thread-2 (]: 230 of 307 SKIP relation financial_pmpm.financial_pmpm__service_category_2_paid_pivot  [[33mSKIP[0m]
[0m04:25:31.976132 [debug] [Thread-4 (]: Began running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_claim_id.84015aec48
[0m04:25:31.976552 [debug] [Thread-1 (]: Began running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_condition.bb780b4840
[0m04:25:31.976961 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.financial_pmpm__service_category_2_allowed_pivot
[0m04:25:31.977373 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.financial_pmpm__service_category_2_paid_pivot
[0m04:25:31.977760 [info ] [Thread-4 (]: 231 of 307 SKIP test not_null_chronic_conditions__cms_chronic_conditions_all_claim_id  [[33mSKIP[0m]
[0m04:25:31.978205 [info ] [Thread-1 (]: 232 of 307 SKIP test not_null_chronic_conditions__cms_chronic_conditions_all_condition  [[33mSKIP[0m]
[0m04:25:31.979032 [debug] [Thread-3 (]: Began running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_patient_id.95fc066008
[0m04:25:31.979828 [debug] [Thread-2 (]: Began running node model.the_tuva_project.quality_measures__int_nqf0034_exclude_colectomy_cancer
[0m04:25:31.980691 [debug] [Thread-4 (]: Finished running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_claim_id.84015aec48
[0m04:25:31.981103 [debug] [Thread-1 (]: Finished running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_condition.bb780b4840
[0m04:25:31.981569 [info ] [Thread-3 (]: 233 of 307 SKIP test not_null_chronic_conditions__cms_chronic_conditions_all_patient_id  [[33mSKIP[0m]
[0m04:25:31.982010 [info ] [Thread-2 (]: 234 of 307 SKIP relation quality_measures.quality_measures__int_nqf0034_exclude_colectomy_cancer  [[33mSKIP[0m]
[0m04:25:31.982507 [debug] [Thread-4 (]: Began running node model.the_tuva_project.quality_measures__int_nqf0034_exclude_hospice_palliative
[0m04:25:31.983187 [debug] [Thread-1 (]: Began running node model.the_tuva_project.ed_classification__int_map_primary_dx
[0m04:25:31.983599 [debug] [Thread-3 (]: Finished running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_patient_id.95fc066008
[0m04:25:31.984007 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf0034_exclude_colectomy_cancer
[0m04:25:31.984434 [info ] [Thread-4 (]: 235 of 307 SKIP relation quality_measures.quality_measures__int_nqf0034_exclude_hospice_palliative  [[33mSKIP[0m]
[0m04:25:31.984879 [info ] [Thread-1 (]: 236 of 307 SKIP relation ed_classification.ed_classification__int_map_primary_dx  [[33mSKIP[0m]
[0m04:25:31.985353 [debug] [Thread-3 (]: Began running node test.the_tuva_project.not_null_quality_measures__stg_core__encounter_patient_id.a0d82e2159
[0m04:25:31.986039 [debug] [Thread-2 (]: Began running node model.the_tuva_project.readmissions__encounter
[0m04:25:31.986474 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf0034_exclude_hospice_palliative
[0m04:25:31.986869 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.ed_classification__int_map_primary_dx
[0m04:25:31.987268 [info ] [Thread-3 (]: 237 of 307 SKIP test not_null_quality_measures__stg_core__encounter_patient_id . [[33mSKIP[0m]
[0m04:25:31.987689 [info ] [Thread-2 (]: 238 of 307 SKIP relation readmissions.readmissions__encounter .................. [[33mSKIP[0m]
[0m04:25:31.988143 [debug] [Thread-4 (]: Began running node test.the_tuva_project.not_null_ccsr__singular_condition_category_claim_id.41e0e51ac8
[0m04:25:31.988561 [debug] [Thread-1 (]: Began running node test.the_tuva_project.unique_ccsr__singular_condition_category_claim_id.21b76e504b
[0m04:25:31.989032 [debug] [Thread-3 (]: Finished running node test.the_tuva_project.not_null_quality_measures__stg_core__encounter_patient_id.a0d82e2159
[0m04:25:31.989440 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.readmissions__encounter
[0m04:25:31.989835 [info ] [Thread-4 (]: 239 of 307 SKIP test not_null_ccsr__singular_condition_category_claim_id ....... [[33mSKIP[0m]
[0m04:25:31.990275 [info ] [Thread-1 (]: 240 of 307 SKIP test unique_ccsr__singular_condition_category_claim_id ......... [[33mSKIP[0m]
[0m04:25:31.990753 [debug] [Thread-3 (]: Began running node model.the_tuva_project.hcc_suspecting__int_patient_hcc_history
[0m04:25:31.991939 [debug] [Thread-2 (]: Began running node model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_wide
[0m04:25:31.993753 [debug] [Thread-4 (]: Finished running node test.the_tuva_project.not_null_ccsr__singular_condition_category_claim_id.41e0e51ac8
[0m04:25:31.994216 [debug] [Thread-1 (]: Finished running node test.the_tuva_project.unique_ccsr__singular_condition_category_claim_id.21b76e504b
[0m04:25:31.994655 [info ] [Thread-3 (]: 241 of 307 SKIP relation hcc_suspecting.hcc_suspecting__int_patient_hcc_history  [[33mSKIP[0m]
[0m04:25:31.995068 [info ] [Thread-2 (]: 242 of 307 SKIP relation chronic_conditions.chronic_conditions__tuva_chronic_conditions_wide  [[33mSKIP[0m]
[0m04:25:31.995590 [debug] [Thread-4 (]: Began running node model.the_tuva_project.cms_hcc__int_hcc_mapping
[0m04:25:31.996287 [debug] [Thread-1 (]: Began running node model.the_tuva_project.financial_pmpm__pmpm_prep
[0m04:25:31.996783 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.hcc_suspecting__int_patient_hcc_history
[0m04:25:31.997399 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_wide
[0m04:25:31.997899 [info ] [Thread-4 (]: 243 of 307 SKIP relation cms_hcc.cms_hcc__int_hcc_mapping ...................... [[33mSKIP[0m]
[0m04:25:31.998458 [info ] [Thread-1 (]: 244 of 307 SKIP relation financial_pmpm.financial_pmpm__pmpm_prep .............. [[33mSKIP[0m]
[0m04:25:31.998961 [debug] [Thread-3 (]: Began running node model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud
[0m04:25:31.999783 [debug] [Thread-2 (]: Began running node model.the_tuva_project.ed_classification__int_filter_encounter_with_classification
[0m04:25:32.000780 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.cms_hcc__int_hcc_mapping
[0m04:25:32.001223 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.financial_pmpm__pmpm_prep
[0m04:25:32.001647 [info ] [Thread-3 (]: 245 of 307 SKIP relation chronic_conditions.chronic_conditions__cms_chronic_conditions_oud  [[33mSKIP[0m]
[0m04:25:32.002154 [info ] [Thread-2 (]: 246 of 307 SKIP relation ed_classification.ed_classification__int_filter_encounter_with_classification  [[33mSKIP[0m]
[0m04:25:32.002645 [debug] [Thread-4 (]: Began running node model.the_tuva_project.quality_measures__int_nqf0034_denominator
[0m04:25:32.003446 [debug] [Thread-1 (]: Began running node model.the_tuva_project.quality_measures__int_nqf2372_denominator
[0m04:25:32.003956 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud
[0m04:25:32.004415 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.ed_classification__int_filter_encounter_with_classification
[0m04:25:32.004834 [info ] [Thread-4 (]: 247 of 307 SKIP relation quality_measures.quality_measures__int_nqf0034_denominator  [[33mSKIP[0m]
[0m04:25:32.005391 [info ] [Thread-1 (]: 248 of 307 SKIP relation quality_measures.quality_measures__int_nqf2372_denominator  [[33mSKIP[0m]
[0m04:25:32.005924 [debug] [Thread-3 (]: Began running node model.the_tuva_project.readmissions__encounter_overlap
[0m04:25:32.006940 [debug] [Thread-2 (]: Began running node model.the_tuva_project.readmissions__encounter_with_ccs
[0m04:25:32.007410 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf0034_denominator
[0m04:25:32.007839 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf2372_denominator
[0m04:25:32.008301 [info ] [Thread-3 (]: 249 of 307 SKIP relation readmissions.readmissions__encounter_overlap .......... [[33mSKIP[0m]
[0m04:25:32.008859 [info ] [Thread-2 (]: 250 of 307 SKIP relation readmissions.readmissions__encounter_with_ccs ......... [[33mSKIP[0m]
[0m04:25:32.009417 [debug] [Thread-4 (]: Began running node model.the_tuva_project.readmissions__index_discharge_requirement
[0m04:25:32.010926 [debug] [Thread-1 (]: Began running node model.the_tuva_project.readmissions__index_time_requirement
[0m04:25:32.012300 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.readmissions__encounter_overlap
[0m04:25:32.012754 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.readmissions__encounter_with_ccs
[0m04:25:32.013216 [info ] [Thread-4 (]: 251 of 307 SKIP relation readmissions.readmissions__index_discharge_requirement  [[33mSKIP[0m]
[0m04:25:32.013677 [info ] [Thread-1 (]: 252 of 307 SKIP relation readmissions.readmissions__index_time_requirement ..... [[33mSKIP[0m]
[0m04:25:32.014175 [debug] [Thread-3 (]: Began running node model.the_tuva_project.hcc_suspecting__list
[0m04:25:32.014642 [debug] [Thread-2 (]: Began running node test.the_tuva_project.not_null_chronic_conditions__tuva_chronic_conditions_wide_patient_id.705b1ca561
[0m04:25:32.015815 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.readmissions__index_discharge_requirement
[0m04:25:32.016245 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.readmissions__index_time_requirement
[0m04:25:32.016690 [info ] [Thread-3 (]: 253 of 307 SKIP relation hcc_suspecting.hcc_suspecting__list ................... [[33mSKIP[0m]
[0m04:25:32.017163 [info ] [Thread-2 (]: 254 of 307 SKIP test not_null_chronic_conditions__tuva_chronic_conditions_wide_patient_id  [[33mSKIP[0m]
[0m04:25:32.017626 [debug] [Thread-4 (]: Began running node test.the_tuva_project.unique_chronic_conditions__tuva_chronic_conditions_wide_patient_id.02386b9158
[0m04:25:32.018062 [debug] [Thread-1 (]: Began running node model.the_tuva_project.cms_hcc__int_hcc_hierarchy
[0m04:25:32.018482 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.hcc_suspecting__list
[0m04:25:32.018874 [debug] [Thread-2 (]: Finished running node test.the_tuva_project.not_null_chronic_conditions__tuva_chronic_conditions_wide_patient_id.705b1ca561
[0m04:25:32.019302 [info ] [Thread-4 (]: 255 of 307 SKIP test unique_chronic_conditions__tuva_chronic_conditions_wide_patient_id  [[33mSKIP[0m]
[0m04:25:32.019722 [info ] [Thread-1 (]: 256 of 307 SKIP relation cms_hcc.cms_hcc__int_hcc_hierarchy .................... [[33mSKIP[0m]
[0m04:25:32.020171 [debug] [Thread-3 (]: Began running node test.the_tuva_project.unique_financial_pmpm__pmpm_prep__patient_id___year_month___plan_.b941ddaf9e
[0m04:25:32.020896 [debug] [Thread-2 (]: Began running node test.the_tuva_project.accepted_values_chronic_conditions__cms_chronic_conditions_oud_condition__Opioid_Use_Disorder_OUD_.f44489eec5
[0m04:25:32.021350 [debug] [Thread-4 (]: Finished running node test.the_tuva_project.unique_chronic_conditions__tuva_chronic_conditions_wide_patient_id.02386b9158
[0m04:25:32.021762 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.cms_hcc__int_hcc_hierarchy
[0m04:25:32.022174 [info ] [Thread-3 (]: 257 of 307 SKIP test unique_financial_pmpm__pmpm_prep__patient_id___year_month___plan_  [[33mSKIP[0m]
[0m04:25:32.022614 [info ] [Thread-2 (]: 258 of 307 SKIP test accepted_values_chronic_conditions__cms_chronic_conditions_oud_condition__Opioid_Use_Disorder_OUD_  [[33mSKIP[0m]
[0m04:25:32.023054 [debug] [Thread-4 (]: Began running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_claim_id.7ee5fe28fe
[0m04:25:32.023480 [debug] [Thread-1 (]: Began running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_condition.6800b245ea
[0m04:25:32.024638 [debug] [Thread-3 (]: Finished running node test.the_tuva_project.unique_financial_pmpm__pmpm_prep__patient_id___year_month___plan_.b941ddaf9e
[0m04:25:32.025059 [debug] [Thread-2 (]: Finished running node test.the_tuva_project.accepted_values_chronic_conditions__cms_chronic_conditions_oud_condition__Opioid_Use_Disorder_OUD_.f44489eec5
[0m04:25:32.025491 [info ] [Thread-4 (]: 259 of 307 SKIP test not_null_chronic_conditions__cms_chronic_conditions_oud_claim_id  [[33mSKIP[0m]
[0m04:25:32.025933 [info ] [Thread-1 (]: 260 of 307 SKIP test not_null_chronic_conditions__cms_chronic_conditions_oud_condition  [[33mSKIP[0m]
[0m04:25:32.026374 [debug] [Thread-3 (]: Began running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_patient_id.382354e0d0
[0m04:25:32.026813 [debug] [Thread-2 (]: Began running node model.the_tuva_project.ed_classification__summary
[0m04:25:32.027238 [debug] [Thread-4 (]: Finished running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_claim_id.7ee5fe28fe
[0m04:25:32.027657 [debug] [Thread-1 (]: Finished running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_condition.6800b245ea
[0m04:25:32.028062 [info ] [Thread-3 (]: 261 of 307 SKIP test not_null_chronic_conditions__cms_chronic_conditions_oud_patient_id  [[33mSKIP[0m]
[0m04:25:32.028513 [info ] [Thread-2 (]: 262 of 307 SKIP relation ed_classification.ed_classification__summary .......... [[33mSKIP[0m]
[0m04:25:32.028956 [debug] [Thread-4 (]: Began running node model.the_tuva_project.quality_measures__int_nqf0034__frailty
[0m04:25:32.029442 [debug] [Thread-1 (]: Began running node model.the_tuva_project.quality_measures__int_nqf0034_exclude_institutional_snp
[0m04:25:32.029859 [debug] [Thread-3 (]: Finished running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_patient_id.382354e0d0
[0m04:25:32.030266 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.ed_classification__summary
[0m04:25:32.030660 [info ] [Thread-4 (]: 263 of 307 SKIP relation quality_measures.quality_measures__int_nqf0034__frailty  [[33mSKIP[0m]
[0m04:25:32.031100 [info ] [Thread-1 (]: 264 of 307 SKIP relation quality_measures.quality_measures__int_nqf0034_exclude_institutional_snp  [[33mSKIP[0m]
[0m04:25:32.031556 [debug] [Thread-3 (]: Began running node model.the_tuva_project.quality_measures__int_nqf0034_numerator
[0m04:25:32.032255 [debug] [Thread-2 (]: Began running node model.the_tuva_project.quality_measures__int_nqf2372__frailty
[0m04:25:32.032741 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf0034__frailty
[0m04:25:32.033179 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf0034_exclude_institutional_snp
[0m04:25:32.033593 [info ] [Thread-3 (]: 265 of 307 SKIP relation quality_measures.quality_measures__int_nqf0034_numerator  [[33mSKIP[0m]
[0m04:25:32.034014 [info ] [Thread-2 (]: 266 of 307 SKIP relation quality_measures.quality_measures__int_nqf2372__frailty  [[33mSKIP[0m]
[0m04:25:32.034488 [debug] [Thread-4 (]: Began running node model.the_tuva_project.quality_measures__int_nqf2372_exclude_hospice
[0m04:25:32.035160 [debug] [Thread-1 (]: Began running node model.the_tuva_project.quality_measures__int_nqf2372_exclude_institutional
[0m04:25:32.036296 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf0034_numerator
[0m04:25:32.036703 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf2372__frailty
[0m04:25:32.037122 [info ] [Thread-4 (]: 267 of 307 SKIP relation quality_measures.quality_measures__int_nqf2372_exclude_hospice  [[33mSKIP[0m]
[0m04:25:32.037550 [info ] [Thread-1 (]: 268 of 307 SKIP relation quality_measures.quality_measures__int_nqf2372_exclude_institutional  [[33mSKIP[0m]
[0m04:25:32.038246 [debug] [Thread-3 (]: Began running node model.the_tuva_project.quality_measures__int_nqf2372_exclude_mastectomy
[0m04:25:32.039140 [debug] [Thread-2 (]: Began running node model.the_tuva_project.quality_measures__int_nqf2372_exclude_palliative
[0m04:25:32.039806 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf2372_exclude_hospice
[0m04:25:32.040229 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf2372_exclude_institutional
[0m04:25:32.040633 [info ] [Thread-3 (]: 269 of 307 SKIP relation quality_measures.quality_measures__int_nqf2372_exclude_mastectomy  [[33mSKIP[0m]
[0m04:25:32.041057 [info ] [Thread-2 (]: 270 of 307 SKIP relation quality_measures.quality_measures__int_nqf2372_exclude_palliative  [[33mSKIP[0m]
[0m04:25:32.041505 [debug] [Thread-4 (]: Began running node model.the_tuva_project.quality_measures__int_nqf2372_numerator
[0m04:25:32.041914 [debug] [Thread-1 (]: Began running node model.the_tuva_project.readmissions__readmission_crude
[0m04:25:32.042485 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf2372_exclude_mastectomy
[0m04:25:32.042881 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf2372_exclude_palliative
[0m04:25:32.043283 [info ] [Thread-4 (]: 271 of 307 SKIP relation quality_measures.quality_measures__int_nqf2372_numerator  [[33mSKIP[0m]
[0m04:25:32.043705 [info ] [Thread-1 (]: 272 of 307 SKIP relation readmissions.readmissions__readmission_crude .......... [[33mSKIP[0m]
[0m04:25:32.044423 [debug] [Thread-3 (]: Began running node model.the_tuva_project.readmissions__encounter_data_quality
[0m04:25:32.045154 [debug] [Thread-2 (]: Began running node model.the_tuva_project.readmissions__encounter_specialty_cohort
[0m04:25:32.045555 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf2372_numerator
[0m04:25:32.045953 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.readmissions__readmission_crude
[0m04:25:32.046353 [info ] [Thread-3 (]: 273 of 307 SKIP relation readmissions.readmissions__encounter_data_quality ..... [[33mSKIP[0m]
[0m04:25:32.046772 [info ] [Thread-2 (]: 274 of 307 SKIP relation readmissions.readmissions__encounter_specialty_cohort . [[33mSKIP[0m]
[0m04:25:32.047212 [debug] [Thread-4 (]: Began running node model.the_tuva_project.readmissions__exclusion
[0m04:25:32.047621 [debug] [Thread-1 (]: Began running node model.the_tuva_project.readmissions__planned_encounter
[0m04:25:32.048024 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.readmissions__encounter_data_quality
[0m04:25:32.048434 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.readmissions__encounter_specialty_cohort
[0m04:25:32.048825 [info ] [Thread-4 (]: 275 of 307 SKIP relation readmissions.readmissions__exclusion .................. [[33mSKIP[0m]
[0m04:25:32.049283 [info ] [Thread-1 (]: 276 of 307 SKIP relation readmissions.readmissions__planned_encounter .......... [[33mSKIP[0m]
[0m04:25:32.050165 [debug] [Thread-3 (]: Began running node model.the_tuva_project.hcc_suspecting__summary
[0m04:25:32.050619 [debug] [Thread-2 (]: Began running node model.the_tuva_project.cms_hcc__int_disabled_interaction_factors
[0m04:25:32.051070 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.readmissions__exclusion
[0m04:25:32.051482 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.readmissions__planned_encounter
[0m04:25:32.051883 [info ] [Thread-3 (]: 277 of 307 SKIP relation hcc_suspecting.hcc_suspecting__summary ................ [[33mSKIP[0m]
[0m04:25:32.052262 [info ] [Thread-2 (]: 278 of 307 SKIP relation cms_hcc.cms_hcc__int_disabled_interaction_factors ..... [[33mSKIP[0m]
[0m04:25:32.052703 [debug] [Thread-4 (]: Began running node model.the_tuva_project.cms_hcc__int_disease_factors
[0m04:25:32.053144 [debug] [Thread-1 (]: Began running node model.the_tuva_project.cms_hcc__int_disease_interaction_factors
[0m04:25:32.053557 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.hcc_suspecting__summary
[0m04:25:32.053951 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.cms_hcc__int_disabled_interaction_factors
[0m04:25:32.054354 [info ] [Thread-4 (]: 279 of 307 SKIP relation cms_hcc.cms_hcc__int_disease_factors .................. [[33mSKIP[0m]
[0m04:25:32.054798 [info ] [Thread-1 (]: 280 of 307 SKIP relation cms_hcc.cms_hcc__int_disease_interaction_factors ...... [[33mSKIP[0m]
[0m04:25:32.055268 [debug] [Thread-3 (]: Began running node model.the_tuva_project.cms_hcc__int_hcc_count_factors
[0m04:25:32.055690 [debug] [Thread-2 (]: Began running node model.the_tuva_project.financial_pmpm__pmpm
[0m04:25:32.056097 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.cms_hcc__int_disease_factors
[0m04:25:32.056552 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.cms_hcc__int_disease_interaction_factors
[0m04:25:32.056967 [info ] [Thread-3 (]: 281 of 307 SKIP relation cms_hcc.cms_hcc__int_hcc_count_factors ................ [[33mSKIP[0m]
[0m04:25:32.057403 [info ] [Thread-2 (]: 282 of 307 SKIP relation financial_pmpm.financial_pmpm__pmpm ................... [[33mSKIP[0m]
[0m04:25:32.057847 [debug] [Thread-4 (]: Began running node model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long
[0m04:25:32.058260 [debug] [Thread-1 (]: Began running node model.the_tuva_project.quality_measures__int_nqf0034_exclude_advanced_illness
[0m04:25:32.058659 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.cms_hcc__int_hcc_count_factors
[0m04:25:32.059046 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.financial_pmpm__pmpm
[0m04:25:32.059496 [info ] [Thread-4 (]: 283 of 307 SKIP relation chronic_conditions.chronic_conditions__cms_chronic_conditions_long  [[33mSKIP[0m]
[0m04:25:32.059916 [info ] [Thread-1 (]: 284 of 307 SKIP relation quality_measures.quality_measures__int_nqf0034_exclude_advanced_illness  [[33mSKIP[0m]
[0m04:25:32.060382 [debug] [Thread-3 (]: Began running node model.the_tuva_project.quality_measures__int_nqf0034_exclude_dementia
[0m04:25:32.060811 [debug] [Thread-2 (]: Began running node model.the_tuva_project.quality_measures__int_nqf2372_exclude_advanced_illness
[0m04:25:32.061222 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long
[0m04:25:32.061652 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf0034_exclude_advanced_illness
[0m04:25:32.062063 [info ] [Thread-3 (]: 285 of 307 SKIP relation quality_measures.quality_measures__int_nqf0034_exclude_dementia  [[33mSKIP[0m]
[0m04:25:32.062506 [info ] [Thread-2 (]: 286 of 307 SKIP relation quality_measures.quality_measures__int_nqf2372_exclude_advanced_illness  [[33mSKIP[0m]
[0m04:25:32.062945 [debug] [Thread-4 (]: Began running node model.the_tuva_project.quality_measures__int_nqf2372_exclude_dementia
[0m04:25:32.064079 [debug] [Thread-1 (]: Began running node model.the_tuva_project.readmissions__index_admission
[0m04:25:32.064663 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf0034_exclude_dementia
[0m04:25:32.065050 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf2372_exclude_advanced_illness
[0m04:25:32.065460 [info ] [Thread-4 (]: 287 of 307 SKIP relation quality_measures.quality_measures__int_nqf2372_exclude_dementia  [[33mSKIP[0m]
[0m04:25:32.065886 [info ] [Thread-1 (]: 288 of 307 SKIP relation readmissions.readmissions__index_admission ............ [[33mSKIP[0m]
[0m04:25:32.066342 [debug] [Thread-3 (]: Began running node model.the_tuva_project.cms_hcc__patient_risk_factors
[0m04:25:32.067182 [debug] [Thread-2 (]: Began running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_claim_id.74242d2abc
[0m04:25:32.067626 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf2372_exclude_dementia
[0m04:25:32.068057 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.readmissions__index_admission
[0m04:25:32.068486 [info ] [Thread-3 (]: 289 of 307 SKIP relation cms_hcc.cms_hcc__patient_risk_factors ................. [[33mSKIP[0m]
[0m04:25:32.068920 [info ] [Thread-2 (]: 290 of 307 SKIP test not_null_chronic_conditions__cms_chronic_conditions_long_claim_id  [[33mSKIP[0m]
[0m04:25:32.069403 [debug] [Thread-4 (]: Began running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_condition.e794460ae3
[0m04:25:32.070073 [debug] [Thread-1 (]: Began running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_patient_id.551c145c85
[0m04:25:32.070707 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.cms_hcc__patient_risk_factors
[0m04:25:32.071102 [debug] [Thread-2 (]: Finished running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_claim_id.74242d2abc
[0m04:25:32.071511 [info ] [Thread-4 (]: 291 of 307 SKIP test not_null_chronic_conditions__cms_chronic_conditions_long_condition  [[33mSKIP[0m]
[0m04:25:32.072036 [info ] [Thread-1 (]: 292 of 307 SKIP test not_null_chronic_conditions__cms_chronic_conditions_long_patient_id  [[33mSKIP[0m]
[0m04:25:32.072557 [debug] [Thread-3 (]: Began running node test.the_tuva_project.unique_chronic_conditions__cms_chronic_conditions_long__patient_id_claim_id_start_date_condition_.fba1518320
[0m04:25:32.073093 [debug] [Thread-2 (]: Began running node model.the_tuva_project.quality_measures__int_nqf0034_exclusions
[0m04:25:32.073546 [debug] [Thread-4 (]: Finished running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_condition.e794460ae3
[0m04:25:32.074009 [debug] [Thread-1 (]: Finished running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_patient_id.551c145c85
[0m04:25:32.074443 [info ] [Thread-3 (]: 293 of 307 SKIP test unique_chronic_conditions__cms_chronic_conditions_long__patient_id_claim_id_start_date_condition_  [[33mSKIP[0m]
[0m04:25:32.074875 [info ] [Thread-2 (]: 294 of 307 SKIP relation quality_measures.quality_measures__int_nqf0034_exclusions  [[33mSKIP[0m]
[0m04:25:32.075328 [debug] [Thread-4 (]: Began running node model.the_tuva_project.quality_measures__int_nqf2372_exclusions
[0m04:25:32.075744 [debug] [Thread-1 (]: Began running node model.the_tuva_project.readmissions__encounter_augmented
[0m04:25:32.076168 [debug] [Thread-3 (]: Finished running node test.the_tuva_project.unique_chronic_conditions__cms_chronic_conditions_long__patient_id_claim_id_start_date_condition_.fba1518320
[0m04:25:32.076570 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf0034_exclusions
[0m04:25:32.076968 [info ] [Thread-4 (]: 295 of 307 SKIP relation quality_measures.quality_measures__int_nqf2372_exclusions  [[33mSKIP[0m]
[0m04:25:32.077413 [info ] [Thread-1 (]: 296 of 307 SKIP relation readmissions.readmissions__encounter_augmented ........ [[33mSKIP[0m]
[0m04:25:32.077849 [debug] [Thread-3 (]: Began running node model.the_tuva_project.cms_hcc__patient_risk_scores
[0m04:25:32.078383 [debug] [Thread-2 (]: Began running node model.the_tuva_project.chronic_conditions__cms_chronic_conditions_wide
[0m04:25:32.079061 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf2372_exclusions
[0m04:25:32.079753 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.readmissions__encounter_augmented
[0m04:25:32.080173 [info ] [Thread-3 (]: 297 of 307 SKIP relation cms_hcc.cms_hcc__patient_risk_scores .................. [[33mSKIP[0m]
[0m04:25:32.080602 [info ] [Thread-2 (]: 298 of 307 SKIP relation chronic_conditions.chronic_conditions__cms_chronic_conditions_wide  [[33mSKIP[0m]
[0m04:25:32.081033 [debug] [Thread-4 (]: Began running node model.the_tuva_project.quality_measures__int_nqf0034_long
[0m04:25:32.081473 [debug] [Thread-1 (]: Began running node model.the_tuva_project.quality_measures__int_nqf2372_long
[0m04:25:32.081874 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.cms_hcc__patient_risk_scores
[0m04:25:32.082278 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.chronic_conditions__cms_chronic_conditions_wide
[0m04:25:32.082670 [info ] [Thread-4 (]: 299 of 307 SKIP relation quality_measures.quality_measures__int_nqf0034_long ... [[33mSKIP[0m]
[0m04:25:32.083091 [info ] [Thread-1 (]: 300 of 307 SKIP relation quality_measures.quality_measures__int_nqf2372_long ... [[33mSKIP[0m]
[0m04:25:32.083608 [debug] [Thread-3 (]: Began running node model.the_tuva_project.readmissions__readmission_summary
[0m04:25:32.084431 [debug] [Thread-2 (]: Began running node test.the_tuva_project.unique_cms_hcc__patient_risk_scores_patient_id.05b154e126
[0m04:25:32.084900 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf0034_long
[0m04:25:32.085318 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf2372_long
[0m04:25:32.085722 [info ] [Thread-3 (]: 301 of 307 SKIP relation readmissions.readmissions__readmission_summary ........ [[33mSKIP[0m]
[0m04:25:32.086177 [info ] [Thread-2 (]: 302 of 307 SKIP test unique_cms_hcc__patient_risk_scores_patient_id ............ [[33mSKIP[0m]
[0m04:25:32.086610 [debug] [Thread-4 (]: Began running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_wide_patient_id.5c2c8ae105
[0m04:25:32.087259 [debug] [Thread-1 (]: Began running node test.the_tuva_project.unique_chronic_conditions__cms_chronic_conditions_wide_patient_id.60c2d9a586
[0m04:25:32.087676 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.readmissions__readmission_summary
[0m04:25:32.088128 [debug] [Thread-2 (]: Finished running node test.the_tuva_project.unique_cms_hcc__patient_risk_scores_patient_id.05b154e126
[0m04:25:32.088526 [info ] [Thread-4 (]: 303 of 307 SKIP test not_null_chronic_conditions__cms_chronic_conditions_wide_patient_id  [[33mSKIP[0m]
[0m04:25:32.088945 [info ] [Thread-1 (]: 304 of 307 SKIP test unique_chronic_conditions__cms_chronic_conditions_wide_patient_id  [[33mSKIP[0m]
[0m04:25:32.089416 [debug] [Thread-3 (]: Began running node model.the_tuva_project.quality_measures__summary_long
[0m04:25:32.089997 [debug] [Thread-4 (]: Finished running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_wide_patient_id.5c2c8ae105
[0m04:25:32.090512 [debug] [Thread-1 (]: Finished running node test.the_tuva_project.unique_chronic_conditions__cms_chronic_conditions_wide_patient_id.60c2d9a586
[0m04:25:32.090922 [info ] [Thread-3 (]: 305 of 307 SKIP relation quality_measures.quality_measures__summary_long ....... [[33mSKIP[0m]
[0m04:25:32.091733 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.quality_measures__summary_long
[0m04:25:32.092790 [debug] [Thread-2 (]: Began running node model.the_tuva_project.quality_measures__summary_counts
[0m04:25:32.093070 [debug] [Thread-4 (]: Began running node model.the_tuva_project.quality_measures__summary_wide
[0m04:25:32.093483 [info ] [Thread-2 (]: 306 of 307 SKIP relation quality_measures.quality_measures__summary_counts ..... [[33mSKIP[0m]
[0m04:25:32.093917 [info ] [Thread-4 (]: 307 of 307 SKIP relation quality_measures.quality_measures__summary_wide ....... [[33mSKIP[0m]
[0m04:25:32.094361 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.quality_measures__summary_counts
[0m04:25:32.094751 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.quality_measures__summary_wide
[0m04:25:32.455829 [debug] [MainThread]: Using duckdb connection "master"
[0m04:25:32.458066 [debug] [MainThread]: On master: BEGIN
[0m04:25:32.459119 [debug] [MainThread]: Opening a new connection, currently in state closed
[0m04:25:32.723655 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m04:25:32.724169 [debug] [MainThread]: On master: COMMIT
[0m04:25:32.724506 [debug] [MainThread]: Using duckdb connection "master"
[0m04:25:32.724829 [debug] [MainThread]: On master: COMMIT
[0m04:25:32.725207 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m04:25:32.725550 [debug] [MainThread]: On master: Close
[0m04:25:32.735269 [debug] [MainThread]: Connection 'master' was properly closed.
[0m04:25:32.735695 [debug] [MainThread]: Connection 'list_synthea_claims_expanded' was properly closed.
[0m04:25:32.736023 [debug] [MainThread]: Connection 'list_synthea_chronic_conditions' was properly closed.
[0m04:25:32.736401 [debug] [MainThread]: Connection 'list_synthea_insights' was properly closed.
[0m04:25:32.736721 [debug] [MainThread]: Connection 'list_synthea_tuva_input' was properly closed.
[0m04:25:32.737026 [debug] [MainThread]: Connection 'model.the_tuva_project.normalized_input__int_revenue_center_normalize' was properly closed.
[0m04:25:32.737344 [debug] [MainThread]: Connection 'model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility' was properly closed.
[0m04:25:32.737650 [debug] [MainThread]: Connection 'model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility' was properly closed.
[0m04:25:32.737956 [debug] [MainThread]: Connection 'model.the_tuva_project.normalized_input__int_undetermined_claim_type' was properly closed.
[0m04:25:32.740582 [info ] [MainThread]: 
[0m04:25:32.741916 [info ] [MainThread]: Finished running 42 view models, 212 table models, 53 tests in 0 hours 43 minutes and 38.44 seconds (2618.44s).
[0m04:25:32.754258 [debug] [MainThread]: Command end result
[0m04:25:33.428978 [info ] [MainThread]: 
[0m04:25:33.429766 [info ] [MainThread]: [31mCompleted with 4 errors and 0 warnings:[0m
[0m04:25:33.430125 [info ] [MainThread]: 
[0m04:25:33.430456 [error] [MainThread]:   Runtime Error in model normalized_input__int_procedure_date_normalize (models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_procedure_date_normalize.sql)
  Out of Memory Error: could not allocate block of size 262KB (53.8GB/53.8GB used)
[0m04:25:33.430785 [info ] [MainThread]: 
[0m04:25:33.431100 [error] [MainThread]:   Runtime Error in model normalized_input__int_procedure_code_normalize (models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_procedure_code_normalize.sql)
  Out of Memory Error: failed to pin block of size 262KB (53.8GB/53.8GB used)
[0m04:25:33.431424 [info ] [MainThread]: 
[0m04:25:33.431734 [error] [MainThread]:   Runtime Error in model normalized_input__int_diagnosis_code_normalize (models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_diagnosis_code_normalize.sql)
  Out of Memory Error: failed to pin block of size 262KB (53.8GB/53.8GB used)
[0m04:25:33.432049 [info ] [MainThread]: 
[0m04:25:33.432373 [error] [MainThread]:   Runtime Error in model normalized_input__int_present_on_admit_normalize (models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_present_on_admit_normalize.sql)
  Out of Memory Error: could not allocate block of size 262KB (53.8GB/53.8GB used)
[0m04:25:33.432823 [info ] [MainThread]: 
[0m04:25:33.433630 [info ] [MainThread]: Done. PASS=63 WARN=0 ERROR=4 SKIP=240 TOTAL=307
[0m04:25:33.440441 [debug] [MainThread]: Resource report: {"command_name": "build", "command_wall_clock_time": 2619.936, "process_user_time": 2611.0676, "process_kernel_time": 1769.9363, "process_mem_max_rss": "59648436", "process_in_blocks": "6192896", "command_success": false, "process_out_blocks": "0"}
[0m04:25:33.441160 [debug] [MainThread]: Command `dbt build` failed at 04:25:33.441030 after 2619.94 seconds
[0m04:25:33.441617 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff87ff0710>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8dbc3890>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8dbc3c10>]}
[0m04:25:33.441991 [debug] [MainThread]: Flushing usage events
[0m14:30:54.310828 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff858de190>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff86cfd350>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff858d1dd0>]}


============================== 14:30:54.312818 | ef693bb1-bdf6-4206-8e85-df24e2303a9d ==============================
[0m14:30:54.312818 [info ] [MainThread]: Running with dbt=1.7.7
[0m14:30:54.313444 [debug] [MainThread]: running dbt with arguments {'printer_width': '80', 'cache_selected_only': 'False', 'debug': 'False', 'profiles_dir': '/workspaces/synthea_dw/tuva', 'invocation_command': 'dbt build', 'log_cache_events': 'False', 'version_check': 'True', 'write_json': 'True', 'partial_parse': 'True', 'warn_error': 'None', 'send_anonymous_usage_stats': 'True', 'log_path': '/workspaces/synthea_dw/tuva/logs', 'static_parser': 'True', 'use_colors': 'True', 'quiet': 'False', 'indirect_selection': 'eager', 'log_format': 'default', 'use_experimental_parser': 'False', 'target_path': 'None', 'no_print': 'None', 'introspect': 'True', 'fail_fast': 'False', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])'}
[0m14:30:54.566732 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff858d1c10>]}
[0m14:30:54.647105 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7e216890>]}
[0m14:30:54.648107 [info ] [MainThread]: Registered adapter: duckdb=1.7.1
[0m14:30:54.656226 [debug] [MainThread]: checksum: 54188551c516f4dd1c42b8d9c289f2bf49f18ae42632e2ba36a64ad29fd60da4, vars: {}, profile: , target: , version: 1.7.7
[0m14:30:54.991972 [debug] [MainThread]: Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.
[0m14:30:54.992523 [debug] [MainThread]: Partial parsing enabled, no changes found, skipping parsing
[0m14:30:55.048615 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff85973410>]}
[0m14:30:55.199896 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7da90410>]}
[0m14:30:55.200592 [info ] [MainThread]: Found 296 models, 53 tests, 121 sources, 0 exposures, 0 metrics, 531 macros, 0 groups, 0 semantic models
[0m14:30:55.213629 [info ] [MainThread]: 
[0m14:30:55.214799 [debug] [MainThread]: Acquiring new duckdb connection 'master'
[0m14:30:55.221956 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea'
[0m14:30:55.222771 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea'
[0m14:30:55.229227 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea'
[0m14:30:55.232347 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m14:30:55.234472 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m14:30:55.235115 [debug] [ThreadPool]: Acquiring new duckdb connection 'list_synthea'
[0m14:30:55.237133 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m14:30:55.237703 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m14:30:55.238282 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m14:30:55.240324 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m14:30:55.240938 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m14:30:55.241534 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m14:30:55.241923 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m14:30:55.242355 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m14:30:55.242908 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m14:30:55.316681 [debug] [ThreadPool]: Opening a new connection, currently in state init
[0m14:30:55.318007 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.318404 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.318713 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.319411 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.320502 [debug] [ThreadPool]: On list_synthea: Close
[0m14:30:55.321395 [debug] [ThreadPool]: On list_synthea: Close
[0m14:30:55.322235 [debug] [ThreadPool]: On list_synthea: Close
[0m14:30:55.323306 [debug] [ThreadPool]: On list_synthea: Close
[0m14:30:55.325752 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m14:30:55.328286 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m14:30:55.331788 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m14:30:55.339428 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m14:30:55.339971 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m14:30:55.340423 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m14:30:55.340896 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m14:30:55.341292 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m14:30:55.341700 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:55.342194 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:55.342630 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:55.343054 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:55.395238 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.395613 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.396114 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.396715 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.397766 [debug] [ThreadPool]: On list_synthea: Close
[0m14:30:55.398948 [debug] [ThreadPool]: On list_synthea: Close
[0m14:30:55.400119 [debug] [ThreadPool]: On list_synthea: Close
[0m14:30:55.401652 [debug] [ThreadPool]: On list_synthea: Close
[0m14:30:55.404054 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m14:30:55.406671 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m14:30:55.409325 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m14:30:55.417117 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m14:30:55.417919 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m14:30:55.418497 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m14:30:55.418951 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m14:30:55.419431 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m14:30:55.419858 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:55.420314 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:55.420818 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:55.421239 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:55.486577 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.486943 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.487260 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.487738 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.488700 [debug] [ThreadPool]: On list_synthea: Close
[0m14:30:55.489748 [debug] [ThreadPool]: On list_synthea: Close
[0m14:30:55.490857 [debug] [ThreadPool]: On list_synthea: Close
[0m14:30:55.491736 [debug] [ThreadPool]: On list_synthea: Close
[0m14:30:55.493944 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m14:30:55.496151 [debug] [ThreadPool]: Using duckdb connection "list_synthea"
[0m14:30:55.503065 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m14:30:55.503605 [debug] [ThreadPool]: On list_synthea: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea"} */

    
    select schema_name
    from system.information_schema.schemata
    
    where catalog_name = '"synthea"'
    
  
  
[0m14:30:55.504030 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:55.504487 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:55.556457 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.556887 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.557865 [debug] [ThreadPool]: On list_synthea: Close
[0m14:30:55.558632 [debug] [ThreadPool]: On list_synthea: Close
[0m14:30:55.564789 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea, now create_synthea_tuva_input)
[0m14:30:55.565385 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea, now create_synthea_financial_pmpm)
[0m14:30:55.565891 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea, now create_synthea_quality_measures)
[0m14:30:55.566319 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea, now create_synthea_cms_hcc)
[0m14:30:55.566992 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "tuva_input"
"
[0m14:30:55.568066 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "financial_pmpm"
"
[0m14:30:55.568847 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "quality_measures"
"
[0m14:30:55.569476 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "cms_hcc"
"
[0m14:30:55.574680 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m14:30:55.576504 [debug] [ThreadPool]: Using duckdb connection "create_synthea_financial_pmpm"
[0m14:30:55.579281 [debug] [ThreadPool]: Using duckdb connection "create_synthea_quality_measures"
[0m14:30:55.581054 [debug] [ThreadPool]: Using duckdb connection "create_synthea_cms_hcc"
[0m14:30:55.581727 [debug] [ThreadPool]: On create_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_tuva_input"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m14:30:55.582212 [debug] [ThreadPool]: On create_synthea_financial_pmpm: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_financial_pmpm"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m14:30:55.582642 [debug] [ThreadPool]: On create_synthea_quality_measures: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_quality_measures"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m14:30:55.583028 [debug] [ThreadPool]: On create_synthea_cms_hcc: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_cms_hcc"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m14:30:55.583495 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:55.583873 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:55.584251 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:55.584637 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:55.649855 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.650452 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.650862 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.651567 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.652571 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m14:30:55.653467 [debug] [ThreadPool]: Using duckdb connection "create_synthea_financial_pmpm"
[0m14:30:55.654393 [debug] [ThreadPool]: Using duckdb connection "create_synthea_quality_measures"
[0m14:30:55.655222 [debug] [ThreadPool]: Using duckdb connection "create_synthea_cms_hcc"
[0m14:30:55.655511 [debug] [ThreadPool]: On create_synthea_tuva_input: BEGIN
[0m14:30:55.656006 [debug] [ThreadPool]: On create_synthea_financial_pmpm: BEGIN
[0m14:30:55.656469 [debug] [ThreadPool]: On create_synthea_quality_measures: BEGIN
[0m14:30:55.656950 [debug] [ThreadPool]: On create_synthea_cms_hcc: BEGIN
[0m14:30:55.657806 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.658293 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.658630 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.659374 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.659765 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m14:30:55.660365 [debug] [ThreadPool]: Using duckdb connection "create_synthea_financial_pmpm"
[0m14:30:55.660858 [debug] [ThreadPool]: Using duckdb connection "create_synthea_quality_measures"
[0m14:30:55.661391 [debug] [ThreadPool]: Using duckdb connection "create_synthea_cms_hcc"
[0m14:30:55.661892 [debug] [ThreadPool]: On create_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_tuva_input"} */

    
    
        create schema if not exists "synthea"."tuva_input"
    
[0m14:30:55.662414 [debug] [ThreadPool]: On create_synthea_financial_pmpm: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_financial_pmpm"} */

    
    
        create schema if not exists "synthea"."financial_pmpm"
    
[0m14:30:55.662999 [debug] [ThreadPool]: On create_synthea_quality_measures: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_quality_measures"} */

    
    
        create schema if not exists "synthea"."quality_measures"
    
[0m14:30:55.663460 [debug] [ThreadPool]: On create_synthea_cms_hcc: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_cms_hcc"} */

    
    
        create schema if not exists "synthea"."cms_hcc"
    
[0m14:30:55.664111 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.664644 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.665059 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.665508 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.666293 [debug] [ThreadPool]: On create_synthea_tuva_input: COMMIT
[0m14:30:55.667088 [debug] [ThreadPool]: On create_synthea_financial_pmpm: COMMIT
[0m14:30:55.667813 [debug] [ThreadPool]: On create_synthea_quality_measures: COMMIT
[0m14:30:55.668642 [debug] [ThreadPool]: On create_synthea_cms_hcc: COMMIT
[0m14:30:55.669091 [debug] [ThreadPool]: Using duckdb connection "create_synthea_tuva_input"
[0m14:30:55.669517 [debug] [ThreadPool]: Using duckdb connection "create_synthea_financial_pmpm"
[0m14:30:55.669901 [debug] [ThreadPool]: Using duckdb connection "create_synthea_quality_measures"
[0m14:30:55.670271 [debug] [ThreadPool]: Using duckdb connection "create_synthea_cms_hcc"
[0m14:30:55.670645 [debug] [ThreadPool]: On create_synthea_tuva_input: COMMIT
[0m14:30:55.671030 [debug] [ThreadPool]: On create_synthea_financial_pmpm: COMMIT
[0m14:30:55.671453 [debug] [ThreadPool]: On create_synthea_quality_measures: COMMIT
[0m14:30:55.672089 [debug] [ThreadPool]: On create_synthea_cms_hcc: COMMIT
[0m14:30:55.672859 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.673632 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.674050 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.674533 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.674892 [debug] [ThreadPool]: On create_synthea_tuva_input: Close
[0m14:30:55.675459 [debug] [ThreadPool]: On create_synthea_financial_pmpm: Close
[0m14:30:55.675953 [debug] [ThreadPool]: On create_synthea_quality_measures: Close
[0m14:30:55.676504 [debug] [ThreadPool]: On create_synthea_cms_hcc: Close
[0m14:30:55.677839 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_tuva_input, now create_synthea_ccsr)
[0m14:30:55.678966 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_financial_pmpm, now create_synthea_ed_classification)
[0m14:30:55.679995 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_quality_measures, now create_synthea_data_quality)
[0m14:30:55.686445 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_cms_hcc, now create_synthea_chronic_conditions)
[0m14:30:55.687300 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "ccsr"
"
[0m14:30:55.688003 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "ed_classification"
"
[0m14:30:55.688705 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "data_quality"
"
[0m14:30:55.689529 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "chronic_conditions"
"
[0m14:30:55.691761 [debug] [ThreadPool]: Using duckdb connection "create_synthea_ccsr"
[0m14:30:55.693508 [debug] [ThreadPool]: Using duckdb connection "create_synthea_ed_classification"
[0m14:30:55.695436 [debug] [ThreadPool]: Using duckdb connection "create_synthea_data_quality"
[0m14:30:55.697188 [debug] [ThreadPool]: Using duckdb connection "create_synthea_chronic_conditions"
[0m14:30:55.697667 [debug] [ThreadPool]: On create_synthea_ccsr: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_ccsr"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m14:30:55.698198 [debug] [ThreadPool]: On create_synthea_ed_classification: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_ed_classification"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m14:30:55.698771 [debug] [ThreadPool]: On create_synthea_data_quality: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_data_quality"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m14:30:55.699312 [debug] [ThreadPool]: On create_synthea_chronic_conditions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_chronic_conditions"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m14:30:55.699905 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:55.700432 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:55.700824 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:55.701218 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:55.750827 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.751345 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.751737 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.752127 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.753053 [debug] [ThreadPool]: Using duckdb connection "create_synthea_ccsr"
[0m14:30:55.753788 [debug] [ThreadPool]: Using duckdb connection "create_synthea_ed_classification"
[0m14:30:55.754650 [debug] [ThreadPool]: Using duckdb connection "create_synthea_data_quality"
[0m14:30:55.755494 [debug] [ThreadPool]: Using duckdb connection "create_synthea_chronic_conditions"
[0m14:30:55.755907 [debug] [ThreadPool]: On create_synthea_ccsr: BEGIN
[0m14:30:55.756315 [debug] [ThreadPool]: On create_synthea_ed_classification: BEGIN
[0m14:30:55.756850 [debug] [ThreadPool]: On create_synthea_data_quality: BEGIN
[0m14:30:55.757278 [debug] [ThreadPool]: On create_synthea_chronic_conditions: BEGIN
[0m14:30:55.757901 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.758230 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.758532 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.758820 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.759075 [debug] [ThreadPool]: Using duckdb connection "create_synthea_ccsr"
[0m14:30:55.759439 [debug] [ThreadPool]: Using duckdb connection "create_synthea_ed_classification"
[0m14:30:55.759796 [debug] [ThreadPool]: Using duckdb connection "create_synthea_data_quality"
[0m14:30:55.760172 [debug] [ThreadPool]: Using duckdb connection "create_synthea_chronic_conditions"
[0m14:30:55.760646 [debug] [ThreadPool]: On create_synthea_ccsr: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_ccsr"} */

    
    
        create schema if not exists "synthea"."ccsr"
    
[0m14:30:55.761094 [debug] [ThreadPool]: On create_synthea_ed_classification: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_ed_classification"} */

    
    
        create schema if not exists "synthea"."ed_classification"
    
[0m14:30:55.761503 [debug] [ThreadPool]: On create_synthea_data_quality: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_data_quality"} */

    
    
        create schema if not exists "synthea"."data_quality"
    
[0m14:30:55.761893 [debug] [ThreadPool]: On create_synthea_chronic_conditions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_chronic_conditions"} */

    
    
        create schema if not exists "synthea"."chronic_conditions"
    
[0m14:30:55.762484 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.762815 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.763166 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.763509 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.764120 [debug] [ThreadPool]: On create_synthea_ccsr: COMMIT
[0m14:30:55.764817 [debug] [ThreadPool]: On create_synthea_ed_classification: COMMIT
[0m14:30:55.765574 [debug] [ThreadPool]: On create_synthea_data_quality: COMMIT
[0m14:30:55.766410 [debug] [ThreadPool]: On create_synthea_chronic_conditions: COMMIT
[0m14:30:55.766930 [debug] [ThreadPool]: Using duckdb connection "create_synthea_ccsr"
[0m14:30:55.767320 [debug] [ThreadPool]: Using duckdb connection "create_synthea_ed_classification"
[0m14:30:55.767693 [debug] [ThreadPool]: Using duckdb connection "create_synthea_data_quality"
[0m14:30:55.768068 [debug] [ThreadPool]: Using duckdb connection "create_synthea_chronic_conditions"
[0m14:30:55.768449 [debug] [ThreadPool]: On create_synthea_ccsr: COMMIT
[0m14:30:55.768821 [debug] [ThreadPool]: On create_synthea_ed_classification: COMMIT
[0m14:30:55.769218 [debug] [ThreadPool]: On create_synthea_data_quality: COMMIT
[0m14:30:55.769607 [debug] [ThreadPool]: On create_synthea_chronic_conditions: COMMIT
[0m14:30:55.770126 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.770437 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.770737 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.771058 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.771316 [debug] [ThreadPool]: On create_synthea_ccsr: Close
[0m14:30:55.771674 [debug] [ThreadPool]: On create_synthea_ed_classification: Close
[0m14:30:55.772028 [debug] [ThreadPool]: On create_synthea_data_quality: Close
[0m14:30:55.772379 [debug] [ThreadPool]: On create_synthea_chronic_conditions: Close
[0m14:30:55.773493 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_ccsr, now create_synthea_core)
[0m14:30:55.774699 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_ed_classification, now create_synthea_hcc_suspecting)
[0m14:30:55.775823 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_data_quality, now create_synthea_claims_expanded)
[0m14:30:55.782108 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_chronic_conditions, now create_synthea_readmissions)
[0m14:30:55.783034 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "core"
"
[0m14:30:55.783950 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "hcc_suspecting"
"
[0m14:30:55.784809 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "claims_expanded"
"
[0m14:30:55.785472 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "readmissions"
"
[0m14:30:55.787597 [debug] [ThreadPool]: Using duckdb connection "create_synthea_core"
[0m14:30:55.789318 [debug] [ThreadPool]: Using duckdb connection "create_synthea_hcc_suspecting"
[0m14:30:55.791168 [debug] [ThreadPool]: Using duckdb connection "create_synthea_claims_expanded"
[0m14:30:55.792831 [debug] [ThreadPool]: Using duckdb connection "create_synthea_readmissions"
[0m14:30:55.793254 [debug] [ThreadPool]: On create_synthea_core: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_core"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m14:30:55.793692 [debug] [ThreadPool]: On create_synthea_hcc_suspecting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_hcc_suspecting"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m14:30:55.794107 [debug] [ThreadPool]: On create_synthea_claims_expanded: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_claims_expanded"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m14:30:55.794579 [debug] [ThreadPool]: On create_synthea_readmissions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_readmissions"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m14:30:55.795024 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:55.795493 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:55.795891 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:55.796295 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:55.845243 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.845594 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.845999 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.846783 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.847764 [debug] [ThreadPool]: Using duckdb connection "create_synthea_hcc_suspecting"
[0m14:30:55.848680 [debug] [ThreadPool]: Using duckdb connection "create_synthea_core"
[0m14:30:55.849735 [debug] [ThreadPool]: Using duckdb connection "create_synthea_claims_expanded"
[0m14:30:55.850729 [debug] [ThreadPool]: Using duckdb connection "create_synthea_readmissions"
[0m14:30:55.851081 [debug] [ThreadPool]: On create_synthea_hcc_suspecting: BEGIN
[0m14:30:55.851617 [debug] [ThreadPool]: On create_synthea_core: BEGIN
[0m14:30:55.852050 [debug] [ThreadPool]: On create_synthea_claims_expanded: BEGIN
[0m14:30:55.852476 [debug] [ThreadPool]: On create_synthea_readmissions: BEGIN
[0m14:30:55.853031 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.853393 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.853760 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.854059 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.854446 [debug] [ThreadPool]: Using duckdb connection "create_synthea_hcc_suspecting"
[0m14:30:55.854834 [debug] [ThreadPool]: Using duckdb connection "create_synthea_core"
[0m14:30:55.855241 [debug] [ThreadPool]: Using duckdb connection "create_synthea_claims_expanded"
[0m14:30:55.855649 [debug] [ThreadPool]: Using duckdb connection "create_synthea_readmissions"
[0m14:30:55.856045 [debug] [ThreadPool]: On create_synthea_hcc_suspecting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_hcc_suspecting"} */

    
    
        create schema if not exists "synthea"."hcc_suspecting"
    
[0m14:30:55.856445 [debug] [ThreadPool]: On create_synthea_core: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_core"} */

    
    
        create schema if not exists "synthea"."core"
    
[0m14:30:55.856822 [debug] [ThreadPool]: On create_synthea_claims_expanded: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_claims_expanded"} */

    
    
        create schema if not exists "synthea"."claims_expanded"
    
[0m14:30:55.857210 [debug] [ThreadPool]: On create_synthea_readmissions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_readmissions"} */

    
    
        create schema if not exists "synthea"."readmissions"
    
[0m14:30:55.857733 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.858050 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.858390 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.858704 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.859286 [debug] [ThreadPool]: On create_synthea_hcc_suspecting: COMMIT
[0m14:30:55.859934 [debug] [ThreadPool]: On create_synthea_core: COMMIT
[0m14:30:55.860567 [debug] [ThreadPool]: On create_synthea_claims_expanded: COMMIT
[0m14:30:55.861197 [debug] [ThreadPool]: On create_synthea_readmissions: COMMIT
[0m14:30:55.861577 [debug] [ThreadPool]: Using duckdb connection "create_synthea_hcc_suspecting"
[0m14:30:55.861936 [debug] [ThreadPool]: Using duckdb connection "create_synthea_core"
[0m14:30:55.862296 [debug] [ThreadPool]: Using duckdb connection "create_synthea_claims_expanded"
[0m14:30:55.862652 [debug] [ThreadPool]: Using duckdb connection "create_synthea_readmissions"
[0m14:30:55.863000 [debug] [ThreadPool]: On create_synthea_hcc_suspecting: COMMIT
[0m14:30:55.863382 [debug] [ThreadPool]: On create_synthea_core: COMMIT
[0m14:30:55.863732 [debug] [ThreadPool]: On create_synthea_claims_expanded: COMMIT
[0m14:30:55.864082 [debug] [ThreadPool]: On create_synthea_readmissions: COMMIT
[0m14:30:55.864516 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.864969 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.865394 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.865791 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.866154 [debug] [ThreadPool]: On create_synthea_hcc_suspecting: Close
[0m14:30:55.866534 [debug] [ThreadPool]: On create_synthea_core: Close
[0m14:30:55.866895 [debug] [ThreadPool]: On create_synthea_claims_expanded: Close
[0m14:30:55.867253 [debug] [ThreadPool]: On create_synthea_readmissions: Close
[0m14:30:55.868269 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_hcc_suspecting, now create_synthea_claims_preprocessing)
[0m14:30:55.869355 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_core, now create_synthea_insights)
[0m14:30:55.876304 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "claims_preprocessing"
"
[0m14:30:55.876958 [debug] [ThreadPool]: Creating schema "database: "synthea"
schema: "insights"
"
[0m14:30:55.880264 [debug] [ThreadPool]: Using duckdb connection "create_synthea_claims_preprocessing"
[0m14:30:55.882143 [debug] [ThreadPool]: Using duckdb connection "create_synthea_insights"
[0m14:30:55.882720 [debug] [ThreadPool]: On create_synthea_claims_preprocessing: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_claims_preprocessing"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m14:30:55.883327 [debug] [ThreadPool]: On create_synthea_insights: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_insights"} */

    
        select type from duckdb_databases()
        where database_name='synthea'
        and type='sqlite'
    
  
[0m14:30:55.883858 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:55.884288 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:55.945584 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.945999 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.947169 [debug] [ThreadPool]: Using duckdb connection "create_synthea_insights"
[0m14:30:55.948215 [debug] [ThreadPool]: Using duckdb connection "create_synthea_claims_preprocessing"
[0m14:30:55.948530 [debug] [ThreadPool]: On create_synthea_insights: BEGIN
[0m14:30:55.949040 [debug] [ThreadPool]: On create_synthea_claims_preprocessing: BEGIN
[0m14:30:55.949751 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.950101 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.950384 [debug] [ThreadPool]: Using duckdb connection "create_synthea_insights"
[0m14:30:55.950876 [debug] [ThreadPool]: Using duckdb connection "create_synthea_claims_preprocessing"
[0m14:30:55.951413 [debug] [ThreadPool]: On create_synthea_insights: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_insights"} */

    
    
        create schema if not exists "synthea"."insights"
    
[0m14:30:55.951891 [debug] [ThreadPool]: On create_synthea_claims_preprocessing: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "create_synthea_claims_preprocessing"} */

    
    
        create schema if not exists "synthea"."claims_preprocessing"
    
[0m14:30:55.952468 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.952789 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.953396 [debug] [ThreadPool]: On create_synthea_insights: COMMIT
[0m14:30:55.954090 [debug] [ThreadPool]: On create_synthea_claims_preprocessing: COMMIT
[0m14:30:55.954546 [debug] [ThreadPool]: Using duckdb connection "create_synthea_insights"
[0m14:30:55.954999 [debug] [ThreadPool]: Using duckdb connection "create_synthea_claims_preprocessing"
[0m14:30:55.955668 [debug] [ThreadPool]: On create_synthea_insights: COMMIT
[0m14:30:55.956187 [debug] [ThreadPool]: On create_synthea_claims_preprocessing: COMMIT
[0m14:30:55.956785 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.957291 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:55.957778 [debug] [ThreadPool]: On create_synthea_insights: Close
[0m14:30:55.958248 [debug] [ThreadPool]: On create_synthea_claims_preprocessing: Close
[0m14:30:55.975155 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_claims_preprocessing, now list_synthea_tuva_input)
[0m14:30:55.975867 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_insights, now list_synthea_financial_pmpm)
[0m14:30:55.976449 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_readmissions, now list_synthea_quality_measures)
[0m14:30:55.980369 [debug] [ThreadPool]: Using duckdb connection "list_synthea_tuva_input"
[0m14:30:55.980973 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly create_synthea_claims_expanded, now list_synthea_cms_hcc)
[0m14:30:55.982618 [debug] [ThreadPool]: Using duckdb connection "list_synthea_financial_pmpm"
[0m14:30:55.984216 [debug] [ThreadPool]: Using duckdb connection "list_synthea_quality_measures"
[0m14:30:55.984754 [debug] [ThreadPool]: On list_synthea_tuva_input: BEGIN
[0m14:30:55.986525 [debug] [ThreadPool]: Using duckdb connection "list_synthea_cms_hcc"
[0m14:30:55.987043 [debug] [ThreadPool]: On list_synthea_financial_pmpm: BEGIN
[0m14:30:55.987492 [debug] [ThreadPool]: On list_synthea_quality_measures: BEGIN
[0m14:30:55.987888 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:55.988304 [debug] [ThreadPool]: On list_synthea_cms_hcc: BEGIN
[0m14:30:55.988711 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:55.989120 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:56.040181 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:56.040544 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:56.041100 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:56.041556 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:56.041841 [debug] [ThreadPool]: Using duckdb connection "list_synthea_tuva_input"
[0m14:30:56.042331 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:56.042715 [debug] [ThreadPool]: Using duckdb connection "list_synthea_financial_pmpm"
[0m14:30:56.043075 [debug] [ThreadPool]: Using duckdb connection "list_synthea_quality_measures"
[0m14:30:56.043539 [debug] [ThreadPool]: On list_synthea_tuva_input: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_tuva_input"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'tuva_input'
    and table_catalog = 'synthea'
  
[0m14:30:56.043951 [debug] [ThreadPool]: Using duckdb connection "list_synthea_cms_hcc"
[0m14:30:56.044359 [debug] [ThreadPool]: On list_synthea_financial_pmpm: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_financial_pmpm"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'financial_pmpm'
    and table_catalog = 'synthea'
  
[0m14:30:56.044841 [debug] [ThreadPool]: On list_synthea_quality_measures: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_quality_measures"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'quality_measures'
    and table_catalog = 'synthea'
  
[0m14:30:56.045598 [debug] [ThreadPool]: On list_synthea_cms_hcc: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_cms_hcc"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'cms_hcc'
    and table_catalog = 'synthea'
  
[0m14:30:56.054375 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:56.055102 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:56.055485 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:56.055795 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:56.070213 [debug] [ThreadPool]: On list_synthea_quality_measures: ROLLBACK
[0m14:30:56.071094 [debug] [ThreadPool]: On list_synthea_financial_pmpm: ROLLBACK
[0m14:30:56.072449 [debug] [ThreadPool]: Failed to rollback 'list_synthea_quality_measures'
[0m14:30:56.072867 [debug] [ThreadPool]: Failed to rollback 'list_synthea_financial_pmpm'
[0m14:30:56.073918 [debug] [ThreadPool]: On list_synthea_tuva_input: ROLLBACK
[0m14:30:56.074219 [debug] [ThreadPool]: On list_synthea_quality_measures: Close
[0m14:30:56.074604 [debug] [ThreadPool]: On list_synthea_financial_pmpm: Close
[0m14:30:56.075081 [debug] [ThreadPool]: Failed to rollback 'list_synthea_tuva_input'
[0m14:30:56.076047 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_quality_measures, now list_synthea_ccsr)
[0m14:30:56.080959 [debug] [ThreadPool]: On list_synthea_cms_hcc: ROLLBACK
[0m14:30:56.081786 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_financial_pmpm, now list_synthea_ed_classification)
[0m14:30:56.083409 [debug] [ThreadPool]: On list_synthea_tuva_input: Close
[0m14:30:56.085123 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ccsr"
[0m14:30:56.085720 [debug] [ThreadPool]: Failed to rollback 'list_synthea_cms_hcc'
[0m14:30:56.087152 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ed_classification"
[0m14:30:56.088042 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_tuva_input, now list_synthea_data_quality)
[0m14:30:56.089751 [debug] [ThreadPool]: On list_synthea_ccsr: BEGIN
[0m14:30:56.090244 [debug] [ThreadPool]: On list_synthea_cms_hcc: Close
[0m14:30:56.090673 [debug] [ThreadPool]: On list_synthea_ed_classification: BEGIN
[0m14:30:56.092309 [debug] [ThreadPool]: Using duckdb connection "list_synthea_data_quality"
[0m14:30:56.092833 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:56.099567 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_cms_hcc, now list_synthea_chronic_conditions)
[0m14:30:56.102271 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:56.102670 [debug] [ThreadPool]: On list_synthea_data_quality: BEGIN
[0m14:30:56.153082 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:56.154848 [debug] [ThreadPool]: Using duckdb connection "list_synthea_chronic_conditions"
[0m14:30:56.155474 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:56.155750 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:56.156142 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ccsr"
[0m14:30:56.156575 [debug] [ThreadPool]: On list_synthea_chronic_conditions: BEGIN
[0m14:30:56.157010 [debug] [ThreadPool]: Using duckdb connection "list_synthea_ed_classification"
[0m14:30:56.157547 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:56.157811 [debug] [ThreadPool]: On list_synthea_ccsr: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_ccsr"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'ccsr'
    and table_catalog = 'synthea'
  
[0m14:30:56.158198 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:56.158590 [debug] [ThreadPool]: On list_synthea_ed_classification: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_ed_classification"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'ed_classification'
    and table_catalog = 'synthea'
  
[0m14:30:56.159003 [debug] [ThreadPool]: Using duckdb connection "list_synthea_data_quality"
[0m14:30:56.159938 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:56.160799 [debug] [ThreadPool]: On list_synthea_data_quality: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_data_quality"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'data_quality'
    and table_catalog = 'synthea'
  
[0m14:30:56.161398 [debug] [ThreadPool]: Using duckdb connection "list_synthea_chronic_conditions"
[0m14:30:56.162226 [debug] [ThreadPool]: On list_synthea_chronic_conditions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_chronic_conditions"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'chronic_conditions'
    and table_catalog = 'synthea'
  
[0m14:30:56.168473 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:56.168851 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:56.169237 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:56.169484 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:56.184091 [debug] [ThreadPool]: On list_synthea_chronic_conditions: ROLLBACK
[0m14:30:56.185375 [debug] [ThreadPool]: On list_synthea_ed_classification: ROLLBACK
[0m14:30:56.187910 [debug] [ThreadPool]: On list_synthea_data_quality: ROLLBACK
[0m14:30:56.188339 [debug] [ThreadPool]: Failed to rollback 'list_synthea_chronic_conditions'
[0m14:30:56.189116 [debug] [ThreadPool]: On list_synthea_ccsr: ROLLBACK
[0m14:30:56.189557 [debug] [ThreadPool]: Failed to rollback 'list_synthea_ed_classification'
[0m14:30:56.189907 [debug] [ThreadPool]: Failed to rollback 'list_synthea_data_quality'
[0m14:30:56.190300 [debug] [ThreadPool]: On list_synthea_chronic_conditions: Close
[0m14:30:56.190798 [debug] [ThreadPool]: Failed to rollback 'list_synthea_ccsr'
[0m14:30:56.191152 [debug] [ThreadPool]: On list_synthea_ed_classification: Close
[0m14:30:56.191538 [debug] [ThreadPool]: On list_synthea_data_quality: Close
[0m14:30:56.192533 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_chronic_conditions, now list_synthea_core)
[0m14:30:56.193965 [debug] [ThreadPool]: On list_synthea_ccsr: Close
[0m14:30:56.194943 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_ed_classification, now list_synthea_hcc_suspecting)
[0m14:30:56.196527 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_data_quality, now list_synthea_claims_expanded)
[0m14:30:56.202028 [debug] [ThreadPool]: Using duckdb connection "list_synthea_core"
[0m14:30:56.209353 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_ccsr, now list_synthea_readmissions)
[0m14:30:56.210830 [debug] [ThreadPool]: Using duckdb connection "list_synthea_hcc_suspecting"
[0m14:30:56.213220 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_expanded"
[0m14:30:56.213705 [debug] [ThreadPool]: On list_synthea_core: BEGIN
[0m14:30:56.215200 [debug] [ThreadPool]: Using duckdb connection "list_synthea_readmissions"
[0m14:30:56.215668 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: BEGIN
[0m14:30:56.216186 [debug] [ThreadPool]: On list_synthea_claims_expanded: BEGIN
[0m14:30:56.216635 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:56.217032 [debug] [ThreadPool]: On list_synthea_readmissions: BEGIN
[0m14:30:56.217410 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:56.217907 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:56.267732 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:56.268105 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:56.268753 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:56.269217 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:56.269489 [debug] [ThreadPool]: Using duckdb connection "list_synthea_core"
[0m14:30:56.269947 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:56.270305 [debug] [ThreadPool]: Using duckdb connection "list_synthea_hcc_suspecting"
[0m14:30:56.270676 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_expanded"
[0m14:30:56.271075 [debug] [ThreadPool]: On list_synthea_core: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_core"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'core'
    and table_catalog = 'synthea'
  
[0m14:30:56.271494 [debug] [ThreadPool]: Using duckdb connection "list_synthea_readmissions"
[0m14:30:56.271838 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_hcc_suspecting"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'hcc_suspecting'
    and table_catalog = 'synthea'
  
[0m14:30:56.272213 [debug] [ThreadPool]: On list_synthea_claims_expanded: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_claims_expanded"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'claims_expanded'
    and table_catalog = 'synthea'
  
[0m14:30:56.272855 [debug] [ThreadPool]: On list_synthea_readmissions: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_readmissions"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'readmissions'
    and table_catalog = 'synthea'
  
[0m14:30:56.281022 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:56.281541 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:56.281877 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:56.282111 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:56.296815 [debug] [ThreadPool]: On list_synthea_readmissions: ROLLBACK
[0m14:30:56.297900 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: ROLLBACK
[0m14:30:56.298683 [debug] [ThreadPool]: On list_synthea_claims_expanded: ROLLBACK
[0m14:30:56.299768 [debug] [ThreadPool]: On list_synthea_core: ROLLBACK
[0m14:30:56.300291 [debug] [ThreadPool]: Failed to rollback 'list_synthea_readmissions'
[0m14:30:56.300630 [debug] [ThreadPool]: Failed to rollback 'list_synthea_hcc_suspecting'
[0m14:30:56.301153 [debug] [ThreadPool]: Failed to rollback 'list_synthea_claims_expanded'
[0m14:30:56.301711 [debug] [ThreadPool]: Failed to rollback 'list_synthea_core'
[0m14:30:56.302219 [debug] [ThreadPool]: On list_synthea_readmissions: Close
[0m14:30:56.302598 [debug] [ThreadPool]: On list_synthea_hcc_suspecting: Close
[0m14:30:56.302983 [debug] [ThreadPool]: On list_synthea_claims_expanded: Close
[0m14:30:56.303355 [debug] [ThreadPool]: On list_synthea_core: Close
[0m14:30:56.304408 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_readmissions, now list_synthea_claims_preprocessing)
[0m14:30:56.307877 [debug] [ThreadPool]: Re-using an available connection from the pool (formerly list_synthea_hcc_suspecting, now list_synthea_insights)
[0m14:30:56.321033 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_preprocessing"
[0m14:30:56.323038 [debug] [ThreadPool]: Using duckdb connection "list_synthea_insights"
[0m14:30:56.323582 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: BEGIN
[0m14:30:56.324027 [debug] [ThreadPool]: On list_synthea_insights: BEGIN
[0m14:30:56.324488 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:56.324891 [debug] [ThreadPool]: Opening a new connection, currently in state closed
[0m14:30:56.374002 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:56.374589 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:56.374895 [debug] [ThreadPool]: Using duckdb connection "list_synthea_claims_preprocessing"
[0m14:30:56.375272 [debug] [ThreadPool]: Using duckdb connection "list_synthea_insights"
[0m14:30:56.375714 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_claims_preprocessing"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'claims_preprocessing'
    and table_catalog = 'synthea'
  
[0m14:30:56.376120 [debug] [ThreadPool]: On list_synthea_insights: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "connection_name": "list_synthea_insights"} */
select
      'synthea' as database,
      table_name as name,
      table_schema as schema,
      CASE table_type
        WHEN 'BASE TABLE' THEN 'table'
        WHEN 'VIEW' THEN 'view'
        WHEN 'LOCAL TEMPORARY' THEN 'table'
        END as type
    from system.information_schema.tables
    where table_schema = 'insights'
    and table_catalog = 'synthea'
  
[0m14:30:56.384897 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:56.385355 [debug] [ThreadPool]: SQL status: OK in 0.0 seconds
[0m14:30:56.400334 [debug] [ThreadPool]: On list_synthea_insights: ROLLBACK
[0m14:30:56.401850 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: ROLLBACK
[0m14:30:56.402497 [debug] [ThreadPool]: Failed to rollback 'list_synthea_insights'
[0m14:30:56.402958 [debug] [ThreadPool]: Failed to rollback 'list_synthea_claims_preprocessing'
[0m14:30:56.403363 [debug] [ThreadPool]: On list_synthea_insights: Close
[0m14:30:56.403738 [debug] [ThreadPool]: On list_synthea_claims_preprocessing: Close
[0m14:30:56.421437 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7e0115d0>]}
[0m14:30:56.422240 [debug] [MainThread]: Using duckdb connection "master"
[0m14:30:56.422734 [debug] [MainThread]: On master: BEGIN
[0m14:30:56.423156 [debug] [MainThread]: Opening a new connection, currently in state init
[0m14:30:56.479230 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m14:30:56.479862 [debug] [MainThread]: On master: COMMIT
[0m14:30:56.480289 [debug] [MainThread]: Using duckdb connection "master"
[0m14:30:56.480681 [debug] [MainThread]: On master: COMMIT
[0m14:30:56.481155 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m14:30:56.481614 [debug] [MainThread]: On master: Close
[0m14:30:56.487634 [info ] [MainThread]: Concurrency: 4 threads (target='dev')
[0m14:30:56.488168 [info ] [MainThread]: 
[0m14:30:56.491752 [debug] [Thread-1 (]: Began running node model.the_tuva_project.ccsr__dx_vertical_pivot
[0m14:30:56.492142 [debug] [Thread-2 (]: Began running node model.the_tuva_project.ccsr__procedure_category_map
[0m14:30:56.492516 [debug] [Thread-3 (]: Began running node model.the_tuva_project.cms_chronic_conditions__stg_medical_claim
[0m14:30:56.492811 [debug] [Thread-4 (]: Began running node model.the_tuva_project.cms_chronic_conditions__stg_pharmacy_claim
[0m14:30:56.493217 [info ] [Thread-1 (]: 1 of 307 START sql table model ccsr.dx_vertical_pivot .......................... [RUN]
[0m14:30:56.493790 [info ] [Thread-2 (]: 2 of 307 START sql table model ccsr.procedure_category_map ..................... [RUN]
[0m14:30:56.494611 [debug] [Thread-3 (]: Acquiring new duckdb connection 'model.the_tuva_project.cms_chronic_conditions__stg_medical_claim'
[0m14:30:56.495438 [debug] [Thread-4 (]: Acquiring new duckdb connection 'model.the_tuva_project.cms_chronic_conditions__stg_pharmacy_claim'
[0m14:30:56.496134 [debug] [Thread-1 (]: Acquiring new duckdb connection 'model.the_tuva_project.ccsr__dx_vertical_pivot'
[0m14:30:56.496807 [debug] [Thread-2 (]: Acquiring new duckdb connection 'model.the_tuva_project.ccsr__procedure_category_map'
[0m14:30:56.497318 [debug] [Thread-3 (]: Began compiling node model.the_tuva_project.cms_chronic_conditions__stg_medical_claim
[0m14:30:56.497779 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.cms_chronic_conditions__stg_pharmacy_claim
[0m14:30:56.498244 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.ccsr__dx_vertical_pivot
[0m14:30:56.498688 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.ccsr__procedure_category_map
[0m14:30:56.504897 [debug] [Thread-3 (]: Writing injected SQL for node "model.the_tuva_project.cms_chronic_conditions__stg_medical_claim"
[0m14:30:56.509310 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.cms_chronic_conditions__stg_pharmacy_claim"
[0m14:30:56.551941 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.ccsr__dx_vertical_pivot"
[0m14:30:56.555322 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.ccsr__procedure_category_map"
[0m14:30:56.558620 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.cms_chronic_conditions__stg_medical_claim (compile): 14:30:56.499011 => 14:30:56.558421
[0m14:30:56.559073 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.cms_chronic_conditions__stg_pharmacy_claim (compile): 14:30:56.505146 => 14:30:56.558896
[0m14:30:56.559624 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.ccsr__dx_vertical_pivot (compile): 14:30:56.509765 => 14:30:56.559447
[0m14:30:56.560279 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.cms_chronic_conditions__stg_medical_claim
[0m14:30:56.560743 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.ccsr__procedure_category_map (compile): 14:30:56.552453 => 14:30:56.560557
[0m14:30:56.561313 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.cms_chronic_conditions__stg_pharmacy_claim
[0m14:30:56.561732 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.ccsr__dx_vertical_pivot
[0m14:30:56.562192 [debug] [Thread-3 (]: Began running node model.the_tuva_project.condition
[0m14:30:56.562606 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.ccsr__procedure_category_map
[0m14:30:56.563026 [debug] [Thread-4 (]: Began running node model.the_tuva_project.eligibility
[0m14:30:56.581380 [info ] [Thread-3 (]: 3 of 307 START sql view model tuva_input.condition ............................. [RUN]
[0m14:30:56.583230 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.ccsr__dx_vertical_pivot"
[0m14:30:56.585828 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.ccsr__procedure_category_map"
[0m14:30:56.586341 [info ] [Thread-4 (]: 4 of 307 START sql view model tuva_input.eligibility ........................... [RUN]
[0m14:30:56.586973 [debug] [Thread-3 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.cms_chronic_conditions__stg_medical_claim, now model.the_tuva_project.condition)
[0m14:30:56.588322 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.cms_chronic_conditions__stg_pharmacy_claim, now model.the_tuva_project.eligibility)
[0m14:30:56.588951 [debug] [Thread-3 (]: Began compiling node model.the_tuva_project.condition
[0m14:30:56.589448 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.ccsr__dx_vertical_pivot"
[0m14:30:56.589744 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.ccsr__procedure_category_map"
[0m14:30:56.590024 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.eligibility
[0m14:30:56.592907 [debug] [Thread-3 (]: Writing injected SQL for node "model.the_tuva_project.condition"
[0m14:30:56.593358 [debug] [Thread-1 (]: On model.the_tuva_project.ccsr__dx_vertical_pivot: BEGIN
[0m14:30:56.593765 [debug] [Thread-2 (]: On model.the_tuva_project.ccsr__procedure_category_map: BEGIN
[0m14:30:56.595959 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.eligibility"
[0m14:30:56.596924 [debug] [Thread-1 (]: Opening a new connection, currently in state init
[0m14:30:56.597387 [debug] [Thread-2 (]: Opening a new connection, currently in state init
[0m14:30:56.597820 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.condition (compile): 14:30:56.590333 => 14:30:56.597586
[0m14:30:56.644351 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:30:56.644947 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.eligibility (compile): 14:30:56.594063 => 14:30:56.644761
[0m14:30:56.645319 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:30:56.645639 [debug] [Thread-3 (]: Began executing node model.the_tuva_project.condition
[0m14:30:56.646036 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.ccsr__dx_vertical_pivot"
[0m14:30:56.646450 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.eligibility
[0m14:30:56.646831 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.ccsr__procedure_category_map"
[0m14:30:56.658580 [debug] [Thread-3 (]: Writing runtime sql for node "model.the_tuva_project.condition"
[0m14:30:56.659015 [debug] [Thread-1 (]: On model.the_tuva_project.ccsr__dx_vertical_pivot: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.ccsr__dx_vertical_pivot"} */

  
    
    

    create  table
      "synthea"."ccsr"."dx_vertical_pivot__dbt_tmp"
  
    as (
      

with codes as (
    
    select
        icd_10_cm_code as code, 
        icd_10_cm_code_description as code_description,
        -- loop to generate columns for CCSR categories 1-6
        ccsr_category_1,
        ccsr_category_1_description,
        ccsr_category_2,
        ccsr_category_2_description,
        ccsr_category_3,
        ccsr_category_3_description,
        ccsr_category_4,
        ccsr_category_4_description,
        ccsr_category_5,
        ccsr_category_5_description,
        ccsr_category_6,
        ccsr_category_6_description,
        default_ccsr_category_ip,
        default_ccsr_category_op
    from "synthea"."ccsr"."_value_set_dxccsr_v2023_1_cleaned_map"

), long_union as (
    -- generate select & union statements to pivot category columns to rows
    
    select 
        code,
        code_description,
        left(ccsr_category_1, 3) as ccsr_parent_category,
        ccsr_category_1 as ccsr_category,
        ccsr_category_1_description as ccsr_category_description,
        1 as ccsr_category_rank,
        (ccsr_category_1 = default_ccsr_category_ip) as is_ip_default_category,
        (ccsr_category_1 = default_ccsr_category_op) as is_op_default_category
    from codes 
    union all
    select 
        code,
        code_description,
        left(ccsr_category_2, 3) as ccsr_parent_category,
        ccsr_category_2 as ccsr_category,
        ccsr_category_2_description as ccsr_category_description,
        2 as ccsr_category_rank,
        (ccsr_category_2 = default_ccsr_category_ip) as is_ip_default_category,
        (ccsr_category_2 = default_ccsr_category_op) as is_op_default_category
    from codes 
    union all
    select 
        code,
        code_description,
        left(ccsr_category_3, 3) as ccsr_parent_category,
        ccsr_category_3 as ccsr_category,
        ccsr_category_3_description as ccsr_category_description,
        3 as ccsr_category_rank,
        (ccsr_category_3 = default_ccsr_category_ip) as is_ip_default_category,
        (ccsr_category_3 = default_ccsr_category_op) as is_op_default_category
    from codes 
    union all
    select 
        code,
        code_description,
        left(ccsr_category_4, 3) as ccsr_parent_category,
        ccsr_category_4 as ccsr_category,
        ccsr_category_4_description as ccsr_category_description,
        4 as ccsr_category_rank,
        (ccsr_category_4 = default_ccsr_category_ip) as is_ip_default_category,
        (ccsr_category_4 = default_ccsr_category_op) as is_op_default_category
    from codes 
    union all
    select 
        code,
        code_description,
        left(ccsr_category_5, 3) as ccsr_parent_category,
        ccsr_category_5 as ccsr_category,
        ccsr_category_5_description as ccsr_category_description,
        5 as ccsr_category_rank,
        (ccsr_category_5 = default_ccsr_category_ip) as is_ip_default_category,
        (ccsr_category_5 = default_ccsr_category_op) as is_op_default_category
    from codes 
    union all
    select 
        code,
        code_description,
        left(ccsr_category_6, 3) as ccsr_parent_category,
        ccsr_category_6 as ccsr_category,
        ccsr_category_6_description as ccsr_category_description,
        6 as ccsr_category_rank,
        (ccsr_category_6 = default_ccsr_category_ip) as is_ip_default_category,
        (ccsr_category_6 = default_ccsr_category_op) as is_op_default_category
    from codes 
    

)

select distinct
    *,
    '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from long_union
-- as not all diagnosis codes have multiple categories, we can discard nulls
where ccsr_category is not null
    );
  
  
[0m14:30:56.662028 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.eligibility"
[0m14:30:56.662556 [debug] [Thread-2 (]: On model.the_tuva_project.ccsr__procedure_category_map: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.ccsr__procedure_category_map"} */

  
    
    

    create  table
      "synthea"."ccsr"."procedure_category_map__dbt_tmp"
  
    as (
      

select 
    icd_10_pcs as code,
    icd_10_pcs_description as code_description,
    prccsr as ccsr_category,
    left(prccsr, 3) as ccsr_parent_category,
    prccsr_description as ccsr_category_description,
    clinical_domain,
   '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from "synthea"."ccsr"."_value_set_prccsr_v2023_1_cleaned_map"
    );
  
  
[0m14:30:56.663962 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.condition"
[0m14:30:56.664690 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.eligibility"
[0m14:30:56.664991 [debug] [Thread-3 (]: On model.the_tuva_project.condition: BEGIN
[0m14:30:56.665862 [debug] [Thread-4 (]: On model.the_tuva_project.eligibility: BEGIN
[0m14:30:56.666605 [debug] [Thread-3 (]: Opening a new connection, currently in state init
[0m14:30:56.667142 [debug] [Thread-4 (]: Opening a new connection, currently in state init
[0m14:30:56.668005 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m14:30:56.669106 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.condition"
[0m14:30:56.669866 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:30:56.670418 [debug] [Thread-3 (]: On model.the_tuva_project.condition: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.condition"} */

  
  create view "synthea"."tuva_input"."condition__dbt_tmp" as (
    SELECT
    MAX(REPLACE(JSON_EXTRACT(co, '$.id'), '"', '')) AS condition_id,
    MAX(REPLACE(REPLACE(JSON_EXTRACT(co, '$.subject.reference'), '"Patient/', ''), '"', '')) AS patient_id,
    MAX(REPLACE(REPLACE(JSON_EXTRACT(co, '$.encounter.reference'), '"Encounter/', ''), '"', '')) AS encounter_id,
    MAX(REPLACE(JSON_EXTRACT(cl, '$.id'), '"', '')) AS claim_id,
    MAX(CAST(SUBSTRING(JSON_EXTRACT(co, '$.recordedDate'), 2, 10) AS DATE)) AS recorded_date,
    MAX(CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE)) AS onset_date,
    MAX(CAST(SUBSTRING(JSON_EXTRACT(co, '$.abatementDateTime'), 2, 10) AS DATE)) AS resolved_date,
    MAX(REPLACE(JSON_EXTRACT(co, '$.clinicalStatus.coding[0].code'), '"', '')) AS status,
    MAX(REPLACE(JSON_EXTRACT(co, '$.category[0].coding[0].display'), '"', '')) AS condition_type,
    'snomed' AS source_code_type,
    MAX(REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '')) AS source_code,
    MAX(REPLACE(JSON_EXTRACT(co, '$.code.coding[0].display'), '"', '')) AS source_description,
    'icd-10-cm' AS normalized_code_type,
    MAX(map.map_target) AS normalized_code,
    MAX(map.map_target_name) AS normalized_description,
    MAX(CASE
        WHEN REPLACE(JSON_EXTRACT(cl, '$.diagnosis[0].sequence'), '"', '') IS NOT NULL THEN CAST(REPLACE(JSON_EXTRACT(cl, '$.diagnosis[0].sequence'), '"', '') AS INTEGER)
        ELSE 1
    END) AS condition_rank,
    MAX(CASE
        WHEN CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) < CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE) THEN 'Y'
        WHEN CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) > CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE) THEN 'N'
        ELSE 'U'
    END) AS present_on_admit_code,
    MAX(CASE
        WHEN CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) < CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE) THEN 'Diagnosis was present at the time of inpatient admission. CMS will pay the CC/MCC DRG for those selected HACs that are coded as Y for the POA Indicator.'
        WHEN CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) > CAST(SUBSTRING(JSON_EXTRACT(co, '$.onsetDateTime'), 2, 10) AS DATE) THEN 'Diagnosis was not present at the time of inpatient admission. CMS will not pay the CC/MCC DRG for those selected HACs that are coded as N for the POA Indicator.'
        ELSE 'Documentation is insufficient to determine if the condition was present at the time of inpatient admission. CMS will not pay the CC/MCC DRG for those selected HACs that are coded as U for the POA Indicator.'
    END) AS present_on_admit_description,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Condition" co
LEFT JOIN "synthea"."json"."Claim" cl
    ON REPLACE(REPLACE(JSON_EXTRACT(co, '$.encounter.reference'), '"Encounter/', ''), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(cl, '$.item[0].encounter[0].reference'), '"Encounter/', ''), '"', '')
LEFT JOIN "synthea"."json"."Encounter" e
    ON REPLACE(REPLACE(JSON_EXTRACT(co, '$.encounter.reference'), '"Encounter/', ''), '"', '') = REPLACE(JSON_EXTRACT(e, '$.id'), '"', '')
JOIN "synthea"."terminology"."snomed_icd_10_map" map
    ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
GROUP BY REPLACE(JSON_EXTRACT(co, '$.id'), '"', '')
  );

[0m14:30:56.673403 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.eligibility"
[0m14:30:56.675297 [debug] [Thread-4 (]: On model.the_tuva_project.eligibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.eligibility"} */

  
  create view "synthea"."tuva_input"."eligibility__dbt_tmp" as (
    -- models/eligibility.sql

SELECT DISTINCT
    MAX(REPLACE(REPLACE(JSON_EXTRACT(e, '$.patient.reference'), '"Patient/', ''), '"', '')) AS patient_id,
    NULL AS member_id,
    MAX(REPLACE(JSON_EXTRACT(p, '$.extension[3].valueCode'), '"', '')) AS gender,
    MAX(REPLACE(JSON_EXTRACT(p, '$.extension[0].extension[1].valueString'), '"', '')) AS race,
    MAX(CAST(SUBSTRING(JSON_EXTRACT(p, '$.birthDate'), 2, 10) AS DATE)) AS birth_date,
    MAX(CAST(SUBSTRING(JSON_EXTRACT(p, '$.deceasedDateTime'), 2, 10) AS DATE)) AS death_date,
    MAX(CASE
        WHEN JSON_EXTRACT(p, '$.deceasedDateTime') IS NOT NULL THEN 1
        ELSE 0
    END) AS death_flag,
    MAX(CAST(SUBSTRING(JSON_EXTRACT(e, '$.billablePeriod.start'), 2, 10) AS DATE)) AS enrollment_start_date,
    MAX(CAST(SUBSTRING(JSON_EXTRACT(e, '$.billablePeriod.end'), 2, 10) AS DATE)) AS enrollment_end_date,
    MAX(REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '"', '')) AS payer,
    MAX(CASE
        WHEN REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '"', '') = 'Medicare' THEN 'medicare'
        WHEN REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '"', '') = 'Medicaid' THEN 'medicaid'
        WHEN REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '"', '') = 'NO_INSURANCE' THEN NULL
        ELSE 'commercial'
    END) AS payer_type,
    NULL AS plan,
    NULL AS original_reason_entitlement_code,
    NULL AS dual_status_code,
    NULL AS medicare_status_code,
    MAX(REPLACE(REPLACE(REPLACE(SPLIT_PART(JSON_EXTRACT(p, '$.name[0].given'), ',', -1), '"', ''), '[', ''), ']', '')) AS first_name,
    MAX(REPLACE(JSON_EXTRACT(p, '$.name[0].family'), '"', '')) AS last_name,
    MAX(REPLACE(JSON_EXTRACT(p, '$.address[0].line[0]'), '"', '')) AS address,
    MAX(REPLACE(JSON_EXTRACT(p, '$.address[0].city'), '"', '')) AS city,
    MAX(REPLACE(JSON_EXTRACT(p, '$.address[0].state'), '"', '')) AS state,
    MAX(REPLACE(JSON_EXTRACT(p, '$.address[0].postalCode'), '"', '')) AS zip_code,
    MAX(REPLACE(JSON_EXTRACT(p, '$.telecom[0].value'), '"', '')) AS phone,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."ExplanationOfBenefit" e
LEFT JOIN "synthea"."json"."Patient" p
    ON REPLACE(REPLACE(JSON_EXTRACT(e, '$.patient.reference'), '"Patient/', ''), '"', '') = REPLACE(JSON_EXTRACT(p, '$.id'), '"', '')
GROUP BY REPLACE(REPLACE(JSON_EXTRACT(e, '$.patient.reference'), '"Patient/', ''), '"', '')
  );

[0m14:30:56.686003 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m14:30:56.686966 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:30:56.695144 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.condition"
[0m14:30:56.699465 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.eligibility"
[0m14:30:56.700919 [debug] [Thread-3 (]: On model.the_tuva_project.condition: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.condition"} */
alter view "synthea"."tuva_input"."condition" rename to "condition__dbt_backup"
[0m14:30:56.701979 [debug] [Thread-4 (]: On model.the_tuva_project.eligibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.eligibility"} */
alter view "synthea"."tuva_input"."eligibility" rename to "eligibility__dbt_backup"
[0m14:30:56.703964 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m14:30:56.706013 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:30:56.708572 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.condition"
[0m14:30:56.711644 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.eligibility"
[0m14:30:56.713462 [debug] [Thread-3 (]: On model.the_tuva_project.condition: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.condition"} */
alter view "synthea"."tuva_input"."condition__dbt_tmp" rename to "condition"
[0m14:30:56.719006 [debug] [Thread-4 (]: On model.the_tuva_project.eligibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.eligibility"} */
alter view "synthea"."tuva_input"."eligibility__dbt_tmp" rename to "eligibility"
[0m14:30:56.726322 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:30:56.741401 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m14:30:56.752823 [debug] [Thread-4 (]: On model.the_tuva_project.eligibility: COMMIT
[0m14:30:56.754350 [debug] [Thread-3 (]: On model.the_tuva_project.condition: COMMIT
[0m14:30:56.755347 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.eligibility"
[0m14:30:56.756015 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.condition"
[0m14:30:56.756701 [debug] [Thread-4 (]: On model.the_tuva_project.eligibility: COMMIT
[0m14:30:56.757343 [debug] [Thread-3 (]: On model.the_tuva_project.condition: COMMIT
[0m14:30:56.759149 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:30:56.759955 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m14:30:56.763813 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.eligibility"
[0m14:30:56.766319 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.condition"
[0m14:30:56.767012 [debug] [Thread-4 (]: On model.the_tuva_project.eligibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.eligibility"} */
drop view if exists "synthea"."tuva_input"."eligibility__dbt_backup" cascade
[0m14:30:56.767691 [debug] [Thread-3 (]: On model.the_tuva_project.condition: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.condition"} */
drop view if exists "synthea"."tuva_input"."condition__dbt_backup" cascade
[0m14:30:56.768833 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:30:56.769344 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:30:56.770749 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.eligibility (execute): 14:30:56.659483 => 14:30:56.770600
[0m14:30:56.771068 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m14:30:56.773375 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.ccsr__procedure_category_map"
[0m14:30:56.773888 [debug] [Thread-4 (]: On model.the_tuva_project.eligibility: Close
[0m14:30:56.775010 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.condition (execute): 14:30:56.647118 => 14:30:56.774873
[0m14:30:56.775472 [debug] [Thread-2 (]: On model.the_tuva_project.ccsr__procedure_category_map: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.ccsr__procedure_category_map"} */
alter table "synthea"."ccsr"."procedure_category_map" rename to "procedure_category_map__dbt_backup"
[0m14:30:56.776227 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7d790250>]}
[0m14:30:56.776670 [debug] [Thread-3 (]: On model.the_tuva_project.condition: Close
[0m14:30:56.777638 [info ] [Thread-4 (]: 4 of 307 OK created sql view model tuva_input.eligibility ...................... [[32mOK[0m in 0.19s]
[0m14:30:56.778007 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:30:56.778750 [debug] [Thread-3 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7dbb9c50>]}
[0m14:30:56.779328 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.eligibility
[0m14:30:56.781811 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.ccsr__procedure_category_map"
[0m14:30:56.782521 [info ] [Thread-3 (]: 3 of 307 OK created sql view model tuva_input.condition ........................ [[32mOK[0m in 0.19s]
[0m14:30:56.783241 [debug] [Thread-4 (]: Began running node model.the_tuva_project.encounter
[0m14:30:56.783869 [debug] [Thread-2 (]: On model.the_tuva_project.ccsr__procedure_category_map: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.ccsr__procedure_category_map"} */
alter table "synthea"."ccsr"."procedure_category_map__dbt_tmp" rename to "procedure_category_map"
[0m14:30:56.784482 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.condition
[0m14:30:56.785200 [info ] [Thread-4 (]: 5 of 307 START sql view model tuva_input.encounter ............................. [RUN]
[0m14:30:56.786102 [debug] [Thread-3 (]: Began running node model.the_tuva_project.lab_result
[0m14:30:56.786566 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:30:56.787303 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.eligibility, now model.the_tuva_project.encounter)
[0m14:30:56.787948 [info ] [Thread-3 (]: 6 of 307 START sql view model tuva_input.lab_result ............................ [RUN]
[0m14:30:56.791656 [debug] [Thread-2 (]: On model.the_tuva_project.ccsr__procedure_category_map: COMMIT
[0m14:30:56.792344 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.encounter
[0m14:30:56.793286 [debug] [Thread-3 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.condition, now model.the_tuva_project.lab_result)
[0m14:30:56.793988 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.ccsr__procedure_category_map"
[0m14:30:56.797509 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.encounter"
[0m14:30:56.798270 [debug] [Thread-3 (]: Began compiling node model.the_tuva_project.lab_result
[0m14:30:56.798801 [debug] [Thread-2 (]: On model.the_tuva_project.ccsr__procedure_category_map: COMMIT
[0m14:30:56.801820 [debug] [Thread-3 (]: Writing injected SQL for node "model.the_tuva_project.lab_result"
[0m14:30:56.803128 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.encounter (compile): 14:30:56.794556 => 14:30:56.802943
[0m14:30:56.803863 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.encounter
[0m14:30:56.808523 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.encounter"
[0m14:30:56.809254 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.lab_result (compile): 14:30:56.799575 => 14:30:56.809065
[0m14:30:56.810043 [debug] [Thread-3 (]: Began executing node model.the_tuva_project.lab_result
[0m14:30:56.813192 [debug] [Thread-3 (]: Writing runtime sql for node "model.the_tuva_project.lab_result"
[0m14:30:56.813928 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.encounter"
[0m14:30:56.814669 [debug] [Thread-4 (]: On model.the_tuva_project.encounter: BEGIN
[0m14:30:56.815231 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m14:30:56.815628 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.lab_result"
[0m14:30:56.816213 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:30:56.816576 [debug] [Thread-3 (]: On model.the_tuva_project.lab_result: BEGIN
[0m14:30:56.817106 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.encounter"
[0m14:30:56.817692 [debug] [Thread-3 (]: Opening a new connection, currently in state closed
[0m14:30:56.818418 [debug] [Thread-4 (]: On model.the_tuva_project.encounter: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.encounter"} */

  
  create view "synthea"."tuva_input"."encounter__dbt_tmp" as (
    -- models/encounter.sql

SELECT DISTINCT
    MAX(REPLACE(JSON_EXTRACT(e, '$.id'), '"', '')) AS encounter_id,
    MAX(REPLACE(REPLACE(JSON_EXTRACT(e, '$.subject.reference'), '"Patient/', ''), '"', '')) AS patient_id,
    MAX(CASE
        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '"', '') = 'AMB' THEN 'outpatient'
        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '"', '') = 'EMER' THEN 'emergency department'
        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '"', '') = 'IMP' THEN 'acute inpatient'
        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '"', '') = 'FLD' THEN 'other'
        WHEN REPLACE(JSON_EXTRACT(e, '$.class.code'), '"', '') = 'HH' THEN 'home health'
        ELSE 'other'
    END) AS encounter_type,
    MAX(CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE)) AS encounter_start_date,
    MAX(CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE)) AS encounter_end_date,
    MAX(CASE
        WHEN 
            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) IS NOT NULL AND 
            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE) IS NOT NULL AND
            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) = CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE)
        THEN 1
        WHEN 
            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE) IS NOT NULL AND 
            CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE) IS NOT NULL 
        THEN
            DATEDIFF(
                'day',
                CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.start'), 2, 10) AS DATE),
                CAST(SUBSTRING(JSON_EXTRACT(e, '$.period.end'), 2, 10) AS DATE)
            ) + 1
        ELSE 1
    END) AS length_of_stay,
    9 AS admit_source_code,
    'Information Not Available' AS admit_source_description,
    9 AS admit_type_code,
    'Unknown' AS admit_type_description,
    00 AS discharge_disposition_code,
    'Unknown Value (but present in data)' AS discharge_disposition_description,
    MAX(REPLACE(REPLACE(JSON_EXTRACT(e, '$.participant[0].individual.reference'), '"Practitioner/', ''), '"', '')) AS attending_provider_id,
    NULL AS facility_npi,
    'snomed' AS primary_diagnosis_code_type,
    MAX(REPLACE(JSON_EXTRACT(e, '$.reasonCode[0].coding[0].code'), '"', '')) AS primary_diagnosis_code,
    MAX(REPLACE(JSON_EXTRACT(e, '$.reasonCode[0].coding[0].display'), '"', '')) AS primary_diagnosis_description,
    MAX(icd."MS-DRG") AS ms_drg_code,
    MAX(icd."MS-DRG_description") AS ms_drg_description,
    MAX(apr.apr_drg_code) AS apr_drg_code,
    MAX(apr.apr_drg_description) AS apr_drg_description,
    MAX(REPLACE(JSON_EXTRACT(ex, '$.payment.amount.value'), '"', '')) AS paid_amount,
    MAX(REPLACE(JSON_EXTRACT(ex, '$.total[0].amount.value'), '"', '')) AS allowed_amount,
    MAX(REPLACE(JSON_EXTRACT(ex, '$.total[0].amount.value'), '"', '')) AS charge_amount,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Encounter" e
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" ex
    ON REPLACE(JSON_EXTRACT(e, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(ex, '$.item[0].encounter[0].reference'), '"Encounter/', ''), '"', '')
JOIN "synthea"."terminology"."snomed_icd_10_map" sno
    ON REPLACE(JSON_EXTRACT(e, '$.reasonCode[0].coding[0].code'), '"', '') = sno.referenced_component_id
JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" icd
    ON sno.map_target = REPLACE(icd.ICD10, '.', '')
JOIN "synthea"."terminology"."apr_drg" apr
    ON icd.MDC = apr.mdc_code
GROUP BY REPLACE(JSON_EXTRACT(e, '$.id'), '"', '')
  );

[0m14:30:56.819311 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m14:30:56.819839 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.lab_result"
[0m14:30:56.820284 [debug] [Thread-3 (]: On model.the_tuva_project.lab_result: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.lab_result"} */

  
  create view "synthea"."tuva_input"."lab_result__dbt_tmp" as (
    -- models/lab_result.sql

SELECT DISTINCT
    MAX(REPLACE(JSON_EXTRACT(o, '$.id'), '"', '')) AS lab_result_id,
    MAX(REPLACE(REPLACE(JSON_EXTRACT(o, '$.subject.reference'), '"Patient/', ''), '"', '')) AS patient_id,
    MAX(REPLACE(REPLACE(JSON_EXTRACT(o, '$.encounter.reference'), '"Encounter/', ''), '"', '')) AS encounter_id,
    NULL AS accession_number,
    'loinc' AS source_code_type,
    MAX(REPLACE(JSON_EXTRACT(o, '$.code.coding[0].code'), '"', '')) AS source_code,
    MAX(REPLACE(JSON_EXTRACT(o, '$.code.coding[0].display'), '"', '')) AS source_description,
    NULL AS source_component,
    'loinc' AS normalized_code_type,
    MAX(l.loinc) AS normalized_code,
    MAX(l.short_name) AS normalized_description,
    MAX(l.component) AS normalized_component,
    MAX(REPLACE(JSON_EXTRACT(o, '$.status'), '"', '')) AS status,
    MAX(REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '"', '')) AS result, 
    MAX(CAST(SUBSTRING(JSON_EXTRACT(o, '$.effectiveDateTime'), 2, 10) AS DATE)) AS result_date,
    MAX(CAST(SUBSTRING(JSON_EXTRACT(o, '$.issued'), 2, 10) AS DATE)) AS collection_date,
    MAX(REPLACE(JSON_EXTRACT(o, '$.valueQuantity.unit'), '"', '')) AS source_units,
    MAX(REPLACE(JSON_EXTRACT(o, '$.valueQuantity.unit'), '"', '')) AS normalized_units,
    NULL AS source_reference_range_low,
    NULL AS source_reference_range_high,
    NULL AS normalized_reference_range_low,
    NULL AS normalized_reference_range_high,
    NULL AS source_abnormal_flag,
    NULL AS normalized_abnormal_flag,
    NULL AS specimen,
    MAX(REPLACE(REPLACE(JSON_EXTRACT(e, '$.participant[0].individual.reference'), '"Practitioner/', ''), '"', '')) AS ordering_practitioner_id,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Observation" o
LEFT JOIN "synthea"."terminology"."loinc" l ON REPLACE(JSON_EXTRACT(o, '$.code.coding[0].code'), '"', '') = l.loinc
LEFT JOIN "synthea"."json"."Encounter" e ON REPLACE(REPLACE(JSON_EXTRACT(o, '$.encounter.reference'), '"Encounter/', ''), '"', '') = REPLACE(JSON_EXTRACT(e, '$.id'), '"', '')
WHERE REPLACE(JSON_EXTRACT(o, '$.category[0].coding[0].code'), '"', '') = ('laboratory')
AND REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '"', '') IS NOT NULL
GROUP BY REPLACE(JSON_EXTRACT(o, '$.id'), '"', '')
  );

[0m14:30:57.262834 [debug] [Thread-1 (]: SQL status: OK in 1.0 seconds
[0m14:30:57.265858 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.ccsr__dx_vertical_pivot"
[0m14:30:57.266335 [debug] [Thread-1 (]: On model.the_tuva_project.ccsr__dx_vertical_pivot: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.ccsr__dx_vertical_pivot"} */
alter table "synthea"."ccsr"."dx_vertical_pivot" rename to "dx_vertical_pivot__dbt_backup"
[0m14:30:57.267016 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:30:57.269414 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.ccsr__dx_vertical_pivot"
[0m14:30:57.269870 [debug] [Thread-1 (]: On model.the_tuva_project.ccsr__dx_vertical_pivot: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.ccsr__dx_vertical_pivot"} */
alter table "synthea"."ccsr"."dx_vertical_pivot__dbt_tmp" rename to "dx_vertical_pivot"
[0m14:30:57.270462 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:30:57.271881 [debug] [Thread-1 (]: On model.the_tuva_project.ccsr__dx_vertical_pivot: COMMIT
[0m14:30:57.272335 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.ccsr__dx_vertical_pivot"
[0m14:30:57.272741 [debug] [Thread-1 (]: On model.the_tuva_project.ccsr__dx_vertical_pivot: COMMIT
[0m14:30:57.382240 [debug] [Thread-2 (]: SQL status: OK in 1.0 seconds
[0m14:30:57.384870 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.ccsr__procedure_category_map"
[0m14:30:57.385355 [debug] [Thread-2 (]: On model.the_tuva_project.ccsr__procedure_category_map: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.ccsr__procedure_category_map"} */
drop table if exists "synthea"."ccsr"."procedure_category_map__dbt_backup" cascade
[0m14:30:57.387234 [debug] [Thread-3 (]: SQL status: OK in 1.0 seconds
[0m14:30:57.389643 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.lab_result"
[0m14:30:57.390211 [debug] [Thread-4 (]: SQL status: OK in 1.0 seconds
[0m14:30:57.390606 [debug] [Thread-3 (]: On model.the_tuva_project.lab_result: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.lab_result"} */
alter view "synthea"."tuva_input"."lab_result" rename to "lab_result__dbt_backup"
[0m14:30:57.393389 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.encounter"
[0m14:30:57.394380 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m14:30:57.394700 [debug] [Thread-4 (]: On model.the_tuva_project.encounter: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.encounter"} */
alter view "synthea"."tuva_input"."encounter" rename to "encounter__dbt_backup"
[0m14:30:57.396921 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.lab_result"
[0m14:30:57.397611 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:30:57.397896 [debug] [Thread-3 (]: On model.the_tuva_project.lab_result: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.lab_result"} */
alter view "synthea"."tuva_input"."lab_result__dbt_tmp" rename to "lab_result"
[0m14:30:57.400073 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.encounter"
[0m14:30:57.400876 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m14:30:57.401212 [debug] [Thread-4 (]: On model.the_tuva_project.encounter: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.encounter"} */
alter view "synthea"."tuva_input"."encounter__dbt_tmp" rename to "encounter"
[0m14:30:57.402455 [debug] [Thread-3 (]: On model.the_tuva_project.lab_result: COMMIT
[0m14:30:57.403038 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:30:57.403343 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.lab_result"
[0m14:30:57.404617 [debug] [Thread-4 (]: On model.the_tuva_project.encounter: COMMIT
[0m14:30:57.405126 [debug] [Thread-3 (]: On model.the_tuva_project.lab_result: COMMIT
[0m14:30:57.405706 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.encounter"
[0m14:30:57.406499 [debug] [Thread-4 (]: On model.the_tuva_project.encounter: COMMIT
[0m14:30:59.415509 [debug] [Thread-1 (]: SQL status: OK in 2.0 seconds
[0m14:30:59.415968 [debug] [Thread-3 (]: SQL status: OK in 2.0 seconds
[0m14:30:59.418394 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.ccsr__dx_vertical_pivot"
[0m14:30:59.418773 [debug] [Thread-4 (]: SQL status: OK in 2.0 seconds
[0m14:30:59.421861 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.lab_result"
[0m14:30:59.422395 [debug] [Thread-1 (]: On model.the_tuva_project.ccsr__dx_vertical_pivot: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.ccsr__dx_vertical_pivot"} */
drop table if exists "synthea"."ccsr"."dx_vertical_pivot__dbt_backup" cascade
[0m14:30:59.424308 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.encounter"
[0m14:30:59.424720 [debug] [Thread-3 (]: On model.the_tuva_project.lab_result: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.lab_result"} */
drop view if exists "synthea"."tuva_input"."lab_result__dbt_backup" cascade
[0m14:30:59.425351 [debug] [Thread-4 (]: On model.the_tuva_project.encounter: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.encounter"} */
drop view if exists "synthea"."tuva_input"."encounter__dbt_backup" cascade
[0m14:30:59.636926 [debug] [Thread-2 (]: SQL status: OK in 2.0 seconds
[0m14:30:59.638527 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.ccsr__procedure_category_map (execute): 14:30:56.583432 => 14:30:59.638361
[0m14:30:59.638890 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:30:59.639215 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m14:30:59.639508 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:30:59.639813 [debug] [Thread-2 (]: On model.the_tuva_project.ccsr__procedure_category_map: Close
[0m14:30:59.640865 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.ccsr__dx_vertical_pivot (execute): 14:30:56.563358 => 14:30:59.640731
[0m14:30:59.641888 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.lab_result (execute): 14:30:56.810538 => 14:30:59.641759
[0m14:30:59.642918 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.encounter (execute): 14:30:56.804518 => 14:30:59.642791
[0m14:30:59.643664 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7e057a50>]}
[0m14:30:59.644361 [debug] [Thread-1 (]: On model.the_tuva_project.ccsr__dx_vertical_pivot: Close
[0m14:30:59.644879 [debug] [Thread-3 (]: On model.the_tuva_project.lab_result: Close
[0m14:30:59.645333 [debug] [Thread-4 (]: On model.the_tuva_project.encounter: Close
[0m14:30:59.645942 [info ] [Thread-2 (]: 2 of 307 OK created sql table model ccsr.procedure_category_map ................ [[32mOK[0m in 3.15s]
[0m14:30:59.646716 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff85e20ad0>]}
[0m14:30:59.647418 [debug] [Thread-3 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7e055e10>]}
[0m14:30:59.740168 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7e057550>]}
[0m14:30:59.741156 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.ccsr__procedure_category_map
[0m14:30:59.742070 [info ] [Thread-1 (]: 1 of 307 OK created sql table model ccsr.dx_vertical_pivot ..................... [[32mOK[0m in 3.15s]
[0m14:30:59.742894 [info ] [Thread-3 (]: 6 of 307 OK created sql view model tuva_input.lab_result ....................... [[32mOK[0m in 2.85s]
[0m14:30:59.743453 [info ] [Thread-4 (]: 5 of 307 OK created sql view model tuva_input.encounter ........................ [[32mOK[0m in 2.95s]
[0m14:30:59.743980 [debug] [Thread-2 (]: Began running node model.the_tuva_project.location
[0m14:30:59.744639 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.ccsr__dx_vertical_pivot
[0m14:30:59.745204 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.lab_result
[0m14:30:59.745750 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.encounter
[0m14:30:59.746258 [info ] [Thread-2 (]: 7 of 307 START sql view model tuva_input.location .............................. [RUN]
[0m14:30:59.746771 [debug] [Thread-1 (]: Began running node model.the_tuva_project.medical_claim
[0m14:30:59.747260 [debug] [Thread-3 (]: Began running node model.the_tuva_project.medical_claim_expanded
[0m14:30:59.747821 [debug] [Thread-4 (]: Began running node model.the_tuva_project.medication
[0m14:30:59.748589 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.ccsr__procedure_category_map, now model.the_tuva_project.location)
[0m14:30:59.749108 [info ] [Thread-1 (]: 8 of 307 START sql view model tuva_input.medical_claim ......................... [RUN]
[0m14:30:59.749687 [info ] [Thread-3 (]: 9 of 307 START sql table model claims_expanded.medical_claim_expanded .......... [RUN]
[0m14:30:59.750214 [info ] [Thread-4 (]: 10 of 307 START sql view model tuva_input.medication ........................... [RUN]
[0m14:30:59.750700 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.location
[0m14:30:59.751326 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.ccsr__dx_vertical_pivot, now model.the_tuva_project.medical_claim)
[0m14:30:59.751930 [debug] [Thread-3 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.lab_result, now model.the_tuva_project.medical_claim_expanded)
[0m14:30:59.752583 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.encounter, now model.the_tuva_project.medication)
[0m14:30:59.755160 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.location"
[0m14:30:59.755705 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.medical_claim
[0m14:30:59.756167 [debug] [Thread-3 (]: Began compiling node model.the_tuva_project.medical_claim_expanded
[0m14:30:59.756612 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.medication
[0m14:30:59.775372 [debug] [Thread-3 (]: Writing injected SQL for node "model.the_tuva_project.medical_claim_expanded"
[0m14:30:59.787030 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.location (compile): 14:30:59.752920 => 14:30:59.786844
[0m14:30:59.790309 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.medication"
[0m14:30:59.840446 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.location
[0m14:30:59.845235 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.medical_claim"
[0m14:30:59.845768 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.medical_claim_expanded (compile): 14:30:59.773311 => 14:30:59.845599
[0m14:30:59.848902 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.location"
[0m14:30:59.849729 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.medication (compile): 14:30:59.787228 => 14:30:59.849570
[0m14:30:59.850023 [debug] [Thread-3 (]: Began executing node model.the_tuva_project.medical_claim_expanded
[0m14:30:59.850904 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.medical_claim (compile): 14:30:59.757292 => 14:30:59.850747
[0m14:30:59.851186 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.medication
[0m14:30:59.853882 [debug] [Thread-3 (]: Writing runtime sql for node "model.the_tuva_project.medical_claim_expanded"
[0m14:30:59.854348 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.medical_claim
[0m14:30:59.854756 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.location"
[0m14:30:59.857468 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.medication"
[0m14:30:59.860916 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.medical_claim"
[0m14:30:59.861398 [debug] [Thread-2 (]: On model.the_tuva_project.location: BEGIN
[0m14:30:59.861813 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.medical_claim_expanded"
[0m14:30:59.862656 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m14:30:59.863093 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m14:30:59.863393 [debug] [Thread-3 (]: On model.the_tuva_project.medical_claim_expanded: BEGIN
[0m14:30:59.863769 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m14:30:59.910879 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:30:59.911276 [debug] [Thread-4 (]: On model.the_tuva_project.medication: BEGIN
[0m14:30:59.911704 [debug] [Thread-3 (]: Opening a new connection, currently in state closed
[0m14:30:59.912135 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: BEGIN
[0m14:30:59.912570 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.location"
[0m14:30:59.912966 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m14:30:59.913469 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m14:30:59.913869 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m14:30:59.914300 [debug] [Thread-2 (]: On model.the_tuva_project.location: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.location"} */

  
  create view "synthea"."tuva_input"."location__dbt_tmp" as (
    -- models/location.sql

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(l, '$.id'), '"', '') AS location_id,
    NULL AS npi,
    REPLACE(JSON_EXTRACT(l, '$.name'), '"', '') AS name,
    NULL AS facility_type,
    REPLACE(JSON_EXTRACT(l, '$.managingOrganization.display'), '"', '') AS parent_organization,
    REPLACE(REPLACE(REPLACE(JSON_EXTRACT(l, '$.address.line'), '"', ''), '[', ''), ']', '') AS address,
    REPLACE(JSON_EXTRACT(l, '$.address.city'), '"', '') AS city,
    REPLACE(JSON_EXTRACT(l, '$.address.state'), '"', '') AS state,
    REPLACE(JSON_EXTRACT(l, '$.address.postalCode'), '"', '') AS zip_code,
    CAST(REPLACE(JSON_EXTRACT(l, '$.position.latitude'), '"', '') AS FLOAT) AS latitude,
    CAST(REPLACE(JSON_EXTRACT(l, '$.position.longitude'), '"', '') AS FLOAT) AS longitude,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Location" l
  );

[0m14:30:59.914779 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:30:59.915154 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.medical_claim_expanded"
[0m14:30:59.915630 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:30:59.916292 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m14:30:59.916694 [debug] [Thread-3 (]: On model.the_tuva_project.medical_claim_expanded: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim_expanded"} */

  
    
    

    create  table
      "synthea"."claims_expanded"."medical_claim_expanded__dbt_tmp"
  
    as (
      


select *
from "synthea"."tuva_input"."medical_claim"
    );
  
  
[0m14:30:59.917095 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m14:30:59.917609 [debug] [Thread-4 (]: On model.the_tuva_project.medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medication"} */

  
  create view "synthea"."tuva_input"."medication__dbt_tmp" as (
    -- models/medication.sql

WITH MinStrength AS (
    SELECT
        REPLACE(JSON_EXTRACT(m, '$.id'), '"', '') AS medication_id,
        MIN(
            CASE
                WHEN ds.amount_value IS NOT NULL THEN ds.amount_value
                WHEN ds.numerator_value IS NOT NULL THEN
                    CASE
                        WHEN ds.denominator_value IS NOT NULL AND ds.denominator_value != 0 THEN ds.numerator_value / ds.denominator_value
                        ELSE ds.numerator_value
                    END
                ELSE NULL
            END
        ) AS min_strength
    FROM "synthea"."json"."MedicationRequest" m
    JOIN "synthea"."vocabulary"."concept" c
        ON REPLACE(JSON_EXTRACT(m, '$.medicationCodeableConcept.coding[0].code'), '"', '') = c.concept_code
        AND c.vocabulary_id = 'RxNorm'
        AND c.domain_id = 'Drug'
        AND c.invalid_reason IS NULL
        AND c.standard_concept = 'S'
    JOIN "synthea"."vocabulary"."drug_strength" ds
        ON c.concept_id = ds.drug_concept_id
    GROUP BY medication_id
)

SELECT DISTINCT
    ms.medication_id,
    REPLACE(REPLACE(JSON_EXTRACT(mr, '$.subject.reference'), '"Patient/', ''), '"', '') AS patient_id,
    REPLACE(REPLACE(JSON_EXTRACT(mr, '$.encounter.reference'), '"Encounter/', ''), '"', '') AS encounter_id,
    CAST(SUBSTRING(JSON_EXTRACT(mr, '$.authoredOn'), 2, 10) AS DATE) AS dispensing_date,
    CAST(SUBSTRING(JSON_EXTRACT(mr, '$.authoredOn'), 2, 10) AS DATE) AS prescribing_date,
    'rxnorm' AS source_code_type,
    REPLACE(JSON_EXTRACT(mr, '$.medicationCodeableConcept.coding[0].code'), '"', '') AS source_code,
    REPLACE(JSON_EXTRACT(mr, '$.medicationCodeableConcept.coding[0].display'), '"', '') AS source_description,
    ndc.ndc_code,
    ndc.ndc_description,
    REPLACE(JSON_EXTRACT(mr, '$.medicationCodeableConcept.coding[0].code'), '"', '') AS rxnorm_code,
    REPLACE(JSON_EXTRACT(mr, '$.medicationCodeableConcept.coding[0].display'), '"', '') AS rxnorm_description,
    r."atc class id" AS atc_code,
    atc.atc_description,
    NULL AS route,
    ms.min_strength AS strength,
    CASE
        WHEN REPLACE(JSON_EXTRACT(mr, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '"', '') IS NOT NULL 
        THEN CAST(REPLACE(JSON_EXTRACT(mr, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '"', '') AS INTEGER) * 30
        ELSE 1
    END AS quantity,
    qu.quantity_unit,
    CASE
        WHEN REPLACE(JSON_EXTRACT(mr, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '"', '') IS NOT NULL 
        THEN 30
        ELSE 1
    END AS days_supply,
    REPLACE(REPLACE(JSON_EXTRACT(mr, '$.requester.reference'), '"Practitioner/', ''), '"', '') AS practitioner_id,
    'SyntheaFhir' AS data_source
FROM MinStrength ms
JOIN "synthea"."json"."MedicationRequest" mr ON ms.medication_id = REPLACE(JSON_EXTRACT(mr, '$.id'), '"', '')
LEFT JOIN (
    SELECT 
        c1.concept_code AS rxnorm_code,
        c2.concept_code AS ndc_code,
        c2.concept_name AS ndc_description
    FROM "synthea"."vocabulary"."concept_relationship" cr
    JOIN "synthea"."vocabulary"."concept" c1 ON c1.concept_id = cr.concept_id_1
    JOIN "synthea"."vocabulary"."concept" c2 ON c2.concept_id = cr.concept_id_2
    WHERE cr.relationship_id = 'Mapped from'
    AND c2.vocabulary_id = 'NDC'
    AND c2.domain_id = 'Drug'
    AND c2.invalid_reason IS NULL
    AND c1.concept_class_id in ('Branded Drug', 'Clinical Drug', 'Quant Clinical Drug', 'Quant Branded Drug')
    AND LENGTH(c2.concept_code) = 11
) ndc ON REPLACE(JSON_EXTRACT(mr, '$.medicationCodeableConcept.coding[0].code'), '"', '') = ndc.rxnorm_code
LEFT JOIN "synthea"."reference"."rxcuis_ndcs_atc" r ON REPLACE(JSON_EXTRACT(mr, '$.medicationCodeableConcept.coding[0].code'), '"', '') = r.rxcui
LEFT JOIN (
    SELECT 
        c3.concept_code AS atc_code,
        c3.concept_name AS atc_description
    FROM "synthea"."vocabulary"."concept" c3
    WHERE c3.vocabulary_id = 'ATC'
    AND c3.domain_id = 'Drug'
    AND c3.invalid_reason IS NULL
    AND c3.standard_concept = 'C'
) atc ON r."atc class id" = atc.atc_code
LEFT JOIN (
    SELECT 
        ds.drug_concept_id,
        c4.concept_name AS quantity_unit
    FROM "synthea"."vocabulary"."drug_strength" ds
    JOIN "synthea"."vocabulary"."concept" c4 ON c4.concept_id = COALESCE(ds.amount_unit_concept_id, ds.numerator_unit_concept_id)
) qu ON REPLACE(JSON_EXTRACT(mr, '$.medicationCodeableConcept.coding[0].code'), '"', '') = qu.drug_concept_id
  );

[0m14:30:59.918050 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:30:59.923459 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim"} */

  
  create view "synthea"."tuva_input"."medical_claim__dbt_tmp" as (
    -- models/medical_claim.sql

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[0].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[0].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[1].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[1].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[1].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[2].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[2].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[2].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[2].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[2].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[3].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[3].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[3].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[3].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[3].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)

UNION

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
    REPLACE(JSON_EXTRACT(c, '$.item[4].sequence'), '"', '') AS claim_line_number,
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') AS claim_type,
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
    NULL AS member_id,
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', '') AS payer,
    NULL AS plan,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_end_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE) AS claim_line_start_date,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE) AS claim_line_end_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END AS admission_date,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END AS discharge_date,
    '3' AS admit_source_code,
    9 AS admit_type_code,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END AS discharge_disposition_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END AS place_of_service_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END AS bill_type_code,
    msdrg."MS-DRG" AS ms_drg_code,
    MAX(aprdrg.apr_drg_code) AS apr_drg_code,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END AS revenue_center_code,
    NULL AS service_unit_quantity,
    NULL AS hcpcs_code,
    NULL AS hcpcs_modifier_1,
    NULL AS hcpcs_modifier_2,
    NULL AS hcpcs_modifier_3,
    NULL AS hcpcs_modifier_4,
    NULL AS hcpcs_modifier_5,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', '') AS rendering_npi,
    NULL AS billing_npi,
    NULL AS facility_npi,
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
    NULL AS allowed_amount,
    NULL AS charge_amount,
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)) AS coinsurance_amount,
    NULL AS copayment_amount,
    NULL AS deductible_amount,
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) AS total_cost_amount,
    'icd-10-cm' AS diagnosis_code_type,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_1,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_2,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_3,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_4,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_5,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_6,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_7,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_8,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_9,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_10,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_11,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_12,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_13,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_14,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_15,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_16,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_17,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_18,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_19,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_20,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_21,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_22,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_23,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_24,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END AS diagnosis_code_25,
    'Y' AS diagnosis_poa_1,
    'U' AS diagnosis_poa_2,
    'U' AS diagnosis_poa_3,
    'U' AS diagnosis_poa_4,
    'U' AS diagnosis_poa_5,
    'U' AS diagnosis_poa_6,
    'U' AS diagnosis_poa_7,
    'U' AS diagnosis_poa_8,
    'U' AS diagnosis_poa_9,
    'U' AS diagnosis_poa_10,
    'U' AS diagnosis_poa_11,
    'U' AS diagnosis_poa_12,
    'U' AS diagnosis_poa_13,
    'U' AS diagnosis_poa_14,
    'U' AS diagnosis_poa_15,
    'U' AS diagnosis_poa_16,
    'U' AS diagnosis_poa_17,
    'U' AS diagnosis_poa_18,
    'U' AS diagnosis_poa_19,
    'U' AS diagnosis_poa_20,
    'U' AS diagnosis_poa_21,
    'U' AS diagnosis_poa_22,
    'U' AS diagnosis_poa_23,
    'U' AS diagnosis_poa_24,
    'U' AS diagnosis_poa_25,
    'snomed' AS procedure_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code_1,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', '') AS procedure_code_2,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', '') AS procedure_code_3,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', '') AS procedure_code_4,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', '') AS procedure_code_5,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', '') AS procedure_code_6,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', '') AS procedure_code_7,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', '') AS procedure_code_8,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', '') AS procedure_code_9,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', '') AS procedure_code_10,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', '') AS procedure_code_11,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', '') AS procedure_code_12,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', '') AS procedure_code_13,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', '') AS procedure_code_14,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', '') AS procedure_code_15,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', '') AS procedure_code_16,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', '') AS procedure_code_17,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', '') AS procedure_code_18,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', '') AS procedure_code_19,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', '') AS procedure_code_20,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', '') AS procedure_code_21,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', '') AS procedure_code_22,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', '') AS procedure_code_23,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', '') AS procedure_code_24,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', '') AS procedure_code_25,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_1,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_2,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_3,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_4,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_5,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_6,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_7,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_8,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_9,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_10,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_11,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_12,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_13,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_14,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_15,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_16,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_17,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_18,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_19,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_20,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_21,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_22,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_23,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_24,
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE) AS procedure_date_25,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Claim" c
LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
LEFT JOIN "synthea"."json"."Condition" co ON REPLACE(JSON_EXTRACT(co, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.diagnosis[4].diagnosisReference.reference'), '"Condition/', ''), '"', '')
LEFT JOIN "synthea"."json"."Procedure" p ON REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.procedure[4].procedureReference.reference'), '"Procedure/', ''), '"', '')
LEFT JOIN "synthea"."terminology"."snomed_icd_10_map" map ON REPLACE(JSON_EXTRACT(co, '$.code.coding[0].code'), '"', '') = map.referenced_component_id
LEFT JOIN "synthea"."reference"."icd10cm_to_msdrg_v41" msdrg ON REPLACE(msdrg.ICD10, '.', '') = map.map_target
LEFT JOIN "synthea"."terminology"."apr_drg" aprdrg ON aprdrg.mdc_code = msdrg.MDC
LEFT JOIN "synthea"."json"."Practitioner" pr ON REPLACE(JSON_EXTRACT(pr, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.provider.reference'), '"Practitioner/', ''), '"', '')
LEFT JOIN "synthea"."json"."Patient" pat ON REPLACE(JSON_EXTRACT(pat, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '')
WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') != 'pharmacy'
AND REPLACE(JSON_EXTRACT(c, '$.item[4].sequence'), '"', '') IS NOT NULL
GROUP BY
    REPLACE(JSON_EXTRACT(c, '$.id'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.item[4].sequence'), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', ''),
    REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', ''),
    REPLACE(JSON_EXTRACT(c, '$.insurance[0].coverage.display'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE),
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.start'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional'
        THEN CAST(SUBSTRING(JSON_EXTRACT(c, '$.billablePeriod.end'), 2, 10) AS DATE)
        ELSE NULL
    END,
    CASE
        WHEN JSON_EXTRACT(pat, '$.deceasedDateTime') IS NOT NULL THEN 20
        ELSE 1
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional'
        THEN REPLACE(JSON_EXTRACT(e, '$.item[0].locationCodeableConcept.coding[0].code'), '"', '')
        ELSE NULL
    END,
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN '111'
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN '791'
        ELSE NULL
    END,
    msdrg."MS-DRG",
    CASE
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'institutional' THEN 0202
        WHEN REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'professional' THEN 0500
        ELSE NULL
    END,
    REPLACE(JSON_EXTRACT(pr, '$.identifier[0].value'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE),
    CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT),
    ABS(CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT) - CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT)),
    CAST(REPLACE(JSON_EXTRACT(c, '$.total.value'), '"', '') AS FLOAT),
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[0].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[1].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[2].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[3].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[4].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[5].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[6].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[7].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[8].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[9].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[10].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[11].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[12].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[13].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[14].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[15].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[16].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[17].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[18].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[19].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[20].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[21].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[22].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[23].code') AS VARCHAR), '"', '')
        )
    END,
    CASE
        WHEN (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        ) = 'nan' THEN NULL
        ELSE (
            SELECT REGEXP_REPLACE(map.map_target, '[^a-zA-Z0-9]', '', 'g')
            FROM "synthea"."terminology"."snomed_icd_10_map" AS map
            WHERE map.referenced_component_id = REPLACE(CAST(JSON_EXTRACT(co, '$.code.coding[24].code') AS VARCHAR), '"', '')
        )
    END,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[1].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[2].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[3].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[4].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[5].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[6].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[7].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[8].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[9].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[10].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[11].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[12].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[13].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[14].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[15].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[16].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[17].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[18].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[19].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[20].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[21].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[22].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[23].code'), '"', ''),
    REPLACE(JSON_EXTRACT(p, '$.code.coding[24].code'), '"', ''),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE),
    CAST(SUBSTRING(JSON_EXTRACT(p, '$.performedDateTime'), 2, 10) AS DATE)
  );

[0m14:30:59.931763 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.location"
[0m14:30:59.932923 [debug] [Thread-2 (]: On model.the_tuva_project.location: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.location"} */
alter view "synthea"."tuva_input"."location" rename to "location__dbt_backup"
[0m14:30:59.933463 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:30:59.935609 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.location"
[0m14:30:59.936085 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:30:59.936386 [debug] [Thread-2 (]: On model.the_tuva_project.location: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.location"} */
alter view "synthea"."tuva_input"."location__dbt_tmp" rename to "location"
[0m14:30:59.938699 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m14:30:59.939317 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:30:59.939598 [debug] [Thread-4 (]: On model.the_tuva_project.medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medication"} */
alter view "synthea"."tuva_input"."medication" rename to "medication__dbt_backup"
[0m14:30:59.940820 [debug] [Thread-2 (]: On model.the_tuva_project.location: COMMIT
[0m14:30:59.941407 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:30:59.941860 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.location"
[0m14:30:59.944991 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m14:30:59.945553 [debug] [Thread-2 (]: On model.the_tuva_project.location: COMMIT
[0m14:30:59.945993 [debug] [Thread-4 (]: On model.the_tuva_project.medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medication"} */
alter view "synthea"."tuva_input"."medication__dbt_tmp" rename to "medication"
[0m14:30:59.946917 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:30:59.947257 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:30:59.948498 [debug] [Thread-4 (]: On model.the_tuva_project.medication: COMMIT
[0m14:30:59.950599 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.location"
[0m14:30:59.951076 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m14:30:59.951496 [debug] [Thread-2 (]: On model.the_tuva_project.location: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.location"} */
drop view if exists "synthea"."tuva_input"."location__dbt_backup" cascade
[0m14:30:59.951897 [debug] [Thread-4 (]: On model.the_tuva_project.medication: COMMIT
[0m14:30:59.952730 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:30:59.953833 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.location (execute): 14:30:59.846225 => 14:30:59.953683
[0m14:30:59.954152 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:30:59.954464 [debug] [Thread-2 (]: On model.the_tuva_project.location: Close
[0m14:30:59.956506 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.medication"
[0m14:30:59.957253 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7db9d3d0>]}
[0m14:30:59.957766 [debug] [Thread-4 (]: On model.the_tuva_project.medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medication"} */
drop view if exists "synthea"."tuva_input"."medication__dbt_backup" cascade
[0m14:30:59.958445 [info ] [Thread-2 (]: 7 of 307 OK created sql view model tuva_input.location ......................... [[32mOK[0m in 0.21s]
[0m14:30:59.959336 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.location
[0m14:30:59.959638 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:30:59.960137 [debug] [Thread-2 (]: Began running node model.the_tuva_project.observation
[0m14:30:59.961338 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.medication (execute): 14:30:59.854944 => 14:30:59.961199
[0m14:30:59.961796 [info ] [Thread-2 (]: 11 of 307 START sql view model tuva_input.observation .......................... [RUN]
[0m14:30:59.962288 [debug] [Thread-4 (]: On model.the_tuva_project.medication: Close
[0m14:30:59.962882 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.location, now model.the_tuva_project.observation)
[0m14:30:59.963550 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7d4dd610>]}
[0m14:30:59.963963 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.observation
[0m14:30:59.964527 [info ] [Thread-4 (]: 10 of 307 OK created sql view model tuva_input.medication ...................... [[32mOK[0m in 0.21s]
[0m14:30:59.967107 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.observation"
[0m14:30:59.967788 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.medication
[0m14:30:59.968763 [debug] [Thread-4 (]: Began running node model.the_tuva_project.patient
[0m14:30:59.969465 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.observation (compile): 14:30:59.964900 => 14:30:59.969240
[0m14:30:59.969836 [info ] [Thread-4 (]: 12 of 307 START sql view model tuva_input.patient .............................. [RUN]
[0m14:30:59.970327 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.observation
[0m14:30:59.970925 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.medication, now model.the_tuva_project.patient)
[0m14:30:59.974213 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.observation"
[0m14:30:59.974720 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.patient
[0m14:30:59.977127 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.patient"
[0m14:30:59.977905 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.observation"
[0m14:30:59.978505 [debug] [Thread-2 (]: On model.the_tuva_project.observation: BEGIN
[0m14:30:59.978987 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.patient (compile): 14:30:59.975343 => 14:30:59.978790
[0m14:30:59.979313 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m14:30:59.979759 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.patient
[0m14:30:59.980394 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:30:59.983283 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.patient"
[0m14:30:59.983844 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.observation"
[0m14:30:59.984738 [debug] [Thread-2 (]: On model.the_tuva_project.observation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.observation"} */

  
  create view "synthea"."tuva_input"."observation__dbt_tmp" as (
    -- models/observation.sql

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(o, '$.id'), '"', '') AS observation_id,
    REPLACE(REPLACE(JSON_EXTRACT(o, '$.subject.reference'), '"Patient/', ''), '"', '') AS patient_id,
    REPLACE(REPLACE(JSON_EXTRACT(o, '$.encounter.reference'), '"Encounter/', ''), '"', '') AS encounter_id,
    NULL AS panel_id,
    CAST(SUBSTRING(JSON_EXTRACT(o, '$.effectiveDateTime'), 2, 10) AS DATE) AS observation_date,
    REPLACE(JSON_EXTRACT(o, '$.category[0].display'), '"', '') AS observation_type,
    'loinc' AS source_code_type,
    REPLACE(JSON_EXTRACT(o, '$.code.coding[0].code'), '"', '') AS source_code,
    REPLACE(JSON_EXTRACT(o, '$.code.coding[0].display'), '"', '') AS source_description,
    'loinc' AS normalized_code_type,
    REPLACE(JSON_EXTRACT(o, '$.code.coding[0].code'), '"', '') AS normalized_code,
    REPLACE(JSON_EXTRACT(o, '$.code.coding[0].display'), '"', '') AS normalized_description,
    CASE
        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '"', '')
        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '"', '') IS NULL AND REPLACE(JSON_EXTRACT(o, '$.component'), '"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.component[0].code.coding[0].code'), '"', '')
        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '"', '') IS NULL AND REPLACE(JSON_EXTRACT(o, '$.component'), '"', '') IS NULL THEN REPLACE(JSON_EXTRACT(o, '$.valueCodeableConcept.coding[0].display'), '"', '')
    END AS result,
    CASE
        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.unit'), '"', '')
        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '"', '') IS NULL AND REPLACE(JSON_EXTRACT(o, '$.component'), '"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.component[0].valueQuantity.unit'), '"', '')
    END AS source_units,
    CASE
        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.unit'), '"', '')
        WHEN REPLACE(JSON_EXTRACT(o, '$.valueQuantity.value'), '"', '') IS NULL AND REPLACE(JSON_EXTRACT(o, '$.component'), '"', '') IS NOT NULL THEN REPLACE(JSON_EXTRACT(o, '$.component[0].valueQuantity.unit'), '"', '')
    END AS normalized_units,
    NULL AS source_reference_range_low,
    NULL AS source_reference_range_high,
    NULL AS normalized_reference_range_low,
    NULL AS normalized_reference_range_high,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Observation" o
  );

[0m14:30:59.985526 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.patient"
[0m14:30:59.985917 [debug] [Thread-4 (]: On model.the_tuva_project.patient: BEGIN
[0m14:30:59.986273 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m14:30:59.986759 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:30:59.987120 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.patient"
[0m14:30:59.987517 [debug] [Thread-4 (]: On model.the_tuva_project.patient: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.patient"} */

  
  create view "synthea"."tuva_input"."patient__dbt_tmp" as (
    -- models/patient.sql

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') AS patient_id,
    REPLACE(JSON_EXTRACT(p, '$.name[0].given[0]'), '"', '') AS first_name,
    REPLACE(JSON_EXTRACT(p, '$.name[0].family'), '"', '') AS last_name,
    REPLACE(JSON_EXTRACT(p, '$.gender'), '"', '') AS sex,
    REPLACE(JSON_EXTRACT(p, '$.extension[0].extension[0].valueCoding.display'), '"', '') AS race,
    CAST(REPLACE(JSON_EXTRACT(p, '$.birthDate'), '"', '') AS DATE) AS birth_date,
    CAST(REPLACE(JSON_EXTRACT(p, '$.deceasedDateTime'), '"', '') AS DATE) AS death_date,
    CASE
        WHEN JSON_EXTRACT(p, '$.deceasedDateTime') IS NOT NULL THEN 1
        ELSE 0
    END AS death_flag,
    REPLACE(REPLACE(REPLACE(JSON_EXTRACT(p, '$.address[0].line'), '"', ''), '[', ''), ']', '') AS address,
    REPLACE(JSON_EXTRACT(p, '$.address[0].city'), '"', '') AS city,
    REPLACE(JSON_EXTRACT(p, '$.address[0].state'), '"', '') AS state,
    REPLACE(JSON_EXTRACT(p, '$.address[0].postalCode'), '"', '') AS zip_code,
    NULL AS county,
    REPLACE(JSON_EXTRACT(p, '$.address[0].extension[0].extension[0].valueDecimal'), '"', '') AS latitude,
    REPLACE(JSON_EXTRACT(p, '$.address[0].extension[0].extension[1].valueDecimal'), '"', '') AS longitude,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Patient" p
  );

[0m14:30:59.989403 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:30:59.992062 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.patient"
[0m14:30:59.992595 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:30:59.992880 [debug] [Thread-4 (]: On model.the_tuva_project.patient: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.patient"} */
alter view "synthea"."tuva_input"."patient" rename to "patient__dbt_backup"
[0m14:30:59.995246 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.observation"
[0m14:30:59.995860 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:30:59.996200 [debug] [Thread-2 (]: On model.the_tuva_project.observation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.observation"} */
alter view "synthea"."tuva_input"."observation" rename to "observation__dbt_backup"
[0m14:30:59.998488 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.patient"
[0m14:30:59.999105 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:30:59.999457 [debug] [Thread-4 (]: On model.the_tuva_project.patient: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.patient"} */
alter view "synthea"."tuva_input"."patient__dbt_tmp" rename to "patient"
[0m14:31:00.002003 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.observation"
[0m14:31:00.002816 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.003125 [debug] [Thread-2 (]: On model.the_tuva_project.observation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.observation"} */
alter view "synthea"."tuva_input"."observation__dbt_tmp" rename to "observation"
[0m14:31:00.004511 [debug] [Thread-4 (]: On model.the_tuva_project.patient: COMMIT
[0m14:31:00.005233 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.005531 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.patient"
[0m14:31:00.007876 [debug] [Thread-2 (]: On model.the_tuva_project.observation: COMMIT
[0m14:31:00.008328 [debug] [Thread-4 (]: On model.the_tuva_project.patient: COMMIT
[0m14:31:00.008877 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.observation"
[0m14:31:00.009739 [debug] [Thread-2 (]: On model.the_tuva_project.observation: COMMIT
[0m14:31:00.010289 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.012558 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.patient"
[0m14:31:00.012905 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.013217 [debug] [Thread-4 (]: On model.the_tuva_project.patient: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.patient"} */
drop view if exists "synthea"."tuva_input"."patient__dbt_backup" cascade
[0m14:31:00.015598 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.observation"
[0m14:31:00.016464 [debug] [Thread-2 (]: On model.the_tuva_project.observation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.observation"} */
drop view if exists "synthea"."tuva_input"."observation__dbt_backup" cascade
[0m14:31:00.016818 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.018054 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.patient (execute): 14:30:59.980601 => 14:31:00.017905
[0m14:31:00.018392 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.018703 [debug] [Thread-4 (]: On model.the_tuva_project.patient: Close
[0m14:31:00.019781 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.observation (execute): 14:30:59.971259 => 14:31:00.019643
[0m14:31:00.020490 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7dbf6b90>]}
[0m14:31:00.020923 [debug] [Thread-2 (]: On model.the_tuva_project.observation: Close
[0m14:31:00.022522 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff8b4e45d0>]}
[0m14:31:00.021700 [info ] [Thread-4 (]: 12 of 307 OK created sql view model tuva_input.patient ......................... [[32mOK[0m in 0.05s]
[0m14:31:00.023158 [info ] [Thread-2 (]: 11 of 307 OK created sql view model tuva_input.observation ..................... [[32mOK[0m in 0.06s]
[0m14:31:00.023843 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.patient
[0m14:31:00.024490 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.observation
[0m14:31:00.025151 [debug] [Thread-4 (]: Began running node model.the_tuva_project.pharmacy_claim
[0m14:31:00.025755 [debug] [Thread-2 (]: Began running node model.the_tuva_project.practitioner
[0m14:31:00.026405 [info ] [Thread-4 (]: 13 of 307 START sql view model tuva_input.pharmacy_claim ....................... [RUN]
[0m14:31:00.027123 [info ] [Thread-2 (]: 14 of 307 START sql view model tuva_input.practitioner ......................... [RUN]
[0m14:31:00.027841 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.patient, now model.the_tuva_project.pharmacy_claim)
[0m14:31:00.028576 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.observation, now model.the_tuva_project.practitioner)
[0m14:31:00.029031 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.pharmacy_claim
[0m14:31:00.029474 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.practitioner
[0m14:31:00.033489 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.pharmacy_claim"
[0m14:31:00.036715 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.practitioner"
[0m14:31:00.038600 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.pharmacy_claim (compile): 14:31:00.029867 => 14:31:00.038313
[0m14:31:00.039136 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.practitioner (compile): 14:31:00.034085 => 14:31:00.038927
[0m14:31:00.039515 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.pharmacy_claim
[0m14:31:00.040016 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.practitioner
[0m14:31:00.043263 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.pharmacy_claim"
[0m14:31:00.046640 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.practitioner"
[0m14:31:00.048340 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.pharmacy_claim"
[0m14:31:00.048988 [debug] [Thread-4 (]: On model.the_tuva_project.pharmacy_claim: BEGIN
[0m14:31:00.049476 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.practitioner"
[0m14:31:00.049880 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m14:31:00.050534 [debug] [Thread-2 (]: On model.the_tuva_project.practitioner: BEGIN
[0m14:31:00.051341 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.051686 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m14:31:00.052101 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.pharmacy_claim"
[0m14:31:00.052667 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.053055 [debug] [Thread-4 (]: On model.the_tuva_project.pharmacy_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.pharmacy_claim"} */

  
  create view "synthea"."tuva_input"."pharmacy_claim__dbt_tmp" as (
    -- models/pharmacy_claim.sql

SELECT *
FROM (
    SELECT DISTINCT
        REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') AS claim_id,
        REPLACE(JSON_EXTRACT(c, '$.item[0].sequence'), '"', '') AS claim_line_number,
        REPLACE(REPLACE(JSON_EXTRACT(c, '$.patient.reference'), '"Patient/', ''), '"', '') AS patient_id,
        NULL AS member_id,
        REPLACE(JSON_EXTRACT(e, '$.insurance[0].coverage.display'), '"', '') AS payer,
        NULL AS plan,
        REPLACE(JSON_EXTRACT(p, '$.identifier[0].value'), '"', '') AS prescribing_provider_npi,
        NULL AS dispensing_provider_npi,
        CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS dispensing_date,
        (
            SELECT c2.concept_code
            FROM "synthea"."vocabulary"."concept_relationship" cr
            JOIN "synthea"."vocabulary"."concept" c1 ON c1.concept_id = cr.concept_id_1
            JOIN "synthea"."vocabulary"."concept" c2 ON c2.concept_id = cr.concept_id_2
            WHERE c1.concept_code = REPLACE(JSON_EXTRACT(c, '$.item[0].productOrService.coding[0].code'), '"', '')
            AND cr.relationship_id = 'Mapped from'
            AND c2.vocabulary_id = 'NDC'
            AND c2.domain_id = 'Drug'
            AND c2.invalid_reason IS NULL
            AND c1.concept_class_id in ('Branded Drug', 'Clinical Drug', 'Quant Clinical Drug')
            AND LENGTH(c2.concept_code) = 11
            ORDER BY c2.concept_code
            LIMIT 1
        ) AS ndc_code,
        CASE
            WHEN REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '"', '') IS NOT NULL 
            THEN CAST(REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '"', '') AS INTEGER) * 30
            ELSE 1
        END AS quantity,
        CASE
            WHEN REPLACE(JSON_EXTRACT(m, '$.dosageInstruction[0].doseAndRate[0].doseQuantity.value'), '"', '') IS NOT NULL 
            THEN 30
            ELSE 1
        END AS days_supply,
        0 AS refills,
        CAST(SUBSTRING(JSON_EXTRACT(c, '$.created'), 2, 10) AS DATE) AS paid_date,
        CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS paid_amount,
        CASE
            WHEN REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].category.coding[0].display'), '"', '') = 'Line Allowed Charge Amount'
                THEN CAST(REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].amount.value'), '"', '') AS FLOAT)
            ELSE 0
        END AS allowed_amount,
        CASE
            WHEN REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].category.coding[0].display'), '"', '') = 'Line Beneficiary Coinsurance Amount'
                THEN CAST(REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].amount.value'), '"', '') AS FLOAT)
            ELSE 0
        END AS coinsurance_amount,
        CAST(REPLACE(JSON_EXTRACT(e, '$.payment.amount.value'), '"', '') AS FLOAT) AS copayment_amount,
        CASE
            WHEN REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].category.coding[0].display'), '"', '') = 'Line Beneficiary Part B Deductible Amount'
                THEN CAST(REPLACE(JSON_EXTRACT(e, '$.item[0].adjudication[0].amount.value'), '"', '') AS FLOAT)
            ELSE 0
        END AS deductible_amount,
        'SyntheaFhir' AS data_source
    FROM "synthea"."json"."Claim" c
    LEFT JOIN "synthea"."json"."MedicationRequest" m
        ON REPLACE(REPLACE(JSON_EXTRACT(c, '$.prescription.reference'), '"MedicationRequest/', ''), '"', '') = REPLACE(JSON_EXTRACT(m, '$.id'), '"', '')
    LEFT JOIN "synthea"."json"."ExplanationOfBenefit" e
        ON REPLACE(JSON_EXTRACT(c, '$.id'), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(e, '$.claim.reference'), '"Claim/', ''), '"', '')
    LEFT JOIN "synthea"."json"."Encounter" enc
        ON REPLACE(REPLACE(JSON_EXTRACT(c, '$.item[0].encounter[0].reference'), '"Encounter/', ''), '"', '') = REPLACE(JSON_EXTRACT(enc, '$.id'), '"', '')
    LEFT JOIN "synthea"."json"."Practitioner" p
        ON REPLACE(REPLACE(JSON_EXTRACT(enc, '$.participant[0].individual.reference'), '"Practitioner/', ''), '"', '') = REPLACE(JSON_EXTRACT(p, '$.id'), '"', '')
    LEFT JOIN "synthea"."vocabulary"."drug_strength" ds ON REPLACE(JSON_EXTRACT(c, '$.item[0].productOrService.coding[0].code'), '"', '') = ds.drug_concept_id
    WHERE REPLACE(JSON_EXTRACT(c, '$.type.coding[0].code'), '"', '') = 'pharmacy'
) AS pharmacy_claim
WHERE pharmacy_claim.ndc_code IS NOT NULL
  );

[0m14:31:00.053603 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.practitioner"
[0m14:31:00.054369 [debug] [Thread-2 (]: On model.the_tuva_project.practitioner: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.practitioner"} */

  
  create view "synthea"."tuva_input"."practitioner__dbt_tmp" as (
    -- models/practitioner.sql

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') AS practitioner_id,
    REPLACE(JSON_EXTRACT(p, '$.identifier[0].value'), '"', '') AS npi,
    REPLACE(JSON_EXTRACT(p, '$.name[0].given[0]'), '"', '') AS first_name,
    REPLACE(JSON_EXTRACT(p, '$.name[0].family'), '"', '') AS last_name,
    REPLACE(JSON_EXTRACT(pr, '$.location[0].display'), '"', '') AS practice_affiliation,
    REPLACE(JSON_EXTRACT(pr, '$.specialty[0].text'), '"', '') AS specialty,
    NULL AS sub_specialty,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Practitioner" p
JOIN "synthea"."json"."PractitionerRole" pr
    ON REPLACE(JSON_EXTRACT(p, '$.identifier[0].value'), '"', '') = REPLACE(JSON_EXTRACT(pr, '$.practitioner.identifier.value'), '"', '')
  );

[0m14:31:00.055589 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.058403 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.practitioner"
[0m14:31:00.058991 [debug] [Thread-2 (]: On model.the_tuva_project.practitioner: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.practitioner"} */
alter view "synthea"."tuva_input"."practitioner" rename to "practitioner__dbt_backup"
[0m14:31:00.059632 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.061898 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.practitioner"
[0m14:31:00.062350 [debug] [Thread-2 (]: On model.the_tuva_project.practitioner: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.practitioner"} */
alter view "synthea"."tuva_input"."practitioner__dbt_tmp" rename to "practitioner"
[0m14:31:00.063146 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.063652 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.066125 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.pharmacy_claim"
[0m14:31:00.067492 [debug] [Thread-2 (]: On model.the_tuva_project.practitioner: COMMIT
[0m14:31:00.067956 [debug] [Thread-4 (]: On model.the_tuva_project.pharmacy_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.pharmacy_claim"} */
alter view "synthea"."tuva_input"."pharmacy_claim" rename to "pharmacy_claim__dbt_backup"
[0m14:31:00.068389 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.practitioner"
[0m14:31:00.069076 [debug] [Thread-2 (]: On model.the_tuva_project.practitioner: COMMIT
[0m14:31:00.069398 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.071723 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.pharmacy_claim"
[0m14:31:00.072060 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.072537 [debug] [Thread-4 (]: On model.the_tuva_project.pharmacy_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.pharmacy_claim"} */
alter view "synthea"."tuva_input"."pharmacy_claim__dbt_tmp" rename to "pharmacy_claim"
[0m14:31:00.075753 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.practitioner"
[0m14:31:00.076502 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.076819 [debug] [Thread-2 (]: On model.the_tuva_project.practitioner: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.practitioner"} */
drop view if exists "synthea"."tuva_input"."practitioner__dbt_backup" cascade
[0m14:31:00.078039 [debug] [Thread-4 (]: On model.the_tuva_project.pharmacy_claim: COMMIT
[0m14:31:00.078776 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.pharmacy_claim"
[0m14:31:00.079150 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.079599 [debug] [Thread-4 (]: On model.the_tuva_project.pharmacy_claim: COMMIT
[0m14:31:00.080768 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.practitioner (execute): 14:31:00.043706 => 14:31:00.080604
[0m14:31:00.081528 [debug] [Thread-2 (]: On model.the_tuva_project.practitioner: Close
[0m14:31:00.082283 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7e322950>]}
[0m14:31:00.082621 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.083163 [info ] [Thread-2 (]: 14 of 307 OK created sql view model tuva_input.practitioner .................... [[32mOK[0m in 0.05s]
[0m14:31:00.085378 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.pharmacy_claim"
[0m14:31:00.085913 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.practitioner
[0m14:31:00.086351 [debug] [Thread-4 (]: On model.the_tuva_project.pharmacy_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.pharmacy_claim"} */
drop view if exists "synthea"."tuva_input"."pharmacy_claim__dbt_backup" cascade
[0m14:31:00.086784 [debug] [Thread-2 (]: Began running node model.the_tuva_project.procedure
[0m14:31:00.087458 [info ] [Thread-2 (]: 15 of 307 START sql view model tuva_input.procedure ............................ [RUN]
[0m14:31:00.087811 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.088289 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.practitioner, now model.the_tuva_project.procedure)
[0m14:31:00.089406 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.pharmacy_claim (execute): 14:31:00.040342 => 14:31:00.089264
[0m14:31:00.089806 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.procedure
[0m14:31:00.090215 [debug] [Thread-4 (]: On model.the_tuva_project.pharmacy_claim: Close
[0m14:31:00.092923 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.procedure"
[0m14:31:00.093816 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff85971810>]}
[0m14:31:00.094817 [info ] [Thread-4 (]: 13 of 307 OK created sql view model tuva_input.pharmacy_claim .................. [[32mOK[0m in 0.07s]
[0m14:31:00.095405 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.pharmacy_claim
[0m14:31:00.095888 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.procedure (compile): 14:31:00.090564 => 14:31:00.095702
[0m14:31:00.096266 [debug] [Thread-4 (]: Began running node model.the_tuva_project.quality_measures__int_nqf0034__performance_period
[0m14:31:00.096734 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.procedure
[0m14:31:00.097192 [info ] [Thread-4 (]: 16 of 307 START sql view model quality_measures._int_nqf0034__performance_period  [RUN]
[0m14:31:00.100640 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.procedure"
[0m14:31:00.101362 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.pharmacy_claim, now model.the_tuva_project.quality_measures__int_nqf0034__performance_period)
[0m14:31:00.102350 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.quality_measures__int_nqf0034__performance_period
[0m14:31:00.113516 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.procedure"
[0m14:31:00.115168 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.quality_measures__int_nqf0034__performance_period"
[0m14:31:00.115498 [debug] [Thread-2 (]: On model.the_tuva_project.procedure: BEGIN
[0m14:31:00.116106 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m14:31:00.116806 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.quality_measures__int_nqf0034__performance_period (compile): 14:31:00.102831 => 14:31:00.116620
[0m14:31:00.117122 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.117455 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.quality_measures__int_nqf0034__performance_period
[0m14:31:00.117852 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.procedure"
[0m14:31:00.121278 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.quality_measures__int_nqf0034__performance_period"
[0m14:31:00.121798 [debug] [Thread-2 (]: On model.the_tuva_project.procedure: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.procedure"} */

  
  create view "synthea"."tuva_input"."procedure__dbt_tmp" as (
    -- models/procedure.sql

SELECT DISTINCT
    REPLACE(JSON_EXTRACT(p, '$.id'), '"', '') AS procedure_id,
    REPLACE(REPLACE(JSON_EXTRACT(p, '$.subject.reference'), '"Patient/', ''), '"', '') AS patient_id,
    REPLACE(REPLACE(JSON_EXTRACT(p, '$.encounter.reference'), '"Encounter/', ''), '"', '') AS encounter_id,
    REPLACE(JSON_EXTRACT(cl, '$.id'), '"', '') AS claim_id,
    CAST(REPLACE(JSON_EXTRACT(p, '$.performedPeriod.start'), '"', '') AS DATE) AS procedure_date,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS procedure_code,
    'snomed' AS source_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS source_code,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].display'), '"', '') AS source_description,
    'snomed' AS normalized_code_type,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].code'), '"', '') AS normalized_code,
    REPLACE(JSON_EXTRACT(p, '$.code.coding[0].display'), '"', '') AS normalized_description,
    NULL AS modifier_1,
    NULL AS modifier_2,
    NULL AS modifier_3,
    NULL AS modifier_4,
    NULL AS modifier_5,
    REPLACE(REPLACE(JSON_EXTRACT(e, '$.participant[0].individual.reference'), '"Practitioner/', ''), '"', '') AS practitioner_id,
    'SyntheaFhir' AS data_source
FROM "synthea"."json"."Procedure" p
LEFT JOIN "synthea"."json"."Encounter" e
    ON REPLACE(REPLACE(JSON_EXTRACT(p, '$.encounter.reference'), '"Encounter/', ''), '"', '') = REPLACE(JSON_EXTRACT(e, '$.id'), '"', '')
LEFT JOIN "synthea"."json"."Claim" cl
    ON REPLACE(REPLACE(JSON_EXTRACT(p, '$.encounter.reference'), '"Encounter/', ''), '"', '') = REPLACE(REPLACE(JSON_EXTRACT(cl, '$.item[0].encounter[0].reference'), '"Encounter/', ''), '"', '')
  );

[0m14:31:00.122997 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.quality_measures__int_nqf0034__performance_period"
[0m14:31:00.123385 [debug] [Thread-4 (]: On model.the_tuva_project.quality_measures__int_nqf0034__performance_period: BEGIN
[0m14:31:00.123708 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m14:31:00.124157 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.124530 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.124943 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.quality_measures__int_nqf0034__performance_period"
[0m14:31:00.127497 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.procedure"
[0m14:31:00.128035 [debug] [Thread-4 (]: On model.the_tuva_project.quality_measures__int_nqf0034__performance_period: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.quality_measures__int_nqf0034__performance_period"} */

  
  create view "synthea"."quality_measures"."_int_nqf0034__performance_period__dbt_tmp" as (
    
/*
    set performance period end to the end of the current calendar year
    or use the quality_measures_period_end variable if provided
*/
with period_end as (

    select
        cast(
        

    

    date_trunc('year', now()) + ((interval '1 year') * (1))

 + ((interval '1 day') * (-1))


        as date)
        
         as performance_period_end
)

/*
    set performance period begin to a year and a day prior
    for a complete calendar year
*/
, period_begin as (

    select
          performance_period_end
        , 

    

    performance_period_end + ((interval '1 year') * (-1))

 + ((interval '1 day') * (1))

 as performance_period_begin
    from period_end

)

/*
    set performance lookback periods for each type of test

    during the measurement period:
    - Fecal occult blood test (FOBT) during the measurement period

    during the measurement period or the two years prior:
    - Fecal immunochemical DNA test (FIT-DNA)

    during the measurement period or the four years prior:
    - Flexible sigmoidoscopy
    - Computed tomography (CT) colonography

    during the measurement period or the nine years prior:
    - Colonoscopy

*/
, period_lookback as (

    select
          performance_period_end
        , performance_period_begin
        , 

    performance_period_end + ((interval '1 year') * (-2))

 as performance_period_begin_1yp
        , 

    performance_period_end + ((interval '1 year') * (-3))

 as performance_period_begin_2yp
        , 

    performance_period_end + ((interval '1 year') * (-5))

 as performance_period_begin_4yp
        , 

    performance_period_end + ((interval '1 year') * (-10))

 as performance_period_begin_9yp
    from period_begin

)

select
      cast(performance_period_begin as date) as performance_period_begin
    , cast(performance_period_end as date) as performance_period_end
    , cast(performance_period_begin_1yp as date) as performance_period_begin_1yp
    , cast(performance_period_begin_2yp as date) as performance_period_begin_2yp
    , cast(performance_period_begin_4yp as date) as performance_period_begin_4yp
    , cast(performance_period_begin_9yp as date) as performance_period_begin_9yp
from period_lookback
  );

[0m14:31:00.128513 [debug] [Thread-2 (]: On model.the_tuva_project.procedure: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.procedure"} */
alter view "synthea"."tuva_input"."procedure" rename to "procedure__dbt_backup"
[0m14:31:00.129207 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.131480 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.procedure"
[0m14:31:00.131936 [debug] [Thread-2 (]: On model.the_tuva_project.procedure: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.procedure"} */
alter view "synthea"."tuva_input"."procedure__dbt_tmp" rename to "procedure"
[0m14:31:00.132287 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.132683 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.135094 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.quality_measures__int_nqf0034__performance_period"
[0m14:31:00.136452 [debug] [Thread-2 (]: On model.the_tuva_project.procedure: COMMIT
[0m14:31:00.136938 [debug] [Thread-4 (]: On model.the_tuva_project.quality_measures__int_nqf0034__performance_period: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.quality_measures__int_nqf0034__performance_period"} */
alter view "synthea"."quality_measures"."_int_nqf0034__performance_period" rename to "_int_nqf0034__performance_period__dbt_backup"
[0m14:31:00.137378 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.procedure"
[0m14:31:00.138031 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.138345 [debug] [Thread-2 (]: On model.the_tuva_project.procedure: COMMIT
[0m14:31:00.140647 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.quality_measures__int_nqf0034__performance_period"
[0m14:31:00.141472 [debug] [Thread-4 (]: On model.the_tuva_project.quality_measures__int_nqf0034__performance_period: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.quality_measures__int_nqf0034__performance_period"} */
alter view "synthea"."quality_measures"."_int_nqf0034__performance_period__dbt_tmp" rename to "_int_nqf0034__performance_period"
[0m14:31:00.141911 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.142353 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.145381 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.procedure"
[0m14:31:00.146837 [debug] [Thread-4 (]: On model.the_tuva_project.quality_measures__int_nqf0034__performance_period: COMMIT
[0m14:31:00.147301 [debug] [Thread-2 (]: On model.the_tuva_project.procedure: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.procedure"} */
drop view if exists "synthea"."tuva_input"."procedure__dbt_backup" cascade
[0m14:31:00.147832 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.quality_measures__int_nqf0034__performance_period"
[0m14:31:00.148685 [debug] [Thread-4 (]: On model.the_tuva_project.quality_measures__int_nqf0034__performance_period: COMMIT
[0m14:31:00.149059 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.150715 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.procedure (execute): 14:31:00.097588 => 14:31:00.150548
[0m14:31:00.151157 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.151582 [debug] [Thread-2 (]: On model.the_tuva_project.procedure: Close
[0m14:31:00.153926 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.quality_measures__int_nqf0034__performance_period"
[0m14:31:00.154805 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7d324190>]}
[0m14:31:00.155367 [debug] [Thread-4 (]: On model.the_tuva_project.quality_measures__int_nqf0034__performance_period: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.quality_measures__int_nqf0034__performance_period"} */
drop view if exists "synthea"."quality_measures"."_int_nqf0034__performance_period__dbt_backup" cascade
[0m14:31:00.155964 [info ] [Thread-2 (]: 15 of 307 OK created sql view model tuva_input.procedure ....................... [[32mOK[0m in 0.07s]
[0m14:31:00.156934 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.procedure
[0m14:31:00.157281 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.157769 [debug] [Thread-2 (]: Began running node model.the_tuva_project.quality_measures__int_nqf2372__performance_period
[0m14:31:00.158999 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.quality_measures__int_nqf0034__performance_period (execute): 14:31:00.118117 => 14:31:00.158850
[0m14:31:00.159557 [info ] [Thread-2 (]: 17 of 307 START sql view model quality_measures._int_nqf2372__performance_period  [RUN]
[0m14:31:00.160067 [debug] [Thread-4 (]: On model.the_tuva_project.quality_measures__int_nqf0034__performance_period: Close
[0m14:31:00.160688 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.procedure, now model.the_tuva_project.quality_measures__int_nqf2372__performance_period)
[0m14:31:00.161366 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7dc60a90>]}
[0m14:31:00.161797 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.quality_measures__int_nqf2372__performance_period
[0m14:31:00.162331 [info ] [Thread-4 (]: 16 of 307 OK created sql view model quality_measures._int_nqf0034__performance_period  [[32mOK[0m in 0.06s]
[0m14:31:00.170461 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.quality_measures__int_nqf2372__performance_period"
[0m14:31:00.171394 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf0034__performance_period
[0m14:31:00.172404 [debug] [Thread-4 (]: Began running node model.the_tuva_project.normalized_input__stg_eligibility
[0m14:31:00.173091 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.quality_measures__int_nqf0034__performance_period, now model.the_tuva_project.normalized_input__stg_eligibility)
[0m14:31:00.173646 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.quality_measures__int_nqf2372__performance_period (compile): 14:31:00.162702 => 14:31:00.173465
[0m14:31:00.173932 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.normalized_input__stg_eligibility
[0m14:31:00.174398 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.quality_measures__int_nqf2372__performance_period
[0m14:31:00.177317 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__stg_eligibility"
[0m14:31:00.181287 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.quality_measures__int_nqf2372__performance_period"
[0m14:31:00.183464 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.186518 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m14:31:00.187046 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.normalized_input__stg_eligibility (compile): 14:31:00.174735 => 14:31:00.186763
[0m14:31:00.187647 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.quality_measures__int_nqf2372__performance_period"
[0m14:31:00.187988 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim"} */
alter view "synthea"."tuva_input"."medical_claim" rename to "medical_claim__dbt_backup"
[0m14:31:00.188853 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.normalized_input__stg_eligibility
[0m14:31:00.189291 [debug] [Thread-2 (]: On model.the_tuva_project.quality_measures__int_nqf2372__performance_period: BEGIN
[0m14:31:00.189953 [debug] [Thread-4 (]: Began running node model.the_tuva_project.core__stg_clinical_condition
[0m14:31:00.190464 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m14:31:00.191000 [info ] [Thread-4 (]: 18 of 307 START sql view model core._stg_clinical_condition .................... [RUN]
[0m14:31:00.191455 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.191942 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.192449 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__stg_eligibility, now model.the_tuva_project.core__stg_clinical_condition)
[0m14:31:00.194941 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m14:31:00.195537 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.quality_measures__int_nqf2372__performance_period"
[0m14:31:00.196127 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.core__stg_clinical_condition
[0m14:31:00.196725 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim"} */
alter view "synthea"."tuva_input"."medical_claim__dbt_tmp" rename to "medical_claim"
[0m14:31:00.197324 [debug] [Thread-2 (]: On model.the_tuva_project.quality_measures__int_nqf2372__performance_period: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.quality_measures__int_nqf2372__performance_period"} */

  
  create view "synthea"."quality_measures"."_int_nqf2372__performance_period__dbt_tmp" as (
    /*
    set performance period end to the end of the current calendar year
    or use the quality_measures_period_end variable if provided
*/
with period_end as (

    select
        cast(
        

    

    date_trunc('year', now()) + ((interval '1 year') * (1))

 + ((interval '1 day') * (-1))


        as date)
        
         as performance_period_end
)

/*
    set performance period begin to a year and a day prior
    for a complete calendar year
*/
, period_begin as (

    select
          performance_period_end
        , 

    

    performance_period_end + ((interval '1 year') * (-1))

 + ((interval '1 day') * (1))

 as performance_period_begin
    from period_end

)

/*
    set performance lookback period to 27 months prior to the end of the
    performance period
*/
, period_lookback as (

    select
          performance_period_end
        , performance_period_begin
        , 

    performance_period_end + ((interval '1 month') * (-27))

 as performance_period_lookback
    from period_begin


)

select
      cast((select id
from "synthea"."quality_measures"."_value_set_measures"
where id = 'NQF2372') as TEXT) as measure_id
    , cast((select name
from "synthea"."quality_measures"."_value_set_measures"
where id = 'NQF2372') as TEXT) as measure_name
    , cast((select version
from "synthea"."quality_measures"."_value_set_measures"
where id = 'NQF2372') as TEXT) as measure_version
    , cast(performance_period_end as date) as performance_period_end
    , cast(performance_period_begin as date) as performance_period_begin
    , cast(performance_period_lookback as date) as performance_period_lookback
from period_lookback
  );

[0m14:31:00.208901 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.core__stg_clinical_condition"
[0m14:31:00.210842 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.211297 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.211655 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.core__stg_clinical_condition (compile): 14:31:00.197726 => 14:31:00.211488
[0m14:31:00.212893 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: COMMIT
[0m14:31:00.215881 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.quality_measures__int_nqf2372__performance_period"
[0m14:31:00.216428 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.core__stg_clinical_condition
[0m14:31:00.216839 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m14:31:00.217256 [debug] [Thread-2 (]: On model.the_tuva_project.quality_measures__int_nqf2372__performance_period: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.quality_measures__int_nqf2372__performance_period"} */
alter view "synthea"."quality_measures"."_int_nqf2372__performance_period" rename to "_int_nqf2372__performance_period__dbt_backup"
[0m14:31:00.221567 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.core__stg_clinical_condition"
[0m14:31:00.222073 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: COMMIT
[0m14:31:00.222684 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.225581 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.quality_measures__int_nqf2372__performance_period"
[0m14:31:00.226142 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_condition"
[0m14:31:00.226462 [debug] [Thread-2 (]: On model.the_tuva_project.quality_measures__int_nqf2372__performance_period: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.quality_measures__int_nqf2372__performance_period"} */
alter view "synthea"."quality_measures"."_int_nqf2372__performance_period__dbt_tmp" rename to "_int_nqf2372__performance_period"
[0m14:31:00.226903 [debug] [Thread-4 (]: On model.the_tuva_project.core__stg_clinical_condition: BEGIN
[0m14:31:00.227565 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m14:31:00.228042 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.228422 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_condition"
[0m14:31:00.228823 [debug] [Thread-4 (]: On model.the_tuva_project.core__stg_clinical_condition: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_condition"} */

  
  create view "synthea"."core"."_stg_clinical_condition__dbt_tmp" as (
    

select
    cast(condition_id as TEXT ) as condition_id
    , cast(patient_id as TEXT ) as patient_id
    , cast(encounter_id as TEXT ) as encounter_id
    , cast(claim_id as TEXT ) as claim_id
    , try_cast( recorded_date as date ) as recorded_date
    , try_cast( onset_date as date ) as onset_date
    , try_cast( resolved_date as date ) as resolved_date
    , cast(status as TEXT ) as status
    , cast(condition_type as TEXT ) as condition_type
    , cast(source_code_type as TEXT ) as source_code_type
    , cast(source_code as TEXT ) as source_code
    , cast(source_description as TEXT ) as source_description
    , cast(normalized_code_type as TEXT ) as normalized_code_type
    , cast(normalized_code as TEXT ) as normalized_code
    , cast(normalized_description as TEXT ) as normalized_description
    , cast(condition_rank as integer ) as condition_rank
    , cast(present_on_admit_code as TEXT ) as present_on_admit_code
    , cast(present_on_admit_description as TEXT ) as present_on_admit_description
    , cast(data_source as TEXT ) as data_source
    , cast('2024-02-21 14:30:54.308435+00:00' as timestamp ) as tuva_last_run
from "synthea"."tuva_input"."condition"
  );

[0m14:31:00.250592 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.250981 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.252394 [debug] [Thread-2 (]: On model.the_tuva_project.quality_measures__int_nqf2372__performance_period: COMMIT
[0m14:31:00.254673 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.medical_claim"
[0m14:31:00.255214 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.quality_measures__int_nqf2372__performance_period"
[0m14:31:00.255653 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim"} */
drop view if exists "synthea"."tuva_input"."medical_claim__dbt_backup" cascade
[0m14:31:00.256087 [debug] [Thread-2 (]: On model.the_tuva_project.quality_measures__int_nqf2372__performance_period: COMMIT
[0m14:31:00.257039 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.258244 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.medical_claim (execute): 14:30:59.858378 => 14:31:00.258077
[0m14:31:00.258584 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.258973 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.259293 [debug] [Thread-1 (]: On model.the_tuva_project.medical_claim: Close
[0m14:31:00.261317 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.quality_measures__int_nqf2372__performance_period"
[0m14:31:00.263716 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_condition"
[0m14:31:00.264645 [debug] [Thread-2 (]: On model.the_tuva_project.quality_measures__int_nqf2372__performance_period: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.quality_measures__int_nqf2372__performance_period"} */
drop view if exists "synthea"."quality_measures"."_int_nqf2372__performance_period__dbt_backup" cascade
[0m14:31:00.264909 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff758c8850>]}
[0m14:31:00.265320 [debug] [Thread-4 (]: On model.the_tuva_project.core__stg_clinical_condition: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_condition"} */
alter view "synthea"."core"."_stg_clinical_condition" rename to "_stg_clinical_condition__dbt_backup"
[0m14:31:00.266508 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.266054 [info ] [Thread-1 (]: 8 of 307 OK created sql view model tuva_input.medical_claim .................... [[32mOK[0m in 0.51s]
[0m14:31:00.267002 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.267992 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.quality_measures__int_nqf2372__performance_period (execute): 14:31:00.177768 => 14:31:00.267844
[0m14:31:00.268514 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.medical_claim
[0m14:31:00.270652 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_condition"
[0m14:31:00.271090 [debug] [Thread-2 (]: On model.the_tuva_project.quality_measures__int_nqf2372__performance_period: Close
[0m14:31:00.271549 [debug] [Thread-1 (]: Began running node model.the_tuva_project.core__stg_clinical_lab_result
[0m14:31:00.271984 [debug] [Thread-4 (]: On model.the_tuva_project.core__stg_clinical_condition: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_condition"} */
alter view "synthea"."core"."_stg_clinical_condition__dbt_tmp" rename to "_stg_clinical_condition"
[0m14:31:00.272696 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7d2e51d0>]}
[0m14:31:00.273264 [info ] [Thread-1 (]: 19 of 307 START sql view model core._stg_clinical_lab_result ................... [RUN]
[0m14:31:00.273904 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.274304 [info ] [Thread-2 (]: 17 of 307 OK created sql view model quality_measures._int_nqf2372__performance_period  [[32mOK[0m in 0.11s]
[0m14:31:00.274929 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.medical_claim, now model.the_tuva_project.core__stg_clinical_lab_result)
[0m14:31:00.276151 [debug] [Thread-4 (]: On model.the_tuva_project.core__stg_clinical_condition: COMMIT
[0m14:31:00.276747 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf2372__performance_period
[0m14:31:00.277153 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.core__stg_clinical_lab_result
[0m14:31:00.277567 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_condition"
[0m14:31:00.278031 [debug] [Thread-2 (]: Began running node model.the_tuva_project.core__stg_clinical_encounter
[0m14:31:00.287425 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.core__stg_clinical_lab_result"
[0m14:31:00.287779 [debug] [Thread-4 (]: On model.the_tuva_project.core__stg_clinical_condition: COMMIT
[0m14:31:00.288313 [info ] [Thread-2 (]: 20 of 307 START sql view model core._stg_clinical_encounter .................... [RUN]
[0m14:31:00.289925 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.quality_measures__int_nqf2372__performance_period, now model.the_tuva_project.core__stg_clinical_encounter)
[0m14:31:00.290365 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.core__stg_clinical_lab_result (compile): 14:31:00.278383 => 14:31:00.290154
[0m14:31:00.290687 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.290973 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.core__stg_clinical_encounter
[0m14:31:00.291403 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.core__stg_clinical_lab_result
[0m14:31:00.293560 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_condition"
[0m14:31:00.304789 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.core__stg_clinical_encounter"
[0m14:31:00.308234 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.core__stg_clinical_lab_result"
[0m14:31:00.308786 [debug] [Thread-4 (]: On model.the_tuva_project.core__stg_clinical_condition: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_condition"} */
drop view if exists "synthea"."core"."_stg_clinical_condition__dbt_backup" cascade
[0m14:31:00.310244 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.core__stg_clinical_encounter (compile): 14:31:00.293905 => 14:31:00.310056
[0m14:31:00.310749 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.core__stg_clinical_encounter
[0m14:31:00.311145 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.314581 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.core__stg_clinical_encounter"
[0m14:31:00.314993 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_lab_result"
[0m14:31:00.316264 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.core__stg_clinical_condition (execute): 14:31:00.217549 => 14:31:00.316105
[0m14:31:00.317022 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_lab_result: BEGIN
[0m14:31:00.317494 [debug] [Thread-4 (]: On model.the_tuva_project.core__stg_clinical_condition: Close
[0m14:31:00.317824 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_encounter"
[0m14:31:00.318115 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m14:31:00.318824 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7dbf7cd0>]}
[0m14:31:00.319241 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_encounter: BEGIN
[0m14:31:00.319783 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.320221 [info ] [Thread-4 (]: 18 of 307 OK created sql view model core._stg_clinical_condition ............... [[32mOK[0m in 0.13s]
[0m14:31:00.320730 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m14:31:00.321348 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_lab_result"
[0m14:31:00.321960 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.core__stg_clinical_condition
[0m14:31:00.322512 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.322840 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_lab_result: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_lab_result"} */

  
  create view "synthea"."core"."_stg_clinical_lab_result__dbt_tmp" as (
    

select
    cast(lab_result_id as TEXT ) as lab_result_id
    , cast(patient_id as TEXT ) as patient_id
    , cast(encounter_id as TEXT ) as encounter_id
    , cast(accession_number as TEXT ) as accession_number
    , cast(source_code_type as TEXT ) as source_code_type
    , cast(source_code as TEXT ) as source_code
    , cast(source_description as TEXT ) as source_description
    , cast(source_component as TEXT ) as source_component
    , cast(normalized_code_type as TEXT ) as normalized_code_type
    , cast(normalized_code as TEXT ) as normalized_code
    , cast(normalized_description as TEXT ) as normalized_description
    , cast(normalized_component as TEXT ) as normalized_component
    , cast(status as TEXT ) as status
    , cast(result as TEXT ) as result
    , try_cast( result_date as date ) as result_date
    , try_cast( collection_date as date ) as collection_date
    , cast(source_units as TEXT ) as source_units
    , cast(normalized_units as TEXT ) as normalized_units
    , cast(source_reference_range_low as TEXT ) as source_reference_range_low
    , cast(source_reference_range_high as TEXT ) as source_reference_range_high
    , cast(normalized_reference_range_low as TEXT ) as normalized_reference_range_low
    , cast(normalized_reference_range_high as TEXT ) as normalized_reference_range_high
    , cast(source_abnormal_flag as integer ) as source_abnormal_flag
    , cast(normalized_abnormal_flag as integer ) as normalized_abnormal_flag
    , cast(specimen as TEXT ) as specimen
    , cast(ordering_practitioner_id as TEXT ) as ordering_practitioner_id
    , cast(data_source as TEXT ) as data_source
    , cast('2024-02-21 14:30:54.308435+00:00' as timestamp ) as tuva_last_run
from "synthea"."tuva_input"."lab_result"
  );

[0m14:31:00.323327 [debug] [Thread-4 (]: Began running node model.the_tuva_project.core__stg_clinical_location
[0m14:31:00.323707 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_encounter"
[0m14:31:00.324330 [info ] [Thread-4 (]: 21 of 307 START sql view model core._stg_clinical_location ..................... [RUN]
[0m14:31:00.324862 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_encounter: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_encounter"} */

  
  create view "synthea"."core"."_stg_clinical_encounter__dbt_tmp" as (
    

select 
    cast(encounter_id as TEXT ) as encounter_id
    , cast(patient_id as TEXT ) as patient_id
    , cast(encounter_type as TEXT ) as encounter_type
    , try_cast( encounter_start_date as date ) as encounter_start_date
    , try_cast( encounter_end_date as date ) as encounter_end_date
    , cast(length_of_stay as integer ) as length_of_stay
    , cast(admit_source_code as TEXT ) as admit_source_code
    , cast(admit_source_description as TEXT ) as admit_source_description
    , cast(admit_type_code as TEXT ) as admit_type_code
    , cast(admit_type_description as TEXT ) as admit_type_description
    , cast(discharge_disposition_code as TEXT ) as discharge_disposition_code
    , cast(discharge_disposition_description as TEXT ) as discharge_disposition_description
    , cast(attending_provider_id as TEXT ) as attending_provider_id
    , cast(facility_npi as TEXT ) as facility_npi
    , cast(primary_diagnosis_code_type as TEXT ) as primary_diagnosis_code_type
    , cast(primary_diagnosis_code as TEXT ) as primary_diagnosis_code
    , cast(primary_diagnosis_description as TEXT ) as primary_diagnosis_description
    , cast(ms_drg_code as TEXT ) as ms_drg_code
    , cast(ms_drg_description as TEXT ) as ms_drg_description 
    , cast(apr_drg_code as TEXT ) as apr_drg_code
    , cast(apr_drg_description as TEXT ) as apr_drg_description
    , cast(paid_amount as numeric(28,6) ) as paid_amount
    , cast(allowed_amount as numeric(28,6) ) as allowed_amount
    , cast(charge_amount as numeric(28,6) ) as charge_amount
    , cast(data_source as TEXT ) as data_source
    , cast('2024-02-21 14:30:54.308435+00:00' as timestamp ) as tuva_last_run
from "synthea"."tuva_input"."encounter"
  );

[0m14:31:00.325508 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.core__stg_clinical_condition, now model.the_tuva_project.core__stg_clinical_location)
[0m14:31:00.326193 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.core__stg_clinical_location
[0m14:31:00.333616 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.core__stg_clinical_location"
[0m14:31:00.334281 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.334607 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.337482 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_encounter"
[0m14:31:00.340091 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_lab_result"
[0m14:31:00.340689 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.core__stg_clinical_location (compile): 14:31:00.326480 => 14:31:00.340502
[0m14:31:00.340982 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_encounter: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_encounter"} */
alter view "synthea"."core"."_stg_clinical_encounter" rename to "_stg_clinical_encounter__dbt_backup"
[0m14:31:00.341393 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_lab_result: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_lab_result"} */
alter view "synthea"."core"."_stg_clinical_lab_result" rename to "_stg_clinical_lab_result__dbt_backup"
[0m14:31:00.341814 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.core__stg_clinical_location
[0m14:31:00.342424 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.342809 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.345771 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.core__stg_clinical_location"
[0m14:31:00.348287 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_encounter"
[0m14:31:00.350822 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_lab_result"
[0m14:31:00.351748 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_encounter: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_encounter"} */
alter view "synthea"."core"."_stg_clinical_encounter__dbt_tmp" rename to "_stg_clinical_encounter"
[0m14:31:00.352234 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_lab_result: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_lab_result"} */
alter view "synthea"."core"."_stg_clinical_lab_result__dbt_tmp" rename to "_stg_clinical_lab_result"
[0m14:31:00.352730 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_location"
[0m14:31:00.353229 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.353597 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.353863 [debug] [Thread-4 (]: On model.the_tuva_project.core__stg_clinical_location: BEGIN
[0m14:31:00.356195 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_encounter: COMMIT
[0m14:31:00.357448 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_lab_result: COMMIT
[0m14:31:00.357887 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m14:31:00.358308 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_encounter"
[0m14:31:00.358715 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_lab_result"
[0m14:31:00.359266 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.359554 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_encounter: COMMIT
[0m14:31:00.359947 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_lab_result: COMMIT
[0m14:31:00.360322 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_location"
[0m14:31:00.361107 [debug] [Thread-4 (]: On model.the_tuva_project.core__stg_clinical_location: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_location"} */

  
  create view "synthea"."core"."_stg_clinical_location__dbt_tmp" as (
    

select
    cast(location_id as TEXT ) as location_id
    , cast(npi as TEXT ) as npi
    , cast(name as TEXT ) as name
    , cast(facility_type as TEXT ) as facility_type
    , cast(parent_organization as TEXT ) as parent_organization
    , cast(address as TEXT ) as address
    , cast(city as TEXT ) as city
    , cast(state as TEXT ) as state
    , cast(zip_code as TEXT ) as zip_code
    , cast(latitude as float ) as latitude
    , cast(longitude as float ) as longitude
    , cast(data_source as TEXT ) as data_source
    , cast('2024-02-21 14:30:54.308435+00:00' as timestamp ) as tuva_last_run
from "synthea"."tuva_input"."location"
  );

[0m14:31:00.361440 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.361876 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.363981 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_encounter"
[0m14:31:00.364468 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.366563 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_lab_result"
[0m14:31:00.367029 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_encounter: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_encounter"} */
drop view if exists "synthea"."core"."_stg_clinical_encounter__dbt_backup" cascade
[0m14:31:00.369590 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_location"
[0m14:31:00.370072 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_lab_result: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_lab_result"} */
drop view if exists "synthea"."core"."_stg_clinical_lab_result__dbt_backup" cascade
[0m14:31:00.370731 [debug] [Thread-4 (]: On model.the_tuva_project.core__stg_clinical_location: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_location"} */
alter view "synthea"."core"."_stg_clinical_location" rename to "_stg_clinical_location__dbt_backup"
[0m14:31:00.371057 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.371594 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.371908 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.372929 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.core__stg_clinical_encounter (execute): 14:31:00.311383 => 14:31:00.372776
[0m14:31:00.375187 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_location"
[0m14:31:00.376362 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.core__stg_clinical_lab_result (execute): 14:31:00.305273 => 14:31:00.376214
[0m14:31:00.376815 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_encounter: Close
[0m14:31:00.377250 [debug] [Thread-4 (]: On model.the_tuva_project.core__stg_clinical_location: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_location"} */
alter view "synthea"."core"."_stg_clinical_location__dbt_tmp" rename to "_stg_clinical_location"
[0m14:31:00.377662 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_lab_result: Close
[0m14:31:00.378389 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff75958650>]}
[0m14:31:00.378986 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.379515 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff758cafd0>]}
[0m14:31:00.380067 [info ] [Thread-2 (]: 20 of 307 OK created sql view model core._stg_clinical_encounter ............... [[32mOK[0m in 0.09s]
[0m14:31:00.381374 [debug] [Thread-4 (]: On model.the_tuva_project.core__stg_clinical_location: COMMIT
[0m14:31:00.381901 [info ] [Thread-1 (]: 19 of 307 OK created sql view model core._stg_clinical_lab_result .............. [[32mOK[0m in 0.10s]
[0m14:31:00.382464 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.core__stg_clinical_encounter
[0m14:31:00.382859 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_location"
[0m14:31:00.383338 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.core__stg_clinical_lab_result
[0m14:31:00.383777 [debug] [Thread-2 (]: Began running node model.the_tuva_project.core__stg_clinical_medication
[0m14:31:00.384193 [debug] [Thread-4 (]: On model.the_tuva_project.core__stg_clinical_location: COMMIT
[0m14:31:00.384667 [debug] [Thread-1 (]: Began running node model.the_tuva_project.core__stg_clinical_patient
[0m14:31:00.385227 [info ] [Thread-2 (]: 22 of 307 START sql view model core._stg_clinical_medication ................... [RUN]
[0m14:31:00.386135 [info ] [Thread-1 (]: 23 of 307 START sql view model core._stg_clinical_patient ...................... [RUN]
[0m14:31:00.386540 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.387243 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.core__stg_clinical_encounter, now model.the_tuva_project.core__stg_clinical_medication)
[0m14:31:00.387997 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.core__stg_clinical_lab_result, now model.the_tuva_project.core__stg_clinical_patient)
[0m14:31:00.390515 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_location"
[0m14:31:00.391040 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.core__stg_clinical_medication
[0m14:31:00.391484 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.core__stg_clinical_patient
[0m14:31:00.391928 [debug] [Thread-4 (]: On model.the_tuva_project.core__stg_clinical_location: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_location"} */
drop view if exists "synthea"."core"."_stg_clinical_location__dbt_backup" cascade
[0m14:31:00.400040 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.core__stg_clinical_medication"
[0m14:31:00.406502 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.core__stg_clinical_patient"
[0m14:31:00.407890 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.409056 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.core__stg_clinical_location (execute): 14:31:00.342984 => 14:31:00.408907
[0m14:31:00.409665 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.core__stg_clinical_patient (compile): 14:31:00.400313 => 14:31:00.409474
[0m14:31:00.409982 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.core__stg_clinical_medication (compile): 14:31:00.392245 => 14:31:00.409841
[0m14:31:00.410276 [debug] [Thread-4 (]: On model.the_tuva_project.core__stg_clinical_location: Close
[0m14:31:00.410688 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.core__stg_clinical_patient
[0m14:31:00.411074 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.core__stg_clinical_medication
[0m14:31:00.411785 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff85904910>]}
[0m14:31:00.415086 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.core__stg_clinical_patient"
[0m14:31:00.419289 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.core__stg_clinical_medication"
[0m14:31:00.420128 [info ] [Thread-4 (]: 21 of 307 OK created sql view model core._stg_clinical_location ................ [[32mOK[0m in 0.09s]
[0m14:31:00.421624 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.core__stg_clinical_location
[0m14:31:00.422210 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_patient"
[0m14:31:00.422618 [debug] [Thread-4 (]: Began running node model.the_tuva_project.core__stg_clinical_observation
[0m14:31:00.422994 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_medication"
[0m14:31:00.423358 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_patient: BEGIN
[0m14:31:00.423821 [info ] [Thread-4 (]: 24 of 307 START sql view model core._stg_clinical_observation .................. [RUN]
[0m14:31:00.424238 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_medication: BEGIN
[0m14:31:00.424642 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m14:31:00.425255 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.core__stg_clinical_location, now model.the_tuva_project.core__stg_clinical_observation)
[0m14:31:00.425838 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m14:31:00.426442 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.426734 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.core__stg_clinical_observation
[0m14:31:00.427307 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.427580 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_patient"
[0m14:31:00.435058 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.core__stg_clinical_observation"
[0m14:31:00.435390 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_medication"
[0m14:31:00.435972 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_patient: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_patient"} */

  
  create view "synthea"."core"."_stg_clinical_patient__dbt_tmp" as (
    

select
    cast(patient_id as TEXT ) as patient_id
    , cast(first_name as TEXT ) as first_name
    , cast(last_name as TEXT ) as last_name
    , cast(sex as TEXT ) as sex
    , cast(race as TEXT ) as race
    , try_cast( birth_date as date ) as birth_date
    , try_cast( death_date as date ) as death_date
    , cast(death_flag as integer ) as death_flag
    , cast(address as TEXT ) as address
    , cast(city as TEXT ) as city
    , cast(state as TEXT ) as state
    , cast(zip_code as TEXT ) as zip_code
    , cast(county as TEXT ) as county
    , cast(latitude as float ) as latitude
    , cast(longitude as float ) as longitude
    , cast(data_source as TEXT ) as data_source
    , cast('2024-02-21 14:30:54.308435+00:00' as timestamp ) as tuva_last_run
from "synthea"."tuva_input"."patient"
  );

[0m14:31:00.436950 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_medication"} */

  
  create view "synthea"."core"."_stg_clinical_medication__dbt_tmp" as (
    

select
    cast(medication_id as TEXT ) as medication_id
    , cast(patient_id as TEXT ) as patient_id
    , cast(encounter_id as TEXT ) as encounter_id
    , try_cast( dispensing_date as date ) as dispensing_date
    , try_cast( prescribing_date as date ) as prescribing_date
    , cast(source_code_type as TEXT ) as source_code_type
    , cast(source_code as TEXT ) as source_code
    , cast(source_description as TEXT ) as source_description
    , cast(ndc_code as TEXT ) as ndc_code
    , cast(ndc_description as TEXT ) as ndc_description
    , cast(rxnorm_code as TEXT ) as rxnorm_code
    , cast(rxnorm_description as TEXT ) as rxnorm_description 
    , cast(atc_code as TEXT ) as atc_code
    , cast(atc_description as TEXT ) as atc_description
    , cast(route as TEXT ) as route
    , cast(strength as TEXT ) as strength
    , cast(quantity as integer ) as quantity
    , cast(quantity_unit as TEXT ) as quantity_unit
    , cast(days_supply as integer ) as days_supply
    , cast(practitioner_id as TEXT ) as practitioner_id
    , cast(data_source as TEXT ) as data_source
    , cast('2024-02-21 14:30:54.308435+00:00' as timestamp ) as tuva_last_run
from "synthea"."tuva_input"."medication"
  );

[0m14:31:00.437725 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.core__stg_clinical_observation (compile): 14:31:00.427928 => 14:31:00.437523
[0m14:31:00.438424 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.core__stg_clinical_observation
[0m14:31:00.441888 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.core__stg_clinical_observation"
[0m14:31:00.442364 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.445111 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_medication"
[0m14:31:00.445701 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.446041 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_medication"} */
alter view "synthea"."core"."_stg_clinical_medication" rename to "_stg_clinical_medication__dbt_backup"
[0m14:31:00.446574 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_observation"
[0m14:31:00.449356 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_patient"
[0m14:31:00.450204 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.450575 [debug] [Thread-4 (]: On model.the_tuva_project.core__stg_clinical_observation: BEGIN
[0m14:31:00.451000 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_patient: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_patient"} */
alter view "synthea"."core"."_stg_clinical_patient" rename to "_stg_clinical_patient__dbt_backup"
[0m14:31:00.453379 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_medication"
[0m14:31:00.453884 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m14:31:00.454473 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.454770 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_medication"} */
alter view "synthea"."core"."_stg_clinical_medication__dbt_tmp" rename to "_stg_clinical_medication"
[0m14:31:00.455303 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.457407 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_patient"
[0m14:31:00.458099 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.458518 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_observation"
[0m14:31:00.459034 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_patient: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_patient"} */
alter view "synthea"."core"."_stg_clinical_patient__dbt_tmp" rename to "_stg_clinical_patient"
[0m14:31:00.460561 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_medication: COMMIT
[0m14:31:00.461119 [debug] [Thread-4 (]: On model.the_tuva_project.core__stg_clinical_observation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_observation"} */

  
  create view "synthea"."core"."_stg_clinical_observation__dbt_tmp" as (
    


select
    cast(observation_id as TEXT ) as observation_id
    , cast(patient_id as TEXT ) as patient_id
    , cast(encounter_id as TEXT ) as encounter_id
    , cast(panel_id as TEXT ) as panel_id
    , try_cast( observation_date as date ) as observation_date
    , cast(observation_type as TEXT ) as observation_type
    , cast(source_code_type as TEXT ) as source_code_type
    , cast(source_code as TEXT ) as source_code
    , cast(source_description as TEXT ) as source_description
    , cast(normalized_code_type as TEXT ) as normalized_code_type
    , cast(normalized_code as TEXT ) as normalized_code
    , cast(normalized_description as TEXT ) as normalized_description
    , cast(result as TEXT ) as result
    , cast(source_units as TEXT ) as source_units
    , cast(normalized_units as TEXT ) as normalized_units
    , cast(source_reference_range_low as TEXT ) as source_reference_range_low
    , cast(source_reference_range_high as TEXT ) as source_reference_range_high
    , cast(normalized_reference_range_low as TEXT ) as normalized_reference_range_low
    , cast(normalized_reference_range_high as TEXT ) as normalized_reference_range_high
    , cast(data_source as TEXT ) as data_source
    , cast('2024-02-21 14:30:54.308435+00:00' as timestamp ) as tuva_last_run
from "synthea"."tuva_input"."observation"
  );

[0m14:31:00.461801 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.462112 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_medication"
[0m14:31:00.463765 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_patient: COMMIT
[0m14:31:00.464345 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_medication: COMMIT
[0m14:31:00.464839 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_patient"
[0m14:31:00.465602 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_patient: COMMIT
[0m14:31:00.466045 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.468407 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_medication"
[0m14:31:00.468781 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.469281 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.469591 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_medication"} */
drop view if exists "synthea"."core"."_stg_clinical_medication__dbt_backup" cascade
[0m14:31:00.471710 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_patient"
[0m14:31:00.475539 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_observation"
[0m14:31:00.476332 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_patient: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_patient"} */
drop view if exists "synthea"."core"."_stg_clinical_patient__dbt_backup" cascade
[0m14:31:00.476677 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.477076 [debug] [Thread-4 (]: On model.the_tuva_project.core__stg_clinical_observation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_observation"} */
alter view "synthea"."core"."_stg_clinical_observation" rename to "_stg_clinical_observation__dbt_backup"
[0m14:31:00.478475 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.core__stg_clinical_medication (execute): 14:31:00.415454 => 14:31:00.478320
[0m14:31:00.478835 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.479282 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.479583 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_medication: Close
[0m14:31:00.480680 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.core__stg_clinical_patient (execute): 14:31:00.412146 => 14:31:00.480542
[0m14:31:00.482936 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_observation"
[0m14:31:00.483789 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff75948850>]}
[0m14:31:00.484269 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_patient: Close
[0m14:31:00.484702 [debug] [Thread-4 (]: On model.the_tuva_project.core__stg_clinical_observation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_observation"} */
alter view "synthea"."core"."_stg_clinical_observation__dbt_tmp" rename to "_stg_clinical_observation"
[0m14:31:00.485273 [info ] [Thread-2 (]: 22 of 307 OK created sql view model core._stg_clinical_medication .............. [[32mOK[0m in 0.10s]
[0m14:31:00.485983 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7db4ce50>]}
[0m14:31:00.486589 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.486988 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.core__stg_clinical_medication
[0m14:31:00.487577 [info ] [Thread-1 (]: 23 of 307 OK created sql view model core._stg_clinical_patient ................. [[32mOK[0m in 0.10s]
[0m14:31:00.488874 [debug] [Thread-4 (]: On model.the_tuva_project.core__stg_clinical_observation: COMMIT
[0m14:31:00.489387 [debug] [Thread-2 (]: Began running node model.the_tuva_project.core__stg_clinical_practitioner
[0m14:31:00.489941 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.core__stg_clinical_patient
[0m14:31:00.490407 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_observation"
[0m14:31:00.490883 [info ] [Thread-2 (]: 25 of 307 START sql view model core._stg_clinical_practitioner ................. [RUN]
[0m14:31:00.491445 [debug] [Thread-1 (]: Began running node model.the_tuva_project.normalized_input__stg_pharmacy_claim
[0m14:31:00.491962 [debug] [Thread-4 (]: On model.the_tuva_project.core__stg_clinical_observation: COMMIT
[0m14:31:00.492633 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.core__stg_clinical_medication, now model.the_tuva_project.core__stg_clinical_practitioner)
[0m14:31:00.493279 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.core__stg_clinical_patient, now model.the_tuva_project.normalized_input__stg_pharmacy_claim)
[0m14:31:00.493989 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.core__stg_clinical_practitioner
[0m14:31:00.494353 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.494626 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.normalized_input__stg_pharmacy_claim
[0m14:31:00.500143 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.core__stg_clinical_practitioner"
[0m14:31:00.502321 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_observation"
[0m14:31:00.504984 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__stg_pharmacy_claim"
[0m14:31:00.505986 [debug] [Thread-4 (]: On model.the_tuva_project.core__stg_clinical_observation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_observation"} */
drop view if exists "synthea"."core"."_stg_clinical_observation__dbt_backup" cascade
[0m14:31:00.506781 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.core__stg_clinical_practitioner (compile): 14:31:00.494934 => 14:31:00.506594
[0m14:31:00.507555 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__stg_pharmacy_claim (compile): 14:31:00.502753 => 14:31:00.507349
[0m14:31:00.507980 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.core__stg_clinical_practitioner
[0m14:31:00.508382 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.509009 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.normalized_input__stg_pharmacy_claim
[0m14:31:00.512265 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.core__stg_clinical_practitioner"
[0m14:31:00.513618 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.core__stg_clinical_observation (execute): 14:31:00.438742 => 14:31:00.513467
[0m14:31:00.514118 [debug] [Thread-1 (]: Began running node model.the_tuva_project.core__stg_clinical_procedure
[0m14:31:00.514849 [debug] [Thread-4 (]: On model.the_tuva_project.core__stg_clinical_observation: Close
[0m14:31:00.515336 [info ] [Thread-1 (]: 26 of 307 START sql view model core._stg_clinical_procedure .................... [RUN]
[0m14:31:00.516013 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7dc7ea10>]}
[0m14:31:00.516466 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_practitioner"
[0m14:31:00.516908 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__stg_pharmacy_claim, now model.the_tuva_project.core__stg_clinical_procedure)
[0m14:31:00.517557 [info ] [Thread-4 (]: 24 of 307 OK created sql view model core._stg_clinical_observation ............. [[32mOK[0m in 0.09s]
[0m14:31:00.518250 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_practitioner: BEGIN
[0m14:31:00.521870 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m14:31:00.519159 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.core__stg_clinical_observation
[0m14:31:00.518675 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.core__stg_clinical_procedure
[0m14:31:00.531663 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.532291 [debug] [Thread-4 (]: Began running node model.the_tuva_project.normalized_input__int_eligibility_dates_normalize
[0m14:31:00.541652 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.core__stg_clinical_procedure"
[0m14:31:00.546577 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_practitioner"
[0m14:31:00.554120 [info ] [Thread-4 (]: 27 of 307 START sql table model claims_preprocessing._int_normalized_input_eligibility_dates_normalize  [RUN]
[0m14:31:00.557429 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_practitioner: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_practitioner"} */

  
  create view "synthea"."core"."_stg_clinical_practitioner__dbt_tmp" as (
    

select
    cast(practitioner_id as TEXT ) as practitioner_id
    , cast(npi as TEXT ) as npi
    , cast(first_name as TEXT ) as first_name
    , cast(last_name as TEXT ) as last_name
    , cast(practice_affiliation as TEXT ) as practice_affiliation
    , cast(specialty as TEXT ) as specialty
    , cast(sub_specialty as TEXT ) as sub_specialty
    , cast(data_source as TEXT ) as data_source
    , cast('2024-02-21 14:30:54.308435+00:00' as timestamp ) as tuva_last_run
from "synthea"."tuva_input"."practitioner"
  );

[0m14:31:00.558913 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.core__stg_clinical_observation, now model.the_tuva_project.normalized_input__int_eligibility_dates_normalize)
[0m14:31:00.559701 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.core__stg_clinical_procedure (compile): 14:31:00.533253 => 14:31:00.559417
[0m14:31:00.562294 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.core__stg_clinical_procedure
[0m14:31:00.561816 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.560961 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.normalized_input__int_eligibility_dates_normalize
[0m14:31:00.567706 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.core__stg_clinical_procedure"
[0m14:31:00.571928 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_practitioner"
[0m14:31:00.584155 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize"
[0m14:31:00.586349 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_practitioner: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_practitioner"} */
alter view "synthea"."core"."_stg_clinical_practitioner" rename to "_stg_clinical_practitioner__dbt_backup"
[0m14:31:00.588577 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_procedure"
[0m14:31:00.589698 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.590309 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_procedure: BEGIN
[0m14:31:00.590837 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.normalized_input__int_eligibility_dates_normalize (compile): 14:31:00.572545 => 14:31:00.590612
[0m14:31:00.594489 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_practitioner"
[0m14:31:00.595369 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m14:31:00.596102 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.normalized_input__int_eligibility_dates_normalize
[0m14:31:00.596912 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_practitioner: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_practitioner"} */
alter view "synthea"."core"."_stg_clinical_practitioner__dbt_tmp" rename to "_stg_clinical_practitioner"
[0m14:31:00.598358 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.602887 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize"
[0m14:31:00.604207 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_procedure"
[0m14:31:00.604683 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.606098 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_procedure: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_procedure"} */

  
  create view "synthea"."core"."_stg_clinical_procedure__dbt_tmp" as (
    

select
    cast(procedure_id as TEXT ) as procedure_id 
    , cast(patient_id as TEXT ) as patient_id
    , cast(encounter_id as TEXT ) as encounter_id
    , cast(claim_id as TEXT ) as claim_id
    , try_cast( procedure_date as date ) as procedure_date
    , cast(source_code_type as TEXT ) as source_code_type
    , cast(source_code as TEXT ) as source_code
    , cast(source_description as TEXT ) as source_description
    , cast(normalized_code_type as TEXT ) as normalized_code_type
    , cast(normalized_code as TEXT ) as normalized_code
    , cast(normalized_description as TEXT ) as normalized_description
    , cast(modifier_1 as TEXT ) as modifier_1
    , cast(modifier_2 as TEXT ) as modifier_2
    , cast(modifier_3 as TEXT ) as modifier_3
    , cast(modifier_4 as TEXT ) as modifier_4
    , cast(modifier_5 as TEXT ) as modifier_5
    , cast(practitioner_id as TEXT ) as practitioner_id
    , cast(data_source as TEXT ) as data_source
    , cast('2024-02-21 14:30:54.308435+00:00' as timestamp ) as tuva_last_run
from "synthea"."tuva_input"."procedure"
  );

[0m14:31:00.607843 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_practitioner: COMMIT
[0m14:31:00.608705 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize"
[0m14:31:00.609590 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_practitioner"
[0m14:31:00.610390 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_eligibility_dates_normalize: BEGIN
[0m14:31:00.611165 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_practitioner: COMMIT
[0m14:31:00.611856 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m14:31:00.613290 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.613864 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.616285 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_practitioner"
[0m14:31:00.616639 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.619694 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_procedure"
[0m14:31:00.620431 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_practitioner: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_practitioner"} */
drop view if exists "synthea"."core"."_stg_clinical_practitioner__dbt_backup" cascade
[0m14:31:00.621010 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize"
[0m14:31:00.621904 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_procedure: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_procedure"} */
alter view "synthea"."core"."_stg_clinical_procedure" rename to "_stg_clinical_procedure__dbt_backup"
[0m14:31:00.623197 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_eligibility_dates_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_eligibility_dates_normalize__dbt_tmp"
  
    as (
      


with __dbt__cte__normalized_input__stg_eligibility as (



select
      patient_id
    , patient_id||data_source||payer||plan||enrollment_start_date||enrollment_end_date as patient_id_key
    , member_id
    , gender
    , race
    , birth_date
    , death_date
    , death_flag
    , enrollment_start_date
    , enrollment_end_date
    , payer
    , payer_type
    , plan
    , original_reason_entitlement_code
    , dual_status_code
    , medicare_status_code
    , first_name
    , last_name
    , address
    , city
    , state
    , zip_code
    , phone
    , data_source
from "synthea"."tuva_input"."eligibility"
) select distinct
  elig.patient_id
  , elig.patient_id||elig.data_source||elig.payer||elig.plan||elig.enrollment_start_date||elig.enrollment_end_date as patient_id_key
  , cal_dob.full_date as normalized_birth_date
  , cal_death.full_date as normalized_death_date
  , cal_enroll_start.full_date as normalized_enrollment_start_date
  , cal_enroll_end.full_date as normalized_enrollment_end_date
  , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from __dbt__cte__normalized_input__stg_eligibility elig
left join "synthea"."terminology"."calendar" cal_dob
    on elig.birth_date = cal_dob.full_date
left join "synthea"."terminology"."calendar" cal_death
    on elig.death_date = cal_death.full_date
left join "synthea"."terminology"."calendar" cal_enroll_start
    on elig.enrollment_start_date = cal_enroll_start.full_date
left join "synthea"."terminology"."calendar" cal_enroll_end
    on elig.enrollment_end_date = cal_enroll_end.full_date
    );
  
  
[0m14:31:00.623933 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.624792 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.626794 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.core__stg_clinical_practitioner (execute): 14:31:00.509336 => 14:31:00.626610
[0m14:31:00.629849 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_procedure"
[0m14:31:00.630651 [debug] [Thread-2 (]: On model.the_tuva_project.core__stg_clinical_practitioner: Close
[0m14:31:00.631237 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_procedure: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_procedure"} */
alter view "synthea"."core"."_stg_clinical_procedure__dbt_tmp" rename to "_stg_clinical_procedure"
[0m14:31:00.632979 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff75999c50>]}
[0m14:31:00.633882 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.636733 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_procedure: COMMIT
[0m14:31:00.639099 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_procedure"
[0m14:31:00.640349 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_procedure: COMMIT
[0m14:31:00.642086 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.644904 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__stg_clinical_procedure"
[0m14:31:00.645736 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_procedure: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__stg_clinical_procedure"} */
drop view if exists "synthea"."core"."_stg_clinical_procedure__dbt_backup" cascade
[0m14:31:00.647150 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.648763 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.core__stg_clinical_procedure (execute): 14:31:00.562834 => 14:31:00.648588
[0m14:31:00.649713 [debug] [Thread-1 (]: On model.the_tuva_project.core__stg_clinical_procedure: Close
[0m14:31:00.650723 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff75923110>]}
[0m14:31:00.920554 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.923895 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize"
[0m14:31:00.924750 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_eligibility_dates_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_eligibility_dates_normalize" rename to "_int_normalized_input_eligibility_dates_normalize__dbt_backup"
[0m14:31:00.925683 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.928894 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize"
[0m14:31:00.929814 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_eligibility_dates_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_eligibility_dates_normalize__dbt_tmp" rename to "_int_normalized_input_eligibility_dates_normalize"
[0m14:31:00.930967 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.932788 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_eligibility_dates_normalize: COMMIT
[0m14:31:00.933523 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize"
[0m14:31:00.934077 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_eligibility_dates_normalize: COMMIT
[0m14:31:00.935212 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.937886 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize"
[0m14:31:00.938566 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_eligibility_dates_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_eligibility_dates_normalize"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_eligibility_dates_normalize__dbt_backup" cascade
[0m14:31:00.939754 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:00.941209 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.normalized_input__int_eligibility_dates_normalize (execute): 14:31:00.598659 => 14:31:00.940997
[0m14:31:00.941791 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_eligibility_dates_normalize: Close
[0m14:31:00.942622 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7d9e28d0>]}
[0m14:31:01.003847 [info ] [Thread-2 (]: 25 of 307 OK created sql view model core._stg_clinical_practitioner ............ [[32mOK[0m in 0.14s]
[0m14:31:01.004442 [info ] [Thread-1 (]: 26 of 307 OK created sql view model core._stg_clinical_procedure ............... [[32mOK[0m in 0.13s]
[0m14:31:01.005684 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.core__stg_clinical_practitioner
[0m14:31:01.005044 [info ] [Thread-4 (]: 27 of 307 OK created sql table model claims_preprocessing._int_normalized_input_eligibility_dates_normalize  [[32mOK[0m in 0.38s]
[0m14:31:01.006573 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.core__stg_clinical_procedure
[0m14:31:01.010143 [debug] [Thread-1 (]: Began running node model.the_tuva_project.core__lab_result
[0m14:31:01.009454 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.normalized_input__int_eligibility_dates_normalize
[0m14:31:01.007981 [debug] [Thread-2 (]: Began running node model.the_tuva_project.normalized_input__stg_medical_claim
[0m14:31:01.011014 [info ] [Thread-1 (]: 28 of 307 START sql table model core.lab_result ................................ [RUN]
[0m14:31:01.011969 [debug] [Thread-4 (]: Began running node model.the_tuva_project.core__medication
[0m14:31:01.013195 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.core__stg_clinical_practitioner, now model.the_tuva_project.normalized_input__stg_medical_claim)
[0m14:31:01.014031 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.core__stg_clinical_procedure, now model.the_tuva_project.core__lab_result)
[0m14:31:01.015376 [info ] [Thread-4 (]: 29 of 307 START sql table model core.medication ................................ [RUN]
[0m14:31:01.016353 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.normalized_input__stg_medical_claim
[0m14:31:01.017082 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.core__lab_result
[0m14:31:01.018076 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_eligibility_dates_normalize, now model.the_tuva_project.core__medication)
[0m14:31:01.023066 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__stg_medical_claim"
[0m14:31:01.026367 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.core__lab_result"
[0m14:31:01.027390 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.core__medication
[0m14:31:01.031845 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.core__medication"
[0m14:31:01.033035 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.core__lab_result (compile): 14:31:01.023674 => 14:31:01.032783
[0m14:31:01.033590 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__stg_medical_claim (compile): 14:31:01.018623 => 14:31:01.033392
[0m14:31:01.034084 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.core__lab_result
[0m14:31:01.034910 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.core__medication (compile): 14:31:01.028970 => 14:31:01.034670
[0m14:31:01.035750 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.normalized_input__stg_medical_claim
[0m14:31:01.039824 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.core__lab_result"
[0m14:31:01.040822 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.core__medication
[0m14:31:01.041967 [debug] [Thread-2 (]: Began running node model.the_tuva_project.normalized_input__pharmacy_claim
[0m14:31:01.047332 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.core__medication"
[0m14:31:01.048797 [info ] [Thread-2 (]: 30 of 307 START sql table model claims_preprocessing.normalized_input_pharmacy_claim  [RUN]
[0m14:31:01.049662 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__lab_result"
[0m14:31:01.050720 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__stg_medical_claim, now model.the_tuva_project.normalized_input__pharmacy_claim)
[0m14:31:01.051542 [debug] [Thread-1 (]: On model.the_tuva_project.core__lab_result: BEGIN
[0m14:31:01.051934 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.core__medication"
[0m14:31:01.052614 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.normalized_input__pharmacy_claim
[0m14:31:01.053300 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m14:31:01.053926 [debug] [Thread-4 (]: On model.the_tuva_project.core__medication: BEGIN
[0m14:31:01.071604 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__pharmacy_claim"
[0m14:31:01.072349 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:01.072734 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m14:31:01.074080 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__lab_result"
[0m14:31:01.075065 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:01.078060 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__pharmacy_claim (compile): 14:31:01.054430 => 14:31:01.077519
[0m14:31:01.078638 [debug] [Thread-1 (]: On model.the_tuva_project.core__lab_result: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__lab_result"} */

  
    
    

    create  table
      "synthea"."core"."lab_result__dbt_tmp"
  
    as (
      

select * from "synthea"."core"."_stg_clinical_lab_result"
    );
  
  
[0m14:31:01.079505 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.core__medication"
[0m14:31:01.080090 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.normalized_input__pharmacy_claim
[0m14:31:01.082959 [debug] [Thread-4 (]: On model.the_tuva_project.core__medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__medication"} */

  
    
    

    create  table
      "synthea"."core"."medication__dbt_tmp"
  
    as (
      


select * from "synthea"."core"."_stg_clinical_medication"
    );
  
  
[0m14:31:01.089038 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__pharmacy_claim"
[0m14:31:01.096114 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__pharmacy_claim"
[0m14:31:01.100579 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__pharmacy_claim: BEGIN
[0m14:31:01.102949 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m14:31:01.105821 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:01.107271 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__pharmacy_claim"
[0m14:31:01.108725 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__pharmacy_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__pharmacy_claim"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim__dbt_tmp"
  
    as (
      


with __dbt__cte__normalized_input__stg_pharmacy_claim as (



select
      claim_id
    , claim_line_number
    , patient_id
    , member_id
    , payer
    , plan
    , prescribing_provider_npi
    , dispensing_provider_npi
    , dispensing_date
    , ndc_code
    , quantity
    , days_supply
    , refills
    , paid_date
    , paid_amount
    , allowed_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , data_source
from "synthea"."tuva_input"."pharmacy_claim"
) select
      cast(claim_id as TEXT ) as claim_id
    , cast(claim_line_number as int ) as claim_line_number
    , cast(patient_id as TEXT ) as patient_id
    , cast(member_id as TEXT ) as member_id
    , cast(payer as TEXT ) as payer
    , cast(plan as TEXT ) as plan
    , cast(prescribing_provider_npi as TEXT ) as prescribing_provider_npi
    , cast(dispensing_provider_npi as TEXT ) as dispensing_provider_npi
    , cast(dispensing_date as date ) as dispensing_date
    , cast(ndc_code as TEXT ) as ndc_code
    , cast(quantity as int ) as quantity
    , cast(days_supply as int ) as days_supply
    , cast(refills as int ) as refills
    , cast(paid_date as date ) as paid_date
    , cast(paid_amount as numeric(28,6) ) as paid_amount
    , cast(allowed_amount as numeric(28,6) ) as allowed_amount
    , cast(coinsurance_amount as numeric(28,6) ) as coinsurance_amount
    , cast(copayment_amount as numeric(28,6) ) as copayment_amount
    , cast(deductible_amount as numeric(28,6) ) as deductible_amount
    , cast(data_source as TEXT ) as data_source
    , cast('2024-02-21 14:30:54.308435+00:00' as TEXT ) as tuva_last_run
from __dbt__cte__normalized_input__stg_pharmacy_claim
    );
  
  
[0m14:31:01.410513 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:01.413929 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__lab_result"
[0m14:31:01.415808 [debug] [Thread-1 (]: On model.the_tuva_project.core__lab_result: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__lab_result"} */
alter table "synthea"."core"."lab_result" rename to "lab_result__dbt_backup"
[0m14:31:01.417150 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:01.422960 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__lab_result"
[0m14:31:01.428661 [debug] [Thread-1 (]: On model.the_tuva_project.core__lab_result: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__lab_result"} */
alter table "synthea"."core"."lab_result__dbt_tmp" rename to "lab_result"
[0m14:31:01.431219 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:01.433125 [debug] [Thread-1 (]: On model.the_tuva_project.core__lab_result: COMMIT
[0m14:31:01.507827 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__lab_result"
[0m14:31:01.511203 [debug] [Thread-1 (]: On model.the_tuva_project.core__lab_result: COMMIT
[0m14:31:01.791163 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:01.802260 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__lab_result"
[0m14:31:01.805017 [debug] [Thread-1 (]: On model.the_tuva_project.core__lab_result: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__lab_result"} */
drop table if exists "synthea"."core"."lab_result__dbt_backup" cascade
[0m14:31:01.817336 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:01.822524 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.core__lab_result (execute): 14:31:01.036225 => 14:31:01.822348
[0m14:31:01.827333 [debug] [Thread-1 (]: On model.the_tuva_project.core__lab_result: Close
[0m14:31:01.834811 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7715b210>]}
[0m14:31:01.838030 [info ] [Thread-1 (]: 28 of 307 OK created sql table model core.lab_result ........................... [[32mOK[0m in 0.82s]
[0m14:31:01.838744 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.core__lab_result
[0m14:31:01.839267 [debug] [Thread-1 (]: Began running node model.the_tuva_project.core__observation
[0m14:31:01.842932 [info ] [Thread-1 (]: 31 of 307 START sql table model core.observation ............................... [RUN]
[0m14:31:01.854113 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.core__lab_result, now model.the_tuva_project.core__observation)
[0m14:31:01.868592 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.core__observation
[0m14:31:01.876155 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.core__observation"
[0m14:31:01.891904 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.core__observation (compile): 14:31:01.870576 => 14:31:01.891268
[0m14:31:01.894469 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.core__observation
[0m14:31:01.899060 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.core__observation"
[0m14:31:01.918261 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__observation"
[0m14:31:01.920480 [debug] [Thread-1 (]: On model.the_tuva_project.core__observation: BEGIN
[0m14:31:01.921955 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m14:31:01.924221 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:01.925354 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__observation"
[0m14:31:01.926492 [debug] [Thread-1 (]: On model.the_tuva_project.core__observation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__observation"} */

  
    
    

    create  table
      "synthea"."core"."observation__dbt_tmp"
  
    as (
      


select * from "synthea"."core"."_stg_clinical_observation"
    );
  
  
[0m14:31:02.313941 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:02.317695 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__observation"
[0m14:31:02.318274 [debug] [Thread-1 (]: On model.the_tuva_project.core__observation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__observation"} */
alter table "synthea"."core"."observation" rename to "observation__dbt_backup"
[0m14:31:02.319149 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:02.322609 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__observation"
[0m14:31:02.323553 [debug] [Thread-1 (]: On model.the_tuva_project.core__observation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__observation"} */
alter table "synthea"."core"."observation__dbt_tmp" rename to "observation"
[0m14:31:02.324746 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:02.326807 [debug] [Thread-1 (]: On model.the_tuva_project.core__observation: COMMIT
[0m14:31:02.328910 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__observation"
[0m14:31:02.332570 [debug] [Thread-1 (]: On model.the_tuva_project.core__observation: COMMIT
[0m14:31:02.827501 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:02.830836 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.core__observation"
[0m14:31:02.832782 [debug] [Thread-1 (]: On model.the_tuva_project.core__observation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__observation"} */
drop table if exists "synthea"."core"."observation__dbt_backup" cascade
[0m14:31:02.837636 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:02.839292 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.core__observation (execute): 14:31:01.895026 => 14:31:02.839099
[0m14:31:02.839922 [debug] [Thread-1 (]: On model.the_tuva_project.core__observation: Close
[0m14:31:02.840817 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff758b6990>]}
[0m14:31:02.845637 [info ] [Thread-1 (]: 31 of 307 OK created sql table model core.observation .......................... [[32mOK[0m in 0.99s]
[0m14:31:02.847001 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.core__observation
[0m14:31:02.847774 [debug] [Thread-1 (]: Began running node model.the_tuva_project.normalized_input__eligibility
[0m14:31:02.849919 [info ] [Thread-1 (]: 32 of 307 START sql table model claims_preprocessing.normalized_input_eligibility  [RUN]
[0m14:31:02.851040 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.core__observation, now model.the_tuva_project.normalized_input__eligibility)
[0m14:31:02.852422 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.normalized_input__eligibility
[0m14:31:02.886376 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__eligibility"
[0m14:31:02.901710 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__eligibility (compile): 14:31:02.853745 => 14:31:02.901083
[0m14:31:02.904257 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.normalized_input__eligibility
[0m14:31:02.912796 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__eligibility"
[0m14:31:02.921539 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__eligibility"
[0m14:31:02.922596 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__eligibility: BEGIN
[0m14:31:02.923680 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m14:31:02.929344 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:02.937141 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__eligibility"
[0m14:31:02.948158 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__eligibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__eligibility"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."normalized_input_eligibility__dbt_tmp"
  
    as (
      


with __dbt__cte__normalized_input__stg_eligibility as (



select
      patient_id
    , patient_id||data_source||payer||plan||enrollment_start_date||enrollment_end_date as patient_id_key
    , member_id
    , gender
    , race
    , birth_date
    , death_date
    , death_flag
    , enrollment_start_date
    , enrollment_end_date
    , payer
    , payer_type
    , plan
    , original_reason_entitlement_code
    , dual_status_code
    , medicare_status_code
    , first_name
    , last_name
    , address
    , city
    , state
    , zip_code
    , phone
    , data_source
from "synthea"."tuva_input"."eligibility"
) select
    cast(elig.patient_id as TEXT ) as patient_id
    , cast(elig.member_id as TEXT ) as member_id
    , cast(elig.gender as TEXT ) as gender
    , cast(elig.race as TEXT ) as race
    , cast(date_norm.normalized_birth_date as date ) as birth_date
    , cast(date_norm.normalized_death_date as date ) as death_date
    , cast(elig.death_flag as int ) as death_flag
    , cast(date_norm.normalized_enrollment_start_date as date ) as enrollment_start_date
    , cast(date_norm.normalized_enrollment_end_date as date ) as enrollment_end_date
    , cast(elig.payer as TEXT ) as payer
    , cast(elig.payer_type as TEXT ) as payer_type
    , cast(elig.plan as TEXT ) as plan
    , cast(elig.original_reason_entitlement_code as TEXT ) as original_reason_entitlement_code
    , cast(elig.dual_status_code as TEXT ) as dual_status_code
    , cast(elig.medicare_status_code as TEXT ) as medicare_status_code
    , cast(elig.first_name as TEXT ) as first_name
    , cast(elig.last_name as TEXT ) as last_name
    , cast(elig.address as TEXT ) as address
    , cast(elig.city as TEXT ) as city
    , cast(elig.state as TEXT ) as state
    , cast(elig.zip_code as TEXT ) as zip_code
    , cast(elig.phone as TEXT ) as phone
    , cast(elig.data_source as TEXT ) as data_source
    , cast('2024-02-21 14:30:54.308435+00:00'  as TEXT ) as tuva_last_run
from __dbt__cte__normalized_input__stg_eligibility elig
left join "synthea"."claims_preprocessing"."_int_normalized_input_eligibility_dates_normalize" date_norm
    on elig.patient_id_key = date_norm.patient_id_key
    );
  
  
[0m14:31:04.336069 [debug] [Thread-1 (]: SQL status: OK in 1.0 seconds
[0m14:31:04.375095 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__eligibility"
[0m14:31:04.388305 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__eligibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__eligibility"} */
alter table "synthea"."claims_preprocessing"."normalized_input_eligibility" rename to "normalized_input_eligibility__dbt_backup"
[0m14:31:04.395858 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:04.476338 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__eligibility"
[0m14:31:04.482839 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__eligibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__eligibility"} */
alter table "synthea"."claims_preprocessing"."normalized_input_eligibility__dbt_tmp" rename to "normalized_input_eligibility"
[0m14:31:04.498604 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:04.522203 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__eligibility: COMMIT
[0m14:31:04.528665 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__eligibility"
[0m14:31:04.546860 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__eligibility: COMMIT
[0m14:31:04.577499 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:04.596205 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__eligibility"
[0m14:31:04.605068 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__eligibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__eligibility"} */
drop table if exists "synthea"."claims_preprocessing"."normalized_input_eligibility__dbt_backup" cascade
[0m14:31:04.639147 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:04.648167 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__eligibility (execute): 14:31:02.905595 => 14:31:04.647939
[0m14:31:04.651424 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__eligibility: Close
[0m14:31:04.665837 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff758ce150>]}
[0m14:31:04.678350 [info ] [Thread-1 (]: 32 of 307 OK created sql table model claims_preprocessing.normalized_input_eligibility  [[32mOK[0m in 1.81s]
[0m14:31:04.680409 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.normalized_input__eligibility
[0m14:31:04.682743 [debug] [Thread-1 (]: Began running node model.the_tuva_project.normalized_input__int_admit_source_voting
[0m14:31:04.691575 [info ] [Thread-1 (]: 33 of 307 START sql table model claims_preprocessing._int_normalized_input_admit_source_voting  [RUN]
[0m14:31:04.697380 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__eligibility, now model.the_tuva_project.normalized_input__int_admit_source_voting)
[0m14:31:04.698115 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.normalized_input__int_admit_source_voting
[0m14:31:04.764634 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_admit_source_voting"
[0m14:31:04.822703 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__int_admit_source_voting (compile): 14:31:04.698579 => 14:31:04.821835
[0m14:31:04.823943 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.normalized_input__int_admit_source_voting
[0m14:31:04.857005 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_admit_source_voting"
[0m14:31:04.893227 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_source_voting"
[0m14:31:04.894342 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_source_voting: BEGIN
[0m14:31:04.895282 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m14:31:04.896070 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:31:04.897162 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_source_voting"
[0m14:31:04.897828 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_source_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_source_voting"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_admit_source_voting__dbt_tmp"
  
    as (
      


with  __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
), normalize as(
    select 
        med.claim_id
        , med.data_source
        , admit.admit_source_code
    from __dbt__cte__normalized_input__stg_medical_claim med
    inner join "synthea"."terminology"."admit_source" admit
        on med.admit_source_code = admit.admit_source_code
    where claim_type = 'institutional'
)
, distinct_counts as(
    select 
        claim_id
        , data_source
        , admit_source_code
        , count(*) as admit_source_occurrence_count
    from normalize
    where admit_source_code is not null
    group by 
        claim_id
        , data_source
        , admit_source_code
)

, occurence_comparison as(
    select
        claim_id
        , data_source
        , 'admit_source_code' as column_name
        , admit_source_code as normalized_code
        , admit_source_occurrence_count as occurrence_count
        , coalesce(lead(admit_source_occurrence_count) 
            over (partition by claim_id, data_source order by admit_source_occurrence_count desc),0) as next_occurrence_count
        , row_number() over (partition by claim_id, data_source order by admit_source_occurrence_count desc) as occurrence_row_count
    from distinct_counts dist
)

select
    claim_id
    , data_source
    , column_name
    , normalized_code
    , occurrence_count
    , next_occurrence_count
    , occurrence_row_count
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from occurence_comparison
    );
  
  
[0m14:31:06.523718 [debug] [Thread-2 (]: SQL status: OK in 5.0 seconds
[0m14:31:06.531771 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__pharmacy_claim"
[0m14:31:06.540493 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__pharmacy_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__pharmacy_claim"} */
alter table "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim" rename to "normalized_input_pharmacy_claim__dbt_backup"
[0m14:31:06.550963 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:06.561730 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__pharmacy_claim"
[0m14:31:06.566834 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__pharmacy_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__pharmacy_claim"} */
alter table "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim__dbt_tmp" rename to "normalized_input_pharmacy_claim"
[0m14:31:06.575191 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:06.586551 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__pharmacy_claim: COMMIT
[0m14:31:06.595328 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__pharmacy_claim"
[0m14:31:06.600763 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__pharmacy_claim: COMMIT
[0m14:31:06.693527 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:06.703553 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__pharmacy_claim"
[0m14:31:06.707189 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__pharmacy_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__pharmacy_claim"} */
drop table if exists "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim__dbt_backup" cascade
[0m14:31:06.712843 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:06.717228 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__pharmacy_claim (execute): 14:31:01.083662 => 14:31:06.716287
[0m14:31:06.719824 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__pharmacy_claim: Close
[0m14:31:06.721648 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7597f550>]}
[0m14:31:06.722635 [info ] [Thread-2 (]: 30 of 307 OK created sql table model claims_preprocessing.normalized_input_pharmacy_claim  [[32mOK[0m in 5.67s]
[0m14:31:06.723897 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.normalized_input__pharmacy_claim
[0m14:31:06.724958 [debug] [Thread-2 (]: Began running node model.the_tuva_project.normalized_input__int_admit_type_voting
[0m14:31:06.726074 [info ] [Thread-2 (]: 34 of 307 START sql table model claims_preprocessing._int_normalized_input_admit_type_normalize_voting  [RUN]
[0m14:31:06.727726 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__pharmacy_claim, now model.the_tuva_project.normalized_input__int_admit_type_voting)
[0m14:31:06.730705 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.normalized_input__int_admit_type_voting
[0m14:31:06.753059 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_admit_type_voting"
[0m14:31:06.771888 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__int_admit_type_voting (compile): 14:31:06.732176 => 14:31:06.771410
[0m14:31:06.776264 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.normalized_input__int_admit_type_voting
[0m14:31:06.787894 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_admit_type_voting"
[0m14:31:06.804574 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_type_voting"
[0m14:31:06.807233 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_admit_type_voting: BEGIN
[0m14:31:06.811499 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m14:31:06.825217 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:06.827256 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_type_voting"
[0m14:31:06.841037 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_admit_type_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_type_voting"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_admit_type_normalize_voting__dbt_tmp"
  
    as (
      


with  __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
), normalize as(
    select 
        med.claim_id
        , med.data_source
        , admit.admit_type_code
    from __dbt__cte__normalized_input__stg_medical_claim med
    inner join "synthea"."terminology"."admit_type" admit
        on med.admit_type_code = admit.admit_type_code
    where claim_type = 'institutional'
)
, distinct_counts as(
    select 
        claim_id
        , data_source
        , admit_type_code
        , count(*) as admit_type_occurrence_count
    from normalize
    where admit_type_code is not null
    group by 
        claim_id
        , data_source
        , admit_type_code
)

, occurence_comparison as(
    select
        claim_id
        , data_source
        , 'admit_type_code' as column_name
        , admit_type_code as normalized_code
        , admit_type_occurrence_count as occurrence_count
        , coalesce(lead(admit_type_occurrence_count) 
            over (partition by claim_id, data_source order by admit_type_occurrence_count desc),0) as next_occurrence_count
        , row_number() over (partition by claim_id, data_source order by admit_type_occurrence_count desc) as occurrence_row_count
    from distinct_counts dist
)

select
    claim_id
    , data_source
    , column_name
    , normalized_code
    , occurrence_count
    , next_occurrence_count
    , occurrence_row_count
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from occurence_comparison
    );
  
  
[0m14:31:07.597190 [debug] [Thread-2 (]: SQL status: OK in 1.0 seconds
[0m14:31:07.605141 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_type_voting"
[0m14:31:07.617171 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_admit_type_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_type_voting"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_admit_type_normalize_voting" rename to "_int_normalized_input_admit_type_normalize_voting__dbt_backup"
[0m14:31:07.627102 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:07.646794 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_type_voting"
[0m14:31:07.664338 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_admit_type_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_type_voting"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_admit_type_normalize_voting__dbt_tmp" rename to "_int_normalized_input_admit_type_normalize_voting"
[0m14:31:07.673209 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:07.679797 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_admit_type_voting: COMMIT
[0m14:31:07.689380 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_type_voting"
[0m14:31:07.698739 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_admit_type_voting: COMMIT
[0m14:31:07.709922 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:07.713910 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_type_voting"
[0m14:31:07.716223 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_admit_type_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_type_voting"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_admit_type_normalize_voting__dbt_backup" cascade
[0m14:31:07.719586 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:07.727121 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__int_admit_type_voting (execute): 14:31:06.780469 => 14:31:07.726484
[0m14:31:07.734316 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_admit_type_voting: Close
[0m14:31:07.742070 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7d2e0e10>]}
[0m14:31:07.744632 [info ] [Thread-2 (]: 34 of 307 OK created sql table model claims_preprocessing._int_normalized_input_admit_type_normalize_voting  [[32mOK[0m in 1.01s]
[0m14:31:07.749124 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.normalized_input__int_admit_type_voting
[0m14:31:07.755057 [debug] [Thread-2 (]: Began running node model.the_tuva_project.normalized_input__int_apr_drg_voting
[0m14:31:07.761231 [info ] [Thread-2 (]: 35 of 307 START sql table model claims_preprocessing._int_normalized_input_apr_drg_voting  [RUN]
[0m14:31:07.763160 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_admit_type_voting, now model.the_tuva_project.normalized_input__int_apr_drg_voting)
[0m14:31:07.765314 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.normalized_input__int_apr_drg_voting
[0m14:31:07.789085 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_apr_drg_voting"
[0m14:31:07.815991 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__int_apr_drg_voting (compile): 14:31:07.766095 => 14:31:07.812031
[0m14:31:07.818405 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.normalized_input__int_apr_drg_voting
[0m14:31:07.827636 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_apr_drg_voting"
[0m14:31:07.862083 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_apr_drg_voting"
[0m14:31:07.869277 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_apr_drg_voting: BEGIN
[0m14:31:07.874287 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m14:31:07.879568 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:31:07.885734 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_apr_drg_voting"
[0m14:31:07.887273 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_apr_drg_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_apr_drg_voting"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_apr_drg_voting__dbt_tmp"
  
    as (
      

with  __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
), normalize as(
    select 
        med.claim_id
        , med.data_source
        , apr.apr_drg_code
    from __dbt__cte__normalized_input__stg_medical_claim med
    inner join "synthea"."terminology"."apr_drg" apr
        on med.apr_drg_code = apr.apr_drg_code
    where claim_type = 'institutional'
)
, distinct_counts as(
    select 
        claim_id
        , data_source
        , apr_drg_code
        , count(*) as apr_drg_occurrence_count
    from normalize
    where apr_drg_code is not null
    group by 
        claim_id
        , data_source
        , apr_drg_code
)

, occurence_comparison as(
    select
        claim_id
        , data_source
        , 'apr_drg_code' as column_name
        , apr_drg_code as normalized_code
        , apr_drg_occurrence_count as occurrence_count
        , coalesce(lead(apr_drg_occurrence_count) 
            over (partition by claim_id, data_source order by apr_drg_occurrence_count desc),0) as next_occurrence_count
        , row_number() over (partition by claim_id, data_source order by apr_drg_occurrence_count desc) as occurrence_row_count
    from distinct_counts dist
)

select
    claim_id
    , data_source
    , column_name
    , normalized_code
    , occurrence_count
    , next_occurrence_count
    , occurrence_row_count
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from occurence_comparison
    );
  
  
[0m14:31:10.268643 [debug] [Thread-4 (]: SQL status: OK in 9.0 seconds
[0m14:31:10.299246 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.core__medication"
[0m14:31:10.303126 [debug] [Thread-4 (]: On model.the_tuva_project.core__medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__medication"} */
alter table "synthea"."core"."medication" rename to "medication__dbt_backup"
[0m14:31:10.305804 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:10.321555 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.core__medication"
[0m14:31:10.330423 [debug] [Thread-4 (]: On model.the_tuva_project.core__medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__medication"} */
alter table "synthea"."core"."medication__dbt_tmp" rename to "medication"
[0m14:31:10.334573 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:10.337825 [debug] [Thread-4 (]: On model.the_tuva_project.core__medication: COMMIT
[0m14:31:10.340581 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.core__medication"
[0m14:31:10.342117 [debug] [Thread-4 (]: On model.the_tuva_project.core__medication: COMMIT
[0m14:31:14.288470 [debug] [Thread-4 (]: SQL status: OK in 4.0 seconds
[0m14:31:14.301310 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.core__medication"
[0m14:31:14.302350 [debug] [Thread-4 (]: On model.the_tuva_project.core__medication: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.core__medication"} */
drop table if exists "synthea"."core"."medication__dbt_backup" cascade
[0m14:31:14.304334 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:14.306660 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.core__medication (execute): 14:31:01.043288 => 14:31:14.306374
[0m14:31:14.307466 [debug] [Thread-4 (]: On model.the_tuva_project.core__medication: Close
[0m14:31:14.308755 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7d30f7d0>]}
[0m14:31:14.309852 [info ] [Thread-4 (]: 29 of 307 OK created sql table model core.medication ........................... [[32mOK[0m in 13.29s]
[0m14:31:14.311457 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.core__medication
[0m14:31:14.313733 [debug] [Thread-4 (]: Began running node model.the_tuva_project.normalized_input__int_bill_type_voting
[0m14:31:14.315225 [info ] [Thread-4 (]: 36 of 307 START sql table model claims_preprocessing._int_normalized_input_bill_type_voting  [RUN]
[0m14:31:14.317145 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.core__medication, now model.the_tuva_project.normalized_input__int_bill_type_voting)
[0m14:31:14.318058 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.normalized_input__int_bill_type_voting
[0m14:31:14.331360 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_bill_type_voting"
[0m14:31:14.335275 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.normalized_input__int_bill_type_voting (compile): 14:31:14.318907 => 14:31:14.334920
[0m14:31:14.335860 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.normalized_input__int_bill_type_voting
[0m14:31:14.340354 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_bill_type_voting"
[0m14:31:14.341936 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_bill_type_voting"
[0m14:31:14.342366 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_bill_type_voting: BEGIN
[0m14:31:14.342794 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m14:31:14.343431 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:31:14.343819 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_bill_type_voting"
[0m14:31:14.344296 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_bill_type_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_bill_type_voting"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_bill_type_voting__dbt_tmp"
  
    as (
      


with  __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
), normalize as(
    select 
        med.claim_id
        , med.data_source
        , bill.bill_type_code
    from __dbt__cte__normalized_input__stg_medical_claim med
    inner join "synthea"."terminology"."bill_type" bill
        on med.bill_type_code = bill.bill_type_code
    where claim_type = 'institutional'
)
, distinct_counts as(
    select 
        claim_id
        , data_source
        , bill_type_code
        , count(*) as bill_type_occurrence_count
    from normalize
    where bill_type_code is not null
    group by 
        claim_id
        , data_source
        , bill_type_code
)

, occurence_comparison as(
    select
        claim_id
        , data_source
        , 'bill_type_code' as column_name
        , bill_type_code as normalized_code
        , bill_type_occurrence_count as occurrence_count
        , coalesce(lead(bill_type_occurrence_count) 
            over (partition by claim_id, data_source order by bill_type_occurrence_count desc),0) as next_occurrence_count
        , row_number() over (partition by claim_id, data_source order by bill_type_occurrence_count desc) as occurrence_row_count
    from distinct_counts dist
)

select
    claim_id
    , data_source
    , column_name
    , normalized_code
    , occurrence_count
    , next_occurrence_count
    , occurrence_row_count
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from occurence_comparison
    );
  
  
[0m14:32:58.133669 [debug] [Thread-3 (]: SQL status: OK in 118.0 seconds
[0m14:33:12.787149 [debug] [Thread-2 (]: SQL status: OK in 125.0 seconds
[0m14:33:12.790164 [debug] [Thread-1 (]: SQL status: OK in 128.0 seconds
[0m14:33:19.919249 [debug] [Thread-4 (]: SQL status: OK in 126.0 seconds
[0m14:33:19.921983 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.medical_claim_expanded"
[0m14:33:19.926007 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_apr_drg_voting"
[0m14:33:19.929379 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_source_voting"
[0m14:33:19.932047 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_bill_type_voting"
[0m14:33:19.932643 [debug] [Thread-3 (]: On model.the_tuva_project.medical_claim_expanded: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim_expanded"} */
alter table "synthea"."claims_expanded"."medical_claim_expanded" rename to "medical_claim_expanded__dbt_backup"
[0m14:33:19.933142 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_apr_drg_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_apr_drg_voting"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_apr_drg_voting" rename to "_int_normalized_input_apr_drg_voting__dbt_backup"
[0m14:33:19.933651 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_source_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_source_voting"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_admit_source_voting" rename to "_int_normalized_input_admit_source_voting__dbt_backup"
[0m14:33:19.934172 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_bill_type_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_bill_type_voting"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_bill_type_voting" rename to "_int_normalized_input_bill_type_voting__dbt_backup"
[0m14:33:19.936320 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:33:19.936910 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:33:19.937244 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:33:19.937588 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m14:33:19.940048 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_bill_type_voting"
[0m14:33:19.942564 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_source_voting"
[0m14:33:19.945342 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_apr_drg_voting"
[0m14:33:19.950668 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.medical_claim_expanded"
[0m14:33:19.951289 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_bill_type_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_bill_type_voting"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_bill_type_voting__dbt_tmp" rename to "_int_normalized_input_bill_type_voting"
[0m14:33:19.951847 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_source_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_source_voting"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_admit_source_voting__dbt_tmp" rename to "_int_normalized_input_admit_source_voting"
[0m14:33:19.952366 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_apr_drg_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_apr_drg_voting"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_apr_drg_voting__dbt_tmp" rename to "_int_normalized_input_apr_drg_voting"
[0m14:33:19.952845 [debug] [Thread-3 (]: On model.the_tuva_project.medical_claim_expanded: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim_expanded"} */
alter table "synthea"."claims_expanded"."medical_claim_expanded__dbt_tmp" rename to "medical_claim_expanded"
[0m14:33:19.953646 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:33:19.954200 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:33:19.954629 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:33:19.956900 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_bill_type_voting: COMMIT
[0m14:33:19.957270 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m14:33:19.958906 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_source_voting: COMMIT
[0m14:33:19.960708 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_apr_drg_voting: COMMIT
[0m14:33:19.961270 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_bill_type_voting"
[0m14:33:19.963210 [debug] [Thread-3 (]: On model.the_tuva_project.medical_claim_expanded: COMMIT
[0m14:33:19.963778 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_source_voting"
[0m14:33:19.964318 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_apr_drg_voting"
[0m14:33:19.964815 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_bill_type_voting: COMMIT
[0m14:33:19.965360 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.medical_claim_expanded"
[0m14:33:19.965795 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_source_voting: COMMIT
[0m14:33:19.966247 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_apr_drg_voting: COMMIT
[0m14:33:19.966978 [debug] [Thread-3 (]: On model.the_tuva_project.medical_claim_expanded: COMMIT
[0m14:33:19.969195 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:33:19.972572 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_bill_type_voting"
[0m14:33:19.973084 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:33:19.973555 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:33:19.974045 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_bill_type_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_bill_type_voting"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_bill_type_voting__dbt_backup" cascade
[0m14:33:19.977120 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_apr_drg_voting"
[0m14:33:19.979698 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_source_voting"
[0m14:33:19.980467 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_apr_drg_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_apr_drg_voting"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_apr_drg_voting__dbt_backup" cascade
[0m14:33:19.980989 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_source_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_source_voting"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_admit_source_voting__dbt_backup" cascade
[0m14:33:20.024303 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m14:33:20.027833 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.medical_claim_expanded"
[0m14:33:20.028417 [debug] [Thread-3 (]: On model.the_tuva_project.medical_claim_expanded: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.medical_claim_expanded"} */
drop table if exists "synthea"."claims_expanded"."medical_claim_expanded__dbt_backup" cascade
[0m14:33:20.732502 [debug] [Thread-1 (]: SQL status: OK in 1.0 seconds
[0m14:33:20.733514 [debug] [Thread-4 (]: SQL status: OK in 1.0 seconds
[0m14:33:20.734359 [debug] [Thread-2 (]: SQL status: OK in 1.0 seconds
[0m14:33:20.736975 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__int_admit_source_voting (execute): 14:31:04.849060 => 14:33:20.736562
[0m14:33:20.737547 [debug] [Thread-3 (]: SQL status: OK in 1.0 seconds
[0m14:33:20.738612 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.normalized_input__int_bill_type_voting (execute): 14:31:14.336199 => 14:33:20.738467
[0m14:33:20.739790 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__int_apr_drg_voting (execute): 14:31:07.820560 => 14:33:20.739631
[0m14:33:20.740375 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_admit_source_voting: Close
[0m14:33:20.741919 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.medical_claim_expanded (execute): 14:30:59.851559 => 14:33:20.741724
[0m14:33:20.742370 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_bill_type_voting: Close
[0m14:33:20.742888 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_apr_drg_voting: Close
[0m14:33:20.744606 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff759a2490>]}
[0m14:33:20.745121 [debug] [Thread-3 (]: On model.the_tuva_project.medical_claim_expanded: Close
[0m14:33:20.745830 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7d57db90>]}
[0m14:33:20.746782 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7d2e0710>]}
[0m14:33:20.748092 [info ] [Thread-1 (]: 33 of 307 OK created sql table model claims_preprocessing._int_normalized_input_admit_source_voting  [[32mOK[0m in 136.05s]
[0m14:40:06.209806 [debug] [Thread-3 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7e35a950>]}
[0m14:40:06.210665 [info ] [Thread-4 (]: 36 of 307 OK created sql table model claims_preprocessing._int_normalized_input_bill_type_voting  [[32mOK[0m in 126.43s]
[0m14:40:06.211335 [info ] [Thread-2 (]: 35 of 307 OK created sql table model claims_preprocessing._int_normalized_input_apr_drg_voting  [[32mOK[0m in 132.98s]
[0m14:40:06.212101 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.normalized_input__int_admit_source_voting
[0m14:40:06.212656 [info ] [Thread-3 (]: 9 of 307 OK created sql table model claims_expanded.medical_claim_expanded ..... [[32mOK[0m in 546.46s]
[0m14:40:06.213253 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.normalized_input__int_bill_type_voting
[0m14:40:06.213822 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.normalized_input__int_apr_drg_voting
[0m14:40:06.214485 [debug] [Thread-1 (]: Began running node model.the_tuva_project.normalized_input__int_diagnosis_code_normalize
[0m14:40:06.215323 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.medical_claim_expanded
[0m14:40:06.216099 [debug] [Thread-4 (]: Began running node model.the_tuva_project.normalized_input__int_discharge_disposition_voting
[0m14:40:06.216653 [debug] [Thread-2 (]: Began running node model.the_tuva_project.normalized_input__int_medical_claim_date_normalize
[0m14:40:06.217342 [info ] [Thread-1 (]: 37 of 307 START sql table model claims_preprocessing._int_normalized_input_diagnosis_code_normalize  [RUN]
[0m14:40:06.218026 [debug] [Thread-3 (]: Began running node model.the_tuva_project.normalized_input__int_medical_npi_normalize
[0m14:40:06.218513 [info ] [Thread-4 (]: 38 of 307 START sql table model claims_preprocessing._int_normalized_input_discharge_disposition_voting  [RUN]
[0m14:40:06.219013 [info ] [Thread-2 (]: 39 of 307 START sql table model claims_preprocessing._int_normalized_input_medical_claim_date_normalize  [RUN]
[0m14:40:06.219781 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_admit_source_voting, now model.the_tuva_project.normalized_input__int_diagnosis_code_normalize)
[0m14:40:06.220281 [info ] [Thread-3 (]: 40 of 307 START sql table model claims_preprocessing._int_normalized_input_medical_npi_normalize  [RUN]
[0m14:40:06.220956 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_bill_type_voting, now model.the_tuva_project.normalized_input__int_discharge_disposition_voting)
[0m14:40:06.221549 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_apr_drg_voting, now model.the_tuva_project.normalized_input__int_medical_claim_date_normalize)
[0m14:40:06.221989 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.normalized_input__int_diagnosis_code_normalize
[0m14:40:06.222726 [debug] [Thread-3 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.medical_claim_expanded, now model.the_tuva_project.normalized_input__int_medical_npi_normalize)
[0m14:40:06.223173 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.normalized_input__int_discharge_disposition_voting
[0m14:40:06.223709 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.normalized_input__int_medical_claim_date_normalize
[0m14:40:06.236818 [debug] [Thread-3 (]: Began compiling node model.the_tuva_project.normalized_input__int_medical_npi_normalize
[0m14:40:06.267553 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_diagnosis_code_normalize"
[0m14:40:06.270371 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_discharge_disposition_voting"
[0m14:40:06.277923 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize"
[0m14:40:06.283962 [debug] [Thread-3 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_medical_npi_normalize"
[0m14:40:06.288010 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.normalized_input__int_discharge_disposition_voting (compile): 14:40:06.260338 => 14:40:06.287740
[0m14:40:06.288837 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__int_diagnosis_code_normalize (compile): 14:40:06.224224 => 14:40:06.288642
[0m14:40:06.289237 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__int_medical_claim_date_normalize (compile): 14:40:06.270767 => 14:40:06.289035
[0m14:40:06.289553 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.normalized_input__int_discharge_disposition_voting
[0m14:40:06.290086 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.normalized_input__int_medical_npi_normalize (compile): 14:40:06.278125 => 14:40:06.289926
[0m14:40:06.290393 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.normalized_input__int_diagnosis_code_normalize
[0m14:40:06.291062 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.normalized_input__int_medical_claim_date_normalize
[0m14:40:06.295585 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_discharge_disposition_voting"
[0m14:40:06.296151 [debug] [Thread-3 (]: Began executing node model.the_tuva_project.normalized_input__int_medical_npi_normalize
[0m14:40:06.299586 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_diagnosis_code_normalize"
[0m14:40:06.303030 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize"
[0m14:40:06.307059 [debug] [Thread-3 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_medical_npi_normalize"
[0m14:40:06.308617 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_discharge_disposition_voting"
[0m14:40:06.309232 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_diagnosis_code_normalize"
[0m14:40:06.309664 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_voting: BEGIN
[0m14:40:06.310024 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize"
[0m14:40:06.310489 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_npi_normalize"
[0m14:40:06.310786 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_diagnosis_code_normalize: BEGIN
[0m14:40:06.311220 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m14:40:06.311653 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_medical_claim_date_normalize: BEGIN
[0m14:40:06.312036 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_medical_npi_normalize: BEGIN
[0m14:40:06.312431 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m14:40:06.451265 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:40:06.451709 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m14:40:06.452332 [debug] [Thread-3 (]: Opening a new connection, currently in state closed
[0m14:40:06.453286 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m14:40:06.453677 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_discharge_disposition_voting"
[0m14:40:06.454405 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:40:06.454923 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m14:40:06.455231 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_diagnosis_code_normalize"
[0m14:40:06.455794 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_discharge_disposition_voting"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_discharge_disposition_voting__dbt_tmp"
  
    as (
      


with  __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
), normalize as(
    select 
        med.claim_id
        , med.data_source
        , disch.discharge_disposition_code
    from __dbt__cte__normalized_input__stg_medical_claim med
    inner join "synthea"."terminology"."discharge_disposition" disch
        on med.discharge_disposition_code = disch.discharge_disposition_code
    where claim_type = 'institutional'
)
, distinct_counts as(
    select 
        claim_id
        , data_source
        , discharge_disposition_code
        , count(*) as discharge_disposition_occurrence_count
    from normalize
    where discharge_disposition_code is not null
    group by 
        claim_id
        , data_source
        , discharge_disposition_code
)

, occurence_comparison as(
    select
        claim_id
        , data_source
        , 'discharge_disposition_code' as column_name
        , discharge_disposition_code as normalized_code
        , discharge_disposition_occurrence_count as occurrence_count
        , coalesce(lead(discharge_disposition_occurrence_count) 
            over (partition by claim_id, data_source order by discharge_disposition_occurrence_count desc),0) as next_occurrence_count
        , row_number() over (partition by claim_id, data_source order by discharge_disposition_occurrence_count desc) as occurrence_row_count
    from distinct_counts dist
)

select
    claim_id
    , data_source
    , column_name
    , normalized_code
    , occurrence_count
    , next_occurrence_count
    , occurrence_row_count
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from occurence_comparison
    );
  
  
[0m14:40:06.456331 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize"
[0m14:40:06.456717 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_npi_normalize"
[0m14:40:06.457371 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_diagnosis_code_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_diagnosis_code_normalize"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_diagnosis_code_normalize__dbt_tmp"
  
    as (
      


with  __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
), pivot_diagnosis as(
    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_1'  as diagnosis_column
        ,  diagnosis_code_1  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_2'  as diagnosis_column
        ,  diagnosis_code_2  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_3'  as diagnosis_column
        ,  diagnosis_code_3  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_4'  as diagnosis_column
        ,  diagnosis_code_4  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_5'  as diagnosis_column
        ,  diagnosis_code_5  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_6'  as diagnosis_column
        ,  diagnosis_code_6  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_7'  as diagnosis_column
        ,  diagnosis_code_7  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_8'  as diagnosis_column
        ,  diagnosis_code_8  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_9'  as diagnosis_column
        ,  diagnosis_code_9  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_10'  as diagnosis_column
        ,  diagnosis_code_10  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_11'  as diagnosis_column
        ,  diagnosis_code_11  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_12'  as diagnosis_column
        ,  diagnosis_code_12  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_13'  as diagnosis_column
        ,  diagnosis_code_13  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_14'  as diagnosis_column
        ,  diagnosis_code_14  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_15'  as diagnosis_column
        ,  diagnosis_code_15  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_16'  as diagnosis_column
        ,  diagnosis_code_16  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_17'  as diagnosis_column
        ,  diagnosis_code_17  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_18'  as diagnosis_column
        ,  diagnosis_code_18  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_19'  as diagnosis_column
        ,  diagnosis_code_19  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_20'  as diagnosis_column
        ,  diagnosis_code_20  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_21'  as diagnosis_column
        ,  diagnosis_code_21  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_22'  as diagnosis_column
        ,  diagnosis_code_22  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_23'  as diagnosis_column
        ,  diagnosis_code_24  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_24'  as diagnosis_column
        ,  diagnosis_code_24  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , diagnosis_code_type
        , 'diagnosis_code_25'  as diagnosis_column
        ,  diagnosis_code_25  as diagnosis_code
    from __dbt__cte__normalized_input__stg_medical_claim
)

select
    claim_id
    , data_source
    , diagnosis_code_type
    , diagnosis_column
    , coalesce(icd_9.icd_9_cm,icd_10.icd_10_cm) as normalized_diagnosis_code
    , count(*) as diagnosis_code_occurrence_count
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from pivot_diagnosis piv
left join "synthea"."terminology"."icd_10_cm" icd_10
    on replace(piv.diagnosis_code,'.','') = icd_10.icd_10_cm
    and piv.diagnosis_code_type = 'icd-10-cm'
left join "synthea"."terminology"."icd_9_cm" icd_9
    on replace(piv.diagnosis_code,'.','') = icd_9.icd_9_cm
    and piv.diagnosis_code_type = 'icd-9-cm'
where claim_type <> 'undetermined'
group by 
    claim_id
    , data_source
    , diagnosis_code_type
    , diagnosis_column
    , coalesce(icd_9.icd_9_cm,icd_10.icd_10_cm)
    );
  
  
[0m14:40:06.458641 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_medical_claim_date_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_medical_claim_date_normalize__dbt_tmp"
  
    as (
      


with __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
) select distinct
  med.claim_id
  , med.claim_line_number
  , med.claim_type
  , med.data_source
  , cal_claim_start.full_date as normalized_claim_start_date
  , cal_claim_end.full_date as normalized_claim_end_date
  , cal_claim_line_start.full_date as normalized_claim_line_start_date
  , cal_claim_line_end.full_date as normalized_claim_line_end_date
  , cal_admission.full_date as normalized_admission_date
  , cal_discharge.full_date as normalized_discharge_date
  , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from __dbt__cte__normalized_input__stg_medical_claim med
left join "synthea"."terminology"."calendar" cal_claim_start
    on med.claim_start_date = cal_claim_start.full_date
left join "synthea"."terminology"."calendar" cal_claim_end
    on med.claim_end_Date = cal_claim_end.full_date
left join "synthea"."terminology"."calendar" cal_claim_line_start
    on med.claim_line_start_date = cal_claim_line_start.full_date
left join "synthea"."terminology"."calendar" cal_claim_line_end
    on med.claim_line_end_date = cal_claim_line_end.full_date
left join "synthea"."terminology"."calendar" cal_admission
    on med.admission_date = cal_admission.full_date
left join "synthea"."terminology"."calendar" cal_discharge
    on med.discharge_date = cal_discharge.full_date
    );
  
  
[0m14:40:06.459494 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_medical_npi_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_medical_npi_normalize"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_medical_npi_normalize__dbt_tmp"
  
    as (
      


with __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
) select distinct
  med.claim_id
  , med.claim_line_number
  , med.claim_type
  , med.data_source
  , rend_prov.npi as normalized_rendering_npi
  , bill_prov.npi as normalized_billing_npi
  , fac_prov.npi as normalized_facility_npi
  , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from __dbt__cte__normalized_input__stg_medical_claim med
left join "synthea"."terminology"."provider" rend_prov
    on med.rendering_npi = rend_prov.npi
    and rend_prov.entity_type_description = 'Individual'
left join "synthea"."terminology"."provider" bill_prov
    on med.billing_npi = bill_prov.npi
left join "synthea"."terminology"."provider" fac_prov
    on med.facility_npi = fac_prov.npi
    and fac_prov.entity_type_description = 'Organization'
    and med.claim_type = 'institutional'
    );
  
  
[0m14:41:22.430000 [debug] [Thread-4 (]: SQL status: OK in 76.0 seconds
[0m14:41:36.647736 [debug] [Thread-3 (]: SQL status: OK in 90.0 seconds
[0m14:41:36.654563 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_discharge_disposition_voting"
[0m14:41:36.655236 [debug] [Thread-2 (]: SQL status: OK in 90.0 seconds
[0m14:41:36.659251 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_npi_normalize"
[0m14:41:36.659938 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_discharge_disposition_voting"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_discharge_disposition_voting" rename to "_int_normalized_input_discharge_disposition_voting__dbt_backup"
[0m14:41:36.664329 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize"
[0m14:41:36.665053 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_medical_npi_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_medical_npi_normalize"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_medical_npi_normalize" rename to "_int_normalized_input_medical_npi_normalize__dbt_backup"
[0m14:41:36.665992 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_medical_claim_date_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_medical_claim_date_normalize" rename to "_int_normalized_input_medical_claim_date_normalize__dbt_backup"
[0m14:41:36.666742 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:41:36.669513 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_discharge_disposition_voting"
[0m14:41:36.669996 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:41:36.670326 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m14:41:36.670633 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_discharge_disposition_voting"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_discharge_disposition_voting__dbt_tmp" rename to "_int_normalized_input_discharge_disposition_voting"
[0m14:41:36.673279 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize"
[0m14:41:36.676386 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_npi_normalize"
[0m14:41:36.677302 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:41:36.677661 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_medical_claim_date_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_medical_claim_date_normalize__dbt_tmp" rename to "_int_normalized_input_medical_claim_date_normalize"
[0m14:41:36.678166 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_medical_npi_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_medical_npi_normalize"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_medical_npi_normalize__dbt_tmp" rename to "_int_normalized_input_medical_npi_normalize"
[0m14:41:36.680692 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_voting: COMMIT
[0m14:41:36.681619 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:41:36.682207 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m14:41:36.682530 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_discharge_disposition_voting"
[0m14:41:36.684431 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_medical_claim_date_normalize: COMMIT
[0m14:41:36.686122 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_medical_npi_normalize: COMMIT
[0m14:41:36.686657 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_voting: COMMIT
[0m14:41:36.687142 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize"
[0m14:41:36.687619 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_npi_normalize"
[0m14:41:36.688447 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_medical_claim_date_normalize: COMMIT
[0m14:41:36.689302 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_medical_npi_normalize: COMMIT
[0m14:41:36.689734 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:41:36.692950 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_discharge_disposition_voting"
[0m14:41:36.693529 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_discharge_disposition_voting"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_discharge_disposition_voting__dbt_backup" cascade
[0m14:41:36.711099 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:41:36.713668 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize"
[0m14:41:36.716770 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_medical_claim_date_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_medical_claim_date_normalize"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_medical_claim_date_normalize__dbt_backup" cascade
[0m14:41:36.723078 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m14:41:36.725559 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_npi_normalize"
[0m14:41:36.726011 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:41:36.726437 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:41:36.726829 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_medical_npi_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_medical_npi_normalize"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_medical_npi_normalize__dbt_backup" cascade
[0m14:41:36.729056 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__int_medical_claim_date_normalize (execute): 14:40:06.299961 => 14:41:36.728487
[0m14:41:36.730516 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.normalized_input__int_discharge_disposition_voting (execute): 14:40:06.291488 => 14:41:36.730360
[0m14:41:36.731526 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_medical_claim_date_normalize: Close
[0m14:41:36.731948 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m14:41:36.732433 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_voting: Close
[0m14:41:36.734320 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7d2d17d0>]}
[0m14:41:36.735842 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.normalized_input__int_medical_npi_normalize (execute): 14:40:06.303699 => 14:41:36.735653
[0m14:41:36.736710 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7597c110>]}
[0m14:41:36.738348 [info ] [Thread-2 (]: 39 of 307 OK created sql table model claims_preprocessing._int_normalized_input_medical_claim_date_normalize  [[32mOK[0m in 90.51s]
[0m14:41:36.738982 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_medical_npi_normalize: Close
[0m14:41:36.739890 [info ] [Thread-4 (]: 38 of 307 OK created sql table model claims_preprocessing._int_normalized_input_discharge_disposition_voting  [[32mOK[0m in 90.52s]
[0m14:41:36.740811 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.normalized_input__int_medical_claim_date_normalize
[0m14:41:36.741660 [debug] [Thread-3 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xfffee99d5590>]}
[0m14:41:36.742332 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.normalized_input__int_discharge_disposition_voting
[0m14:41:36.743101 [debug] [Thread-2 (]: Began running node model.the_tuva_project.normalized_input__int_ms_drg_voting
[0m14:41:36.744257 [info ] [Thread-3 (]: 40 of 307 OK created sql table model claims_preprocessing._int_normalized_input_medical_npi_normalize  [[32mOK[0m in 90.52s]
[0m14:41:36.745437 [debug] [Thread-4 (]: Began running node model.the_tuva_project.normalized_input__int_place_of_service_normalize
[0m14:41:36.746269 [info ] [Thread-2 (]: 41 of 307 START sql table model claims_preprocessing._int_normalized_input_ms_drg_voting  [RUN]
[0m14:41:36.746975 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.normalized_input__int_medical_npi_normalize
[0m14:41:36.747529 [info ] [Thread-4 (]: 42 of 307 START sql table model claims_preprocessing._int_normalized_input_place_of_service_normalize  [RUN]
[0m14:41:36.748465 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_medical_claim_date_normalize, now model.the_tuva_project.normalized_input__int_ms_drg_voting)
[0m14:41:36.749137 [debug] [Thread-3 (]: Began running node model.the_tuva_project.normalized_input__int_present_on_admit_normalize
[0m14:41:36.749808 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_discharge_disposition_voting, now model.the_tuva_project.normalized_input__int_place_of_service_normalize)
[0m14:41:36.750312 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.normalized_input__int_ms_drg_voting
[0m14:41:36.750831 [info ] [Thread-3 (]: 43 of 307 START sql table model claims_preprocessing._int_normalized_input_present_on_admit_normalize  [RUN]
[0m14:41:36.751297 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.normalized_input__int_place_of_service_normalize
[0m14:41:36.764371 [debug] [Thread-3 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_medical_npi_normalize, now model.the_tuva_project.normalized_input__int_present_on_admit_normalize)
[0m14:41:36.767088 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_ms_drg_voting"
[0m14:41:36.774542 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_place_of_service_normalize"
[0m14:41:36.775234 [debug] [Thread-3 (]: Began compiling node model.the_tuva_project.normalized_input__int_present_on_admit_normalize
[0m14:41:36.806990 [debug] [Thread-3 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_present_on_admit_normalize"
[0m14:41:36.807870 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__int_ms_drg_voting (compile): 14:41:36.751655 => 14:41:36.807561
[0m14:41:36.808508 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.normalized_input__int_place_of_service_normalize (compile): 14:41:36.767586 => 14:41:36.808265
[0m14:41:36.808965 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.normalized_input__int_ms_drg_voting
[0m14:41:36.809585 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.normalized_input__int_place_of_service_normalize
[0m14:41:36.810001 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.normalized_input__int_present_on_admit_normalize (compile): 14:41:36.776512 => 14:41:36.809836
[0m14:41:36.815176 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_ms_drg_voting"
[0m14:41:36.819383 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_place_of_service_normalize"
[0m14:41:36.820069 [debug] [Thread-3 (]: Began executing node model.the_tuva_project.normalized_input__int_present_on_admit_normalize
[0m14:41:36.824421 [debug] [Thread-3 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_present_on_admit_normalize"
[0m14:41:36.825903 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_place_of_service_normalize"
[0m14:41:36.826513 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_ms_drg_voting"
[0m14:41:36.826831 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_present_on_admit_normalize"
[0m14:41:36.827122 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_place_of_service_normalize: BEGIN
[0m14:41:36.827585 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_ms_drg_voting: BEGIN
[0m14:41:36.828018 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_present_on_admit_normalize: BEGIN
[0m14:41:36.828498 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m14:41:36.828928 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m14:41:36.829319 [debug] [Thread-3 (]: Opening a new connection, currently in state closed
[0m14:41:36.830126 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:41:36.830574 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:41:36.830889 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_place_of_service_normalize"
[0m14:41:36.831185 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m14:41:36.831593 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_ms_drg_voting"
[0m14:41:36.832148 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_place_of_service_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_place_of_service_normalize"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_place_of_service_normalize__dbt_tmp"
  
    as (
      


with __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
) select
    claim_id
    , claim_line_number
    , data_source
    , pos.place_of_service_code as normalized_code
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from __dbt__cte__normalized_input__stg_medical_claim med
left join "synthea"."terminology"."place_of_service" pos
    on lpad(med.place_of_service_code, 2, '0') = pos.place_of_service_code
where claim_type = 'professional'
    );
  
  
[0m14:41:36.832687 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_present_on_admit_normalize"
[0m14:41:36.833273 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_ms_drg_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_ms_drg_voting"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_ms_drg_voting__dbt_tmp"
  
    as (
      


with  __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
), normalize as(
    select 
        med.claim_id
        , med.data_source
        , ms.ms_drg_code
    from __dbt__cte__normalized_input__stg_medical_claim med
    inner join "synthea"."terminology"."ms_drg" ms
        on med.ms_drg_code = ms.ms_drg_code
    where claim_type = 'institutional'
)
, distinct_counts as(
    select 
        claim_id
        , data_source
        , ms_drg_code
        , count(*) as ms_drg_occurrence_count
    from normalize
    where ms_drg_code is not null
    group by 
        claim_id
        , data_source
        , ms_drg_code
)

, occurence_comparison as(
    select
        claim_id
        , data_source
        , 'ms_drg_code' as column_name
        , ms_drg_code as normalized_code
        , ms_drg_occurrence_count as occurrence_count
        , coalesce(lead(ms_drg_occurrence_count) 
            over (partition by claim_id, data_source order by ms_drg_occurrence_count desc),0) as next_occurrence_count
        , row_number() over (partition by claim_id, data_source order by ms_drg_occurrence_count desc) as occurrence_row_count
    from distinct_counts dist
)

select
    claim_id
    , data_source
    , column_name
    , normalized_code
    , occurrence_count
    , next_occurrence_count
    , occurrence_row_count
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from occurence_comparison
    );
  
  
[0m14:41:36.834299 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_present_on_admit_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_present_on_admit_normalize"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_present_on_admit_normalize__dbt_tmp"
  
    as (
      


with  __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
), pivot_poa as(
    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_1'  as diagnosis_column
        ,  diagnosis_poa_1  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_2'  as diagnosis_column
        ,  diagnosis_poa_2  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_3'  as diagnosis_column
        ,  diagnosis_poa_3  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_4'  as diagnosis_column
        ,  diagnosis_poa_4  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_5'  as diagnosis_column
        ,  diagnosis_poa_5  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_6'  as diagnosis_column
        ,  diagnosis_poa_6  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_7'  as diagnosis_column
        ,  diagnosis_poa_7  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_8'  as diagnosis_column
        ,  diagnosis_poa_8  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_9'  as diagnosis_column
        ,  diagnosis_poa_9  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_10'  as diagnosis_column
        ,  diagnosis_poa_10  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_11'  as diagnosis_column
        ,  diagnosis_poa_11  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_12'  as diagnosis_column
        ,  diagnosis_poa_12  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_13'  as diagnosis_column
        ,  diagnosis_poa_13  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_14'  as diagnosis_column
        ,  diagnosis_poa_14  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_15'  as diagnosis_column
        ,  diagnosis_poa_15  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_16'  as diagnosis_column
        ,  diagnosis_poa_16  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_17'  as diagnosis_column
        ,  diagnosis_poa_17  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_18'  as diagnosis_column
        ,  diagnosis_poa_18  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_19'  as diagnosis_column
        ,  diagnosis_poa_19  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_20'  as diagnosis_column
        ,  diagnosis_poa_20  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_21'  as diagnosis_column
        ,  diagnosis_poa_21  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_22'  as diagnosis_column
        ,  diagnosis_poa_22  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_23'  as diagnosis_column
        ,  diagnosis_poa_24  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_24'  as diagnosis_column
        ,  diagnosis_poa_24  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'diagnosis_poa_25'  as diagnosis_column
        ,  diagnosis_poa_25  as present_on_admit_code
    from __dbt__cte__normalized_input__stg_medical_claim
)

select
    claim_id
    , data_source
    , diagnosis_column
    , poa.present_on_admit_code as normalized_present_on_admit_code
    , count(*) as present_on_admit_occurrence_count
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from pivot_poa piv
left join "synthea"."terminology"."present_on_admission" poa
    on replace(piv.present_on_admit_code,'.','') = poa.present_on_admit_code
where claim_type = 'institutional'
group by 
    claim_id
    , data_source
    , diagnosis_column
    , poa.present_on_admit_code
    );
  
  
[0m14:42:04.060572 [debug] [Thread-2 (]: SQL status: OK in 27.0 seconds
[0m14:42:09.963132 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_ms_drg_voting"
[0m14:42:09.964527 [debug] [Thread-4 (]: SQL status: OK in 33.0 seconds
[0m14:42:09.965265 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_ms_drg_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_ms_drg_voting"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_ms_drg_voting" rename to "_int_normalized_input_ms_drg_voting__dbt_backup"
[0m14:42:09.970165 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_place_of_service_normalize"
[0m14:42:09.971468 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_place_of_service_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_place_of_service_normalize"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_place_of_service_normalize" rename to "_int_normalized_input_place_of_service_normalize__dbt_backup"
[0m14:42:09.972331 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:42:09.972914 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:42:09.975753 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_ms_drg_voting"
[0m14:42:09.978904 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_place_of_service_normalize"
[0m14:42:09.979543 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_ms_drg_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_ms_drg_voting"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_ms_drg_voting__dbt_tmp" rename to "_int_normalized_input_ms_drg_voting"
[0m14:42:09.980034 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_place_of_service_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_place_of_service_normalize"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_place_of_service_normalize__dbt_tmp" rename to "_int_normalized_input_place_of_service_normalize"
[0m14:42:09.980916 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:42:09.981404 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:42:09.983648 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_ms_drg_voting: COMMIT
[0m14:42:09.985807 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_place_of_service_normalize: COMMIT
[0m14:42:09.986394 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_ms_drg_voting"
[0m14:42:09.986851 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_place_of_service_normalize"
[0m14:42:09.987290 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_ms_drg_voting: COMMIT
[0m14:42:09.987726 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_place_of_service_normalize: COMMIT
[0m14:42:09.990515 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:42:09.993312 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_ms_drg_voting"
[0m14:42:09.993790 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_ms_drg_voting: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_ms_drg_voting"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_ms_drg_voting__dbt_backup" cascade
[0m14:42:09.997282 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:42:09.999876 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_place_of_service_normalize"
[0m14:42:10.000320 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:42:10.000646 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_place_of_service_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_place_of_service_normalize"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_place_of_service_normalize__dbt_backup" cascade
[0m14:42:10.002539 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__int_ms_drg_voting (execute): 14:41:36.810181 => 14:42:10.002188
[0m14:42:10.003554 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_ms_drg_voting: Close
[0m14:42:10.005116 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7da49d10>]}
[0m14:42:10.005558 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:42:10.006373 [info ] [Thread-2 (]: 41 of 307 OK created sql table model claims_preprocessing._int_normalized_input_ms_drg_voting  [[32mOK[0m in 33.26s]
[0m14:42:10.008260 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.normalized_input__int_place_of_service_normalize (execute): 14:41:36.815708 => 14:42:10.008066
[0m14:42:10.009024 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.normalized_input__int_ms_drg_voting
[0m14:42:10.009485 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_place_of_service_normalize: Close
[0m14:42:10.010081 [debug] [Thread-2 (]: Began running node model.the_tuva_project.normalized_input__int_procedure_code_normalize
[0m14:42:10.011232 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7d300350>]}
[0m14:42:10.012111 [info ] [Thread-2 (]: 44 of 307 START sql table model claims_preprocessing._int_normalized_input_procedure_code_normalize  [RUN]
[0m14:42:10.012934 [info ] [Thread-4 (]: 42 of 307 OK created sql table model claims_preprocessing._int_normalized_input_place_of_service_normalize  [[32mOK[0m in 33.26s]
[0m14:42:10.013832 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_ms_drg_voting, now model.the_tuva_project.normalized_input__int_procedure_code_normalize)
[0m14:42:10.014513 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.normalized_input__int_place_of_service_normalize
[0m14:42:10.014974 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.normalized_input__int_procedure_code_normalize
[0m14:42:10.015511 [debug] [Thread-4 (]: Began running node model.the_tuva_project.normalized_input__int_procedure_date_normalize
[0m14:42:10.027731 [info ] [Thread-4 (]: 45 of 307 START sql table model claims_preprocessing._int_normalized_input_procedure_date_normalize  [RUN]
[0m14:42:10.045784 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_place_of_service_normalize, now model.the_tuva_project.normalized_input__int_procedure_date_normalize)
[0m14:42:10.055551 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_procedure_code_normalize"
[0m14:42:10.056264 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.normalized_input__int_procedure_date_normalize
[0m14:42:10.083768 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__int_procedure_code_normalize (compile): 14:42:10.015840 => 14:42:10.083407
[0m14:42:10.088255 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_procedure_date_normalize"
[0m14:42:10.088917 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.normalized_input__int_procedure_code_normalize
[0m14:42:10.094984 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_procedure_code_normalize"
[0m14:42:10.096039 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.normalized_input__int_procedure_date_normalize (compile): 14:42:10.056963 => 14:42:10.095808
[0m14:42:10.096678 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.normalized_input__int_procedure_date_normalize
[0m14:42:10.101274 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_procedure_date_normalize"
[0m14:42:10.102653 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_procedure_code_normalize"
[0m14:42:10.103099 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_procedure_code_normalize: BEGIN
[0m14:42:10.103884 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_procedure_date_normalize"
[0m14:42:10.104590 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m14:42:10.105107 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_procedure_date_normalize: BEGIN
[0m14:42:10.106132 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m14:42:10.106973 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m14:42:10.107929 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m14:42:10.108350 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_procedure_code_normalize"
[0m14:42:10.109136 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_procedure_date_normalize"
[0m14:42:10.110390 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_procedure_code_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_procedure_code_normalize"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_procedure_code_normalize__dbt_tmp"
  
    as (
      


with  __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
), pivot_procedure as(
    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_1'  as procedure_column
        ,  procedure_code_1  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_2'  as procedure_column
        ,  procedure_code_2  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_3'  as procedure_column
        ,  procedure_code_3  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_4'  as procedure_column
        ,  procedure_code_4  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_5'  as procedure_column
        ,  procedure_code_5  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_6'  as procedure_column
        ,  procedure_code_6  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_7'  as procedure_column
        ,  procedure_code_7  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_8'  as procedure_column
        ,  procedure_code_8  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_9'  as procedure_column
        ,  procedure_code_9  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_10'  as procedure_column
        ,  procedure_code_10  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_11'  as procedure_column
        ,  procedure_code_11  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_12'  as procedure_column
        ,  procedure_code_12  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_13'  as procedure_column
        ,  procedure_code_13  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_14'  as procedure_column
        ,  procedure_code_14  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_15'  as procedure_column
        ,  procedure_code_15  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_16'  as procedure_column
        ,  procedure_code_16  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_17'  as procedure_column
        ,  procedure_code_17  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_18'  as procedure_column
        ,  procedure_code_18  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_19'  as procedure_column
        ,  procedure_code_19  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_20'  as procedure_column
        ,  procedure_code_20  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_21'  as procedure_column
        ,  procedure_code_21  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_22'  as procedure_column
        ,  procedure_code_22  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_23'  as procedure_column
        ,  procedure_code_24  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_24'  as procedure_column
        ,  procedure_code_24  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , procedure_code_type
        , 'procedure_code_25'  as procedure_column
        ,  procedure_code_25  as procedure_code
    from __dbt__cte__normalized_input__stg_medical_claim
)

select
    claim_id
    , data_source
    , procedure_code_type
    , procedure_column
    , coalesce(icd_9.icd_9_pcs,icd_10.icd_10_pcs) as normalized_procedure_code
    , count(*) as procedure_code_occurrence_count
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from pivot_procedure piv
left join "synthea"."terminology"."icd_10_pcs" icd_10
    on replace(piv.procedure_code,'.','') = icd_10.icd_10_pcs
    and piv.procedure_code_type = 'icd-10-pcs'
left join "synthea"."terminology"."icd_9_pcs" icd_9
    on replace(piv.procedure_code,'.','') = icd_9.icd_9_pcs
    and piv.procedure_code_type = 'icd-9-pcs'
where claim_type = 'institutional'
group by 
    claim_id
    , data_source
    , procedure_code_type
    , procedure_column
    , coalesce(icd_9.icd_9_pcs,icd_10.icd_10_pcs)
    );
  
  
[0m14:42:10.111832 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_procedure_date_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_procedure_date_normalize"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_procedure_date_normalize__dbt_tmp"
  
    as (
      


with  __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
), pivot_procedure as(
    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_1'  as procedure_column
        ,  procedure_date_1  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_2'  as procedure_column
        ,  procedure_date_2  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_3'  as procedure_column
        ,  procedure_date_3  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_4'  as procedure_column
        ,  procedure_date_4  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_5'  as procedure_column
        ,  procedure_date_5  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_6'  as procedure_column
        ,  procedure_date_6  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_7'  as procedure_column
        ,  procedure_date_7  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_8'  as procedure_column
        ,  procedure_date_8  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_9'  as procedure_column
        ,  procedure_date_9  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_10'  as procedure_column
        ,  procedure_date_10  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_11'  as procedure_column
        ,  procedure_date_11  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_12'  as procedure_column
        ,  procedure_date_12  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_13'  as procedure_column
        ,  procedure_date_13  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_14'  as procedure_column
        ,  procedure_date_14  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_15'  as procedure_column
        ,  procedure_date_15  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_16'  as procedure_column
        ,  procedure_date_16  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_17'  as procedure_column
        ,  procedure_date_17  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_18'  as procedure_column
        ,  procedure_date_18  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_19'  as procedure_column
        ,  procedure_date_19  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_20'  as procedure_column
        ,  procedure_date_20  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_21'  as procedure_column
        ,  procedure_date_21  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_22'  as procedure_column
        ,  procedure_date_22  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim


    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_23'  as procedure_column
        ,  procedure_date_24  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_24'  as procedure_column
        ,  procedure_date_24  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim

    union all

    select
        claim_id
        , claim_type
        , data_source
        , 'procedure_date_25'  as procedure_column
        ,  procedure_date_25  as procedure_date
    from __dbt__cte__normalized_input__stg_medical_claim
)

select
    claim_id
    , data_source
    , procedure_column
    , cal.full_date as procedure_date
    , count(*) as procedure_date_occurrence_count
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from pivot_procedure piv
left join "synthea"."terminology"."calendar" cal
    on piv.procedure_date = cal.full_date
where claim_type = 'institutional'
group by 
    claim_id
    , data_source
    , procedure_column
    , cal.full_date
    );
  
  
[0m15:17:07.420423 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.normalized_input__int_present_on_admit_normalize (execute): 14:41:36.820849 => 15:17:07.253062
[0m15:17:07.444225 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__int_procedure_code_normalize (execute): 14:42:10.089934 => 15:17:07.347401
[0m15:17:07.430480 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.normalized_input__int_procedure_date_normalize (execute): 14:42:10.097084 => 15:17:07.324389
[0m15:17:07.425056 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__int_diagnosis_code_normalize (execute): 14:40:06.296488 => 15:17:07.319237
[0m15:17:07.461514 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_present_on_admit_normalize: ROLLBACK
[0m15:17:07.464750 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_procedure_code_normalize: ROLLBACK
[0m15:17:07.466133 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_procedure_date_normalize: ROLLBACK
[0m15:17:07.468248 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_diagnosis_code_normalize: ROLLBACK
[0m15:17:07.542679 [debug] [Thread-1 (]: Failed to rollback 'model.the_tuva_project.normalized_input__int_diagnosis_code_normalize'
[0m15:17:07.544929 [debug] [Thread-3 (]: Failed to rollback 'model.the_tuva_project.normalized_input__int_present_on_admit_normalize'
[0m15:17:07.546846 [debug] [Thread-4 (]: Failed to rollback 'model.the_tuva_project.normalized_input__int_procedure_date_normalize'
[0m15:17:07.548662 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_diagnosis_code_normalize: Close
[0m15:17:07.539418 [debug] [Thread-2 (]: Failed to rollback 'model.the_tuva_project.normalized_input__int_procedure_code_normalize'
[0m15:17:07.550166 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_present_on_admit_normalize: Close
[0m15:17:07.551597 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_procedure_date_normalize: Close
[0m15:17:07.585479 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_procedure_code_normalize: Close
[0m15:17:07.601778 [debug] [Thread-1 (]: Runtime Error in model normalized_input__int_diagnosis_code_normalize (models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_diagnosis_code_normalize.sql)
  Out of Memory Error: failed to pin block of size 262KB (53.8GB/53.8GB used)
[0m15:17:07.616451 [debug] [Thread-3 (]: Runtime Error in model normalized_input__int_present_on_admit_normalize (models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_present_on_admit_normalize.sql)
  Out of Memory Error: failed to allocate data of size 1.0MB (53.8GB/53.8GB used)
[0m15:17:07.618779 [debug] [Thread-4 (]: Runtime Error in model normalized_input__int_procedure_date_normalize (models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_procedure_date_normalize.sql)
  Out of Memory Error: failed to pin block of size 262KB (53.8GB/53.8GB used)
[0m15:25:41.074242 [debug] [Thread-2 (]: Runtime Error in model normalized_input__int_procedure_code_normalize (models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_procedure_code_normalize.sql)
  Out of Memory Error: failed to allocate data of size 16KB (53.8GB/53.8GB used)
[0m15:25:41.097868 [debug] [Thread-3 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7d97c9d0>]}
[0m15:25:41.099837 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7d2cae90>]}
[0m15:25:41.102419 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7d6dd650>]}
[0m15:25:41.104332 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7e31f410>]}
[0m15:25:41.132549 [error] [Thread-1 (]: 37 of 307 ERROR creating sql table model claims_preprocessing._int_normalized_input_diagnosis_code_normalize  [[31mERROR[0m in 2734.86s]
[0m15:25:41.130761 [error] [Thread-3 (]: 43 of 307 ERROR creating sql table model claims_preprocessing._int_normalized_input_present_on_admit_normalize  [[31mERROR[0m in 2644.33s]
[0m15:25:41.134883 [error] [Thread-4 (]: 45 of 307 ERROR creating sql table model claims_preprocessing._int_normalized_input_procedure_date_normalize  [[31mERROR[0m in 2611.06s]
[0m15:25:41.135590 [error] [Thread-2 (]: 44 of 307 ERROR creating sql table model claims_preprocessing._int_normalized_input_procedure_code_normalize  [[31mERROR[0m in 2611.09s]
[0m15:25:41.142077 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.normalized_input__int_diagnosis_code_normalize
[0m15:25:41.143354 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.normalized_input__int_present_on_admit_normalize
[0m15:25:41.144165 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.normalized_input__int_procedure_date_normalize
[0m15:25:41.145252 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.normalized_input__int_procedure_code_normalize
[0m15:25:41.159159 [debug] [Thread-1 (]: Began running node model.the_tuva_project.normalized_input__int_revenue_center_normalize
[0m15:25:41.174161 [debug] [Thread-3 (]: Began running node model.the_tuva_project.normalized_input__int_undetermined_claim_type
[0m15:25:41.211270 [debug] [Thread-4 (]: Began running node model.the_tuva_project.quality_measures__stg_core__lab_result
[0m15:25:41.214661 [debug] [Thread-2 (]: Began running node model.the_tuva_project.quality_measures__stg_core__observation
[0m15:25:41.217392 [info ] [Thread-1 (]: 46 of 307 START sql table model claims_preprocessing._int_normalized_input_revenue_center_normalize  [RUN]
[0m15:25:41.218306 [info ] [Thread-3 (]: 47 of 307 START sql table model claims_preprocessing._int_normalized_input_undetermined_claim_type  [RUN]
[0m15:25:41.222178 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_procedure_date_normalize, now model.the_tuva_project.quality_measures__stg_core__lab_result)
[0m15:25:41.224254 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_procedure_code_normalize, now model.the_tuva_project.quality_measures__stg_core__observation)
[0m15:25:41.225289 [debug] [Thread-1 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_diagnosis_code_normalize, now model.the_tuva_project.normalized_input__int_revenue_center_normalize)
[0m15:25:41.226249 [debug] [Thread-3 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_present_on_admit_normalize, now model.the_tuva_project.normalized_input__int_undetermined_claim_type)
[0m15:25:41.228104 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.quality_measures__stg_core__lab_result
[0m15:25:41.229132 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.quality_measures__stg_core__observation
[0m15:25:41.229574 [debug] [Thread-1 (]: Began compiling node model.the_tuva_project.normalized_input__int_revenue_center_normalize
[0m15:25:41.230031 [debug] [Thread-3 (]: Began compiling node model.the_tuva_project.normalized_input__int_undetermined_claim_type
[0m15:25:41.371009 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.quality_measures__stg_core__lab_result"
[0m15:25:41.382143 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.quality_measures__stg_core__observation"
[0m15:25:41.404530 [debug] [Thread-1 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_revenue_center_normalize"
[0m15:25:41.421230 [debug] [Thread-3 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_undetermined_claim_type"
[0m15:25:41.422729 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.quality_measures__stg_core__lab_result (compile): 15:25:41.230883 => 15:25:41.422418
[0m15:25:41.424282 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.quality_measures__stg_core__observation (compile): 15:25:41.255372 => 15:25:41.424045
[0m15:25:41.425767 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.quality_measures__stg_core__lab_result
[0m15:25:41.426469 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.normalized_input__int_undetermined_claim_type (compile): 15:25:41.371367 => 15:25:41.426306
[0m15:25:41.427185 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.quality_measures__stg_core__observation
[0m15:25:41.427549 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__int_revenue_center_normalize (compile): 15:25:41.297948 => 15:25:41.427387
[0m15:25:41.428729 [debug] [Thread-4 (]: Began running node model.the_tuva_project.acute_inpatient__stg_eligibility
[0m15:25:41.430481 [debug] [Thread-3 (]: Began executing node model.the_tuva_project.normalized_input__int_undetermined_claim_type
[0m15:25:41.432327 [debug] [Thread-2 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators
[0m15:25:41.433720 [debug] [Thread-1 (]: Began executing node model.the_tuva_project.normalized_input__int_revenue_center_normalize
[0m15:25:41.436603 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.quality_measures__stg_core__lab_result, now model.the_tuva_project.acute_inpatient__stg_eligibility)
[0m15:25:41.468754 [debug] [Thread-3 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_undetermined_claim_type"
[0m15:25:41.462396 [info ] [Thread-2 (]: 48 of 307 START sql table model data_quality._int_claims_preprocessing_eligibility_denominators  [RUN]
[0m15:25:41.474052 [debug] [Thread-1 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_revenue_center_normalize"
[0m15:25:41.474762 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.acute_inpatient__stg_eligibility
[0m15:25:41.475856 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.quality_measures__stg_core__observation, now model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators)
[0m15:25:41.481466 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.acute_inpatient__stg_eligibility"
[0m15:25:41.482250 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators
[0m15:25:41.484157 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_undetermined_claim_type"
[0m15:25:41.484604 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_revenue_center_normalize"
[0m15:25:41.503275 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_undetermined_claim_type: BEGIN
[0m15:25:41.504944 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"
[0m15:25:41.505786 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.acute_inpatient__stg_eligibility (compile): 15:25:41.476852 => 15:25:41.505587
[0m15:25:41.506139 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_revenue_center_normalize: BEGIN
[0m15:25:41.508076 [debug] [Thread-3 (]: Opening a new connection, currently in state closed
[0m15:25:41.508793 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"} */

    select test_field
    from "synthea"."data_quality"."_value_set_test_catalog"
    where source_table = 'normalized_input__eligibility'
    and test_category = 'invalid_values'
  
[0m15:25:41.509672 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.acute_inpatient__stg_eligibility
[0m15:25:41.510217 [debug] [Thread-1 (]: Opening a new connection, currently in state closed
[0m15:25:41.626781 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.627807 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m15:25:41.629200 [debug] [Thread-4 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates
[0m15:25:41.630366 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_undetermined_claim_type"
[0m15:25:41.630807 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.631589 [info ] [Thread-4 (]: 49 of 307 START sql table model data_quality._int_claims_preprocessing_eligibility_duplicates  [RUN]
[0m15:25:41.632431 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_undetermined_claim_type: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_undetermined_claim_type"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_undetermined_claim_type__dbt_tmp"
  
    as (
      


with __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
) select
    claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from __dbt__cte__normalized_input__stg_medical_claim
where claim_type in ('undetermined')
    );
  
  
[0m15:25:41.633461 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_revenue_center_normalize"
[0m15:25:41.634255 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.acute_inpatient__stg_eligibility, now model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates)
[0m15:25:41.634856 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.635708 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_revenue_center_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_revenue_center_normalize"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_revenue_center_normalize__dbt_tmp"
  
    as (
      


with __dbt__cte__normalized_input__stg_medical_claim as (


select
      claim_id
    , claim_line_number
    , claim_type
    , patient_id
    , member_id
    , payer
    , plan
    , claim_start_date
    , claim_end_date
    , claim_line_start_date
    , claim_line_end_date
    , admission_date
    , discharge_date
    , admit_source_code
    , admit_type_code
    , discharge_disposition_code
    , place_of_service_code
    , bill_type_code
    , ms_drg_code
    , apr_drg_code
    , revenue_center_code
    , service_unit_quantity
    , hcpcs_code
    , hcpcs_modifier_1
    , hcpcs_modifier_2
    , hcpcs_modifier_3
    , hcpcs_modifier_4
    , hcpcs_modifier_5
    , rendering_npi
    , billing_npi
    , facility_npi
    , paid_date
    , paid_amount
    , allowed_amount
    , charge_amount
    , coinsurance_amount
    , copayment_amount
    , deductible_amount
    , total_cost_amount
    , diagnosis_code_type
    , diagnosis_code_1
    , diagnosis_code_2
    , diagnosis_code_3
    , diagnosis_code_4
    , diagnosis_code_5
    , diagnosis_code_6
    , diagnosis_code_7
    , diagnosis_code_8
    , diagnosis_code_9
    , diagnosis_code_10
    , diagnosis_code_11
    , diagnosis_code_12
    , diagnosis_code_13
    , diagnosis_code_14
    , diagnosis_code_15
    , diagnosis_code_16
    , diagnosis_code_17
    , diagnosis_code_18
    , diagnosis_code_19
    , diagnosis_code_20
    , diagnosis_code_21
    , diagnosis_code_22
    , diagnosis_code_23
    , diagnosis_code_24
    , diagnosis_code_25
    , diagnosis_poa_1
    , diagnosis_poa_2
    , diagnosis_poa_3
    , diagnosis_poa_4
    , diagnosis_poa_5
    , diagnosis_poa_6
    , diagnosis_poa_7
    , diagnosis_poa_8
    , diagnosis_poa_9
    , diagnosis_poa_10
    , diagnosis_poa_11
    , diagnosis_poa_12
    , diagnosis_poa_13
    , diagnosis_poa_14
    , diagnosis_poa_15
    , diagnosis_poa_16
    , diagnosis_poa_17
    , diagnosis_poa_18
    , diagnosis_poa_19
    , diagnosis_poa_20
    , diagnosis_poa_21
    , diagnosis_poa_22
    , diagnosis_poa_23
    , diagnosis_poa_24
    , diagnosis_poa_25
    , procedure_code_type
    , procedure_code_1
    , procedure_code_2
    , procedure_code_3
    , procedure_code_4
    , procedure_code_5
    , procedure_code_6
    , procedure_code_7
    , procedure_code_8
    , procedure_code_9
    , procedure_code_10
    , procedure_code_11
    , procedure_code_12
    , procedure_code_13
    , procedure_code_14
    , procedure_code_15
    , procedure_code_16
    , procedure_code_17
    , procedure_code_18
    , procedure_code_19
    , procedure_code_20
    , procedure_code_21
    , procedure_code_22
    , procedure_code_23
    , procedure_code_24
    , procedure_code_25
    , procedure_date_1
    , procedure_date_2
    , procedure_date_3
    , procedure_date_4
    , procedure_date_5
    , procedure_date_6
    , procedure_date_7
    , procedure_date_8
    , procedure_date_9
    , procedure_date_10
    , procedure_date_11
    , procedure_date_12
    , procedure_date_13
    , procedure_date_14
    , procedure_date_15
    , procedure_date_16
    , procedure_date_17
    , procedure_date_18
    , procedure_date_19
    , procedure_date_20
    , procedure_date_21
    , procedure_date_22
    , procedure_date_23
    , procedure_date_24
    , procedure_date_25
    , data_source
from "synthea"."tuva_input"."medical_claim"
) select
    claim_id
    , claim_line_number
    , data_source
    , rev.revenue_center_code as normalized_code
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from __dbt__cte__normalized_input__stg_medical_claim med
left join "synthea"."terminology"."revenue_center" rev
    on lpad(med.revenue_center_code, 4, '0') = rev.revenue_center_code
where claim_type = 'institutional'
    );
  
  
[0m15:25:41.636560 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates
[0m15:25:41.651242 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates"
[0m15:25:41.681013 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"
[0m15:25:41.682722 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates (compile): 15:25:41.639293 => 15:25:41.682257
[0m15:25:41.683526 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates
[0m15:25:41.689004 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates"
[0m15:25:41.689737 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators (compile): 15:25:41.485182 => 15:25:41.689420
[0m15:25:41.690333 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators
[0m15:25:41.698213 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"
[0m15:25:41.698987 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates"
[0m15:25:41.699775 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates: BEGIN
[0m15:25:41.700442 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m15:25:41.700907 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"
[0m15:25:41.701939 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.702309 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators: BEGIN
[0m15:25:41.702768 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates"
[0m15:25:41.703334 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.703838 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates"} */

  
    
    

    create  table
      "synthea"."data_quality"."_int_claims_preprocessing_eligibility_duplicates__dbt_tmp"
  
    as (
      

with eligibility as (

    select
          patient_id
        , member_id
        , payer
        , plan
        , enrollment_start_date
        , enrollment_end_date
        , data_source
    from "synthea"."claims_preprocessing"."normalized_input_eligibility"

)

, test_catalog as (

    select
          source_table
        , test_category
        , test_name
        , pipeline_test
    from "synthea"."data_quality"."_value_set_test_catalog"

)

select distinct
      test_catalog.source_table
    , 'all' as claim_type
    , 'patient_id' as grain
    , patient_id
    , data_source
    , test_catalog.test_category
    , test_catalog.test_name
    , test_catalog.pipeline_test
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from eligibility
     left join test_catalog
       on test_catalog.test_name = 'duplicate eligibility'
       and test_catalog.source_table = 'normalized_input__eligibility'
group by
      eligibility.patient_id
    , eligibility.member_id
    , eligibility.payer
    , eligibility.plan
    , eligibility.enrollment_start_date
    , eligibility.enrollment_end_date
    , eligibility.data_source
    , test_catalog.source_table
    , test_catalog.test_category
    , test_catalog.test_name
    , test_catalog.pipeline_test
having count(*) > 1
    );
  
  
[0m15:25:41.704334 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"
[0m15:25:41.705129 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"} */

  
    
    

    create  table
      "synthea"."data_quality"."_int_claims_preprocessing_eligibility_denominators__dbt_tmp"
  
    as (
      
/*
    Denominator logic for invalid value tests is dependent on whether that
    specific field is populated or not. We created a macro to automatically
    generate the CTE. All invalid value tests must have a
    test_category = 'invalid_values' in the catalog seed.
*/
with all_denominator as (

    select
        cast('all' as TEXT ) as test_denominator_name
        , count(distinct patient_id) as denominator
        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
    from "synthea"."claims_preprocessing"."normalized_input_eligibility"

)

, invalid_value_denominators as (

    select
          cat.test_name
        , count(distinct rel.patient_id) as denominator
        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
    from "synthea"."claims_preprocessing"."normalized_input_eligibility" as rel
         left join "synthea"."data_quality"."_value_set_test_catalog" as cat
           on cat.test_category = 'invalid_values'
           and cat.source_table = 'normalized_input__eligibility'
           and cat.test_field = 'dual_status_code'
    where rel.dual_status_code is not null
    group by cat.test_name
    union all
    select
          cat.test_name
        , count(distinct rel.patient_id) as denominator
        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
    from "synthea"."claims_preprocessing"."normalized_input_eligibility" as rel
         left join "synthea"."data_quality"."_value_set_test_catalog" as cat
           on cat.test_category = 'invalid_values'
           and cat.source_table = 'normalized_input__eligibility'
           and cat.test_field = 'gender'
    where rel.gender is not null
    group by cat.test_name
    union all
    select
          cat.test_name
        , count(distinct rel.patient_id) as denominator
        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
    from "synthea"."claims_preprocessing"."normalized_input_eligibility" as rel
         left join "synthea"."data_quality"."_value_set_test_catalog" as cat
           on cat.test_category = 'invalid_values'
           and cat.source_table = 'normalized_input__eligibility'
           and cat.test_field = 'medicare_status_code'
    where rel.medicare_status_code is not null
    group by cat.test_name
    union all
    select
          cat.test_name
        , count(distinct rel.patient_id) as denominator
        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
    from "synthea"."claims_preprocessing"."normalized_input_eligibility" as rel
         left join "synthea"."data_quality"."_value_set_test_catalog" as cat
           on cat.test_category = 'invalid_values'
           and cat.source_table = 'normalized_input__eligibility'
           and cat.test_field = 'original_reason_entitlement_code'
    where rel.original_reason_entitlement_code is not null
    group by cat.test_name
    union all
    select
          cat.test_name
        , count(distinct rel.patient_id) as denominator
        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
    from "synthea"."claims_preprocessing"."normalized_input_eligibility" as rel
         left join "synthea"."data_quality"."_value_set_test_catalog" as cat
           on cat.test_category = 'invalid_values'
           and cat.source_table = 'normalized_input__eligibility'
           and cat.test_field = 'payer_type'
    where rel.payer_type is not null
    group by cat.test_name
    union all
    select
          cat.test_name
        , count(distinct rel.patient_id) as denominator
        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
    from "synthea"."claims_preprocessing"."normalized_input_eligibility" as rel
         left join "synthea"."data_quality"."_value_set_test_catalog" as cat
           on cat.test_category = 'invalid_values'
           and cat.source_table = 'normalized_input__eligibility'
           and cat.test_field = 'race'
    where rel.race is not null
    group by cat.test_name
    

)

select * from all_denominator
union all
select * from invalid_value_denominators
    );
  
  
[0m15:25:41.724097 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.725100 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.737302 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates"
[0m15:25:41.740231 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"
[0m15:25:41.741063 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_eligibility_duplicates" rename to "_int_claims_preprocessing_eligibility_duplicates__dbt_backup"
[0m15:25:41.741686 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_eligibility_denominators" rename to "_int_claims_preprocessing_eligibility_denominators__dbt_backup"
[0m15:25:41.742872 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.743355 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.746263 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates"
[0m15:25:41.749454 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"
[0m15:25:41.750137 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_eligibility_duplicates__dbt_tmp" rename to "_int_claims_preprocessing_eligibility_duplicates"
[0m15:25:41.750800 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_eligibility_denominators__dbt_tmp" rename to "_int_claims_preprocessing_eligibility_denominators"
[0m15:25:41.751726 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.752305 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.755914 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates: COMMIT
[0m15:25:41.758447 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators: COMMIT
[0m15:25:41.759109 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates"
[0m15:25:41.759569 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"
[0m15:25:41.760058 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates: COMMIT
[0m15:25:41.760504 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators: COMMIT
[0m15:25:41.761798 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.762332 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.765843 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates"
[0m15:25:41.769276 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"
[0m15:25:41.770042 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates"} */
drop table if exists "synthea"."data_quality"."_int_claims_preprocessing_eligibility_duplicates__dbt_backup" cascade
[0m15:25:41.770751 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators"} */
drop table if exists "synthea"."data_quality"."_int_claims_preprocessing_eligibility_denominators__dbt_backup" cascade
[0m15:25:41.772339 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.774546 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates (execute): 15:25:41.683947 => 15:25:41.774347
[0m15:25:41.775200 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.775606 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates: Close
[0m15:25:41.776900 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators (execute): 15:25:41.690803 => 15:25:41.776749
[0m15:25:41.777907 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7d351410>]}
[0m15:25:41.778525 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators: Close
[0m15:25:41.779517 [info ] [Thread-4 (]: 49 of 307 OK created sql table model data_quality._int_claims_preprocessing_eligibility_duplicates  [[32mOK[0m in 0.14s]
[0m15:25:41.780492 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff758f8250>]}
[0m15:25:41.782562 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates
[0m15:25:41.783269 [info ] [Thread-2 (]: 48 of 307 OK created sql table model data_quality._int_claims_preprocessing_eligibility_denominators  [[32mOK[0m in 0.30s]
[0m15:25:41.784230 [debug] [Thread-4 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values
[0m15:25:41.785127 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators
[0m15:25:41.785945 [info ] [Thread-4 (]: 50 of 307 START sql table model data_quality._int_claims_preprocessing_eligibility_invalid_values  [RUN]
[0m15:25:41.787018 [debug] [Thread-2 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values
[0m15:25:41.787879 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.data_quality__claims_preprocessing_eligibility_duplicates, now model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values)
[0m15:25:41.788486 [info ] [Thread-2 (]: 51 of 307 START sql table model data_quality._int_claims_preprocessing_eligibility_missing_values  [RUN]
[0m15:25:41.789065 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values
[0m15:25:41.789944 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.data_quality__claims_preprocessing_eligibility_denominators, now model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values)
[0m15:25:41.803874 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"
[0m15:25:41.805003 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values
[0m15:25:41.817697 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values"
[0m15:25:41.818512 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values (compile): 15:25:41.790449 => 15:25:41.818252
[0m15:25:41.819387 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values
[0m15:25:41.824215 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"
[0m15:25:41.824790 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values (compile): 15:25:41.805988 => 15:25:41.824543
[0m15:25:41.825517 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values
[0m15:25:41.830953 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values"
[0m15:25:41.831740 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"
[0m15:25:41.832931 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values: BEGIN
[0m15:25:41.833470 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m15:25:41.834046 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values"
[0m15:25:41.834783 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.835203 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values: BEGIN
[0m15:25:41.835837 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"
[0m15:25:41.836484 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m15:25:41.837189 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"} */

  
    
    

    create  table
      "synthea"."data_quality"."_int_claims_preprocessing_eligibility_invalid_values__dbt_tmp"
  
    as (
      

with eligiblity as (

    select *
    from "synthea"."claims_preprocessing"."normalized_input_eligibility"

)

, test_catalog as (

    select
          source_table
        , test_category
        , test_name
        , pipeline_test
    from "synthea"."data_quality"."_value_set_test_catalog"

)

, valid_gender as (

    select
          test_catalog.test_name
        , test_catalog.pipeline_test
        , test_catalog.source_table
        , 'all' as claim_type
        , test_catalog.test_category
        , 'patient_id' as grain
        , eligiblity.patient_id
        , eligiblity.data_source
        , eligiblity.gender
        , count(eligiblity.gender) as filled_row_count
        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
    from eligiblity
         left join "synthea"."terminology"."gender" gender
           on eligiblity.gender = gender.gender
         left join test_catalog
           on test_catalog.test_name = 'gender invalid'
           and test_catalog.source_table = 'normalized_input__eligibility'
    where gender.gender is null
    and eligiblity.gender is not null
    group by
          eligiblity.patient_id
        , eligiblity.data_source
        , eligiblity.gender
        , test_catalog.source_table
        , test_catalog.test_category
        , test_catalog.test_name
        , test_catalog.pipeline_test

)

, valid_race as (

    select
          test_catalog.test_name
        , test_catalog.pipeline_test
        , test_catalog.source_table
        , 'all' as claim_type
        , test_catalog.test_category
        , 'patient_id' as grain
        , eligiblity.patient_id
        , eligiblity.data_source
        , eligiblity.race
        , count(eligiblity.race) as filled_row_count
        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
    from eligiblity
         left join "synthea"."terminology"."race" race
           on eligiblity.race = race.description
         left join test_catalog
           on test_catalog.test_name = 'race invalid'
           and test_catalog.source_table = 'normalized_input__eligibility'
    where race.description is null
    and eligiblity.race is not null
    group by
          eligiblity.patient_id
        , eligiblity.data_source
        , eligiblity.race
        , test_catalog.source_table
        , test_catalog.test_category
        , test_catalog.test_name
        , test_catalog.pipeline_test

)

, valid_payer_type as (

    select
          test_catalog.test_name
        , test_catalog.pipeline_test
        , test_catalog.source_table
        , 'all' as claim_type
        , test_catalog.test_category
        , 'patient_id' as grain
        , eligiblity.patient_id
        , eligiblity.data_source
        , eligiblity.payer_type
        , count(eligiblity.payer_type) as filled_row_count
        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
    from eligiblity
         left join "synthea"."terminology"."payer_type" payer
           on eligiblity.payer_type = payer.payer_type
         left join test_catalog
           on test_catalog.test_name = 'payer_type invalid'
           and test_catalog.source_table = 'normalized_input__eligibility'
    where payer.payer_type is null
    and eligiblity.payer_type is not null
    group by
          eligiblity.patient_id
        , eligiblity.data_source
        , eligiblity.payer_type
        , test_catalog.source_table
        , test_catalog.test_category
        , test_catalog.test_name
        , test_catalog.pipeline_test

)

, valid_orec as (

    select
          test_catalog.test_name
        , test_catalog.pipeline_test
        , test_catalog.source_table
        , 'all' as claim_type
        , test_catalog.test_category
        , 'patient_id' as grain
        , eligiblity.patient_id
        , eligiblity.data_source
        , eligiblity.original_reason_entitlement_code
        , count(eligiblity.original_reason_entitlement_code) as filled_row_count
        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
    from eligiblity
         left join "synthea"."terminology"."medicare_orec" orec
           on eligiblity.original_reason_entitlement_code = orec.original_reason_entitlement_code
         left join test_catalog
           on test_catalog.test_name = 'original_reason_entitlement_code invalid'
           and test_catalog.source_table = 'normalized_input__eligibility'
    where orec.original_reason_entitlement_code is null
    and eligiblity.original_reason_entitlement_code is not null
    group by
          eligiblity.patient_id
        , eligiblity.data_source
        , eligiblity.original_reason_entitlement_code
        , test_catalog.source_table
        , test_catalog.test_category
        , test_catalog.test_name
        , test_catalog.pipeline_test

)

, valid_dual_status_code as (

    select
          test_catalog.test_name
        , test_catalog.pipeline_test
        , test_catalog.source_table
        , 'all' as claim_type
        , test_catalog.test_category
        , 'patient_id' as grain
        , eligiblity.patient_id
        , eligiblity.data_source
        , eligiblity.dual_status_code
        , count(eligiblity.dual_status_code) as filled_row_count
        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
    from eligiblity
         left join "synthea"."terminology"."medicare_dual_eligibility" dual
           on eligiblity.dual_status_code = dual.dual_status_code
         left join test_catalog
           on test_catalog.test_name = 'dual_status_code invalid'
           and test_catalog.source_table = 'normalized_input__eligibility'
    where dual.dual_status_code is null
    and eligiblity.dual_status_code is not null
    group by
          eligiblity.patient_id
        , eligiblity.data_source
        , eligiblity.dual_status_code
        , test_catalog.source_table
        , test_catalog.test_category
        , test_catalog.test_name
        , test_catalog.pipeline_test

)

, valid_medicare_status_code as (

    select
          test_catalog.test_name
        , test_catalog.pipeline_test
        , test_catalog.source_table
        , 'all' as claim_type
        , test_catalog.test_category
        , 'patient_id' as grain
        , eligiblity.patient_id
        , eligiblity.data_source
        , eligiblity.medicare_status_code
        , count(eligiblity.medicare_status_code) as filled_row_count
        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
    from eligiblity
         left join "synthea"."terminology"."medicare_status" status
           on eligiblity.medicare_status_code = status.medicare_status_code
         left join test_catalog
           on test_catalog.test_name = 'medicare_status_code invalid'
           and test_catalog.source_table = 'normalized_input__eligibility'
    where status.medicare_status_code is null
    and eligiblity.medicare_status_code is not null
    group by
          eligiblity.patient_id
        , eligiblity.data_source
        , eligiblity.medicare_status_code
        , test_catalog.source_table
        , test_catalog.test_category
        , test_catalog.test_name
        , test_catalog.pipeline_test

)

select * from valid_gender
union all
select * from valid_race
union all
select * from valid_payer_type
union all
select * from valid_orec
union all
select * from valid_dual_status_code
union all
select * from valid_medicare_status_code
    );
  
  
[0m15:25:41.838003 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.838485 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values"
[0m15:25:41.839077 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values"} */

  
    
    

    create  table
      "synthea"."data_quality"."_int_claims_preprocessing_eligibility_missing_values__dbt_tmp"
  
    as (
      

with eligibility_missing as (

 
        select
              patient_id
            , data_source
            , 'patient_id' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where patient_id is null
        union all
        select
              patient_id
            , data_source
            , 'member_id' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where member_id is null
        union all
        select
              patient_id
            , data_source
            , 'gender' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where gender is null
        union all
        select
              patient_id
            , data_source
            , 'race' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where race is null
        union all
        select
              patient_id
            , data_source
            , 'birth_date' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where birth_date is null
        union all
        select
              patient_id
            , data_source
            , 'death_date' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where death_date is null
        union all
        select
              patient_id
            , data_source
            , 'death_flag' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where death_flag is null
        union all
        select
              patient_id
            , data_source
            , 'enrollment_start_date' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where enrollment_start_date is null
        union all
        select
              patient_id
            , data_source
            , 'enrollment_end_date' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where enrollment_end_date is null
        union all
        select
              patient_id
            , data_source
            , 'payer' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where payer is null
        union all
        select
              patient_id
            , data_source
            , 'payer_type' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where payer_type is null
        union all
        select
              patient_id
            , data_source
            , 'dual_status_code' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where dual_status_code is null
        union all
        select
              patient_id
            , data_source
            , 'medicare_status_code' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where medicare_status_code is null
        union all
        select
              patient_id
            , data_source
            , 'first_name' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where first_name is null
        union all
        select
              patient_id
            , data_source
            , 'last_name' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where last_name is null
        union all
        select
              patient_id
            , data_source
            , 'address' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where address is null
        union all
        select
              patient_id
            , data_source
            , 'city' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where city is null
        union all
        select
              patient_id
            , data_source
            , 'state' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where state is null
        union all
        select
              patient_id
            , data_source
            , 'zip_code' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where zip_code is null
        union all
        select
              patient_id
            , data_source
            , 'phone' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where phone is null
        union all
        select
              patient_id
            , data_source
            , 'data_source' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_eligibility"
        where data_source is null
        

)

, test_catalog as (

    select
          source_table
        , test_category
        , test_name
        , pipeline_test
    from "synthea"."data_quality"."_value_set_test_catalog"

)

select
      test_catalog.source_table
    , 'all' as claim_type
    , 'patient_id' as grain
    , eligibility_missing.patient_id
    , eligibility_missing.data_source
    , test_catalog.test_category
    , test_catalog.test_name
    , test_catalog.pipeline_test
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from eligibility_missing
     left join test_catalog
       on test_catalog.test_name = eligibility_missing.column_checked||' missing'
       and test_catalog.source_table = 'normalized_input__eligibility'
group by
      eligibility_missing.patient_id
    , eligibility_missing.data_source
    , test_catalog.source_table
    , test_catalog.test_category
    , test_catalog.test_name
    , test_catalog.pipeline_test
    );
  
  
[0m15:25:41.848833 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.852575 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values"
[0m15:25:41.854146 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_eligibility_missing_values" rename to "_int_claims_preprocessing_eligibility_missing_values__dbt_backup"
[0m15:25:41.855226 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.858377 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values"
[0m15:25:41.858906 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_eligibility_missing_values__dbt_tmp" rename to "_int_claims_preprocessing_eligibility_missing_values"
[0m15:25:41.859539 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.862204 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"
[0m15:25:41.862579 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.863079 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_eligibility_invalid_values" rename to "_int_claims_preprocessing_eligibility_invalid_values__dbt_backup"
[0m15:25:41.864543 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values: COMMIT
[0m15:25:41.865589 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values"
[0m15:25:41.866021 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.866412 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values: COMMIT
[0m15:25:41.869497 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"
[0m15:25:41.870375 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_eligibility_invalid_values__dbt_tmp" rename to "_int_claims_preprocessing_eligibility_invalid_values"
[0m15:25:41.871237 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.873134 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values: COMMIT
[0m15:25:41.873591 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.873981 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"
[0m15:25:41.876616 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values"
[0m15:25:41.877261 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values: COMMIT
[0m15:25:41.877828 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values"} */
drop table if exists "synthea"."data_quality"."_int_claims_preprocessing_eligibility_missing_values__dbt_backup" cascade
[0m15:25:41.879743 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.882176 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"
[0m15:25:41.882915 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.883557 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values"} */
drop table if exists "synthea"."data_quality"."_int_claims_preprocessing_eligibility_invalid_values__dbt_backup" cascade
[0m15:25:41.885028 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values (execute): 15:25:41.825976 => 15:25:41.884818
[0m15:25:41.885874 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values: Close
[0m15:25:41.886750 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7d3265d0>]}
[0m15:25:41.887175 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.887669 [info ] [Thread-2 (]: 51 of 307 OK created sql table model data_quality._int_claims_preprocessing_eligibility_missing_values  [[32mOK[0m in 0.10s]
[0m15:25:41.888998 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values (execute): 15:25:41.820065 => 15:25:41.888829
[0m15:25:41.889556 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values
[0m15:25:41.890017 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values: Close
[0m15:25:41.890598 [debug] [Thread-2 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility
[0m15:25:41.891623 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff758f8750>]}
[0m15:25:41.892228 [info ] [Thread-2 (]: 52 of 307 START sql table model data_quality._int_claims_preprocessing_eligibility_plausibility  [RUN]
[0m15:25:41.892853 [info ] [Thread-4 (]: 50 of 307 OK created sql table model data_quality._int_claims_preprocessing_eligibility_invalid_values  [[32mOK[0m in 0.10s]
[0m15:25:41.893576 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.data_quality__claims_preprocessing_eligibility_missing_values, now model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility)
[0m15:25:41.894296 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values
[0m15:25:41.894779 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility
[0m15:25:41.895765 [debug] [Thread-4 (]: Began running node model.the_tuva_project.emergency_department__stg_eligibility
[0m15:25:41.903329 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility"
[0m15:25:41.904324 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.data_quality__claims_preprocessing_eligibility_invalid_values, now model.the_tuva_project.emergency_department__stg_eligibility)
[0m15:25:41.905576 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.emergency_department__stg_eligibility
[0m15:25:41.910385 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.emergency_department__stg_eligibility"
[0m15:25:41.911128 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility (compile): 15:25:41.896093 => 15:25:41.910913
[0m15:25:41.911709 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility
[0m15:25:41.916292 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility"
[0m15:25:41.917330 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.emergency_department__stg_eligibility (compile): 15:25:41.905995 => 15:25:41.917057
[0m15:25:41.918324 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.emergency_department__stg_eligibility
[0m15:25:41.918951 [debug] [Thread-4 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates
[0m15:25:41.919901 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility"
[0m15:25:41.919572 [info ] [Thread-4 (]: 53 of 307 START sql table model data_quality._int_claims_preprocessing_pharmacy_claim_duplicates  [RUN]
[0m15:25:41.920364 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility: BEGIN
[0m15:25:41.921026 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.emergency_department__stg_eligibility, now model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates)
[0m15:25:41.921483 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m15:25:41.921889 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates
[0m15:25:41.928495 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.930422 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates"
[0m15:25:41.931059 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility"
[0m15:25:41.932642 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility"} */

  
    
    

    create  table
      "synthea"."data_quality"."_int_claims_preprocessing_eligibility_plausibility__dbt_tmp"
  
    as (
      

with eligiblity as (

    select *
    from "synthea"."claims_preprocessing"."normalized_input_eligibility"

)

, test_catalog as (

    select
          source_table
        , test_category
        , test_name
        , pipeline_test
    from "synthea"."data_quality"."_value_set_test_catalog"

)

, multiple_genders_test as (

    select
          test_catalog.test_name
        , test_catalog.pipeline_test
        , test_catalog.source_table
        , 'all' as claim_type
        , test_catalog.test_category
        , 'patient_id' as grain
        , eligiblity.patient_id
        , eligiblity.data_source
        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
    from eligiblity
         left join test_catalog
           on test_catalog.test_name = 'multiple genders'
           and test_catalog.source_table = 'normalized_input__eligibility'
    group by
          eligiblity.patient_id
        , eligiblity.data_source
        , test_catalog.source_table
        , test_catalog.test_category
        , test_catalog.test_name
        , test_catalog.pipeline_test
    having count(distinct eligiblity.gender) > 1

)

, multiple_races_test as(

    select
          test_catalog.test_name
        , test_catalog.pipeline_test
        , test_catalog.source_table
        , 'all' as claim_type
        , test_catalog.test_category
        , 'patient_id' as grain
        , eligiblity.patient_id
        , eligiblity.data_source
        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
    from eligiblity
         left join test_catalog
           on test_catalog.test_name = 'multiple races'
           and test_catalog.source_table = 'normalized_input__eligibility'
    group by
          eligiblity.patient_id
        , eligiblity.data_source
        , test_catalog.source_table
        , test_catalog.test_category
        , test_catalog.test_name
        , test_catalog.pipeline_test
    having count(distinct eligiblity.race) > 1

)

, multiple_birth_dates_test as(

    select
          test_catalog.test_name
        , test_catalog.pipeline_test
        , test_catalog.source_table
        , 'all' as claim_type
        , test_catalog.test_category
        , 'patient_id' as grain
        , eligiblity.patient_id
        , eligiblity.data_source
        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
    from eligiblity
         left join test_catalog
           on test_catalog.test_name = 'multiple birth dates'
           and test_catalog.source_table = 'normalized_input__eligibility'
    group by
          eligiblity.patient_id
        , eligiblity.data_source
        , test_catalog.source_table
        , test_catalog.test_category
        , test_catalog.test_name
        , test_catalog.pipeline_test
    having count(distinct eligiblity.birth_date) > 1

)

, multiple_death_dates_test as(

    select
          test_catalog.test_name
        , test_catalog.pipeline_test
        , test_catalog.source_table
        , 'all' as claim_type
        , test_catalog.test_category
        , 'patient_id' as grain
        , eligiblity.patient_id
        , eligiblity.data_source
        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
    from eligiblity
         left join test_catalog
           on test_catalog.test_name = 'multiple death dates'
           and test_catalog.source_table = 'normalized_input__eligibility'
    group by
          eligiblity.patient_id
        , eligiblity.data_source
        , test_catalog.source_table
        , test_catalog.test_category
        , test_catalog.test_name
        , test_catalog.pipeline_test
    having count(distinct eligiblity.death_date) > 1

)

, birth_date_after_death_date as(

    select
          test_catalog.test_name
        , test_catalog.pipeline_test
        , test_catalog.source_table
        , 'all' as claim_type
        , test_catalog.test_category
        , 'patient_id' as grain
        , eligiblity.patient_id
        , eligiblity.data_source
        , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
    from eligiblity
         left join test_catalog
           on test_catalog.test_name = 'birth date after death date'
           and test_catalog.source_table = 'normalized_input__eligibility'
    where eligiblity.birth_date > eligiblity.death_date
    group by
          eligiblity.patient_id
        , eligiblity.data_source
        , test_catalog.source_table
        , test_catalog.test_category
        , test_catalog.test_name
        , test_catalog.pipeline_test

)

select * from multiple_genders_test
union all
select * from multiple_races_test
union all
select * from multiple_birth_dates_test
union all
select * from multiple_death_dates_test
union all
select * from birth_date_after_death_date
    );
  
  
[0m15:25:41.933935 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates (compile): 15:25:41.922969 => 15:25:41.933653
[0m15:25:41.934518 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates
[0m15:25:41.938413 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates"
[0m15:25:41.941321 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates"
[0m15:25:41.942309 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates: BEGIN
[0m15:25:41.943094 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m15:25:41.944586 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.945262 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates"
[0m15:25:41.946060 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.946747 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates"} */

  
    
    

    create  table
      "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_duplicates__dbt_tmp"
  
    as (
      

with test_catalog as (

    select
          source_table
        , test_category
        , test_name
        , pipeline_test
    from "synthea"."data_quality"."_value_set_test_catalog"

)

select distinct
      test_catalog.source_table
    , 'all' as claim_type
    , 'claim_id' as grain
    , claim_id
    , data_source
    , test_catalog.test_category
    , test_catalog.test_name
    , test_catalog.pipeline_test
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
     left join test_catalog
       on test_catalog.test_name = 'duplicate pharmacy claims'
       and test_catalog.source_table = 'normalized_input__pharmacy_claim'
group by
      claim_id
    , claim_line_number
    , data_source
    , test_catalog.source_table
    , test_catalog.test_category
    , test_catalog.test_name
    , test_catalog.pipeline_test
having count(*) > 1
    );
  
  
[0m15:25:41.949348 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility"
[0m15:25:41.950047 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_eligibility_plausibility" rename to "_int_claims_preprocessing_eligibility_plausibility__dbt_backup"
[0m15:25:41.950668 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.953452 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility"
[0m15:25:41.964929 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_eligibility_plausibility__dbt_tmp" rename to "_int_claims_preprocessing_eligibility_plausibility"
[0m15:25:41.965589 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.968688 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates"
[0m15:25:41.969149 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.969482 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_duplicates" rename to "_int_claims_preprocessing_pharmacy_claim_duplicates__dbt_backup"
[0m15:25:41.971305 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility: COMMIT
[0m15:25:41.972394 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.972741 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility"
[0m15:25:41.976980 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates"
[0m15:25:41.977860 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility: COMMIT
[0m15:25:41.978542 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_duplicates__dbt_tmp" rename to "_int_claims_preprocessing_pharmacy_claim_duplicates"
[0m15:25:41.979633 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.979984 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.981690 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates: COMMIT
[0m15:25:41.984061 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility"
[0m15:25:41.984700 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates"
[0m15:25:41.985164 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility"} */
drop table if exists "synthea"."data_quality"."_int_claims_preprocessing_eligibility_plausibility__dbt_backup" cascade
[0m15:25:41.985583 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates: COMMIT
[0m15:25:41.986912 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.987367 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.989795 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates"
[0m15:25:41.991365 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility (execute): 15:25:41.912083 => 15:25:41.991193
[0m15:25:41.991869 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates"} */
drop table if exists "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_duplicates__dbt_backup" cascade
[0m15:25:41.992342 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility: Close
[0m15:25:41.993334 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7e014710>]}
[0m15:25:41.994362 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:41.994038 [info ] [Thread-2 (]: 52 of 307 OK created sql table model data_quality._int_claims_preprocessing_eligibility_plausibility  [[32mOK[0m in 0.10s]
[0m15:25:41.995910 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates (execute): 15:25:41.934983 => 15:25:41.995755
[0m15:25:41.996708 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility
[0m15:25:41.997277 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates: Close
[0m15:25:41.997915 [debug] [Thread-2 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers
[0m15:25:41.999589 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7d2fbe50>]}
[0m15:25:42.000295 [info ] [Thread-2 (]: 54 of 307 START sql table model data_quality._int_claims_preprocessing_pharmacy_claim_line_numbers  [RUN]
[0m15:25:42.001114 [info ] [Thread-4 (]: 53 of 307 OK created sql table model data_quality._int_claims_preprocessing_pharmacy_claim_duplicates  [[32mOK[0m in 0.08s]
[0m15:25:42.001872 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.data_quality__claims_preprocessing_eligibility_plausibility, now model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers)
[0m15:25:42.002594 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates
[0m15:25:42.003128 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers
[0m15:25:42.003759 [debug] [Thread-4 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values
[0m15:25:42.009727 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers"
[0m15:25:42.010548 [info ] [Thread-4 (]: 55 of 307 START sql table model data_quality._int_claims_preprocessing_pharmacy_claim_missing_values  [RUN]
[0m15:25:42.011901 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_duplicates, now model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values)
[0m15:25:42.012428 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values
[0m15:25:42.013065 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers (compile): 15:25:42.005005 => 15:25:42.012820
[0m15:25:42.020831 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values"
[0m15:25:42.021543 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers
[0m15:25:42.027563 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers"
[0m15:25:42.028636 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values (compile): 15:25:42.013262 => 15:25:42.028366
[0m15:25:42.029446 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values
[0m15:25:42.033421 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values"
[0m15:25:42.034332 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers"
[0m15:25:42.035160 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers: BEGIN
[0m15:25:42.035735 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m15:25:42.036249 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values"
[0m15:25:42.036849 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.037180 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values: BEGIN
[0m15:25:42.037592 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers"
[0m15:25:42.038015 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m15:25:42.038504 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers"} */

  
    
    

    create  table
      "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_line_numbers__dbt_tmp"
  
    as (
      

with pharmacy_claim as (

    select
          claim_id
        , claim_line_number
        , data_source
    from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"

)

, test_catalog as (

    select
          source_table
        , test_category
        , test_name
        , pipeline_test
    from "synthea"."data_quality"."_value_set_test_catalog"

)

, add_row_num as (

    select
          claim_id
        , data_source
        , claim_line_number
        , row_number() over (
            partition by claim_id, data_source
            order by claim_line_number
          ) as expected_line_number
    from pharmacy_claim

)

, line_num_check as (

    select
          add_row_num.claim_id
        , add_row_num.data_source
        , add_row_num.claim_line_number
        , add_row_num.expected_line_number
    from add_row_num
         left join pharmacy_claim
           on add_row_num.claim_id = pharmacy_claim.claim_id
           and add_row_num.data_source = pharmacy_claim.data_source
           and add_row_num.expected_line_number = pharmacy_claim.claim_line_number
    where pharmacy_claim.claim_line_number is null

)

select
      test_catalog.source_table
    , 'all' as claim_type
    , 'claim_id' as grain
    , line_num_check.claim_id
    , line_num_check.data_source
    , test_catalog.test_category
    , test_catalog.test_name
    , test_catalog.pipeline_test
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from line_num_check
     left join test_catalog
       on test_catalog.test_name = 'claim_line_number non-sequential'
       and test_catalog.source_table = 'normalized_input__pharmacy_claim'
group by
      line_num_check.claim_id
    , line_num_check.data_source
    , test_catalog.source_table
    , test_catalog.test_category
    , test_catalog.test_name
    , test_catalog.pipeline_test
    );
  
  
[0m15:25:42.039802 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.040525 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values"
[0m15:25:42.041364 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values"} */

  
    
    

    create  table
      "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_missing_values__dbt_tmp"
  
    as (
      

with pharmacy_claim_missing as (

 
        select
              claim_id
            , data_source
            , 'claim_id' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where claim_id is null
        union all
        select
              claim_id
            , data_source
            , 'claim_line_number' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where claim_line_number is null
        union all
        select
              claim_id
            , data_source
            , 'patient_id' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where patient_id is null
        union all
        select
              claim_id
            , data_source
            , 'member_id' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where member_id is null
        union all
        select
              claim_id
            , data_source
            , 'payer' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where payer is null
        union all
        select
              claim_id
            , data_source
            , 'plan' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where plan is null
        union all
        select
              claim_id
            , data_source
            , 'prescribing_provider_npi' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where prescribing_provider_npi is null
        union all
        select
              claim_id
            , data_source
            , 'dispensing_provider_npi' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where dispensing_provider_npi is null
        union all
        select
              claim_id
            , data_source
            , 'dispensing_date' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where dispensing_date is null
        union all
        select
              claim_id
            , data_source
            , 'ndc_code' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where ndc_code is null
        union all
        select
              claim_id
            , data_source
            , 'quantity' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where quantity is null
        union all
        select
              claim_id
            , data_source
            , 'days_supply' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where days_supply is null
        union all
        select
              claim_id
            , data_source
            , 'refills' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where refills is null
        union all
        select
              claim_id
            , data_source
            , 'paid_date' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where paid_date is null
        union all
        select
              claim_id
            , data_source
            , 'paid_amount' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where paid_amount is null
        union all
        select
              claim_id
            , data_source
            , 'allowed_amount' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where allowed_amount is null
        union all
        select
              claim_id
            , data_source
            , 'data_source' as column_checked
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        where data_source is null
        

)

, test_catalog as (

    select
          source_table
        , test_category
        , test_name
        , pipeline_test
    from "synthea"."data_quality"."_value_set_test_catalog"

)

select
      test_catalog.source_table
    , 'all' as claim_type
    , 'claim_id' as grain
    , pharmacy_claim_missing.claim_id
    , pharmacy_claim_missing.data_source
    , test_catalog.test_category
    , test_catalog.test_name
    , test_catalog.pipeline_test
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from pharmacy_claim_missing
     left join test_catalog
       on test_catalog.test_name = pharmacy_claim_missing.column_checked||' missing'
       and test_catalog.source_table = 'normalized_input__pharmacy_claim'
group by
      pharmacy_claim_missing.claim_id
    , pharmacy_claim_missing.data_source
    , test_catalog.source_table
    , test_catalog.test_category
    , test_catalog.test_name
    , test_catalog.pipeline_test
    );
  
  
[0m15:25:42.044859 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.047991 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers"
[0m15:25:42.048903 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_line_numbers" rename to "_int_claims_preprocessing_pharmacy_claim_line_numbers__dbt_backup"
[0m15:25:42.049973 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.053187 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers"
[0m15:25:42.054135 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.054630 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_line_numbers__dbt_tmp" rename to "_int_claims_preprocessing_pharmacy_claim_line_numbers"
[0m15:25:42.057398 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values"
[0m15:25:42.058282 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.058605 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_missing_values" rename to "_int_claims_preprocessing_pharmacy_claim_missing_values__dbt_backup"
[0m15:25:42.060121 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers: COMMIT
[0m15:25:42.060983 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.061309 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers"
[0m15:25:42.063714 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values"
[0m15:25:42.064305 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers: COMMIT
[0m15:25:42.064904 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_missing_values__dbt_tmp" rename to "_int_claims_preprocessing_pharmacy_claim_missing_values"
[0m15:25:42.066018 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.066420 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.068077 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values: COMMIT
[0m15:25:42.070772 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers"
[0m15:25:42.071373 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values"
[0m15:25:42.071857 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers"} */
drop table if exists "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_line_numbers__dbt_backup" cascade
[0m15:25:42.072343 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values: COMMIT
[0m15:25:42.073303 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.074730 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers (execute): 15:25:42.022397 => 15:25:42.074559
[0m15:25:42.075240 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers: Close
[0m15:25:42.076084 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7e014710>]}
[0m15:25:42.076754 [info ] [Thread-2 (]: 54 of 307 OK created sql table model data_quality._int_claims_preprocessing_pharmacy_claim_line_numbers  [[32mOK[0m in 0.07s]
[0m15:25:42.077509 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers
[0m15:25:42.078794 [debug] [Thread-2 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details
[0m15:25:42.079577 [info ] [Thread-2 (]: 56 of 307 START sql table model data_quality._int_claims_preprocessing_pharmacy_header_fail_details  [RUN]
[0m15:25:42.080249 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_line_numbers, now model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details)
[0m15:25:42.080620 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.080975 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details
[0m15:25:42.083328 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values"
[0m15:25:42.090083 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details"
[0m15:25:42.090937 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values"} */
drop table if exists "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_missing_values__dbt_backup" cascade
[0m15:25:42.092196 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details (compile): 15:25:42.083707 => 15:25:42.092007
[0m15:25:42.092529 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.092834 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details
[0m15:25:42.094393 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values (execute): 15:25:42.029949 => 15:25:42.094238
[0m15:25:42.098234 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details"
[0m15:25:42.099024 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values: Close
[0m15:25:42.100292 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff771b4910>]}
[0m15:25:42.101112 [info ] [Thread-4 (]: 55 of 307 OK created sql table model data_quality._int_claims_preprocessing_pharmacy_claim_missing_values  [[32mOK[0m in 0.09s]
[0m15:25:42.101662 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details"
[0m15:25:42.102329 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values
[0m15:25:42.102873 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details: BEGIN
[0m15:25:42.104039 [debug] [Thread-4 (]: Began running node model.the_tuva_project.normalized_input__int_admit_type_final
[0m15:25:42.104538 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m15:25:42.105100 [info ] [Thread-4 (]: 57 of 307 START sql table model claims_preprocessing._int_normalized_input_admit_type_final  [RUN]
[0m15:25:42.106563 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.107195 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_claim_missing_values, now model.the_tuva_project.normalized_input__int_admit_type_final)
[0m15:25:42.107664 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details"
[0m15:25:42.108184 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.normalized_input__int_admit_type_final
[0m15:25:42.108867 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details"} */

  
    
    

    create  table
      "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_header_fail_details__dbt_tmp"
  
    as (
      

with pharmacy_header_duplicates as (

 
        select
              claim_id
            , data_source
            , 'claim_id' as column_checked
            , count(distinct claim_id) as duplicate_count
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        group by claim_id, data_source
        having count(distinct claim_id) > 1
        union all
        select
              claim_id
            , data_source
            , 'patient_id' as column_checked
            , count(distinct patient_id) as duplicate_count
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        group by claim_id, data_source
        having count(distinct patient_id) > 1
        union all
        select
              claim_id
            , data_source
            , 'member_id' as column_checked
            , count(distinct member_id) as duplicate_count
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        group by claim_id, data_source
        having count(distinct member_id) > 1
        union all
        select
              claim_id
            , data_source
            , 'payer' as column_checked
            , count(distinct payer) as duplicate_count
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        group by claim_id, data_source
        having count(distinct payer) > 1
        union all
        select
              claim_id
            , data_source
            , 'plan' as column_checked
            , count(distinct plan) as duplicate_count
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        group by claim_id, data_source
        having count(distinct plan) > 1
        union all
        select
              claim_id
            , data_source
            , 'data_source' as column_checked
            , count(distinct data_source) as duplicate_count
        from "synthea"."claims_preprocessing"."normalized_input_pharmacy_claim"
        group by claim_id, data_source
        having count(distinct data_source) > 1
        

)

, test_catalog as (

    select
          source_table
        , test_category
        , test_name
        , pipeline_test
        , claim_type
    from "synthea"."data_quality"."_value_set_test_catalog"

)

select
      test_catalog.source_table
    , 'all' as claim_type
    , 'claim_id' as grain
    , pharmacy_header_duplicates.claim_id
    , pharmacy_header_duplicates.data_source
    , test_catalog.test_category
    , test_catalog.test_name
    , test_catalog.pipeline_test
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from pharmacy_header_duplicates
     left join test_catalog
       on test_catalog.test_name = pharmacy_header_duplicates.column_checked||' non-unique'
       and test_catalog.source_table = 'normalized_input__pharmacy_claim'
group by 
      pharmacy_header_duplicates.claim_id
    , pharmacy_header_duplicates.data_source
    , test_catalog.source_table
    , test_catalog.test_category
    , test_catalog.test_name
    , test_catalog.pipeline_test
    );
  
  
[0m15:25:42.115896 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_admit_type_final"
[0m15:25:42.118373 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.normalized_input__int_admit_type_final (compile): 15:25:42.109586 => 15:25:42.118054
[0m15:25:42.119186 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.normalized_input__int_admit_type_final
[0m15:25:42.125241 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_admit_type_final"
[0m15:25:42.127724 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_type_final"
[0m15:25:42.128736 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_admit_type_final: BEGIN
[0m15:25:42.130268 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m15:25:42.139845 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.140464 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_type_final"
[0m15:25:42.141069 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_admit_type_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_type_final"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_admit_type_final__dbt_tmp"
  
    as (
      


select
    claim_id
    , data_source
    , column_name
    , normalized_code
    , occurrence_count
    , next_occurrence_count
    , occurrence_row_count
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from "synthea"."claims_preprocessing"."_int_normalized_input_admit_type_normalize_voting"
where (occurrence_row_count = 1
        and occurrence_count > next_occurrence_count)
    );
  
  
[0m15:25:42.144470 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.153312 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_type_final"
[0m15:25:42.153911 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_admit_type_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_type_final"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_admit_type_final" rename to "_int_normalized_input_admit_type_final__dbt_backup"
[0m15:25:42.157473 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.160498 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_type_final"
[0m15:25:42.161231 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_admit_type_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_type_final"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_admit_type_final__dbt_tmp" rename to "_int_normalized_input_admit_type_final"
[0m15:25:42.161940 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.163609 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_admit_type_final: COMMIT
[0m15:25:42.164291 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_type_final"
[0m15:25:42.165283 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_admit_type_final: COMMIT
[0m15:25:42.166427 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.168992 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_type_final"
[0m15:25:42.169484 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_admit_type_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_type_final"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_admit_type_final__dbt_backup" cascade
[0m15:25:42.171127 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.172737 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.normalized_input__int_admit_type_final (execute): 15:25:42.120481 => 15:25:42.172554
[0m15:25:42.173300 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_admit_type_final: Close
[0m15:25:42.174198 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7719cfd0>]}
[0m15:25:42.246632 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.257117 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details"
[0m15:25:42.257923 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_header_fail_details" rename to "_int_claims_preprocessing_pharmacy_header_fail_details__dbt_backup"
[0m15:25:42.258760 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.261876 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details"
[0m15:25:42.262541 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_header_fail_details__dbt_tmp" rename to "_int_claims_preprocessing_pharmacy_header_fail_details"
[0m15:25:42.263259 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.264775 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details: COMMIT
[0m15:25:42.265453 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details"
[0m15:25:42.266006 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details: COMMIT
[0m15:25:42.266940 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.269237 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details"
[0m15:25:42.269690 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details"} */
drop table if exists "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_header_fail_details__dbt_backup" cascade
[0m15:25:42.270521 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.271889 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details (execute): 15:25:42.094841 => 15:25:42.271713
[0m15:25:42.272386 [debug] [Thread-2 (]: On model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details: Close
[0m15:25:42.273140 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff75952690>]}
[0m15:25:42.423041 [info ] [Thread-4 (]: 57 of 307 OK created sql table model claims_preprocessing._int_normalized_input_admit_type_final  [[32mOK[0m in 0.07s]
[0m15:25:42.423567 [info ] [Thread-2 (]: 56 of 307 OK created sql table model data_quality._int_claims_preprocessing_pharmacy_header_fail_details  [[32mOK[0m in 0.19s]
[0m15:25:42.424587 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.normalized_input__int_admit_type_final
[0m15:25:42.425194 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details
[0m15:25:42.426032 [debug] [Thread-4 (]: Began running node model.the_tuva_project.quality_measures__stg_core__medication
[0m15:25:42.427171 [debug] [Thread-2 (]: Began running node model.the_tuva_project.normalized_input__int_admit_source_final
[0m15:25:42.428192 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_admit_type_final, now model.the_tuva_project.quality_measures__stg_core__medication)
[0m15:25:42.428769 [info ] [Thread-2 (]: 58 of 307 START sql table model claims_preprocessing._int_normalized_input_admit_source_final  [RUN]
[0m15:25:42.429201 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.quality_measures__stg_core__medication
[0m15:25:42.429800 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.data_quality__claims_preprocessing_pharmacy_header_fail_details, now model.the_tuva_project.normalized_input__int_admit_source_final)
[0m15:25:42.437403 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.quality_measures__stg_core__medication"
[0m15:25:42.438147 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.normalized_input__int_admit_source_final
[0m15:25:42.443107 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_admit_source_final"
[0m15:25:42.445040 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.quality_measures__stg_core__medication (compile): 15:25:42.430297 => 15:25:42.444692
[0m15:25:42.446294 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.quality_measures__stg_core__medication
[0m15:25:42.447018 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__int_admit_source_final (compile): 15:25:42.438804 => 15:25:42.446663
[0m15:25:42.448185 [debug] [Thread-4 (]: Began running node model.the_tuva_project.normalized_input__int_bill_type_final
[0m15:25:42.450040 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.normalized_input__int_admit_source_final
[0m15:25:42.450829 [info ] [Thread-4 (]: 59 of 307 START sql table model claims_preprocessing._int_normalized_input_bill_type_final  [RUN]
[0m15:25:42.457317 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_admit_source_final"
[0m15:25:42.458022 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.quality_measures__stg_core__medication, now model.the_tuva_project.normalized_input__int_bill_type_final)
[0m15:25:42.459255 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.normalized_input__int_bill_type_final
[0m15:25:42.464202 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_bill_type_final"
[0m15:25:42.464932 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_source_final"
[0m15:25:42.465734 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_admit_source_final: BEGIN
[0m15:25:42.466253 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m15:25:42.466942 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.normalized_input__int_bill_type_final (compile): 15:25:42.460065 => 15:25:42.466643
[0m15:25:42.467612 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.normalized_input__int_bill_type_final
[0m15:25:42.467992 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.472880 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_bill_type_final"
[0m15:25:42.473586 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_source_final"
[0m15:25:42.474355 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_admit_source_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_source_final"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_admit_source_final__dbt_tmp"
  
    as (
      


select
    claim_id
    , data_source
    , column_name
    , normalized_code
    , occurrence_count
    , next_occurrence_count
    , occurrence_row_count
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from "synthea"."claims_preprocessing"."_int_normalized_input_admit_source_voting"
where (occurrence_row_count = 1
        and occurrence_count > next_occurrence_count)
    );
  
  
[0m15:25:42.475175 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_bill_type_final"
[0m15:25:42.475842 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_bill_type_final: BEGIN
[0m15:25:42.476486 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.476893 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m15:25:42.479750 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_source_final"
[0m15:25:42.480945 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.481369 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_admit_source_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_source_final"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_admit_source_final" rename to "_int_normalized_input_admit_source_final__dbt_backup"
[0m15:25:42.481879 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_bill_type_final"
[0m15:25:42.482550 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.482872 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_bill_type_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_bill_type_final"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_bill_type_final__dbt_tmp"
  
    as (
      


select
    claim_id
    , data_source
    , column_name
    , normalized_code
    , occurrence_count
    , next_occurrence_count
    , occurrence_row_count
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from "synthea"."claims_preprocessing"."_int_normalized_input_bill_type_voting"
where (occurrence_row_count = 1
        and occurrence_count > next_occurrence_count)
    );
  
  
[0m15:25:42.485250 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_source_final"
[0m15:25:42.486095 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_admit_source_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_source_final"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_admit_source_final__dbt_tmp" rename to "_int_normalized_input_admit_source_final"
[0m15:25:42.486889 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.487427 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.488816 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_admit_source_final: COMMIT
[0m15:25:42.491356 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_bill_type_final"
[0m15:25:42.492310 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_source_final"
[0m15:25:42.492837 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_bill_type_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_bill_type_final"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_bill_type_final" rename to "_int_normalized_input_bill_type_final__dbt_backup"
[0m15:25:42.493426 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_admit_source_final: COMMIT
[0m15:25:42.494246 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.496756 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_bill_type_final"
[0m15:25:42.497162 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.497486 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_bill_type_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_bill_type_final"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_bill_type_final__dbt_tmp" rename to "_int_normalized_input_bill_type_final"
[0m15:25:42.499990 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_admit_source_final"
[0m15:25:42.500948 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.501351 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_admit_source_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_admit_source_final"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_admit_source_final__dbt_backup" cascade
[0m15:25:42.503051 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_bill_type_final: COMMIT
[0m15:25:42.503920 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_bill_type_final"
[0m15:25:42.504345 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.504711 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_bill_type_final: COMMIT
[0m15:25:42.506327 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__int_admit_source_final (execute): 15:25:42.451291 => 15:25:42.506149
[0m15:25:42.507249 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_admit_source_final: Close
[0m15:25:42.508117 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xfffee9a40150>]}
[0m15:25:42.508494 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.509602 [info ] [Thread-2 (]: 58 of 307 OK created sql table model claims_preprocessing._int_normalized_input_admit_source_final  [[32mOK[0m in 0.08s]
[0m15:25:42.512464 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_bill_type_final"
[0m15:25:42.513286 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.normalized_input__int_admit_source_final
[0m15:25:42.513869 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_bill_type_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_bill_type_final"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_bill_type_final__dbt_backup" cascade
[0m15:25:42.514604 [debug] [Thread-2 (]: Began running node model.the_tuva_project.normalized_input__int_apr_drg_final
[0m15:25:42.515515 [info ] [Thread-2 (]: 60 of 307 START sql table model claims_preprocessing._int_normalized_input_apr_drg_final  [RUN]
[0m15:25:42.516395 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_admit_source_final, now model.the_tuva_project.normalized_input__int_apr_drg_final)
[0m15:25:42.516867 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.517537 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.normalized_input__int_apr_drg_final
[0m15:25:42.519017 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.normalized_input__int_bill_type_final (execute): 15:25:42.468339 => 15:25:42.518834
[0m15:25:42.524201 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_apr_drg_final"
[0m15:25:42.524828 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_bill_type_final: Close
[0m15:25:42.526108 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xfffee9a332d0>]}
[0m15:25:42.527314 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__int_apr_drg_final (compile): 15:25:42.519430 => 15:25:42.527125
[0m15:25:42.526917 [info ] [Thread-4 (]: 59 of 307 OK created sql table model claims_preprocessing._int_normalized_input_bill_type_final  [[32mOK[0m in 0.07s]
[0m15:25:42.527799 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.normalized_input__int_apr_drg_final
[0m15:25:42.528343 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.normalized_input__int_bill_type_final
[0m15:25:42.534721 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_apr_drg_final"
[0m15:25:42.535437 [debug] [Thread-4 (]: Began running node model.the_tuva_project.normalized_input__int_medical_date_aggregation
[0m15:25:42.543401 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_apr_drg_final"
[0m15:25:42.551894 [info ] [Thread-4 (]: 61 of 307 START sql table model claims_preprocessing._int_normalized_input_medical_date_aggregation  [RUN]
[0m15:25:42.555389 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_apr_drg_final: BEGIN
[0m15:25:42.557258 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_bill_type_final, now model.the_tuva_project.normalized_input__int_medical_date_aggregation)
[0m15:25:42.558269 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m15:25:42.559087 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.normalized_input__int_medical_date_aggregation
[0m15:25:42.560068 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.568196 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_medical_date_aggregation"
[0m15:25:42.570328 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_apr_drg_final"
[0m15:25:42.574354 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_apr_drg_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_apr_drg_final"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_apr_drg_final__dbt_tmp"
  
    as (
      


select
    claim_id
    , data_source
    , column_name
    , normalized_code
    , occurrence_count
    , next_occurrence_count
    , occurrence_row_count
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from "synthea"."claims_preprocessing"."_int_normalized_input_apr_drg_voting"
where (occurrence_row_count = 1
        and occurrence_count > next_occurrence_count)
    );
  
  
[0m15:25:42.576455 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.normalized_input__int_medical_date_aggregation (compile): 15:25:42.560409 => 15:25:42.576056
[0m15:25:42.577938 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.578627 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.normalized_input__int_medical_date_aggregation
[0m15:25:42.598140 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_medical_date_aggregation"
[0m15:25:42.590383 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_apr_drg_final"
[0m15:25:42.600226 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_apr_drg_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_apr_drg_final"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_apr_drg_final" rename to "_int_normalized_input_apr_drg_final__dbt_backup"
[0m15:25:42.601272 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_date_aggregation"
[0m15:25:42.602531 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.603910 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_medical_date_aggregation: BEGIN
[0m15:25:42.607905 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_apr_drg_final"
[0m15:25:42.608817 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m15:25:42.610304 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_apr_drg_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_apr_drg_final"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_apr_drg_final__dbt_tmp" rename to "_int_normalized_input_apr_drg_final"
[0m15:25:42.619319 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.620617 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.621097 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_date_aggregation"
[0m15:25:42.624612 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_apr_drg_final: COMMIT
[0m15:25:42.625620 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_medical_date_aggregation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_medical_date_aggregation"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_medical_date_aggregation__dbt_tmp"
  
    as (
      


select
    claim_id
    , data_source
    , min(normalized_claim_start_date) as minimum_claim_start_date
    , max(normalized_claim_end_date) as maximum_claim_end_date
    , min(normalized_admission_date) as minimum_admission_date
    , max(normalized_discharge_date) as maximum_discharge_date
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from "synthea"."claims_preprocessing"."_int_normalized_input_medical_claim_date_normalize"
where claim_type = 'institutional'
group by
    claim_id
    , data_source

union all

select
    claim_id
    , data_source
    , min(normalized_claim_start_date) as minimum_claim_start_date
    , max(normalized_claim_end_date) as maximum_claim_end_date
    , null as minimum_admission_date
    , null as maximum_discharge_date
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from "synthea"."claims_preprocessing"."_int_normalized_input_medical_claim_date_normalize"
where claim_type = 'professional'
group by
    claim_id
    , data_source
    );
  
  
[0m15:25:42.626507 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_apr_drg_final"
[0m15:25:42.628294 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_apr_drg_final: COMMIT
[0m15:25:42.630496 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.634568 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_apr_drg_final"
[0m15:25:42.636690 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_apr_drg_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_apr_drg_final"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_apr_drg_final__dbt_backup" cascade
[0m15:25:42.643206 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.645480 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__int_apr_drg_final (execute): 15:25:42.528643 => 15:25:42.645208
[0m15:25:42.646106 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_apr_drg_final: Close
[0m15:25:42.647065 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xfffee99e8850>]}
[0m15:25:42.648153 [info ] [Thread-2 (]: 60 of 307 OK created sql table model claims_preprocessing._int_normalized_input_apr_drg_final  [[32mOK[0m in 0.13s]
[0m15:25:42.649169 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.normalized_input__int_apr_drg_final
[0m15:25:42.657682 [debug] [Thread-2 (]: Began running node model.the_tuva_project.normalized_input__int_discharge_disposition_final
[0m15:25:42.658974 [info ] [Thread-2 (]: 62 of 307 START sql table model claims_preprocessing._int_normalized_input_discharge_disposition_final  [RUN]
[0m15:25:42.660516 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_apr_drg_final, now model.the_tuva_project.normalized_input__int_discharge_disposition_final)
[0m15:25:42.662301 [debug] [Thread-2 (]: Began compiling node model.the_tuva_project.normalized_input__int_discharge_disposition_final
[0m15:25:42.675481 [debug] [Thread-2 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_discharge_disposition_final"
[0m15:25:42.677309 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.679142 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__int_discharge_disposition_final (compile): 15:25:42.663188 => 15:25:42.678646
[0m15:25:42.683476 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_date_aggregation"
[0m15:25:42.684765 [debug] [Thread-2 (]: Began executing node model.the_tuva_project.normalized_input__int_discharge_disposition_final
[0m15:25:42.685940 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_medical_date_aggregation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_medical_date_aggregation"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_medical_date_aggregation" rename to "_int_normalized_input_medical_date_aggregation__dbt_backup"
[0m15:25:42.693373 [debug] [Thread-2 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_discharge_disposition_final"
[0m15:25:42.696372 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.700479 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_date_aggregation"
[0m15:25:42.701676 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_medical_date_aggregation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_medical_date_aggregation"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_medical_date_aggregation__dbt_tmp" rename to "_int_normalized_input_medical_date_aggregation"
[0m15:25:42.702572 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_discharge_disposition_final"
[0m15:25:42.703409 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_final: BEGIN
[0m15:25:42.704009 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.704580 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m15:25:42.706881 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_medical_date_aggregation: COMMIT
[0m15:25:42.711018 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_date_aggregation"
[0m15:25:42.710165 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.711786 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_medical_date_aggregation: COMMIT
[0m15:25:42.712568 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_discharge_disposition_final"
[0m15:25:42.714403 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_discharge_disposition_final"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_discharge_disposition_final__dbt_tmp"
  
    as (
      


select
    claim_id
    , data_source
    , column_name
    , normalized_code
    , occurrence_count
    , next_occurrence_count
    , occurrence_row_count
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from "synthea"."claims_preprocessing"."_int_normalized_input_discharge_disposition_voting"
where (occurrence_row_count = 1
        and occurrence_count > next_occurrence_count)
    );
  
  
[0m15:25:42.719073 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.724699 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_medical_date_aggregation"
[0m15:25:42.727972 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.728583 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_medical_date_aggregation: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_medical_date_aggregation"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_medical_date_aggregation__dbt_backup" cascade
[0m15:25:42.733337 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_discharge_disposition_final"
[0m15:25:42.735262 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_discharge_disposition_final"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_discharge_disposition_final" rename to "_int_normalized_input_discharge_disposition_final__dbt_backup"
[0m15:25:42.736181 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.737568 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.740190 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.normalized_input__int_medical_date_aggregation (execute): 15:25:42.593723 => 15:25:42.739898
[0m15:25:42.744173 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_discharge_disposition_final"
[0m15:25:42.745131 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_medical_date_aggregation: Close
[0m15:25:42.745783 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_discharge_disposition_final"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_discharge_disposition_final__dbt_tmp" rename to "_int_normalized_input_discharge_disposition_final"
[0m15:25:42.746919 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff75995550>]}
[0m15:25:42.748289 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.749275 [info ] [Thread-4 (]: 61 of 307 OK created sql table model claims_preprocessing._int_normalized_input_medical_date_aggregation  [[32mOK[0m in 0.19s]
[0m15:25:42.752891 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_final: COMMIT
[0m15:25:42.753922 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.normalized_input__int_medical_date_aggregation
[0m15:25:42.754657 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_discharge_disposition_final"
[0m15:25:42.762069 [debug] [Thread-4 (]: Began running node model.the_tuva_project.normalized_input__int_ms_drg_final
[0m15:25:42.770082 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_final: COMMIT
[0m15:25:42.773797 [info ] [Thread-4 (]: 63 of 307 START sql table model claims_preprocessing._int_normalized_input_ms_drg_final  [RUN]
[0m15:25:42.775878 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_medical_date_aggregation, now model.the_tuva_project.normalized_input__int_ms_drg_final)
[0m15:25:42.776493 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.776909 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.normalized_input__int_ms_drg_final
[0m15:25:42.780303 [debug] [Thread-2 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_discharge_disposition_final"
[0m15:25:42.787154 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.normalized_input__int_ms_drg_final"
[0m15:25:42.788091 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_discharge_disposition_final"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_discharge_disposition_final__dbt_backup" cascade
[0m15:25:42.791018 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.normalized_input__int_ms_drg_final (compile): 15:25:42.781007 => 15:25:42.790685
[0m15:25:42.791821 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.normalized_input__int_ms_drg_final
[0m15:25:42.792328 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.797833 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.normalized_input__int_ms_drg_final"
[0m15:25:42.799537 [debug] [Thread-2 (]: Timing info for model.the_tuva_project.normalized_input__int_discharge_disposition_final (execute): 15:25:42.686478 => 15:25:42.799319
[0m15:25:42.800996 [debug] [Thread-2 (]: On model.the_tuva_project.normalized_input__int_discharge_disposition_final: Close
[0m15:25:42.802811 [debug] [Thread-2 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff758e9750>]}
[0m15:25:42.804605 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_ms_drg_final"
[0m15:25:42.803928 [info ] [Thread-2 (]: 62 of 307 OK created sql table model claims_preprocessing._int_normalized_input_discharge_disposition_final  [[32mOK[0m in 0.14s]
[0m15:25:42.806076 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_ms_drg_final: BEGIN
[0m15:25:42.807782 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.normalized_input__int_discharge_disposition_final
[0m15:25:42.808514 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m15:25:42.809456 [debug] [Thread-2 (]: Began running node model.the_tuva_project.normalized_input__int_diagnosis_code_voting
[0m15:25:42.811751 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.816973 [info ] [Thread-2 (]: 64 of 307 SKIP relation claims_preprocessing.normalized_input__int_diagnosis_code_voting  [[33mSKIP[0m]
[0m15:25:42.818102 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_ms_drg_final"
[0m15:25:42.823037 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_ms_drg_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_ms_drg_final"} */

  
    
    

    create  table
      "synthea"."claims_preprocessing"."_int_normalized_input_ms_drg_final__dbt_tmp"
  
    as (
      


select
    claim_id
    , data_source
    , column_name
    , normalized_code
    , occurrence_count
    , next_occurrence_count
    , occurrence_row_count
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from "synthea"."claims_preprocessing"."_int_normalized_input_ms_drg_voting"
where (occurrence_row_count = 1
        and occurrence_count > next_occurrence_count)
    );
  
  
[0m15:25:42.826267 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.821869 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.normalized_input__int_diagnosis_code_voting
[0m15:25:42.830524 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_ms_drg_final"
[0m15:25:42.834589 [debug] [Thread-2 (]: Began running node model.the_tuva_project.normalized_input__int_present_on_admit_voting
[0m15:25:42.838057 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_ms_drg_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_ms_drg_final"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_ms_drg_final" rename to "_int_normalized_input_ms_drg_final__dbt_backup"
[0m15:25:42.839418 [info ] [Thread-2 (]: 65 of 307 SKIP relation claims_preprocessing.normalized_input__int_present_on_admit_voting  [[33mSKIP[0m]
[0m15:25:42.840874 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.841686 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.normalized_input__int_present_on_admit_voting
[0m15:25:42.846998 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_ms_drg_final"
[0m15:25:42.850792 [debug] [Thread-2 (]: Began running node model.the_tuva_project.normalized_input__int_procedure_code_voting
[0m15:25:42.855061 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_ms_drg_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_ms_drg_final"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_ms_drg_final__dbt_tmp" rename to "_int_normalized_input_ms_drg_final"
[0m15:25:42.860024 [info ] [Thread-2 (]: 66 of 307 SKIP relation claims_preprocessing.normalized_input__int_procedure_code_voting  [[33mSKIP[0m]
[0m15:25:42.863413 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.864202 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.normalized_input__int_procedure_code_voting
[0m15:25:42.867114 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_ms_drg_final: COMMIT
[0m15:25:42.869359 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_ms_drg_final"
[0m15:25:42.868135 [debug] [Thread-2 (]: Began running node model.the_tuva_project.normalized_input__int_procedure_date_voting
[0m15:25:42.870364 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_ms_drg_final: COMMIT
[0m15:25:42.871382 [info ] [Thread-2 (]: 67 of 307 SKIP relation claims_preprocessing.normalized_input__int_procedure_date_voting  [[33mSKIP[0m]
[0m15:25:42.872844 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.normalized_input__int_procedure_date_voting
[0m15:25:42.873575 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.891172 [debug] [Thread-2 (]: Began running node test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e
[0m15:25:42.896433 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_ms_drg_final"
[0m15:25:42.905407 [info ] [Thread-2 (]: 68 of 307 START test not_null_quality_measures__stg_core__observation_patient_id  [RUN]
[0m15:25:42.907227 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_ms_drg_final: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_ms_drg_final"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_ms_drg_final__dbt_backup" cascade
[0m15:25:42.908249 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_discharge_disposition_final, now test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e)
[0m15:25:42.909119 [debug] [Thread-2 (]: Began compiling node test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e
[0m15:25:42.915392 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:42.932367 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.normalized_input__int_ms_drg_final (execute): 15:25:42.792668 => 15:25:42.932019
[0m15:25:42.944240 [debug] [Thread-4 (]: On model.the_tuva_project.normalized_input__int_ms_drg_final: Close
[0m15:25:42.958749 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff77115550>]}
[0m15:25:42.966278 [info ] [Thread-4 (]: 63 of 307 OK created sql table model claims_preprocessing._int_normalized_input_ms_drg_final  [[32mOK[0m in 0.18s]
[0m15:25:42.981020 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.normalized_input__int_ms_drg_final
[0m15:25:42.989315 [debug] [Thread-4 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility
[0m15:25:42.996189 [info ] [Thread-4 (]: 69 of 307 START sql table model data_quality._int_claims_preprocessing_test_detail_stage_eligibility  [RUN]
[0m15:25:43.021023 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.normalized_input__int_ms_drg_final, now model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility)
[0m15:25:43.043441 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility
[0m15:25:43.067443 [debug] [Thread-2 (]: Writing injected SQL for node "test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e"
[0m15:25:43.079049 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility"
[0m15:25:43.083903 [debug] [Thread-2 (]: Timing info for test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e (compile): 15:25:42.909502 => 15:25:43.083516
[0m15:25:43.084860 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility (compile): 15:25:43.068299 => 15:25:43.084438
[0m15:25:43.085474 [debug] [Thread-2 (]: Began executing node test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e
[0m15:25:43.086894 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility
[0m15:25:43.137122 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility"
[0m15:25:43.144618 [debug] [Thread-2 (]: Writing runtime sql for node "test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e"
[0m15:25:43.148179 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility"
[0m15:25:43.149035 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility: BEGIN
[0m15:25:43.149668 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m15:25:43.150263 [debug] [Thread-2 (]: Using duckdb connection "test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e"
[0m15:25:43.151056 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:43.157099 [debug] [Thread-2 (]: On test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e: BEGIN
[0m15:25:43.159537 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility"
[0m15:25:43.162573 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m15:25:43.164680 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility"} */

  
    
    

    create  table
      "synthea"."data_quality"."_int_claims_preprocessing_test_detail_stage_eligibility__dbt_tmp"
  
    as (
      


select distinct
    source_table
    , claim_type
    , grain
    , patient_id as foreign_key
    , data_source
    , test_category
    , test_name
    , pipeline_test
from "synthea"."data_quality"."_int_claims_preprocessing_eligibility_duplicates"
union all
select distinct
    source_table
    , claim_type
    , grain
    , patient_id as foreign_key
    , data_source
    , test_category
    , test_name
    , pipeline_test
from "synthea"."data_quality"."_int_claims_preprocessing_eligibility_missing_values"
union all
select distinct
    source_table
    , claim_type
    , grain
    , patient_id as foreign_key
    , data_source
    , test_category
    , test_name
    , pipeline_test
from "synthea"."data_quality"."_int_claims_preprocessing_eligibility_invalid_values"
union all
select distinct
    source_table
    , claim_type
    , grain
    , patient_id as foreign_key
    , data_source
    , test_category
    , test_name
    , pipeline_test
from "synthea"."data_quality"."_int_claims_preprocessing_eligibility_plausibility"
    );
  
  
[0m15:25:43.169712 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:43.172506 [debug] [Thread-2 (]: Using duckdb connection "test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e"
[0m15:25:43.174357 [debug] [Thread-2 (]: On test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e"} */
select
      count(*) as failures,
      count(*) != 0 as should_warn,
      count(*) != 0 as should_error
    from (
      
    
    



with __dbt__cte__quality_measures__stg_core__observation as (


select
      patient_id
    , observation_date
    , source_code_type
    , source_code
    , normalized_code_type
    , normalized_code
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from "synthea"."core"."observation"


) select patient_id
from __dbt__cte__quality_measures__stg_core__observation
where patient_id is null



      
    ) dbt_internal_test
[0m15:25:43.178409 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:43.199674 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:43.235822 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility"
[0m15:25:43.288582 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_test_detail_stage_eligibility" rename to "_int_claims_preprocessing_test_detail_stage_eligibility__dbt_backup"
[0m15:25:43.343694 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:43.358729 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility"
[0m15:25:43.396589 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_test_detail_stage_eligibility__dbt_tmp" rename to "_int_claims_preprocessing_test_detail_stage_eligibility"
[0m15:25:43.444833 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:43.454385 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility: COMMIT
[0m15:25:43.463839 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility"
[0m15:25:43.472276 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility: COMMIT
[0m15:25:43.518297 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:43.527615 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility"
[0m15:25:43.568363 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility"} */
drop table if exists "synthea"."data_quality"."_int_claims_preprocessing_test_detail_stage_eligibility__dbt_backup" cascade
[0m15:25:43.587775 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:43.601522 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility (execute): 15:25:43.110539 => 15:25:43.601272
[0m15:25:43.602389 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility: Close
[0m15:25:43.604753 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7d378850>]}
[0m15:25:43.590818 [debug] [Thread-2 (]: Timing info for test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e (execute): 15:25:43.087602 => 15:25:43.589629
[0m15:25:43.609273 [debug] [Thread-2 (]: On test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e: ROLLBACK
[0m15:25:43.612730 [debug] [Thread-2 (]: Failed to rollback 'test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e'
[0m15:25:43.613616 [debug] [Thread-2 (]: On test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e: Close
[0m15:25:43.607279 [info ] [Thread-4 (]: 69 of 307 OK created sql table model data_quality._int_claims_preprocessing_test_detail_stage_eligibility  [[32mOK[0m in 0.58s]
[0m15:25:43.621353 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility
[0m15:25:43.620275 [info ] [Thread-2 (]: 68 of 307 PASS not_null_quality_measures__stg_core__observation_patient_id ..... [[32mPASS[0m in 0.71s]
[0m15:25:43.633985 [debug] [Thread-4 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim
[0m15:25:43.639104 [info ] [Thread-4 (]: 70 of 307 START sql table model data_quality._int_claims_preprocessing_test_detail_stage_pharmacy_claim  [RUN]
[0m15:25:43.642221 [debug] [Thread-4 (]: Re-using an available connection from the pool (formerly model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_eligibility, now model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim)
[0m15:25:43.635461 [debug] [Thread-2 (]: Finished running node test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e
[0m15:25:43.646162 [debug] [Thread-4 (]: Began compiling node model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim
[0m15:25:43.655196 [debug] [Thread-2 (]: Began running node test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652
[0m15:25:43.682405 [info ] [Thread-2 (]: 71 of 307 START test not_null_quality_measures__stg_core__medication_patient_id  [RUN]
[0m15:25:43.685565 [debug] [Thread-2 (]: Re-using an available connection from the pool (formerly test.the_tuva_project.not_null_quality_measures__stg_core__observation_patient_id.31e33f2d7e, now test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652)
[0m15:25:43.669230 [debug] [Thread-4 (]: Writing injected SQL for node "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"
[0m15:25:43.687402 [debug] [Thread-2 (]: Began compiling node test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652
[0m15:25:43.702266 [debug] [Thread-2 (]: Writing injected SQL for node "test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652"
[0m15:25:43.703683 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim (compile): 15:25:43.658627 => 15:25:43.703152
[0m15:25:43.706467 [debug] [Thread-4 (]: Began executing node model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim
[0m15:25:43.713476 [debug] [Thread-4 (]: Writing runtime sql for node "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"
[0m15:25:43.716443 [debug] [Thread-2 (]: Timing info for test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652 (compile): 15:25:43.689826 => 15:25:43.715802
[0m15:25:43.718064 [debug] [Thread-2 (]: Began executing node test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652
[0m15:25:43.721721 [debug] [Thread-2 (]: Writing runtime sql for node "test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652"
[0m15:25:43.723592 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"
[0m15:25:43.724952 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim: BEGIN
[0m15:25:43.727660 [debug] [Thread-4 (]: Opening a new connection, currently in state closed
[0m15:25:43.732680 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:43.735264 [debug] [Thread-2 (]: Using duckdb connection "test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652"
[0m15:25:43.735787 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"
[0m15:25:43.737053 [debug] [Thread-2 (]: On test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652: BEGIN
[0m15:25:43.737852 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"} */

  
    
    

    create  table
      "synthea"."data_quality"."_int_claims_preprocessing_test_detail_stage_pharmacy_claim__dbt_tmp"
  
    as (
      

select distinct
    source_table
    , claim_type
    , grain
    , claim_id as foreign_key
    , data_source
    , test_category
    , test_name
    , pipeline_test
from "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_duplicates"
union all
select distinct
    source_table
    , claim_type
    , grain
    , claim_id as foreign_key
    , data_source
    , test_category
    , test_name
    , pipeline_test
from "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_missing_values"
union all
select distinct
    source_table
    , claim_type
    , grain
    , claim_id as foreign_key
    , data_source
    , test_category
    , test_name
    , pipeline_test
from "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_header_fail_details"
union all
select distinct
    source_table
    , claim_type
    , grain
    , claim_id as foreign_key
    , data_source
    , test_category
    , test_name
    , pipeline_test
from "synthea"."data_quality"."_int_claims_preprocessing_pharmacy_claim_line_numbers"
    );
  
  
[0m15:25:43.739651 [debug] [Thread-2 (]: Opening a new connection, currently in state closed
[0m15:25:43.750996 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:43.747621 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:43.752330 [debug] [Thread-2 (]: Using duckdb connection "test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652"
[0m15:25:43.760523 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"
[0m15:25:43.766222 [debug] [Thread-2 (]: On test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652"} */
select
      count(*) as failures,
      count(*) != 0 as should_warn,
      count(*) != 0 as should_error
    from (
      
    
    



with __dbt__cte__quality_measures__stg_core__medication as (


select
      patient_id
    , dispensing_date
    , source_code_type
    , source_code
    , ndc_code
    , rxnorm_code
    , '2024-02-21 14:30:54.308435+00:00' as tuva_last_run
from "synthea"."core"."medication"


) select patient_id
from __dbt__cte__quality_measures__stg_core__medication
where patient_id is null



      
    ) dbt_internal_test
[0m15:25:43.771674 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_test_detail_stage_pharmacy_claim" rename to "_int_claims_preprocessing_test_detail_stage_pharmacy_claim__dbt_backup"
[0m15:25:43.773761 [debug] [Thread-2 (]: SQL status: OK in 0.0 seconds
[0m15:25:43.776150 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:43.785871 [debug] [Thread-2 (]: Timing info for test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652 (execute): 15:25:43.718772 => 15:25:43.785504
[0m15:25:43.797829 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"
[0m15:25:43.799245 [debug] [Thread-2 (]: On test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652: ROLLBACK
[0m15:25:43.799909 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"} */
alter table "synthea"."data_quality"."_int_claims_preprocessing_test_detail_stage_pharmacy_claim__dbt_tmp" rename to "_int_claims_preprocessing_test_detail_stage_pharmacy_claim"
[0m15:25:43.806147 [debug] [Thread-2 (]: Failed to rollback 'test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652'
[0m15:25:43.808322 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:43.808866 [debug] [Thread-2 (]: On test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652: Close
[0m15:25:43.813633 [info ] [Thread-2 (]: 71 of 307 PASS not_null_quality_measures__stg_core__medication_patient_id ...... [[32mPASS[0m in 0.13s]
[0m15:25:43.815586 [debug] [Thread-2 (]: Finished running node test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652
[0m15:25:43.811799 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim: COMMIT
[0m15:25:43.818322 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"
[0m15:25:43.819175 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim: COMMIT
[0m15:25:43.816861 [debug] [Thread-2 (]: Began running node model.the_tuva_project.normalized_input__int_diagnosis_code_final
[0m15:25:43.822910 [info ] [Thread-2 (]: 72 of 307 SKIP relation claims_preprocessing.normalized_input__int_diagnosis_code_final  [[33mSKIP[0m]
[0m15:25:43.824169 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.normalized_input__int_diagnosis_code_final
[0m15:25:43.832522 [debug] [Thread-2 (]: Began running node model.the_tuva_project.normalized_input__int_present_on_admit_final
[0m15:25:43.834341 [info ] [Thread-2 (]: 73 of 307 SKIP relation claims_preprocessing.normalized_input__int_present_on_admit_final  [[33mSKIP[0m]
[0m15:25:43.836320 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.normalized_input__int_present_on_admit_final
[0m15:25:43.837748 [debug] [Thread-2 (]: Began running node model.the_tuva_project.normalized_input__int_procedure_code_final
[0m15:25:43.838683 [info ] [Thread-2 (]: 74 of 307 SKIP relation claims_preprocessing.normalized_input__int_procedure_code_final  [[33mSKIP[0m]
[0m15:25:43.840125 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.normalized_input__int_procedure_code_final
[0m15:25:43.840726 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:43.842495 [debug] [Thread-2 (]: Began running node model.the_tuva_project.normalized_input__int_procedure_date_final
[0m15:25:43.846302 [debug] [Thread-4 (]: Using duckdb connection "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"
[0m15:25:43.849333 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim"} */
drop table if exists "synthea"."data_quality"."_int_claims_preprocessing_test_detail_stage_pharmacy_claim__dbt_backup" cascade
[0m15:25:43.847660 [info ] [Thread-2 (]: 75 of 307 SKIP relation claims_preprocessing.normalized_input__int_procedure_date_final  [[33mSKIP[0m]
[0m15:25:43.852334 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.normalized_input__int_procedure_date_final
[0m15:25:43.854295 [debug] [Thread-4 (]: SQL status: OK in 0.0 seconds
[0m15:25:43.858388 [debug] [Thread-4 (]: Timing info for model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim (execute): 15:25:43.707246 => 15:25:43.858047
[0m15:25:43.859807 [debug] [Thread-4 (]: On model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim: Close
[0m15:25:43.863430 [debug] [Thread-4 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7d6d7050>]}
[0m15:25:43.867297 [info ] [Thread-4 (]: 70 of 307 OK created sql table model data_quality._int_claims_preprocessing_test_detail_stage_pharmacy_claim  [[32mOK[0m in 0.22s]
[0m15:25:43.869816 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim
[0m15:26:06.230551 [debug] [Thread-3 (]: SQL status: OK in 25.0 seconds
[0m15:26:07.745376 [debug] [Thread-1 (]: SQL status: OK in 26.0 seconds
[0m15:26:07.769543 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_undetermined_claim_type"
[0m15:26:07.771056 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_revenue_center_normalize"
[0m15:26:07.772480 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_undetermined_claim_type: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_undetermined_claim_type"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_undetermined_claim_type" rename to "_int_normalized_input_undetermined_claim_type__dbt_backup"
[0m15:26:07.774437 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_revenue_center_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_revenue_center_normalize"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_revenue_center_normalize" rename to "_int_normalized_input_revenue_center_normalize__dbt_backup"
[0m15:26:07.785694 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m15:26:07.787770 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m15:26:07.794168 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_undetermined_claim_type"
[0m15:26:07.798773 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_revenue_center_normalize"
[0m15:26:07.799705 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_undetermined_claim_type: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_undetermined_claim_type"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_undetermined_claim_type__dbt_tmp" rename to "_int_normalized_input_undetermined_claim_type"
[0m15:26:07.800420 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_revenue_center_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_revenue_center_normalize"} */
alter table "synthea"."claims_preprocessing"."_int_normalized_input_revenue_center_normalize__dbt_tmp" rename to "_int_normalized_input_revenue_center_normalize"
[0m15:26:07.801641 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m15:26:07.810571 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m15:26:07.815590 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_undetermined_claim_type: COMMIT
[0m15:26:07.817628 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_revenue_center_normalize: COMMIT
[0m15:26:07.818419 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_undetermined_claim_type"
[0m15:26:07.819007 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_revenue_center_normalize"
[0m15:26:07.819495 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_undetermined_claim_type: COMMIT
[0m15:26:07.820009 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_revenue_center_normalize: COMMIT
[0m15:26:07.822282 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m15:26:07.827621 [debug] [Thread-3 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_undetermined_claim_type"
[0m15:26:07.828405 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m15:26:07.829077 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_undetermined_claim_type: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_undetermined_claim_type"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_undetermined_claim_type__dbt_backup" cascade
[0m15:26:07.831993 [debug] [Thread-1 (]: Using duckdb connection "model.the_tuva_project.normalized_input__int_revenue_center_normalize"
[0m15:26:07.832968 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_revenue_center_normalize: /* {"app": "dbt", "dbt_version": "1.7.7", "profile_name": "duckdb", "target_name": "dev", "node_id": "model.the_tuva_project.normalized_input__int_revenue_center_normalize"} */
drop table if exists "synthea"."claims_preprocessing"."_int_normalized_input_revenue_center_normalize__dbt_backup" cascade
[0m15:26:07.834702 [debug] [Thread-3 (]: SQL status: OK in 0.0 seconds
[0m15:26:07.837001 [debug] [Thread-3 (]: Timing info for model.the_tuva_project.normalized_input__int_undetermined_claim_type (execute): 15:25:41.437003 => 15:26:07.836372
[0m15:26:07.837535 [debug] [Thread-1 (]: SQL status: OK in 0.0 seconds
[0m15:26:07.838101 [debug] [Thread-3 (]: On model.the_tuva_project.normalized_input__int_undetermined_claim_type: Close
[0m15:26:07.839650 [debug] [Thread-1 (]: Timing info for model.the_tuva_project.normalized_input__int_revenue_center_normalize (execute): 15:25:41.469477 => 15:26:07.839435
[0m15:26:07.841898 [debug] [Thread-3 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7d7e2010>]}
[0m15:26:07.842700 [debug] [Thread-1 (]: On model.the_tuva_project.normalized_input__int_revenue_center_normalize: Close
[0m15:26:07.844430 [info ] [Thread-3 (]: 47 of 307 OK created sql table model claims_preprocessing._int_normalized_input_undetermined_claim_type  [[32mOK[0m in 26.61s]
[0m15:26:08.568639 [debug] [Thread-1 (]: Sending event: {'category': 'dbt', 'action': 'run_model', 'label': 'ef693bb1-bdf6-4206-8e85-df24e2303a9d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff7d2e3210>]}
[0m15:26:08.570069 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.normalized_input__int_undetermined_claim_type
[0m15:26:08.571994 [info ] [Thread-1 (]: 46 of 307 OK created sql table model claims_preprocessing._int_normalized_input_revenue_center_normalize  [[32mOK[0m in 27.34s]
[0m15:26:08.576953 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.normalized_input__int_revenue_center_normalize
[0m15:26:08.602644 [debug] [Thread-2 (]: Began running node model.the_tuva_project.normalized_input__medical_claim
[0m15:26:08.603842 [info ] [Thread-2 (]: 76 of 307 SKIP relation claims_preprocessing.normalized_input__medical_claim ... [[33mSKIP[0m]
[0m15:26:08.604719 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.normalized_input__medical_claim
[0m15:26:08.608933 [debug] [Thread-3 (]: Began running node test.the_tuva_project.unique_normalized_input__medical_claim__claim_id_claim_line_number_.7102b4fe4f
[0m15:26:08.609735 [info ] [Thread-3 (]: 77 of 307 SKIP test unique_normalized_input__medical_claim__claim_id_claim_line_number_  [[33mSKIP[0m]
[0m15:26:08.610306 [debug] [Thread-3 (]: Finished running node test.the_tuva_project.unique_normalized_input__medical_claim__claim_id_claim_line_number_.7102b4fe4f
[0m15:26:08.620068 [debug] [Thread-4 (]: Began running node model.the_tuva_project.acute_inpatient__stg_medical_claim
[0m15:26:08.620553 [debug] [Thread-2 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_claim_type_mapping_failures
[0m15:26:08.621142 [debug] [Thread-1 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_claim_type_unmapped
[0m15:26:08.621512 [debug] [Thread-3 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_institutional_header_fail_details
[0m15:26:08.621865 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.acute_inpatient__stg_medical_claim
[0m15:26:08.622355 [info ] [Thread-2 (]: 78 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_claim_type_mapping_failures  [[33mSKIP[0m]
[0m15:26:08.622852 [info ] [Thread-1 (]: 79 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_claim_type_unmapped  [[33mSKIP[0m]
[0m15:26:08.623423 [info ] [Thread-3 (]: 80 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_institutional_header_fail_details  [[33mSKIP[0m]
[0m15:26:08.623981 [debug] [Thread-4 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates
[0m15:26:08.624620 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_claim_type_mapping_failures
[0m15:26:08.625157 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_claim_type_unmapped
[0m15:26:08.625602 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_institutional_header_fail_details
[0m15:26:08.626055 [info ] [Thread-4 (]: 81 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_medical_claim_dates  [[33mSKIP[0m]
[0m15:26:08.626591 [debug] [Thread-2 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates_inst
[0m15:26:08.627062 [debug] [Thread-1 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_denominators
[0m15:26:08.627889 [debug] [Thread-3 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_duplicates
[0m15:26:08.628443 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates
[0m15:26:08.628864 [info ] [Thread-2 (]: 82 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_medical_claim_dates_inst  [[33mSKIP[0m]
[0m15:26:08.629447 [info ] [Thread-1 (]: 83 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_medical_claim_denominators  [[33mSKIP[0m]
[0m15:26:08.629930 [info ] [Thread-3 (]: 84 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_medical_claim_duplicates  [[33mSKIP[0m]
[0m15:26:08.630437 [debug] [Thread-4 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_inst_missing_values
[0m15:26:08.631102 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_dates_inst
[0m15:26:08.631618 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_denominators
[0m15:26:08.632243 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_duplicates
[0m15:26:08.632781 [info ] [Thread-4 (]: 85 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_medical_claim_inst_missing_values  [[33mSKIP[0m]
[0m15:26:08.633250 [debug] [Thread-2 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_npi
[0m15:26:08.633717 [debug] [Thread-1 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_values
[0m15:26:08.634187 [debug] [Thread-3 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_line_numbers
[0m15:26:08.634638 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_inst_missing_values
[0m15:26:08.635079 [info ] [Thread-2 (]: 86 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_medical_claim_invalid_npi  [[33mSKIP[0m]
[0m15:26:08.635468 [info ] [Thread-1 (]: 87 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_medical_claim_invalid_values  [[33mSKIP[0m]
[0m15:26:08.635976 [info ] [Thread-3 (]: 88 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_medical_claim_line_numbers  [[33mSKIP[0m]
[0m15:26:08.636449 [debug] [Thread-4 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_plausibility
[0m15:26:08.636883 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_npi
[0m15:26:08.637342 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_invalid_values
[0m15:26:08.637810 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_line_numbers
[0m15:26:08.638241 [info ] [Thread-4 (]: 89 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_medical_claim_plausibility  [[33mSKIP[0m]
[0m15:26:08.638723 [debug] [Thread-2 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_prof_missing_values
[0m15:26:08.639219 [debug] [Thread-1 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_professional_header_fail_details
[0m15:26:08.639809 [debug] [Thread-3 (]: Began running node model.the_tuva_project.emergency_department__stg_medical_claim
[0m15:26:08.640294 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_plausibility
[0m15:26:08.640936 [info ] [Thread-2 (]: 90 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_medical_claim_prof_missing_values  [[33mSKIP[0m]
[0m15:26:08.641657 [info ] [Thread-1 (]: 91 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_professional_header_fail_details  [[33mSKIP[0m]
[0m15:26:08.642297 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.emergency_department__stg_medical_claim
[0m15:26:08.642877 [debug] [Thread-4 (]: Began running node model.the_tuva_project.service_category__stg_medical_claim
[0m15:26:08.644664 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_medical_claim_prof_missing_values
[0m15:26:08.645207 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_professional_header_fail_details
[0m15:26:08.645990 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.service_category__stg_medical_claim
[0m15:26:08.647377 [debug] [Thread-3 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_medical_claim
[0m15:26:08.650454 [debug] [Thread-1 (]: Began running node model.the_tuva_project.service_category__acute_inpatient_institutional
[0m15:26:08.651267 [debug] [Thread-2 (]: Began running node model.the_tuva_project.service_category__acute_inpatient_professional
[0m15:26:08.650956 [info ] [Thread-3 (]: 92 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_test_detail_stage_medical_claim  [[33mSKIP[0m]
[0m15:26:08.651711 [debug] [Thread-4 (]: Began running node model.the_tuva_project.service_category__ambulance_professional
[0m15:26:08.652313 [info ] [Thread-1 (]: 93 of 307 SKIP relation claims_preprocessing.service_category__acute_inpatient_institutional  [[33mSKIP[0m]
[0m15:26:08.653070 [info ] [Thread-2 (]: 94 of 307 SKIP relation claims_preprocessing.service_category__acute_inpatient_professional  [[33mSKIP[0m]
[0m15:26:08.653599 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_medical_claim
[0m15:26:08.654119 [info ] [Thread-4 (]: 95 of 307 SKIP relation claims_preprocessing.service_category__ambulance_professional  [[33mSKIP[0m]
[0m15:26:08.654625 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.service_category__acute_inpatient_institutional
[0m15:26:08.655081 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.service_category__acute_inpatient_professional
[0m15:26:08.655550 [debug] [Thread-3 (]: Began running node model.the_tuva_project.service_category__dialysis_institutional
[0m15:26:08.656014 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.service_category__ambulance_professional
[0m15:26:08.657006 [debug] [Thread-1 (]: Began running node model.the_tuva_project.service_category__dialysis_professional
[0m15:26:08.657798 [debug] [Thread-2 (]: Began running node model.the_tuva_project.service_category__dme_professional
[0m15:26:08.658462 [info ] [Thread-3 (]: 96 of 307 SKIP relation claims_preprocessing.service_category__dialysis_institutional  [[33mSKIP[0m]
[0m15:26:08.659098 [debug] [Thread-4 (]: Began running node model.the_tuva_project.service_category__dq_input_layer_tests
[0m15:26:08.659627 [info ] [Thread-1 (]: 97 of 307 SKIP relation claims_preprocessing.service_category__dialysis_professional  [[33mSKIP[0m]
[0m15:26:08.660176 [info ] [Thread-2 (]: 98 of 307 SKIP relation claims_preprocessing.service_category__dme_professional  [[33mSKIP[0m]
[0m15:26:08.660673 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.service_category__dialysis_institutional
[0m15:26:08.661165 [info ] [Thread-4 (]: 99 of 307 SKIP relation claims_preprocessing.service_category__dq_input_layer_tests  [[33mSKIP[0m]
[0m15:26:08.661654 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.service_category__dialysis_professional
[0m15:26:08.662117 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.service_category__dme_professional
[0m15:26:08.662598 [debug] [Thread-3 (]: Began running node model.the_tuva_project.service_category__duplicate_bill_types
[0m15:26:08.663049 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.service_category__dq_input_layer_tests
[0m15:26:08.663516 [debug] [Thread-1 (]: Began running node model.the_tuva_project.service_category__emergency_department_professional
[0m15:26:08.664050 [debug] [Thread-2 (]: Began running node model.the_tuva_project.service_category__home_health_institutional
[0m15:26:08.664623 [info ] [Thread-3 (]: 100 of 307 SKIP relation claims_preprocessing.service_category__duplicate_bill_types  [[33mSKIP[0m]
[0m15:26:08.665116 [debug] [Thread-4 (]: Began running node model.the_tuva_project.service_category__hospice_institutional
[0m15:26:08.666398 [info ] [Thread-1 (]: 101 of 307 SKIP relation claims_preprocessing.service_category__emergency_department_professional  [[33mSKIP[0m]
[0m15:26:08.666885 [info ] [Thread-2 (]: 102 of 307 SKIP relation claims_preprocessing.service_category__home_health_institutional  [[33mSKIP[0m]
[0m15:26:08.667360 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.service_category__duplicate_bill_types
[0m15:26:08.667787 [info ] [Thread-4 (]: 103 of 307 SKIP relation claims_preprocessing.service_category__hospice_institutional  [[33mSKIP[0m]
[0m15:26:08.668273 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.service_category__emergency_department_professional
[0m15:26:08.668719 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.service_category__home_health_institutional
[0m15:26:08.669236 [debug] [Thread-3 (]: Began running node model.the_tuva_project.service_category__hospice_professional
[0m15:26:08.669709 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.service_category__hospice_institutional
[0m15:26:08.670199 [debug] [Thread-1 (]: Began running node model.the_tuva_project.service_category__inpatient_psychiatric_professional
[0m15:26:08.671082 [debug] [Thread-2 (]: Began running node model.the_tuva_project.service_category__inpatient_rehab_professional
[0m15:26:08.671561 [info ] [Thread-3 (]: 104 of 307 SKIP relation claims_preprocessing.service_category__hospice_professional  [[33mSKIP[0m]
[0m15:26:08.672064 [debug] [Thread-4 (]: Began running node model.the_tuva_project.service_category__lab_institutional
[0m15:26:08.672535 [info ] [Thread-1 (]: 105 of 307 SKIP relation claims_preprocessing.service_category__inpatient_psychiatric_professional  [[33mSKIP[0m]
[0m15:26:08.672990 [info ] [Thread-2 (]: 106 of 307 SKIP relation claims_preprocessing.service_category__inpatient_rehab_professional  [[33mSKIP[0m]
[0m15:26:08.673455 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.service_category__hospice_professional
[0m15:26:08.673889 [info ] [Thread-4 (]: 107 of 307 SKIP relation claims_preprocessing.service_category__lab_institutional  [[33mSKIP[0m]
[0m15:26:08.674416 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.service_category__inpatient_psychiatric_professional
[0m15:26:08.674816 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.service_category__inpatient_rehab_professional
[0m15:26:08.675444 [debug] [Thread-3 (]: Began running node model.the_tuva_project.service_category__lab_professional
[0m15:26:08.676033 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.service_category__lab_institutional
[0m15:26:08.676539 [debug] [Thread-1 (]: Began running node model.the_tuva_project.service_category__office_visit_professional
[0m15:26:08.677079 [debug] [Thread-2 (]: Began running node model.the_tuva_project.service_category__outpatient_hospital_or_clinic_professional
[0m15:26:08.677577 [info ] [Thread-3 (]: 108 of 307 SKIP relation claims_preprocessing.service_category__lab_professional  [[33mSKIP[0m]
[0m15:26:08.678179 [debug] [Thread-4 (]: Began running node model.the_tuva_project.service_category__outpatient_psychiatric_institutional
[0m15:26:08.678618 [info ] [Thread-1 (]: 109 of 307 SKIP relation claims_preprocessing.service_category__office_visit_professional  [[33mSKIP[0m]
[0m15:26:08.679154 [info ] [Thread-2 (]: 110 of 307 SKIP relation claims_preprocessing.service_category__outpatient_hospital_or_clinic_professional  [[33mSKIP[0m]
[0m15:26:08.679723 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.service_category__lab_professional
[0m15:26:08.680252 [info ] [Thread-4 (]: 111 of 307 SKIP relation claims_preprocessing.service_category__outpatient_psychiatric_institutional  [[33mSKIP[0m]
[0m15:26:08.680839 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.service_category__office_visit_professional
[0m15:26:08.681349 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.service_category__outpatient_hospital_or_clinic_professional
[0m15:26:08.681833 [debug] [Thread-3 (]: Began running node model.the_tuva_project.service_category__outpatient_psychiatric_professional
[0m15:26:08.682286 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.service_category__outpatient_psychiatric_institutional
[0m15:26:08.682722 [debug] [Thread-1 (]: Began running node model.the_tuva_project.service_category__outpatient_rehab_professional
[0m15:26:08.683162 [debug] [Thread-2 (]: Began running node model.the_tuva_project.service_category__skilled_nursing_institutional
[0m15:26:08.683578 [info ] [Thread-3 (]: 112 of 307 SKIP relation claims_preprocessing.service_category__outpatient_psychiatric_professional  [[33mSKIP[0m]
[0m15:26:08.684094 [debug] [Thread-4 (]: Began running node model.the_tuva_project.service_category__urgent_care_professional
[0m15:26:08.684499 [info ] [Thread-1 (]: 113 of 307 SKIP relation claims_preprocessing.service_category__outpatient_rehab_professional  [[33mSKIP[0m]
[0m15:26:08.684990 [info ] [Thread-2 (]: 114 of 307 SKIP relation claims_preprocessing.service_category__skilled_nursing_institutional  [[33mSKIP[0m]
[0m15:26:08.685560 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.service_category__outpatient_psychiatric_professional
[0m15:26:08.686070 [info ] [Thread-4 (]: 115 of 307 SKIP relation claims_preprocessing.service_category__urgent_care_professional  [[33mSKIP[0m]
[0m15:26:08.686539 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.service_category__outpatient_rehab_professional
[0m15:26:08.686996 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.service_category__skilled_nursing_institutional
[0m15:26:08.688007 [debug] [Thread-3 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_test_detail
[0m15:26:08.688427 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.service_category__urgent_care_professional
[0m15:26:08.688884 [debug] [Thread-1 (]: Began running node model.the_tuva_project.service_category__emergency_department_institutional
[0m15:26:08.689325 [debug] [Thread-2 (]: Began running node model.the_tuva_project.service_category__ambulatory_surgery_professional
[0m15:26:08.689804 [info ] [Thread-3 (]: 116 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_test_detail  [[33mSKIP[0m]
[0m15:26:08.690407 [debug] [Thread-4 (]: Began running node model.the_tuva_project.service_category__home_health_professional
[0m15:26:08.691127 [info ] [Thread-1 (]: 117 of 307 SKIP relation claims_preprocessing.service_category__emergency_department_institutional  [[33mSKIP[0m]
[0m15:26:08.691688 [info ] [Thread-2 (]: 118 of 307 SKIP relation claims_preprocessing.service_category__ambulatory_surgery_professional  [[33mSKIP[0m]
[0m15:26:08.692199 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_test_detail
[0m15:26:08.692638 [info ] [Thread-4 (]: 119 of 307 SKIP relation claims_preprocessing.service_category__home_health_professional  [[33mSKIP[0m]
[0m15:26:08.693081 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.service_category__emergency_department_institutional
[0m15:26:08.693492 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.service_category__ambulatory_surgery_professional
[0m15:26:08.694187 [debug] [Thread-3 (]: Began running node model.the_tuva_project.service_category__skilled_nursing_professional
[0m15:26:08.694755 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.service_category__home_health_professional
[0m15:26:08.696112 [debug] [Thread-1 (]: Began running node model.the_tuva_project.service_category__dq_input_layer_results
[0m15:26:08.696956 [debug] [Thread-2 (]: Began running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_source_table.cf991d30ab
[0m15:26:08.697495 [info ] [Thread-3 (]: 120 of 307 SKIP relation claims_preprocessing.service_category__skilled_nursing_professional  [[33mSKIP[0m]
[0m15:26:08.698199 [debug] [Thread-4 (]: Began running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_test_category.ced96217c6
[0m15:26:08.698664 [info ] [Thread-1 (]: 121 of 307 SKIP relation claims_preprocessing.service_category__dq_input_layer_results  [[33mSKIP[0m]
[0m15:26:08.699140 [info ] [Thread-2 (]: 122 of 307 SKIP test not_null_data_quality__claims_preprocessing_test_detail_source_table  [[33mSKIP[0m]
[0m15:26:08.699612 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.service_category__skilled_nursing_professional
[0m15:26:08.700030 [info ] [Thread-4 (]: 123 of 307 SKIP test not_null_data_quality__claims_preprocessing_test_detail_test_category  [[33mSKIP[0m]
[0m15:26:08.700492 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.service_category__dq_input_layer_results
[0m15:26:08.700985 [debug] [Thread-2 (]: Finished running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_source_table.cf991d30ab
[0m15:26:08.701450 [debug] [Thread-3 (]: Began running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_test_name.dba1927ba6
[0m15:26:08.701934 [debug] [Thread-4 (]: Finished running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_test_category.ced96217c6
[0m15:26:08.702401 [debug] [Thread-1 (]: Began running node model.the_tuva_project.service_category__urgent_care_institutional
[0m15:26:08.703111 [debug] [Thread-2 (]: Began running node model.the_tuva_project.service_category__combined_professional
[0m15:26:08.705577 [info ] [Thread-3 (]: 124 of 307 SKIP test not_null_data_quality__claims_preprocessing_test_detail_test_name  [[33mSKIP[0m]
[0m15:26:08.706412 [info ] [Thread-1 (]: 125 of 307 SKIP relation claims_preprocessing.service_category__urgent_care_institutional  [[33mSKIP[0m]
[0m15:26:08.706894 [info ] [Thread-2 (]: 126 of 307 SKIP relation claims_preprocessing.service_category__combined_professional  [[33mSKIP[0m]
[0m15:26:08.707343 [debug] [Thread-3 (]: Finished running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_detail_test_name.dba1927ba6
[0m15:26:08.707745 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.service_category__urgent_care_institutional
[0m15:26:08.708231 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.service_category__combined_professional
[0m15:26:08.710424 [debug] [Thread-4 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_summary
[0m15:26:08.710963 [debug] [Thread-3 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_eligibility
[0m15:26:08.711319 [debug] [Thread-1 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_medical_claim
[0m15:26:08.711747 [debug] [Thread-2 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_pharmacy_claim
[0m15:26:08.712436 [info ] [Thread-4 (]: 127 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_summary  [[33mSKIP[0m]
[0m15:26:08.712874 [info ] [Thread-3 (]: 128 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_test_result_stage_eligibility  [[33mSKIP[0m]
[0m15:26:08.713409 [info ] [Thread-1 (]: 129 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_test_result_stage_medical_claim  [[33mSKIP[0m]
[0m15:26:08.713910 [info ] [Thread-2 (]: 130 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_test_result_stage_pharmacy_claim  [[33mSKIP[0m]
[0m15:26:08.714390 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_summary
[0m15:26:08.714907 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_eligibility
[0m15:26:08.715323 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_medical_claim
[0m15:26:08.715740 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_test_result_stage_pharmacy_claim
[0m15:26:08.716193 [debug] [Thread-4 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_use_case
[0m15:26:08.716863 [debug] [Thread-3 (]: Began running node model.the_tuva_project.service_category__outpatient_hospital_or_clinic_institutional
[0m15:26:08.717360 [debug] [Thread-1 (]: Began running node model.the_tuva_project.service_category__dq_multiple_service_categories_professional
[0m15:26:08.717791 [debug] [Thread-2 (]: Began running node test.the_tuva_project.claims_preprocessing_pipeline_checks_data_quality__claims_preprocessing_summary_.b6e0d43468
[0m15:26:08.718500 [info ] [Thread-4 (]: 131 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_use_case  [[33mSKIP[0m]
[0m15:26:08.719186 [info ] [Thread-3 (]: 132 of 307 SKIP relation claims_preprocessing.service_category__outpatient_hospital_or_clinic_institutional  [[33mSKIP[0m]
[0m15:26:08.719668 [info ] [Thread-1 (]: 133 of 307 SKIP relation claims_preprocessing.service_category__dq_multiple_service_categories_professional  [[33mSKIP[0m]
[0m15:26:08.720122 [info ] [Thread-2 (]: 134 of 307 SKIP test claims_preprocessing_pipeline_checks_data_quality__claims_preprocessing_summary_  [[33mSKIP[0m]
[0m15:26:08.720644 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_use_case
[0m15:26:08.721183 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.service_category__outpatient_hospital_or_clinic_institutional
[0m15:26:08.721637 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.service_category__dq_multiple_service_categories_professional
[0m15:26:08.722070 [debug] [Thread-2 (]: Finished running node test.the_tuva_project.claims_preprocessing_pipeline_checks_data_quality__claims_preprocessing_summary_.b6e0d43468
[0m15:26:08.722547 [debug] [Thread-4 (]: Began running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_summary_source_table.69a94b9930
[0m15:26:08.724080 [debug] [Thread-3 (]: Began running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_summary_test_category.096fbc6a15
[0m15:26:08.725188 [debug] [Thread-1 (]: Began running node model.the_tuva_project.data_quality__claims_preprocessing_test_result
[0m15:26:08.725874 [debug] [Thread-2 (]: Began running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_source_table.aa47c26a47
[0m15:26:08.726958 [info ] [Thread-4 (]: 135 of 307 SKIP test not_null_data_quality__claims_preprocessing_summary_source_table  [[33mSKIP[0m]
[0m15:26:08.727471 [info ] [Thread-3 (]: 136 of 307 SKIP test not_null_data_quality__claims_preprocessing_summary_test_category  [[33mSKIP[0m]
[0m15:26:08.727939 [info ] [Thread-1 (]: 137 of 307 SKIP relation data_quality.data_quality__claims_preprocessing_test_result  [[33mSKIP[0m]
[0m15:26:08.728396 [info ] [Thread-2 (]: 138 of 307 SKIP test not_null_data_quality__claims_preprocessing_use_case_source_table  [[33mSKIP[0m]
[0m15:26:08.728860 [debug] [Thread-4 (]: Finished running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_summary_source_table.69a94b9930
[0m15:26:08.729287 [debug] [Thread-3 (]: Finished running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_summary_test_category.096fbc6a15
[0m15:26:08.729674 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.data_quality__claims_preprocessing_test_result
[0m15:26:08.730081 [debug] [Thread-2 (]: Finished running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_source_table.aa47c26a47
[0m15:26:08.730612 [debug] [Thread-4 (]: Began running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_test_name.d9661e41fa
[0m15:26:08.732159 [debug] [Thread-3 (]: Began running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_use_case.50708d3a7d
[0m15:26:08.734233 [debug] [Thread-1 (]: Began running node model.the_tuva_project.service_category__combined_institutional
[0m15:26:08.734863 [debug] [Thread-2 (]: Began running node model.the_tuva_project.core__stg_claims_eligibility
[0m15:26:08.735331 [info ] [Thread-4 (]: 139 of 307 SKIP test not_null_data_quality__claims_preprocessing_use_case_test_name  [[33mSKIP[0m]
[0m15:26:08.735784 [info ] [Thread-3 (]: 140 of 307 SKIP test not_null_data_quality__claims_preprocessing_use_case_use_case  [[33mSKIP[0m]
[0m15:26:08.736213 [info ] [Thread-1 (]: 141 of 307 SKIP relation claims_preprocessing.service_category__combined_institutional  [[33mSKIP[0m]
[0m15:26:08.736666 [info ] [Thread-2 (]: 142 of 307 SKIP relation core.core__stg_claims_eligibility ..................... [[33mSKIP[0m]
[0m15:26:08.737109 [debug] [Thread-4 (]: Finished running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_test_name.d9661e41fa
[0m15:26:08.737515 [debug] [Thread-3 (]: Finished running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_use_case_use_case.50708d3a7d
[0m15:26:08.737892 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.service_category__combined_institutional
[0m15:26:08.738299 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.core__stg_claims_eligibility
[0m15:26:08.739008 [debug] [Thread-4 (]: Began running node model.the_tuva_project.core__stg_claims_patient
[0m15:26:08.739524 [debug] [Thread-3 (]: Began running node model.the_tuva_project.core__stg_claims_pharmacy_claim
[0m15:26:08.739948 [debug] [Thread-1 (]: Began running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_source_table.6995ae2e57
[0m15:26:08.740865 [debug] [Thread-2 (]: Began running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_test_category.70042a7a27
[0m15:26:08.741713 [info ] [Thread-4 (]: 143 of 307 SKIP relation core.core__stg_claims_patient ......................... [[33mSKIP[0m]
[0m15:26:08.742333 [info ] [Thread-3 (]: 144 of 307 SKIP relation core.core__stg_claims_pharmacy_claim .................. [[33mSKIP[0m]
[0m15:26:08.742998 [info ] [Thread-1 (]: 145 of 307 SKIP test not_null_data_quality__claims_preprocessing_test_result_source_table  [[33mSKIP[0m]
[0m15:26:08.743607 [info ] [Thread-2 (]: 146 of 307 SKIP test not_null_data_quality__claims_preprocessing_test_result_test_category  [[33mSKIP[0m]
[0m15:26:08.744072 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.core__stg_claims_patient
[0m15:26:08.744475 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.core__stg_claims_pharmacy_claim
[0m15:26:08.744872 [debug] [Thread-1 (]: Finished running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_source_table.6995ae2e57
[0m15:26:08.745286 [debug] [Thread-2 (]: Finished running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_test_category.70042a7a27
[0m15:26:08.745818 [debug] [Thread-4 (]: Began running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_test_name.745065a5e9
[0m15:26:08.746724 [debug] [Thread-3 (]: Began running node model.the_tuva_project.service_category__dq_multiple_service_categories_institutional
[0m15:26:08.747559 [debug] [Thread-1 (]: Began running node model.the_tuva_project.service_category__service_category_grouper
[0m15:26:08.748175 [debug] [Thread-2 (]: Began running node model.the_tuva_project.core__eligibility
[0m15:26:08.748642 [info ] [Thread-4 (]: 147 of 307 SKIP test not_null_data_quality__claims_preprocessing_test_result_test_name  [[33mSKIP[0m]
[0m15:26:08.749167 [info ] [Thread-3 (]: 148 of 307 SKIP relation claims_preprocessing.service_category__dq_multiple_service_categories_institutional  [[33mSKIP[0m]
[0m15:26:08.749665 [info ] [Thread-1 (]: 149 of 307 SKIP relation claims_preprocessing.service_category__service_category_grouper  [[33mSKIP[0m]
[0m15:26:08.750092 [info ] [Thread-2 (]: 150 of 307 SKIP relation core.core__eligibility ................................ [[33mSKIP[0m]
[0m15:26:08.750622 [debug] [Thread-4 (]: Finished running node test.the_tuva_project.not_null_data_quality__claims_preprocessing_test_result_test_name.745065a5e9
[0m15:26:08.751098 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.service_category__dq_multiple_service_categories_institutional
[0m15:26:08.751533 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.service_category__service_category_grouper
[0m15:26:08.751978 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.core__eligibility
[0m15:26:08.752607 [debug] [Thread-4 (]: Began running node model.the_tuva_project.core__patient
[0m15:26:08.753229 [debug] [Thread-3 (]: Began running node model.the_tuva_project.core__pharmacy_claim
[0m15:26:08.754319 [debug] [Thread-1 (]: Began running node model.the_tuva_project.acute_inpatient__stg_service_category
[0m15:26:08.754746 [debug] [Thread-2 (]: Began running node model.the_tuva_project.emergency_department__stg_service_category
[0m15:26:08.755909 [info ] [Thread-4 (]: 151 of 307 SKIP relation core.core__patient .................................... [[33mSKIP[0m]
[0m15:26:08.756492 [info ] [Thread-3 (]: 152 of 307 SKIP relation core.core__pharmacy_claim ............................. [[33mSKIP[0m]
[0m15:26:08.757078 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.acute_inpatient__stg_service_category
[0m15:26:08.757750 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.emergency_department__stg_service_category
[0m15:26:08.758377 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.core__patient
[0m15:26:08.758948 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.core__pharmacy_claim
[0m15:26:08.759566 [debug] [Thread-1 (]: Began running node model.the_tuva_project.cms_hcc__stg_core__eligibility
[0m15:26:08.760098 [debug] [Thread-2 (]: Began running node model.the_tuva_project.financial_pmpm__stg_eligibility
[0m15:26:08.760768 [debug] [Thread-4 (]: Began running node model.the_tuva_project.acute_inpatient__institutional_claims
[0m15:26:08.762623 [debug] [Thread-3 (]: Began running node model.the_tuva_project.emergency_department__int_institutional_claims
[0m15:26:08.763502 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.cms_hcc__stg_core__eligibility
[0m15:26:08.764032 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.financial_pmpm__stg_eligibility
[0m15:26:08.764507 [info ] [Thread-4 (]: 153 of 307 SKIP relation claims_preprocessing.acute_inpatient__institutional_claims  [[33mSKIP[0m]
[0m15:26:08.765028 [info ] [Thread-3 (]: 154 of 307 SKIP relation claims_preprocessing.emergency_department__int_institutional_claims  [[33mSKIP[0m]
[0m15:26:08.765573 [debug] [Thread-1 (]: Began running node model.the_tuva_project.cms_chronic_conditions__stg_core__patient
[0m15:26:08.766096 [debug] [Thread-2 (]: Began running node model.the_tuva_project.cms_hcc__stg_core__patient
[0m15:26:08.767429 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.acute_inpatient__institutional_claims
[0m15:26:08.767893 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.emergency_department__int_institutional_claims
[0m15:26:08.768338 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.cms_chronic_conditions__stg_core__patient
[0m15:26:08.768762 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.cms_hcc__stg_core__patient
[0m15:26:08.769201 [debug] [Thread-4 (]: Began running node model.the_tuva_project.ed_classification__stg_patient
[0m15:26:08.769744 [debug] [Thread-3 (]: Began running node model.the_tuva_project.hcc_suspecting__stg_core__patient
[0m15:26:08.770313 [debug] [Thread-1 (]: Began running node model.the_tuva_project.quality_measures__stg_core__patient
[0m15:26:08.770833 [debug] [Thread-2 (]: Began running node model.the_tuva_project.tuva_chronic_conditions__stg_core__patient
[0m15:26:08.771666 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.ed_classification__stg_patient
[0m15:26:08.772214 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.hcc_suspecting__stg_core__patient
[0m15:26:08.772766 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.quality_measures__stg_core__patient
[0m15:26:08.773230 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.tuva_chronic_conditions__stg_core__patient
[0m15:26:08.773704 [debug] [Thread-4 (]: Began running node model.the_tuva_project.financial_pmpm__stg_pharmacy_claim
[0m15:26:08.774239 [debug] [Thread-3 (]: Began running node model.the_tuva_project.quality_measures__stg_pharmacy_claim
[0m15:26:08.774698 [debug] [Thread-1 (]: Began running node model.the_tuva_project.financial_pmpm__member_months
[0m15:26:08.775379 [debug] [Thread-2 (]: Began running node model.the_tuva_project.acute_inpatient__data_quality_summary
[0m15:26:08.776363 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.financial_pmpm__stg_pharmacy_claim
[0m15:26:08.776895 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.quality_measures__stg_pharmacy_claim
[0m15:26:08.777372 [info ] [Thread-1 (]: 155 of 307 SKIP relation financial_pmpm.financial_pmpm__member_months .......... [[33mSKIP[0m]
[0m15:26:08.777866 [info ] [Thread-2 (]: 156 of 307 SKIP relation claims_preprocessing.acute_inpatient__data_quality_summary  [[33mSKIP[0m]
[0m15:26:08.778723 [debug] [Thread-4 (]: Began running node model.the_tuva_project.acute_inpatient__institutional_encounter_id
[0m15:26:08.779213 [debug] [Thread-3 (]: Began running node model.the_tuva_project.emergency_department__int_institutional_encounter_id
[0m15:26:08.779661 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.financial_pmpm__member_months
[0m15:26:08.780131 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.acute_inpatient__data_quality_summary
[0m15:26:08.780609 [info ] [Thread-4 (]: 157 of 307 SKIP relation claims_preprocessing.acute_inpatient__institutional_encounter_id  [[33mSKIP[0m]
[0m15:26:08.781211 [info ] [Thread-3 (]: 158 of 307 SKIP relation claims_preprocessing.emergency_department__int_institutional_encounter_id  [[33mSKIP[0m]
[0m15:26:08.781831 [debug] [Thread-1 (]: Began running node model.the_tuva_project.cms_hcc__int_members
[0m15:26:08.782423 [debug] [Thread-2 (]: Began running node test.the_tuva_project.accepted_values_quality_measures__stg_core__patient_sex__female__male__unknown.e6adc9ce2b
[0m15:26:08.782944 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.acute_inpatient__institutional_encounter_id
[0m15:26:08.783446 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.emergency_department__int_institutional_encounter_id
[0m15:26:08.783984 [info ] [Thread-1 (]: 159 of 307 SKIP relation cms_hcc.cms_hcc__int_members .......................... [[33mSKIP[0m]
[0m15:26:08.784504 [info ] [Thread-2 (]: 160 of 307 SKIP test accepted_values_quality_measures__stg_core__patient_sex__female__male__unknown  [[33mSKIP[0m]
[0m15:26:08.785018 [debug] [Thread-4 (]: Began running node test.the_tuva_project.not_null_quality_measures__stg_core__patient_birth_date.4b3a2e74e6
[0m15:26:08.785490 [debug] [Thread-3 (]: Began running node test.the_tuva_project.not_null_quality_measures__stg_core__patient_patient_id.5510e1a0fd
[0m15:26:08.786058 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.cms_hcc__int_members
[0m15:26:08.786501 [debug] [Thread-2 (]: Finished running node test.the_tuva_project.accepted_values_quality_measures__stg_core__patient_sex__female__male__unknown.e6adc9ce2b
[0m15:26:08.787032 [info ] [Thread-4 (]: 161 of 307 SKIP test not_null_quality_measures__stg_core__patient_birth_date ... [[33mSKIP[0m]
[0m15:26:08.787484 [info ] [Thread-3 (]: 162 of 307 SKIP test not_null_quality_measures__stg_core__patient_patient_id ... [[33mSKIP[0m]
[0m15:26:08.787984 [debug] [Thread-1 (]: Began running node test.the_tuva_project.not_null_quality_measures__stg_core__patient_sex.e2f34cab69
[0m15:26:08.788471 [debug] [Thread-2 (]: Began running node model.the_tuva_project.acute_inpatient__encounter_start_and_end_dates
[0m15:26:08.789552 [debug] [Thread-4 (]: Finished running node test.the_tuva_project.not_null_quality_measures__stg_core__patient_birth_date.4b3a2e74e6
[0m15:26:08.790147 [debug] [Thread-3 (]: Finished running node test.the_tuva_project.not_null_quality_measures__stg_core__patient_patient_id.5510e1a0fd
[0m15:26:08.790773 [info ] [Thread-1 (]: 163 of 307 SKIP test not_null_quality_measures__stg_core__patient_sex .......... [[33mSKIP[0m]
[0m15:26:08.791449 [info ] [Thread-2 (]: 164 of 307 SKIP relation claims_preprocessing.acute_inpatient__encounter_start_and_end_dates  [[33mSKIP[0m]
[0m15:26:08.792047 [debug] [Thread-4 (]: Began running node model.the_tuva_project.emergency_department__int_encounter_start_and_end_dates
[0m15:26:08.793002 [debug] [Thread-3 (]: Began running node test.the_tuva_project.not_null_cms_hcc__int_members_patient_id.75e528329b
[0m15:26:08.793490 [debug] [Thread-1 (]: Finished running node test.the_tuva_project.not_null_quality_measures__stg_core__patient_sex.e2f34cab69
[0m15:26:08.793936 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.acute_inpatient__encounter_start_and_end_dates
[0m15:26:08.794361 [info ] [Thread-4 (]: 165 of 307 SKIP relation claims_preprocessing.emergency_department__int_encounter_start_and_end_dates  [[33mSKIP[0m]
[0m15:26:08.794752 [info ] [Thread-3 (]: 166 of 307 SKIP test not_null_cms_hcc__int_members_patient_id .................. [[33mSKIP[0m]
[0m15:26:08.795212 [debug] [Thread-1 (]: Began running node test.the_tuva_project.unique_cms_hcc__int_members_patient_id.4d202f2bbb
[0m15:26:08.796010 [debug] [Thread-2 (]: Began running node model.the_tuva_project.acute_inpatient__professional_encounter_id
[0m15:26:08.796442 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.emergency_department__int_encounter_start_and_end_dates
[0m15:26:08.796873 [debug] [Thread-3 (]: Finished running node test.the_tuva_project.not_null_cms_hcc__int_members_patient_id.75e528329b
[0m15:26:08.797327 [info ] [Thread-1 (]: 167 of 307 SKIP test unique_cms_hcc__int_members_patient_id .................... [[33mSKIP[0m]
[0m15:26:08.797798 [info ] [Thread-2 (]: 168 of 307 SKIP relation claims_preprocessing.acute_inpatient__professional_encounter_id  [[33mSKIP[0m]
[0m15:26:08.798425 [debug] [Thread-4 (]: Began running node model.the_tuva_project.emergency_department__int_professional_encounter_id
[0m15:26:08.798949 [debug] [Thread-1 (]: Finished running node test.the_tuva_project.unique_cms_hcc__int_members_patient_id.4d202f2bbb
[0m15:26:08.799356 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.acute_inpatient__professional_encounter_id
[0m15:26:08.799766 [info ] [Thread-4 (]: 169 of 307 SKIP relation claims_preprocessing.emergency_department__int_professional_encounter_id  [[33mSKIP[0m]
[0m15:26:08.801230 [debug] [Thread-3 (]: Began running node model.the_tuva_project.cms_hcc__int_demographic_factors
[0m15:26:08.801760 [debug] [Thread-1 (]: Began running node model.the_tuva_project.acute_inpatient__encounter_id
[0m15:26:08.802230 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.emergency_department__int_professional_encounter_id
[0m15:26:08.802665 [info ] [Thread-3 (]: 170 of 307 SKIP relation cms_hcc.cms_hcc__int_demographic_factors .............. [[33mSKIP[0m]
[0m15:26:08.803166 [info ] [Thread-1 (]: 171 of 307 SKIP relation claims_preprocessing.acute_inpatient__encounter_id .... [[33mSKIP[0m]
[0m15:26:08.803850 [debug] [Thread-2 (]: Began running node model.the_tuva_project.emergency_department__int_encounter_id
[0m15:26:08.804404 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.cms_hcc__int_demographic_factors
[0m15:26:08.804895 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.acute_inpatient__encounter_id
[0m15:26:08.805411 [info ] [Thread-2 (]: 172 of 307 SKIP relation claims_preprocessing.emergency_department__int_encounter_id  [[33mSKIP[0m]
[0m15:26:08.806444 [debug] [Thread-4 (]: Began running node test.the_tuva_project.unique_cms_hcc__int_demographic_factors__patient_id_model_version_.21c6216400
[0m15:26:08.807228 [debug] [Thread-3 (]: Began running node model.the_tuva_project.acute_inpatient__claims_with_encounter_data
[0m15:26:08.807532 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.emergency_department__int_encounter_id
[0m15:26:08.807833 [debug] [Thread-1 (]: Began running node model.the_tuva_project.acute_inpatient__first_claim_values
[0m15:26:08.808296 [info ] [Thread-4 (]: 173 of 307 SKIP test unique_cms_hcc__int_demographic_factors__patient_id_model_version_  [[33mSKIP[0m]
[0m15:26:08.808727 [info ] [Thread-3 (]: 174 of 307 SKIP relation claims_preprocessing.acute_inpatient__claims_with_encounter_data  [[33mSKIP[0m]
[0m15:26:08.809213 [debug] [Thread-2 (]: Began running node model.the_tuva_project.acute_inpatient__last_claim_values
[0m15:26:08.810639 [info ] [Thread-1 (]: 175 of 307 SKIP relation claims_preprocessing.acute_inpatient__first_claim_values  [[33mSKIP[0m]
[0m15:26:08.811309 [debug] [Thread-4 (]: Finished running node test.the_tuva_project.unique_cms_hcc__int_demographic_factors__patient_id_model_version_.21c6216400
[0m15:26:08.811744 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.acute_inpatient__claims_with_encounter_data
[0m15:26:08.812183 [info ] [Thread-2 (]: 176 of 307 SKIP relation claims_preprocessing.acute_inpatient__last_claim_values  [[33mSKIP[0m]
[0m15:26:08.812640 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.acute_inpatient__first_claim_values
[0m15:26:08.813291 [debug] [Thread-4 (]: Began running node model.the_tuva_project.core__stg_claims_condition
[0m15:26:08.814337 [debug] [Thread-3 (]: Began running node model.the_tuva_project.core__stg_claims_medical_claim
[0m15:26:08.815180 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.acute_inpatient__last_claim_values
[0m15:26:08.815757 [debug] [Thread-1 (]: Began running node model.the_tuva_project.core__stg_claims_procedure
[0m15:26:08.816302 [info ] [Thread-4 (]: 177 of 307 SKIP relation core.core__stg_claims_condition ....................... [[33mSKIP[0m]
[0m15:26:08.816885 [info ] [Thread-3 (]: 178 of 307 SKIP relation core.core__stg_claims_medical_claim ................... [[33mSKIP[0m]
[0m15:26:08.817475 [debug] [Thread-2 (]: Began running node model.the_tuva_project.emergency_department__int_first_claim_values
[0m15:26:08.817962 [info ] [Thread-1 (]: 179 of 307 SKIP relation core.core__stg_claims_procedure ....................... [[33mSKIP[0m]
[0m15:26:08.818472 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.core__stg_claims_condition
[0m15:26:08.818933 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.core__stg_claims_medical_claim
[0m15:26:08.819385 [info ] [Thread-2 (]: 180 of 307 SKIP relation claims_preprocessing.emergency_department__int_first_claim_values  [[33mSKIP[0m]
[0m15:26:08.819841 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.core__stg_claims_procedure
[0m15:26:08.820336 [debug] [Thread-4 (]: Began running node model.the_tuva_project.emergency_department__int_last_claim_values
[0m15:26:08.821423 [debug] [Thread-3 (]: Began running node model.the_tuva_project.cms_hcc__int_enrollment_interaction_factors
[0m15:26:08.822208 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.emergency_department__int_first_claim_values
[0m15:26:08.822896 [debug] [Thread-1 (]: Began running node model.the_tuva_project.acute_inpatient__encounter_data_for_medical_claims
[0m15:26:08.823597 [info ] [Thread-4 (]: 181 of 307 SKIP relation claims_preprocessing.emergency_department__int_last_claim_values  [[33mSKIP[0m]
[0m15:26:08.824221 [info ] [Thread-3 (]: 182 of 307 SKIP relation cms_hcc.cms_hcc__int_enrollment_interaction_factors ... [[33mSKIP[0m]
[0m15:26:08.824846 [debug] [Thread-2 (]: Began running node model.the_tuva_project.acute_inpatient__summary
[0m15:26:08.825335 [info ] [Thread-1 (]: 183 of 307 SKIP relation claims_preprocessing.acute_inpatient__encounter_data_for_medical_claims  [[33mSKIP[0m]
[0m15:26:08.825774 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.emergency_department__int_last_claim_values
[0m15:26:08.826209 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.cms_hcc__int_enrollment_interaction_factors
[0m15:26:08.826632 [info ] [Thread-2 (]: 184 of 307 SKIP relation claims_preprocessing.acute_inpatient__summary ......... [[33mSKIP[0m]
[0m15:26:08.827099 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.acute_inpatient__encounter_data_for_medical_claims
[0m15:26:08.827835 [debug] [Thread-4 (]: Began running node model.the_tuva_project.core__condition
[0m15:26:08.828388 [debug] [Thread-3 (]: Began running node model.the_tuva_project.core__medical_claim
[0m15:26:08.828805 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.acute_inpatient__summary
[0m15:26:08.829294 [debug] [Thread-1 (]: Began running node model.the_tuva_project.core__stg_claims_location
[0m15:26:08.829737 [info ] [Thread-4 (]: 185 of 307 SKIP relation core.core__condition .................................. [[33mSKIP[0m]
[0m15:26:08.830165 [info ] [Thread-3 (]: 186 of 307 SKIP relation core.core__medical_claim .............................. [[33mSKIP[0m]
[0m15:26:08.830725 [debug] [Thread-2 (]: Began running node model.the_tuva_project.core__stg_claims_practitioner
[0m15:26:08.831546 [info ] [Thread-1 (]: 187 of 307 SKIP relation core.core__stg_claims_location ........................ [[33mSKIP[0m]
[0m15:26:08.832068 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.core__condition
[0m15:26:08.832512 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.core__medical_claim
[0m15:26:08.832963 [info ] [Thread-2 (]: 188 of 307 SKIP relation core.core__stg_claims_practitioner .................... [[33mSKIP[0m]
[0m15:26:08.833410 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.core__stg_claims_location
[0m15:26:08.833827 [debug] [Thread-4 (]: Began running node model.the_tuva_project.core__procedure
[0m15:26:08.834274 [debug] [Thread-3 (]: Began running node model.the_tuva_project.emergency_department__summary
[0m15:26:08.834952 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.core__stg_claims_practitioner
[0m15:26:08.835463 [debug] [Thread-1 (]: Began running node test.the_tuva_project.unique_core__condition_condition_id.ef1067e2f0
[0m15:26:08.836089 [info ] [Thread-4 (]: 189 of 307 SKIP relation core.core__procedure .................................. [[33mSKIP[0m]
[0m15:26:08.836625 [info ] [Thread-3 (]: 190 of 307 SKIP relation claims_preprocessing.emergency_department__summary .... [[33mSKIP[0m]
[0m15:26:08.837149 [debug] [Thread-2 (]: Began running node test.the_tuva_project.unique_core__medical_claim__claim_id_claim_line_number_.b9ab42f1f0
[0m15:26:08.837591 [info ] [Thread-1 (]: 191 of 307 SKIP test unique_core__condition_condition_id ....................... [[33mSKIP[0m]
[0m15:26:08.838190 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.core__procedure
[0m15:26:08.838611 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.emergency_department__summary
[0m15:26:08.839036 [info ] [Thread-2 (]: 192 of 307 SKIP test unique_core__medical_claim__claim_id_claim_line_number_ ... [[33mSKIP[0m]
[0m15:26:08.839480 [debug] [Thread-1 (]: Finished running node test.the_tuva_project.unique_core__condition_condition_id.ef1067e2f0
[0m15:26:08.840201 [debug] [Thread-4 (]: Began running node model.the_tuva_project.core__location
[0m15:26:08.840709 [debug] [Thread-3 (]: Began running node model.the_tuva_project.core__practitioner
[0m15:26:08.841552 [debug] [Thread-2 (]: Finished running node test.the_tuva_project.unique_core__medical_claim__claim_id_claim_line_number_.b9ab42f1f0
[0m15:26:08.842113 [debug] [Thread-1 (]: Began running node test.the_tuva_project.unique_core__procedure_procedure_id.feb1b6b4d5
[0m15:26:08.842964 [info ] [Thread-4 (]: 193 of 307 SKIP relation core.core__location ................................... [[33mSKIP[0m]
[0m15:26:08.846801 [info ] [Thread-3 (]: 194 of 307 SKIP relation core.core__practitioner ............................... [[33mSKIP[0m]
[0m15:26:08.848656 [debug] [Thread-2 (]: Began running node model.the_tuva_project.core__stg_claims_encounter
[0m15:26:08.854281 [info ] [Thread-1 (]: 195 of 307 SKIP test unique_core__procedure_procedure_id ....................... [[33mSKIP[0m]
[0m15:26:08.855789 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.core__location
[0m15:26:08.856651 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.core__practitioner
[0m15:26:08.857388 [info ] [Thread-2 (]: 196 of 307 SKIP relation core.core__stg_claims_encounter ....................... [[33mSKIP[0m]
[0m15:26:08.858078 [debug] [Thread-1 (]: Finished running node test.the_tuva_project.unique_core__procedure_procedure_id.feb1b6b4d5
[0m15:26:08.859038 [debug] [Thread-4 (]: Began running node model.the_tuva_project.ccsr__stg_core__condition
[0m15:26:08.860813 [debug] [Thread-3 (]: Began running node model.the_tuva_project.cms_chronic_conditions__stg_core__condition
[0m15:26:08.861722 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.core__stg_claims_encounter
[0m15:26:08.862363 [debug] [Thread-1 (]: Began running node model.the_tuva_project.cms_hcc__stg_core__condition
[0m15:26:08.863143 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.ccsr__stg_core__condition
[0m15:26:08.863722 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.cms_chronic_conditions__stg_core__condition
[0m15:26:08.864490 [debug] [Thread-2 (]: Began running node model.the_tuva_project.hcc_suspecting__stg_core__condition
[0m15:26:08.865448 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.cms_hcc__stg_core__condition
[0m15:26:08.866823 [debug] [Thread-4 (]: Began running node model.the_tuva_project.quality_measures__stg_core__condition
[0m15:26:08.868909 [debug] [Thread-3 (]: Began running node model.the_tuva_project.readmissions__stg_core__condition
[0m15:26:08.870061 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.hcc_suspecting__stg_core__condition
[0m15:26:08.870903 [debug] [Thread-1 (]: Began running node model.the_tuva_project.tuva_chronic_conditions__stg_core__condition
[0m15:26:08.872340 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.quality_measures__stg_core__condition
[0m15:26:08.873032 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.readmissions__stg_core__condition
[0m15:26:08.873622 [debug] [Thread-2 (]: Began running node model.the_tuva_project.cms_hcc__stg_core__medical_claim
[0m15:26:08.874572 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.tuva_chronic_conditions__stg_core__condition
[0m15:26:08.875243 [debug] [Thread-4 (]: Began running node model.the_tuva_project.financial_pmpm__stg_medical_claim
[0m15:26:08.875950 [debug] [Thread-3 (]: Began running node model.the_tuva_project.insights__count_claim_by_claim_type
[0m15:26:08.877336 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.cms_hcc__stg_core__medical_claim
[0m15:26:08.878758 [debug] [Thread-1 (]: Began running node model.the_tuva_project.insights__count_claim_by_date_column
[0m15:26:08.879496 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.financial_pmpm__stg_medical_claim
[0m15:26:08.880476 [info ] [Thread-3 (]: 197 of 307 SKIP relation insights.insights__count_claim_by_claim_type .......... [[33mSKIP[0m]
[0m15:26:08.882427 [debug] [Thread-2 (]: Began running node model.the_tuva_project.insights__count_claim_by_service_category
[0m15:26:08.884265 [info ] [Thread-1 (]: 198 of 307 SKIP relation insights.insights__count_claim_by_date_column ......... [[33mSKIP[0m]
[0m15:26:08.885429 [debug] [Thread-4 (]: Began running node model.the_tuva_project.insights__orphan_claim_by_claim_type
[0m15:26:08.886330 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.insights__count_claim_by_claim_type
[0m15:26:08.886858 [info ] [Thread-2 (]: 199 of 307 SKIP relation insights.insights__count_claim_by_service_category .... [[33mSKIP[0m]
[0m15:26:08.887428 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.insights__count_claim_by_date_column
[0m15:26:08.887884 [info ] [Thread-4 (]: 200 of 307 SKIP relation insights.insights__orphan_claim_by_claim_type ......... [[33mSKIP[0m]
[0m15:26:08.888513 [debug] [Thread-3 (]: Began running node model.the_tuva_project.insights__sum_amount_by_claim_type
[0m15:26:08.889082 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.insights__count_claim_by_service_category
[0m15:26:08.889974 [debug] [Thread-1 (]: Began running node model.the_tuva_project.insights__sum_amount_by_service_category
[0m15:26:08.890457 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.insights__orphan_claim_by_claim_type
[0m15:26:08.890904 [info ] [Thread-3 (]: 201 of 307 SKIP relation insights.insights__sum_amount_by_claim_type ........... [[33mSKIP[0m]
[0m15:26:08.891436 [debug] [Thread-2 (]: Began running node model.the_tuva_project.insights__trend_count_claim_by_claim_type
[0m15:26:08.891871 [info ] [Thread-1 (]: 202 of 307 SKIP relation insights.insights__sum_amount_by_service_category ..... [[33mSKIP[0m]
[0m15:26:08.892355 [debug] [Thread-4 (]: Began running node model.the_tuva_project.insights__trend_count_claim_by_service_category
[0m15:26:08.892833 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.insights__sum_amount_by_claim_type
[0m15:26:08.893326 [info ] [Thread-2 (]: 203 of 307 SKIP relation insights.insights__trend_count_claim_by_claim_type .... [[33mSKIP[0m]
[0m15:26:08.893874 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.insights__sum_amount_by_service_category
[0m15:26:08.894452 [info ] [Thread-4 (]: 204 of 307 SKIP relation insights.insights__trend_count_claim_by_service_category  [[33mSKIP[0m]
[0m15:26:08.895045 [debug] [Thread-3 (]: Began running node model.the_tuva_project.insights__trend_sum_amount_by_claim_type
[0m15:26:08.895503 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.insights__trend_count_claim_by_claim_type
[0m15:26:08.895964 [debug] [Thread-1 (]: Began running node model.the_tuva_project.insights__trend_sum_amount_by_service_category
[0m15:26:08.896400 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.insights__trend_count_claim_by_service_category
[0m15:26:08.896874 [info ] [Thread-3 (]: 205 of 307 SKIP relation insights.insights__trend_sum_amount_by_claim_type ..... [[33mSKIP[0m]
[0m15:26:08.897461 [debug] [Thread-2 (]: Began running node model.the_tuva_project.quality_measures__stg_medical_claim
[0m15:26:08.898080 [info ] [Thread-1 (]: 206 of 307 SKIP relation insights.insights__trend_sum_amount_by_service_category  [[33mSKIP[0m]
[0m15:26:08.898727 [debug] [Thread-4 (]: Began running node model.the_tuva_project.ccsr__stg_core__procedure
[0m15:26:08.899286 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.insights__trend_sum_amount_by_claim_type
[0m15:26:08.899786 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.quality_measures__stg_medical_claim
[0m15:26:08.900253 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.insights__trend_sum_amount_by_service_category
[0m15:26:08.900842 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.ccsr__stg_core__procedure
[0m15:26:08.901469 [debug] [Thread-3 (]: Began running node model.the_tuva_project.cms_chronic_conditions__stg_core__procedure
[0m15:26:08.902018 [debug] [Thread-2 (]: Began running node model.the_tuva_project.quality_measures__stg_core__procedure
[0m15:26:08.902543 [debug] [Thread-1 (]: Began running node model.the_tuva_project.readmissions__stg_core__procedure
[0m15:26:08.903031 [debug] [Thread-4 (]: Began running node model.the_tuva_project.core__encounter
[0m15:26:08.904087 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.cms_chronic_conditions__stg_core__procedure
[0m15:26:08.904521 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.quality_measures__stg_core__procedure
[0m15:26:08.905035 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.readmissions__stg_core__procedure
[0m15:26:08.905472 [info ] [Thread-4 (]: 207 of 307 SKIP relation core.core__encounter .................................. [[33mSKIP[0m]
[0m15:26:08.906339 [debug] [Thread-3 (]: Began running node model.the_tuva_project.ccsr__long_condition_category
[0m15:26:08.907348 [debug] [Thread-2 (]: Began running node model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids
[0m15:26:08.908016 [debug] [Thread-1 (]: Began running node model.the_tuva_project.hcc_suspecting__int_prep_conditions
[0m15:26:08.908603 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.core__encounter
[0m15:26:08.909071 [info ] [Thread-3 (]: 208 of 307 SKIP relation ccsr.ccsr__long_condition_category .................... [[33mSKIP[0m]
[0m15:26:08.909544 [info ] [Thread-2 (]: 209 of 307 SKIP relation chronic_conditions.chronic_conditions__cms_chronic_conditions_hiv_aids  [[33mSKIP[0m]
[0m15:26:08.910003 [info ] [Thread-1 (]: 210 of 307 SKIP relation hcc_suspecting.hcc_suspecting__int_prep_conditions .... [[33mSKIP[0m]
[0m15:26:08.910569 [debug] [Thread-4 (]: Began running node test.the_tuva_project.not_null_quality_measures__stg_core__condition_patient_id.1f1222e348
[0m15:26:08.911852 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.ccsr__long_condition_category
[0m15:26:08.912505 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.chronic_conditions__cms_chronic_conditions_hiv_aids
[0m15:26:08.913050 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.hcc_suspecting__int_prep_conditions
[0m15:26:08.913515 [info ] [Thread-4 (]: 211 of 307 SKIP test not_null_quality_measures__stg_core__condition_patient_id . [[33mSKIP[0m]
[0m15:26:08.914081 [debug] [Thread-3 (]: Began running node model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_long
[0m15:26:08.914598 [debug] [Thread-2 (]: Began running node model.the_tuva_project.cms_hcc__int_eligible_conditions
[0m15:26:08.915515 [debug] [Thread-1 (]: Began running node model.the_tuva_project.financial_pmpm__patient_spend_with_service_categories
[0m15:26:08.916394 [debug] [Thread-4 (]: Finished running node test.the_tuva_project.not_null_quality_measures__stg_core__condition_patient_id.1f1222e348
[0m15:26:08.916866 [info ] [Thread-3 (]: 212 of 307 SKIP relation chronic_conditions.chronic_conditions__tuva_chronic_conditions_long  [[33mSKIP[0m]
[0m15:26:08.917336 [info ] [Thread-2 (]: 213 of 307 SKIP relation cms_hcc.cms_hcc__int_eligible_conditions .............. [[33mSKIP[0m]
[0m15:26:08.917833 [info ] [Thread-1 (]: 214 of 307 SKIP relation financial_pmpm.financial_pmpm__patient_spend_with_service_categories  [[33mSKIP[0m]
[0m15:26:08.918362 [debug] [Thread-4 (]: Began running node model.the_tuva_project.ccsr__long_procedure_category
[0m15:26:08.918814 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_long
[0m15:26:08.919265 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.cms_hcc__int_eligible_conditions
[0m15:26:08.919697 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.financial_pmpm__patient_spend_with_service_categories
[0m15:26:08.920378 [info ] [Thread-4 (]: 215 of 307 SKIP relation ccsr.ccsr__long_procedure_category .................... [[33mSKIP[0m]
[0m15:26:08.921145 [debug] [Thread-3 (]: Began running node model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all
[0m15:26:08.921655 [debug] [Thread-2 (]: Began running node test.the_tuva_project.not_null_quality_measures__stg_core__procedure_patient_id.0b52ff75d9
[0m15:26:08.922233 [debug] [Thread-1 (]: Began running node model.the_tuva_project.readmissions__procedure_ccs
[0m15:26:08.923441 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.ccsr__long_procedure_category
[0m15:26:08.923978 [info ] [Thread-3 (]: 216 of 307 SKIP relation chronic_conditions.chronic_conditions__cms_chronic_conditions_all  [[33mSKIP[0m]
[0m15:26:08.924466 [info ] [Thread-2 (]: 217 of 307 SKIP test not_null_quality_measures__stg_core__procedure_patient_id . [[33mSKIP[0m]
[0m15:26:08.924951 [info ] [Thread-1 (]: 218 of 307 SKIP relation readmissions.readmissions__procedure_ccs .............. [[33mSKIP[0m]
[0m15:26:08.925447 [debug] [Thread-4 (]: Began running node model.the_tuva_project.ed_classification__stg_encounter
[0m15:26:08.925897 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.chronic_conditions__cms_chronic_conditions_all
[0m15:26:08.926351 [debug] [Thread-2 (]: Finished running node test.the_tuva_project.not_null_quality_measures__stg_core__procedure_patient_id.0b52ff75d9
[0m15:26:08.926856 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.readmissions__procedure_ccs
[0m15:26:08.927427 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.ed_classification__stg_encounter
[0m15:26:08.927953 [debug] [Thread-3 (]: Began running node model.the_tuva_project.quality_measures__stg_core__encounter
[0m15:26:08.928694 [debug] [Thread-2 (]: Began running node model.the_tuva_project.readmissions__stg_core__encounter
[0m15:26:08.929453 [debug] [Thread-1 (]: Began running node model.the_tuva_project.ccsr__singular_condition_category
[0m15:26:08.931279 [debug] [Thread-4 (]: Began running node test.the_tuva_project.accepted_values_chronic_conditions__cms_chronic_conditions_hiv_aids_condition__Human_Immunodeficiency_Virus_and_or_Acquired_Immunodeficiency_Syndrome_HIV_AIDS_.c54d45a2c6
[0m15:26:08.931935 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.quality_measures__stg_core__encounter
[0m15:26:08.932473 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.readmissions__stg_core__encounter
[0m15:26:08.933022 [info ] [Thread-1 (]: 219 of 307 SKIP relation ccsr.ccsr__singular_condition_category ................ [[33mSKIP[0m]
[0m15:26:08.933505 [info ] [Thread-4 (]: 220 of 307 SKIP test accepted_values_chronic_conditions__cms_chronic_conditions_hiv_aids_condition__Human_Immunodeficiency_Virus_and_or_Acquired_Immunodeficiency_Syndrome_HIV_AIDS_  [[33mSKIP[0m]
[0m15:26:08.934025 [debug] [Thread-3 (]: Began running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_claim_id.9baa48027d
[0m15:26:08.934557 [debug] [Thread-2 (]: Began running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_condition.da32954f00
[0m15:26:08.935073 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.ccsr__singular_condition_category
[0m15:26:08.935541 [debug] [Thread-4 (]: Finished running node test.the_tuva_project.accepted_values_chronic_conditions__cms_chronic_conditions_hiv_aids_condition__Human_Immunodeficiency_Virus_and_or_Acquired_Immunodeficiency_Syndrome_HIV_AIDS_.c54d45a2c6
[0m15:26:08.936037 [info ] [Thread-3 (]: 221 of 307 SKIP test not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_claim_id  [[33mSKIP[0m]
[0m15:26:08.936523 [info ] [Thread-2 (]: 222 of 307 SKIP test not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_condition  [[33mSKIP[0m]
[0m15:26:08.937064 [debug] [Thread-1 (]: Began running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_patient_id.b6c58add4b
[0m15:26:08.937526 [debug] [Thread-4 (]: Began running node model.the_tuva_project.hcc_suspecting__int_all_conditions
[0m15:26:08.938126 [debug] [Thread-3 (]: Finished running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_claim_id.9baa48027d
[0m15:26:08.938537 [debug] [Thread-2 (]: Finished running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_condition.da32954f00
[0m15:26:08.938984 [info ] [Thread-1 (]: 223 of 307 SKIP test not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_patient_id  [[33mSKIP[0m]
[0m15:26:08.939453 [info ] [Thread-4 (]: 224 of 307 SKIP relation hcc_suspecting.hcc_suspecting__int_all_conditions ..... [[33mSKIP[0m]
[0m15:26:08.939912 [debug] [Thread-3 (]: Began running node test.the_tuva_project.unique_chronic_conditions__tuva_chronic_conditions_long__patient_id___condition_.c9509bb46f
[0m15:26:08.940376 [debug] [Thread-2 (]: Began running node test.the_tuva_project.not_null_cms_hcc__int_eligible_conditions_condition_code.e811a078bc
[0m15:26:08.941116 [debug] [Thread-1 (]: Finished running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_hiv_aids_patient_id.b6c58add4b
[0m15:26:08.941650 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.hcc_suspecting__int_all_conditions
[0m15:26:08.942102 [info ] [Thread-3 (]: 225 of 307 SKIP test unique_chronic_conditions__tuva_chronic_conditions_long__patient_id___condition_  [[33mSKIP[0m]
[0m15:26:08.942549 [info ] [Thread-2 (]: 226 of 307 SKIP test not_null_cms_hcc__int_eligible_conditions_condition_code .. [[33mSKIP[0m]
[0m15:26:08.943025 [debug] [Thread-1 (]: Began running node model.the_tuva_project.financial_pmpm__service_category_1_allowed_pivot
[0m15:26:08.943447 [debug] [Thread-4 (]: Began running node model.the_tuva_project.financial_pmpm__service_category_1_paid_pivot
[0m15:26:08.944462 [debug] [Thread-3 (]: Finished running node test.the_tuva_project.unique_chronic_conditions__tuva_chronic_conditions_long__patient_id___condition_.c9509bb46f
[0m15:26:08.945181 [debug] [Thread-2 (]: Finished running node test.the_tuva_project.not_null_cms_hcc__int_eligible_conditions_condition_code.e811a078bc
[0m15:26:08.945761 [info ] [Thread-1 (]: 227 of 307 SKIP relation financial_pmpm.financial_pmpm__service_category_1_allowed_pivot  [[33mSKIP[0m]
[0m15:26:08.946429 [info ] [Thread-4 (]: 228 of 307 SKIP relation financial_pmpm.financial_pmpm__service_category_1_paid_pivot  [[33mSKIP[0m]
[0m15:26:08.947079 [debug] [Thread-3 (]: Began running node model.the_tuva_project.financial_pmpm__service_category_2_allowed_pivot
[0m15:26:08.947732 [debug] [Thread-2 (]: Began running node model.the_tuva_project.financial_pmpm__service_category_2_paid_pivot
[0m15:26:08.948408 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.financial_pmpm__service_category_1_allowed_pivot
[0m15:26:08.949022 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.financial_pmpm__service_category_1_paid_pivot
[0m15:26:08.949521 [info ] [Thread-3 (]: 229 of 307 SKIP relation financial_pmpm.financial_pmpm__service_category_2_allowed_pivot  [[33mSKIP[0m]
[0m15:26:08.950027 [info ] [Thread-2 (]: 230 of 307 SKIP relation financial_pmpm.financial_pmpm__service_category_2_paid_pivot  [[33mSKIP[0m]
[0m15:26:08.950794 [debug] [Thread-1 (]: Began running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_claim_id.84015aec48
[0m15:26:08.951471 [debug] [Thread-4 (]: Began running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_condition.bb780b4840
[0m15:26:08.952033 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.financial_pmpm__service_category_2_allowed_pivot
[0m15:26:08.952525 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.financial_pmpm__service_category_2_paid_pivot
[0m15:26:08.953077 [info ] [Thread-1 (]: 231 of 307 SKIP test not_null_chronic_conditions__cms_chronic_conditions_all_claim_id  [[33mSKIP[0m]
[0m15:26:08.953645 [info ] [Thread-4 (]: 232 of 307 SKIP test not_null_chronic_conditions__cms_chronic_conditions_all_condition  [[33mSKIP[0m]
[0m15:26:08.954329 [debug] [Thread-3 (]: Began running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_patient_id.95fc066008
[0m15:26:08.955162 [debug] [Thread-2 (]: Began running node model.the_tuva_project.quality_measures__int_nqf0034_exclude_colectomy_cancer
[0m15:26:08.955886 [debug] [Thread-1 (]: Finished running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_claim_id.84015aec48
[0m15:26:08.956350 [debug] [Thread-4 (]: Finished running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_condition.bb780b4840
[0m15:26:08.956782 [info ] [Thread-3 (]: 233 of 307 SKIP test not_null_chronic_conditions__cms_chronic_conditions_all_patient_id  [[33mSKIP[0m]
[0m15:26:08.957219 [info ] [Thread-2 (]: 234 of 307 SKIP relation quality_measures.quality_measures__int_nqf0034_exclude_colectomy_cancer  [[33mSKIP[0m]
[0m15:26:08.957665 [debug] [Thread-1 (]: Began running node model.the_tuva_project.quality_measures__int_nqf0034_exclude_hospice_palliative
[0m15:26:08.958331 [debug] [Thread-4 (]: Began running node model.the_tuva_project.ed_classification__int_map_primary_dx
[0m15:26:08.958787 [debug] [Thread-3 (]: Finished running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_all_patient_id.95fc066008
[0m15:26:08.959414 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf0034_exclude_colectomy_cancer
[0m15:26:08.959998 [info ] [Thread-1 (]: 235 of 307 SKIP relation quality_measures.quality_measures__int_nqf0034_exclude_hospice_palliative  [[33mSKIP[0m]
[0m15:26:08.960713 [info ] [Thread-4 (]: 236 of 307 SKIP relation ed_classification.ed_classification__int_map_primary_dx  [[33mSKIP[0m]
[0m15:26:08.961307 [debug] [Thread-3 (]: Began running node test.the_tuva_project.not_null_quality_measures__stg_core__encounter_patient_id.a0d82e2159
[0m15:26:08.962296 [debug] [Thread-2 (]: Began running node model.the_tuva_project.readmissions__encounter
[0m15:26:08.962772 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf0034_exclude_hospice_palliative
[0m15:26:08.963251 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.ed_classification__int_map_primary_dx
[0m15:26:08.963666 [info ] [Thread-3 (]: 237 of 307 SKIP test not_null_quality_measures__stg_core__encounter_patient_id . [[33mSKIP[0m]
[0m15:26:08.964193 [info ] [Thread-2 (]: 238 of 307 SKIP relation readmissions.readmissions__encounter .................. [[33mSKIP[0m]
[0m15:26:08.964699 [debug] [Thread-1 (]: Began running node test.the_tuva_project.not_null_ccsr__singular_condition_category_claim_id.41e0e51ac8
[0m15:26:08.965197 [debug] [Thread-4 (]: Began running node test.the_tuva_project.unique_ccsr__singular_condition_category_claim_id.21b76e504b
[0m15:26:08.966184 [debug] [Thread-3 (]: Finished running node test.the_tuva_project.not_null_quality_measures__stg_core__encounter_patient_id.a0d82e2159
[0m15:26:08.966695 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.readmissions__encounter
[0m15:26:08.967128 [info ] [Thread-1 (]: 239 of 307 SKIP test not_null_ccsr__singular_condition_category_claim_id ....... [[33mSKIP[0m]
[0m15:26:08.967682 [info ] [Thread-4 (]: 240 of 307 SKIP test unique_ccsr__singular_condition_category_claim_id ......... [[33mSKIP[0m]
[0m15:26:08.968172 [debug] [Thread-3 (]: Began running node model.the_tuva_project.hcc_suspecting__int_patient_hcc_history
[0m15:26:08.969100 [debug] [Thread-2 (]: Began running node model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_wide
[0m15:26:08.972530 [debug] [Thread-1 (]: Finished running node test.the_tuva_project.not_null_ccsr__singular_condition_category_claim_id.41e0e51ac8
[0m15:26:08.973032 [debug] [Thread-4 (]: Finished running node test.the_tuva_project.unique_ccsr__singular_condition_category_claim_id.21b76e504b
[0m15:26:08.973512 [info ] [Thread-3 (]: 241 of 307 SKIP relation hcc_suspecting.hcc_suspecting__int_patient_hcc_history  [[33mSKIP[0m]
[0m15:26:08.973973 [info ] [Thread-2 (]: 242 of 307 SKIP relation chronic_conditions.chronic_conditions__tuva_chronic_conditions_wide  [[33mSKIP[0m]
[0m15:26:08.974832 [debug] [Thread-1 (]: Began running node model.the_tuva_project.cms_hcc__int_hcc_mapping
[0m15:26:08.975860 [debug] [Thread-4 (]: Began running node model.the_tuva_project.financial_pmpm__pmpm_prep
[0m15:26:08.976506 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.hcc_suspecting__int_patient_hcc_history
[0m15:26:08.977044 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.chronic_conditions__tuva_chronic_conditions_wide
[0m15:26:08.977579 [info ] [Thread-1 (]: 243 of 307 SKIP relation cms_hcc.cms_hcc__int_hcc_mapping ...................... [[33mSKIP[0m]
[0m15:26:08.978093 [info ] [Thread-4 (]: 244 of 307 SKIP relation financial_pmpm.financial_pmpm__pmpm_prep .............. [[33mSKIP[0m]
[0m15:26:08.978638 [debug] [Thread-3 (]: Began running node model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud
[0m15:26:08.979599 [debug] [Thread-2 (]: Began running node model.the_tuva_project.ed_classification__int_filter_encounter_with_classification
[0m15:26:08.980168 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.cms_hcc__int_hcc_mapping
[0m15:26:08.980631 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.financial_pmpm__pmpm_prep
[0m15:26:08.981200 [info ] [Thread-3 (]: 245 of 307 SKIP relation chronic_conditions.chronic_conditions__cms_chronic_conditions_oud  [[33mSKIP[0m]
[0m15:26:08.981737 [info ] [Thread-2 (]: 246 of 307 SKIP relation ed_classification.ed_classification__int_filter_encounter_with_classification  [[33mSKIP[0m]
[0m15:26:08.982317 [debug] [Thread-1 (]: Began running node model.the_tuva_project.quality_measures__int_nqf0034_denominator
[0m15:26:08.983007 [debug] [Thread-4 (]: Began running node model.the_tuva_project.quality_measures__int_nqf2372_denominator
[0m15:26:08.983560 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.chronic_conditions__cms_chronic_conditions_oud
[0m15:26:08.984075 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.ed_classification__int_filter_encounter_with_classification
[0m15:26:08.984545 [info ] [Thread-1 (]: 247 of 307 SKIP relation quality_measures.quality_measures__int_nqf0034_denominator  [[33mSKIP[0m]
[0m15:26:08.985021 [info ] [Thread-4 (]: 248 of 307 SKIP relation quality_measures.quality_measures__int_nqf2372_denominator  [[33mSKIP[0m]
[0m15:26:08.985804 [debug] [Thread-3 (]: Began running node model.the_tuva_project.readmissions__encounter_overlap
[0m15:26:08.986417 [debug] [Thread-2 (]: Began running node model.the_tuva_project.readmissions__encounter_with_ccs
[0m15:26:08.986903 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf0034_denominator
[0m15:26:08.987373 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf2372_denominator
[0m15:26:08.987803 [info ] [Thread-3 (]: 249 of 307 SKIP relation readmissions.readmissions__encounter_overlap .......... [[33mSKIP[0m]
[0m15:26:08.988330 [info ] [Thread-2 (]: 250 of 307 SKIP relation readmissions.readmissions__encounter_with_ccs ......... [[33mSKIP[0m]
[0m15:26:08.988818 [debug] [Thread-1 (]: Began running node model.the_tuva_project.readmissions__index_discharge_requirement
[0m15:26:08.989647 [debug] [Thread-4 (]: Began running node model.the_tuva_project.readmissions__index_time_requirement
[0m15:26:08.990937 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.readmissions__encounter_overlap
[0m15:26:08.991504 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.readmissions__encounter_with_ccs
[0m15:26:08.992034 [info ] [Thread-1 (]: 251 of 307 SKIP relation readmissions.readmissions__index_discharge_requirement  [[33mSKIP[0m]
[0m15:26:08.992574 [info ] [Thread-4 (]: 252 of 307 SKIP relation readmissions.readmissions__index_time_requirement ..... [[33mSKIP[0m]
[0m15:26:08.993083 [debug] [Thread-3 (]: Began running node model.the_tuva_project.hcc_suspecting__list
[0m15:26:08.993746 [debug] [Thread-2 (]: Began running node test.the_tuva_project.not_null_chronic_conditions__tuva_chronic_conditions_wide_patient_id.705b1ca561
[0m15:26:08.994678 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.readmissions__index_discharge_requirement
[0m15:26:08.995135 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.readmissions__index_time_requirement
[0m15:26:08.995573 [info ] [Thread-3 (]: 253 of 307 SKIP relation hcc_suspecting.hcc_suspecting__list ................... [[33mSKIP[0m]
[0m15:26:08.996060 [info ] [Thread-2 (]: 254 of 307 SKIP test not_null_chronic_conditions__tuva_chronic_conditions_wide_patient_id  [[33mSKIP[0m]
[0m15:26:08.996553 [debug] [Thread-1 (]: Began running node test.the_tuva_project.unique_chronic_conditions__tuva_chronic_conditions_wide_patient_id.02386b9158
[0m15:26:08.997033 [debug] [Thread-4 (]: Began running node model.the_tuva_project.cms_hcc__int_hcc_hierarchy
[0m15:26:08.997489 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.hcc_suspecting__list
[0m15:26:08.997942 [debug] [Thread-2 (]: Finished running node test.the_tuva_project.not_null_chronic_conditions__tuva_chronic_conditions_wide_patient_id.705b1ca561
[0m15:26:08.998395 [info ] [Thread-1 (]: 255 of 307 SKIP test unique_chronic_conditions__tuva_chronic_conditions_wide_patient_id  [[33mSKIP[0m]
[0m15:26:08.998880 [info ] [Thread-4 (]: 256 of 307 SKIP relation cms_hcc.cms_hcc__int_hcc_hierarchy .................... [[33mSKIP[0m]
[0m15:26:08.999382 [debug] [Thread-3 (]: Began running node test.the_tuva_project.unique_financial_pmpm__pmpm_prep__patient_id___year_month___plan_.b941ddaf9e
[0m15:26:09.000251 [debug] [Thread-2 (]: Began running node test.the_tuva_project.accepted_values_chronic_conditions__cms_chronic_conditions_oud_condition__Opioid_Use_Disorder_OUD_.f44489eec5
[0m15:26:09.000727 [debug] [Thread-1 (]: Finished running node test.the_tuva_project.unique_chronic_conditions__tuva_chronic_conditions_wide_patient_id.02386b9158
[0m15:26:09.001218 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.cms_hcc__int_hcc_hierarchy
[0m15:26:09.001670 [info ] [Thread-3 (]: 257 of 307 SKIP test unique_financial_pmpm__pmpm_prep__patient_id___year_month___plan_  [[33mSKIP[0m]
[0m15:26:09.002155 [info ] [Thread-2 (]: 258 of 307 SKIP test accepted_values_chronic_conditions__cms_chronic_conditions_oud_condition__Opioid_Use_Disorder_OUD_  [[33mSKIP[0m]
[0m15:26:09.003016 [debug] [Thread-1 (]: Began running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_claim_id.7ee5fe28fe
[0m15:26:09.003545 [debug] [Thread-4 (]: Began running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_condition.6800b245ea
[0m15:26:09.004563 [debug] [Thread-3 (]: Finished running node test.the_tuva_project.unique_financial_pmpm__pmpm_prep__patient_id___year_month___plan_.b941ddaf9e
[0m15:26:09.005054 [debug] [Thread-2 (]: Finished running node test.the_tuva_project.accepted_values_chronic_conditions__cms_chronic_conditions_oud_condition__Opioid_Use_Disorder_OUD_.f44489eec5
[0m15:26:09.005509 [info ] [Thread-1 (]: 259 of 307 SKIP test not_null_chronic_conditions__cms_chronic_conditions_oud_claim_id  [[33mSKIP[0m]
[0m15:26:09.005975 [info ] [Thread-4 (]: 260 of 307 SKIP test not_null_chronic_conditions__cms_chronic_conditions_oud_condition  [[33mSKIP[0m]
[0m15:26:09.006593 [debug] [Thread-3 (]: Began running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_patient_id.382354e0d0
[0m15:26:09.007203 [debug] [Thread-2 (]: Began running node model.the_tuva_project.ed_classification__summary
[0m15:26:09.007818 [debug] [Thread-1 (]: Finished running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_claim_id.7ee5fe28fe
[0m15:26:09.008379 [debug] [Thread-4 (]: Finished running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_condition.6800b245ea
[0m15:26:09.008821 [info ] [Thread-3 (]: 261 of 307 SKIP test not_null_chronic_conditions__cms_chronic_conditions_oud_patient_id  [[33mSKIP[0m]
[0m15:26:09.009303 [info ] [Thread-2 (]: 262 of 307 SKIP relation ed_classification.ed_classification__summary .......... [[33mSKIP[0m]
[0m15:26:09.009801 [debug] [Thread-1 (]: Began running node model.the_tuva_project.quality_measures__int_nqf0034__frailty
[0m15:26:09.010499 [debug] [Thread-4 (]: Began running node model.the_tuva_project.quality_measures__int_nqf0034_exclude_institutional_snp
[0m15:26:09.011182 [debug] [Thread-3 (]: Finished running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_oud_patient_id.382354e0d0
[0m15:26:09.011677 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.ed_classification__summary
[0m15:26:09.012126 [info ] [Thread-1 (]: 263 of 307 SKIP relation quality_measures.quality_measures__int_nqf0034__frailty  [[33mSKIP[0m]
[0m15:26:09.012610 [info ] [Thread-4 (]: 264 of 307 SKIP relation quality_measures.quality_measures__int_nqf0034_exclude_institutional_snp  [[33mSKIP[0m]
[0m15:26:09.013104 [debug] [Thread-3 (]: Began running node model.the_tuva_project.quality_measures__int_nqf0034_numerator
[0m15:26:09.013656 [debug] [Thread-2 (]: Began running node model.the_tuva_project.quality_measures__int_nqf2372__frailty
[0m15:26:09.014086 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf0034__frailty
[0m15:26:09.014513 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf0034_exclude_institutional_snp
[0m15:26:09.014969 [info ] [Thread-3 (]: 265 of 307 SKIP relation quality_measures.quality_measures__int_nqf0034_numerator  [[33mSKIP[0m]
[0m15:26:09.015559 [info ] [Thread-2 (]: 266 of 307 SKIP relation quality_measures.quality_measures__int_nqf2372__frailty  [[33mSKIP[0m]
[0m15:26:09.016108 [debug] [Thread-1 (]: Began running node model.the_tuva_project.quality_measures__int_nqf2372_exclude_hospice
[0m15:26:09.016868 [debug] [Thread-4 (]: Began running node model.the_tuva_project.quality_measures__int_nqf2372_exclude_institutional
[0m15:26:09.017394 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf0034_numerator
[0m15:26:09.017824 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf2372__frailty
[0m15:26:09.018265 [info ] [Thread-1 (]: 267 of 307 SKIP relation quality_measures.quality_measures__int_nqf2372_exclude_hospice  [[33mSKIP[0m]
[0m15:26:09.018717 [info ] [Thread-4 (]: 268 of 307 SKIP relation quality_measures.quality_measures__int_nqf2372_exclude_institutional  [[33mSKIP[0m]
[0m15:26:09.019416 [debug] [Thread-3 (]: Began running node model.the_tuva_project.quality_measures__int_nqf2372_exclude_mastectomy
[0m15:26:09.020189 [debug] [Thread-2 (]: Began running node model.the_tuva_project.quality_measures__int_nqf2372_exclude_palliative
[0m15:26:09.021078 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf2372_exclude_hospice
[0m15:26:09.021592 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf2372_exclude_institutional
[0m15:26:09.022059 [info ] [Thread-3 (]: 269 of 307 SKIP relation quality_measures.quality_measures__int_nqf2372_exclude_mastectomy  [[33mSKIP[0m]
[0m15:26:09.022538 [info ] [Thread-2 (]: 270 of 307 SKIP relation quality_measures.quality_measures__int_nqf2372_exclude_palliative  [[33mSKIP[0m]
[0m15:26:09.023077 [debug] [Thread-1 (]: Began running node model.the_tuva_project.quality_measures__int_nqf2372_numerator
[0m15:26:09.023582 [debug] [Thread-4 (]: Began running node model.the_tuva_project.readmissions__readmission_crude
[0m15:26:09.024017 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf2372_exclude_mastectomy
[0m15:26:09.024500 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf2372_exclude_palliative
[0m15:26:09.024907 [info ] [Thread-1 (]: 271 of 307 SKIP relation quality_measures.quality_measures__int_nqf2372_numerator  [[33mSKIP[0m]
[0m15:26:09.025363 [info ] [Thread-4 (]: 272 of 307 SKIP relation readmissions.readmissions__readmission_crude .......... [[33mSKIP[0m]
[0m15:26:09.025836 [debug] [Thread-3 (]: Began running node model.the_tuva_project.readmissions__encounter_data_quality
[0m15:26:09.026329 [debug] [Thread-2 (]: Began running node model.the_tuva_project.readmissions__encounter_specialty_cohort
[0m15:26:09.026752 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf2372_numerator
[0m15:26:09.027311 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.readmissions__readmission_crude
[0m15:26:09.027831 [info ] [Thread-3 (]: 273 of 307 SKIP relation readmissions.readmissions__encounter_data_quality ..... [[33mSKIP[0m]
[0m15:26:09.028433 [info ] [Thread-2 (]: 274 of 307 SKIP relation readmissions.readmissions__encounter_specialty_cohort . [[33mSKIP[0m]
[0m15:26:09.028958 [debug] [Thread-1 (]: Began running node model.the_tuva_project.readmissions__exclusion
[0m15:26:09.029468 [debug] [Thread-4 (]: Began running node model.the_tuva_project.readmissions__planned_encounter
[0m15:26:09.029993 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.readmissions__encounter_data_quality
[0m15:26:09.030423 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.readmissions__encounter_specialty_cohort
[0m15:26:09.030869 [info ] [Thread-1 (]: 275 of 307 SKIP relation readmissions.readmissions__exclusion .................. [[33mSKIP[0m]
[0m15:26:09.031425 [info ] [Thread-4 (]: 276 of 307 SKIP relation readmissions.readmissions__planned_encounter .......... [[33mSKIP[0m]
[0m15:26:09.031974 [debug] [Thread-3 (]: Began running node model.the_tuva_project.hcc_suspecting__summary
[0m15:26:09.032497 [debug] [Thread-2 (]: Began running node model.the_tuva_project.cms_hcc__int_disabled_interaction_factors
[0m15:26:09.032979 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.readmissions__exclusion
[0m15:26:09.033396 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.readmissions__planned_encounter
[0m15:26:09.033814 [info ] [Thread-3 (]: 277 of 307 SKIP relation hcc_suspecting.hcc_suspecting__summary ................ [[33mSKIP[0m]
[0m15:26:09.034283 [info ] [Thread-2 (]: 278 of 307 SKIP relation cms_hcc.cms_hcc__int_disabled_interaction_factors ..... [[33mSKIP[0m]
[0m15:26:09.034764 [debug] [Thread-1 (]: Began running node model.the_tuva_project.cms_hcc__int_disease_factors
[0m15:26:09.035266 [debug] [Thread-4 (]: Began running node model.the_tuva_project.cms_hcc__int_disease_interaction_factors
[0m15:26:09.035751 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.hcc_suspecting__summary
[0m15:26:09.036205 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.cms_hcc__int_disabled_interaction_factors
[0m15:26:09.036660 [info ] [Thread-1 (]: 279 of 307 SKIP relation cms_hcc.cms_hcc__int_disease_factors .................. [[33mSKIP[0m]
[0m15:26:09.037130 [info ] [Thread-4 (]: 280 of 307 SKIP relation cms_hcc.cms_hcc__int_disease_interaction_factors ...... [[33mSKIP[0m]
[0m15:26:09.037604 [debug] [Thread-3 (]: Began running node model.the_tuva_project.cms_hcc__int_hcc_count_factors
[0m15:26:09.038062 [debug] [Thread-2 (]: Began running node model.the_tuva_project.financial_pmpm__pmpm
[0m15:26:09.038587 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.cms_hcc__int_disease_factors
[0m15:26:09.039128 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.cms_hcc__int_disease_interaction_factors
[0m15:26:09.039720 [info ] [Thread-3 (]: 281 of 307 SKIP relation cms_hcc.cms_hcc__int_hcc_count_factors ................ [[33mSKIP[0m]
[0m15:26:09.040290 [info ] [Thread-2 (]: 282 of 307 SKIP relation financial_pmpm.financial_pmpm__pmpm ................... [[33mSKIP[0m]
[0m15:26:09.041055 [debug] [Thread-1 (]: Began running node model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long
[0m15:26:09.041664 [debug] [Thread-4 (]: Began running node model.the_tuva_project.quality_measures__int_nqf0034_exclude_advanced_illness
[0m15:26:09.042144 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.cms_hcc__int_hcc_count_factors
[0m15:26:09.042570 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.financial_pmpm__pmpm
[0m15:26:09.043008 [info ] [Thread-1 (]: 283 of 307 SKIP relation chronic_conditions.chronic_conditions__cms_chronic_conditions_long  [[33mSKIP[0m]
[0m15:26:09.043538 [info ] [Thread-4 (]: 284 of 307 SKIP relation quality_measures.quality_measures__int_nqf0034_exclude_advanced_illness  [[33mSKIP[0m]
[0m15:26:09.044249 [debug] [Thread-3 (]: Began running node model.the_tuva_project.quality_measures__int_nqf0034_exclude_dementia
[0m15:26:09.045002 [debug] [Thread-2 (]: Began running node model.the_tuva_project.quality_measures__int_nqf2372_exclude_advanced_illness
[0m15:26:09.045497 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.chronic_conditions__cms_chronic_conditions_long
[0m15:26:09.045931 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf0034_exclude_advanced_illness
[0m15:26:09.046392 [info ] [Thread-3 (]: 285 of 307 SKIP relation quality_measures.quality_measures__int_nqf0034_exclude_dementia  [[33mSKIP[0m]
[0m15:26:09.046961 [info ] [Thread-2 (]: 286 of 307 SKIP relation quality_measures.quality_measures__int_nqf2372_exclude_advanced_illness  [[33mSKIP[0m]
[0m15:26:09.047497 [debug] [Thread-1 (]: Began running node model.the_tuva_project.quality_measures__int_nqf2372_exclude_dementia
[0m15:26:09.048263 [debug] [Thread-4 (]: Began running node model.the_tuva_project.readmissions__index_admission
[0m15:26:09.048953 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf0034_exclude_dementia
[0m15:26:09.049497 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf2372_exclude_advanced_illness
[0m15:26:09.050016 [info ] [Thread-1 (]: 287 of 307 SKIP relation quality_measures.quality_measures__int_nqf2372_exclude_dementia  [[33mSKIP[0m]
[0m15:26:09.050562 [info ] [Thread-4 (]: 288 of 307 SKIP relation readmissions.readmissions__index_admission ............ [[33mSKIP[0m]
[0m15:26:09.051268 [debug] [Thread-3 (]: Began running node model.the_tuva_project.cms_hcc__patient_risk_factors
[0m15:26:09.051903 [debug] [Thread-2 (]: Began running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_claim_id.74242d2abc
[0m15:26:09.052494 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf2372_exclude_dementia
[0m15:26:09.052986 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.readmissions__index_admission
[0m15:26:09.053519 [info ] [Thread-3 (]: 289 of 307 SKIP relation cms_hcc.cms_hcc__patient_risk_factors ................. [[33mSKIP[0m]
[0m15:26:09.054184 [info ] [Thread-2 (]: 290 of 307 SKIP test not_null_chronic_conditions__cms_chronic_conditions_long_claim_id  [[33mSKIP[0m]
[0m15:26:09.055186 [debug] [Thread-1 (]: Began running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_condition.e794460ae3
[0m15:26:09.056222 [debug] [Thread-4 (]: Began running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_patient_id.551c145c85
[0m15:26:09.057035 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.cms_hcc__patient_risk_factors
[0m15:26:09.057589 [debug] [Thread-2 (]: Finished running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_claim_id.74242d2abc
[0m15:26:09.058094 [info ] [Thread-1 (]: 291 of 307 SKIP test not_null_chronic_conditions__cms_chronic_conditions_long_condition  [[33mSKIP[0m]
[0m15:26:09.058642 [info ] [Thread-4 (]: 292 of 307 SKIP test not_null_chronic_conditions__cms_chronic_conditions_long_patient_id  [[33mSKIP[0m]
[0m15:26:09.059151 [debug] [Thread-3 (]: Began running node test.the_tuva_project.unique_chronic_conditions__cms_chronic_conditions_long__patient_id_claim_id_start_date_condition_.fba1518320
[0m15:26:09.059653 [debug] [Thread-2 (]: Began running node model.the_tuva_project.quality_measures__int_nqf0034_exclusions
[0m15:26:09.060088 [debug] [Thread-1 (]: Finished running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_condition.e794460ae3
[0m15:26:09.060614 [debug] [Thread-4 (]: Finished running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_long_patient_id.551c145c85
[0m15:26:09.061147 [info ] [Thread-3 (]: 293 of 307 SKIP test unique_chronic_conditions__cms_chronic_conditions_long__patient_id_claim_id_start_date_condition_  [[33mSKIP[0m]
[0m15:26:09.061609 [info ] [Thread-2 (]: 294 of 307 SKIP relation quality_measures.quality_measures__int_nqf0034_exclusions  [[33mSKIP[0m]
[0m15:26:09.062111 [debug] [Thread-1 (]: Began running node model.the_tuva_project.quality_measures__int_nqf2372_exclusions
[0m15:26:09.062601 [debug] [Thread-4 (]: Began running node model.the_tuva_project.readmissions__encounter_augmented
[0m15:26:09.063037 [debug] [Thread-3 (]: Finished running node test.the_tuva_project.unique_chronic_conditions__cms_chronic_conditions_long__patient_id_claim_id_start_date_condition_.fba1518320
[0m15:26:09.063458 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf0034_exclusions
[0m15:26:09.063888 [info ] [Thread-1 (]: 295 of 307 SKIP relation quality_measures.quality_measures__int_nqf2372_exclusions  [[33mSKIP[0m]
[0m15:26:09.064359 [info ] [Thread-4 (]: 296 of 307 SKIP relation readmissions.readmissions__encounter_augmented ........ [[33mSKIP[0m]
[0m15:26:09.064834 [debug] [Thread-3 (]: Began running node model.the_tuva_project.cms_hcc__patient_risk_scores
[0m15:26:09.065956 [debug] [Thread-2 (]: Began running node model.the_tuva_project.chronic_conditions__cms_chronic_conditions_wide
[0m15:26:09.066415 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf2372_exclusions
[0m15:26:09.066844 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.readmissions__encounter_augmented
[0m15:26:09.067279 [info ] [Thread-3 (]: 297 of 307 SKIP relation cms_hcc.cms_hcc__patient_risk_scores .................. [[33mSKIP[0m]
[0m15:26:09.067736 [info ] [Thread-2 (]: 298 of 307 SKIP relation chronic_conditions.chronic_conditions__cms_chronic_conditions_wide  [[33mSKIP[0m]
[0m15:26:09.068214 [debug] [Thread-1 (]: Began running node model.the_tuva_project.quality_measures__int_nqf0034_long
[0m15:26:09.068822 [debug] [Thread-4 (]: Began running node model.the_tuva_project.quality_measures__int_nqf2372_long
[0m15:26:09.069142 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.cms_hcc__patient_risk_scores
[0m15:26:09.069580 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.chronic_conditions__cms_chronic_conditions_wide
[0m15:26:09.070056 [info ] [Thread-1 (]: 299 of 307 SKIP relation quality_measures.quality_measures__int_nqf0034_long ... [[33mSKIP[0m]
[0m15:26:09.070573 [info ] [Thread-4 (]: 300 of 307 SKIP relation quality_measures.quality_measures__int_nqf2372_long ... [[33mSKIP[0m]
[0m15:26:09.071281 [debug] [Thread-3 (]: Began running node model.the_tuva_project.readmissions__readmission_summary
[0m15:26:09.072249 [debug] [Thread-2 (]: Began running node test.the_tuva_project.unique_cms_hcc__patient_risk_scores_patient_id.05b154e126
[0m15:26:09.072723 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf0034_long
[0m15:26:09.073180 [debug] [Thread-4 (]: Finished running node model.the_tuva_project.quality_measures__int_nqf2372_long
[0m15:26:09.073691 [info ] [Thread-3 (]: 301 of 307 SKIP relation readmissions.readmissions__readmission_summary ........ [[33mSKIP[0m]
[0m15:26:09.074155 [info ] [Thread-2 (]: 302 of 307 SKIP test unique_cms_hcc__patient_risk_scores_patient_id ............ [[33mSKIP[0m]
[0m15:26:09.074616 [debug] [Thread-1 (]: Began running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_wide_patient_id.5c2c8ae105
[0m15:26:09.075254 [debug] [Thread-4 (]: Began running node test.the_tuva_project.unique_chronic_conditions__cms_chronic_conditions_wide_patient_id.60c2d9a586
[0m15:26:09.075912 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.readmissions__readmission_summary
[0m15:26:09.076360 [debug] [Thread-2 (]: Finished running node test.the_tuva_project.unique_cms_hcc__patient_risk_scores_patient_id.05b154e126
[0m15:26:09.076867 [info ] [Thread-1 (]: 303 of 307 SKIP test not_null_chronic_conditions__cms_chronic_conditions_wide_patient_id  [[33mSKIP[0m]
[0m15:26:09.077505 [info ] [Thread-4 (]: 304 of 307 SKIP test unique_chronic_conditions__cms_chronic_conditions_wide_patient_id  [[33mSKIP[0m]
[0m15:26:09.078087 [debug] [Thread-3 (]: Began running node model.the_tuva_project.quality_measures__summary_long
[0m15:26:09.078751 [debug] [Thread-1 (]: Finished running node test.the_tuva_project.not_null_chronic_conditions__cms_chronic_conditions_wide_patient_id.5c2c8ae105
[0m15:26:09.079190 [debug] [Thread-4 (]: Finished running node test.the_tuva_project.unique_chronic_conditions__cms_chronic_conditions_wide_patient_id.60c2d9a586
[0m15:26:09.079608 [info ] [Thread-3 (]: 305 of 307 SKIP relation quality_measures.quality_measures__summary_long ....... [[33mSKIP[0m]
[0m15:26:09.080436 [debug] [Thread-3 (]: Finished running node model.the_tuva_project.quality_measures__summary_long
[0m15:26:09.082104 [debug] [Thread-2 (]: Began running node model.the_tuva_project.quality_measures__summary_counts
[0m15:26:09.082483 [debug] [Thread-1 (]: Began running node model.the_tuva_project.quality_measures__summary_wide
[0m15:26:09.082825 [info ] [Thread-2 (]: 306 of 307 SKIP relation quality_measures.quality_measures__summary_counts ..... [[33mSKIP[0m]
[0m15:26:09.083325 [info ] [Thread-1 (]: 307 of 307 SKIP relation quality_measures.quality_measures__summary_wide ....... [[33mSKIP[0m]
[0m15:26:09.083810 [debug] [Thread-2 (]: Finished running node model.the_tuva_project.quality_measures__summary_counts
[0m15:26:09.084233 [debug] [Thread-1 (]: Finished running node model.the_tuva_project.quality_measures__summary_wide
[0m15:26:09.271769 [debug] [MainThread]: Using duckdb connection "master"
[0m15:26:09.274043 [debug] [MainThread]: On master: BEGIN
[0m15:26:09.275097 [debug] [MainThread]: Opening a new connection, currently in state closed
[0m15:26:09.628238 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m15:26:09.628852 [debug] [MainThread]: On master: COMMIT
[0m15:26:09.629231 [debug] [MainThread]: Using duckdb connection "master"
[0m15:26:09.629570 [debug] [MainThread]: On master: COMMIT
[0m15:26:09.629982 [debug] [MainThread]: SQL status: OK in 0.0 seconds
[0m15:26:09.630651 [debug] [MainThread]: On master: Close
[0m15:26:09.650640 [debug] [MainThread]: Connection 'master' was properly closed.
[0m15:26:09.651370 [debug] [MainThread]: Connection 'list_synthea_claims_preprocessing' was properly closed.
[0m15:26:09.651887 [debug] [MainThread]: Connection 'list_synthea_core' was properly closed.
[0m15:26:09.652342 [debug] [MainThread]: Connection 'list_synthea_insights' was properly closed.
[0m15:26:09.652841 [debug] [MainThread]: Connection 'list_synthea_claims_expanded' was properly closed.
[0m15:26:09.653373 [debug] [MainThread]: Connection 'model.the_tuva_project.normalized_input__int_undetermined_claim_type' was properly closed.
[0m15:26:09.653711 [debug] [MainThread]: Connection 'model.the_tuva_project.data_quality__claims_preprocessing_test_detail_stage_pharmacy_claim' was properly closed.
[0m15:26:09.654050 [debug] [MainThread]: Connection 'model.the_tuva_project.normalized_input__int_revenue_center_normalize' was properly closed.
[0m15:26:09.654375 [debug] [MainThread]: Connection 'test.the_tuva_project.not_null_quality_measures__stg_core__medication_patient_id.0aaf3a0652' was properly closed.
[0m15:26:09.657791 [info ] [MainThread]: 
[0m15:26:09.660504 [info ] [MainThread]: Finished running 42 view models, 212 table models, 53 tests in 0 hours 55 minutes and 14.44 seconds (3314.44s).
[0m15:26:09.676362 [debug] [MainThread]: Command end result
[0m15:26:10.535286 [info ] [MainThread]: 
[0m15:26:10.536566 [info ] [MainThread]: [31mCompleted with 4 errors and 0 warnings:[0m
[0m15:26:10.536998 [info ] [MainThread]: 
[0m15:26:10.537449 [error] [MainThread]:   Runtime Error in model normalized_input__int_diagnosis_code_normalize (models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_diagnosis_code_normalize.sql)
  Out of Memory Error: failed to pin block of size 262KB (53.8GB/53.8GB used)
[0m15:26:10.538001 [info ] [MainThread]: 
[0m15:26:10.538440 [error] [MainThread]:   Runtime Error in model normalized_input__int_present_on_admit_normalize (models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_present_on_admit_normalize.sql)
  Out of Memory Error: failed to allocate data of size 1.0MB (53.8GB/53.8GB used)
[0m15:26:10.538930 [info ] [MainThread]: 
[0m15:26:10.539378 [error] [MainThread]:   Runtime Error in model normalized_input__int_procedure_date_normalize (models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_procedure_date_normalize.sql)
  Out of Memory Error: failed to pin block of size 262KB (53.8GB/53.8GB used)
[0m15:26:10.539793 [info ] [MainThread]: 
[0m15:26:10.540175 [error] [MainThread]:   Runtime Error in model normalized_input__int_procedure_code_normalize (models/claims_preprocessing/normalized_input/intermediate/normalized_input__int_procedure_code_normalize.sql)
  Out of Memory Error: failed to allocate data of size 16KB (53.8GB/53.8GB used)
[0m15:26:10.540861 [info ] [MainThread]: 
[0m15:26:10.542088 [info ] [MainThread]: Done. PASS=63 WARN=0 ERROR=4 SKIP=240 TOTAL=307
[0m15:26:10.555235 [debug] [MainThread]: Resource report: {"command_name": "build", "command_wall_clock_time": 3316.292, "process_user_time": 2860.8064, "process_kernel_time": 2524.1726, "process_mem_max_rss": "58503456", "process_in_blocks": "5934392", "command_success": false, "process_out_blocks": "0"}
[0m15:26:10.557412 [debug] [MainThread]: Command `dbt build` failed at 15:26:10.556946 after 3316.29 seconds
[0m15:26:10.558251 [debug] [MainThread]: Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff85aa05d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff86cfd350>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0xffff85f632d0>]}
[0m15:26:10.558703 [debug] [MainThread]: Flushing usage events
